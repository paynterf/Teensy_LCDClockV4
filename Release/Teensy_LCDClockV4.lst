
C:\Users\Frank\AppData\Local\Temp\VMBuilds\Teensy_LCDClockV4\teensy31\Release/Teensy_LCDClockV4.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
       0:	00 80 00 20 bd 01 00 00 45 6c 00 00 fd 6b 00 00     ... ....El...k..
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
      10:	fd 6b 00 00 fd 6b 00 00 fd 6b 00 00 fd 6b 00 00     .k...k...k...k..
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
      20:	fd 6b 00 00 fd 6b 00 00 fd 6b 00 00 45 6c 00 00     .k...k...k..El..
      30:	45 6c 00 00 fd 6b 00 00 29 82 00 00 2d 82 00 00     El...k..)...-...
      40:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      50:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      60:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      70:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      80:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      90:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      a0:	a5 64 00 00 b1 64 00 00 45 6c 00 00 45 6c 00 00     .d...d..El..El..
      b0:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      c0:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      d0:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      e0:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
      f0:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     100:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     110:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     120:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     130:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     140:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     150:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     160:	45 6c 00 00 81 72 00 00 45 6c 00 00 45 6c 00 00     El...r..El..El..
     170:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     180:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     190:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     1a0:	45 6c 00 00 45 6c 00 00 45 6c 00 00 45 6c 00 00     El..El..El..El..
     1b0:	45 6c 00 00 45 6c 00 00 45 6c 00 00                 El..El..El..

000001bc <ResetHandler>:
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1bc:	4b56      	ldr	r3, [pc, #344]	; (318 <ResetHandler+0x15c>)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
#else
// hopefully all others fit into startup section (below 0x400)
__attribute__ ((section(".startup"),optimize("-Os")))
#endif
void ResetHandler(void)
{
     1c2:	b510      	push	{r4, lr}
	volatile int n;
#endif
	//volatile int count;

#ifdef KINETISK
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;
     1c4:	801a      	strh	r2, [r3, #0]
	WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
     1ca:	801a      	strh	r2, [r3, #0]
	__asm__ volatile ("nop");
     1cc:	bf00      	nop
	__asm__ volatile ("nop");
     1ce:	bf00      	nop
#endif
	// programs using the watchdog timer or needing to initialize hardware as
	// early as possible can implement startup_early_hook()
	startup_early_hook();
     1d0:	f006 fd3c 	bl	6c4c <startup_early_hook>
	// enable clocks to always-used peripherals
#if defined(__MK20DX128__)
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
#elif defined(__MK20DX256__)
	SIM_SCGC3 = SIM_SCGC3_ADC1 | SIM_SCGC3_FTM2;
     1d4:	4b51      	ldr	r3, [pc, #324]	; (31c <ResetHandler+0x160>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
     1da:	601a      	str	r2, [r3, #0]
	SIM_SCGC5 = 0x00043F82;		// clocks active to all GPIO
     1dc:	4a50      	ldr	r2, [pc, #320]	; (320 <ResetHandler+0x164>)
     1de:	609a      	str	r2, [r3, #8]
	SIM_SCGC6 = SIM_SCGC6_RTC | SIM_SCGC6_FTM0 | SIM_SCGC6_FTM1 | SIM_SCGC6_ADC0 | SIM_SCGC6_FTFL;
     1e0:	4a50      	ldr	r2, [pc, #320]	; (324 <ResetHandler+0x168>)
     1e2:	60da      	str	r2, [r3, #12]
#endif
#if defined(KINETISK) && !defined(__MK66FX1M0__)
	// If the RTC oscillator isn't enabled, get it started early.
	// But don't do this early on Teensy 3.6 - RTC_CR depends on 3.3V+VBAT
	// which may be ~0.4V "behind" 3.3V if the power ramps up slowly.
	if (!(RTC_CR & RTC_CR_OSCE)) {
     1e4:	4a50      	ldr	r2, [pc, #320]	; (328 <ResetHandler+0x16c>)
     1e6:	6813      	ldr	r3, [r2, #0]
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d104      	bne.n	1f8 <ResetHandler+0x3c>
		RTC_SR = 0;
     1ee:	494f      	ldr	r1, [pc, #316]	; (32c <ResetHandler+0x170>)
     1f0:	600b      	str	r3, [r1, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
     1f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
     1f6:	6013      	str	r3, [r2, #0]
	}
#endif
	// release I/O pins hold, if we woke up from VLLS mode
	if (PMC_REGSC & PMC_REGSC_ACKISO) PMC_REGSC |= PMC_REGSC_ACKISO;
     1f8:	4b4d      	ldr	r3, [pc, #308]	; (330 <ResetHandler+0x174>)
     1fa:	781a      	ldrb	r2, [r3, #0]
     1fc:	0711      	lsls	r1, r2, #28
     1fe:	d503      	bpl.n	208 <ResetHandler+0x4c>
     200:	781a      	ldrb	r2, [r3, #0]
     202:	f042 0208 	orr.w	r2, r2, #8
     206:	701a      	strb	r2, [r3, #0]
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     208:	4b4a      	ldr	r3, [pc, #296]	; (334 <ResetHandler+0x178>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     20a:	494b      	ldr	r1, [pc, #300]	; (338 <ResetHandler+0x17c>)
    // since this is a write once register, make it visible to all F_CPU's
    // so we can into other sleep modes in the future at any speed
#if defined(__MK66FX1M0__)
	SMC_PMPROT = SMC_PMPROT_AHSRUN | SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
#else
	SMC_PMPROT = SMC_PMPROT_AVLP | SMC_PMPROT_ALLS | SMC_PMPROT_AVLLS;
     20c:	222a      	movs	r2, #42	; 0x2a
     20e:	701a      	strb	r2, [r3, #0]
     210:	4a4a      	ldr	r2, [pc, #296]	; (33c <ResetHandler+0x180>)
     212:	4b4b      	ldr	r3, [pc, #300]	; (340 <ResetHandler+0x184>)
#endif
    
	// TODO: do this while the PLL is waiting to lock....
	while (dest < &_edata) *dest++ = *src++;
     214:	428b      	cmp	r3, r1
     216:	d204      	bcs.n	222 <ResetHandler+0x66>
     218:	f852 0f04 	ldr.w	r0, [r2, #4]!
     21c:	f843 0b04 	str.w	r0, [r3], #4
     220:	e7f8      	b.n	214 <ResetHandler+0x58>
     222:	4b48      	ldr	r3, [pc, #288]	; (344 <ResetHandler+0x188>)
	dest = &_sbss;
	while (dest < &_ebss) *dest++ = 0;
     224:	4948      	ldr	r1, [pc, #288]	; (348 <ResetHandler+0x18c>)
     226:	2200      	movs	r2, #0
     228:	428b      	cmp	r3, r1
     22a:	d202      	bcs.n	232 <ResetHandler+0x76>
     22c:	f843 2b04 	str.w	r2, [r3], #4
     230:	e7fa      	b.n	228 <ResetHandler+0x6c>

	// default all interrupts to medium priority level
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = _VectorsFlash[i];
     232:	4946      	ldr	r1, [pc, #280]	; (34c <ResetHandler+0x190>)
     234:	4a46      	ldr	r2, [pc, #280]	; (350 <ResetHandler+0x194>)
     236:	2300      	movs	r3, #0
     238:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
     23c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
     240:	3301      	adds	r3, #1
     242:	2b6f      	cmp	r3, #111	; 0x6f
     244:	d1f8      	bne.n	238 <ResetHandler+0x7c>
     246:	4b43      	ldr	r3, [pc, #268]	; (354 <ResetHandler+0x198>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
     248:	4a43      	ldr	r2, [pc, #268]	; (358 <ResetHandler+0x19c>)
     24a:	2180      	movs	r1, #128	; 0x80
     24c:	f803 1b01 	strb.w	r1, [r3], #1
     250:	4293      	cmp	r3, r2
     252:	d1fb      	bne.n	24c <ResetHandler+0x90>
	SCB_VTOR = (uint32_t)_VectorsRam;	// use vector table in RAM
     254:	4b41      	ldr	r3, [pc, #260]	; (35c <ResetHandler+0x1a0>)
     256:	4a3d      	ldr	r2, [pc, #244]	; (34c <ResetHandler+0x190>)
     258:	601a      	str	r2, [r3, #0]
	//  C6[PLLS] bit is written to 0
	//  C2[LP] bit is written to 1
#else
    #if defined(KINETISK)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
     25a:	4b41      	ldr	r3, [pc, #260]	; (360 <ResetHandler+0x1a4>)
     25c:	228a      	movs	r2, #138	; 0x8a
     25e:	701a      	strb	r2, [r3, #0]
    #elif defined(KINETISL)
    // enable capacitors for crystal
    OSC0_CR = OSC_SC8P | OSC_SC2P | OSC_ERCLKEN;
    #endif
	// enable osc, 8-32 MHz range, low power mode
	MCG_C2 = MCG_C2_RANGE0(2) | MCG_C2_EREFS;
     260:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     264:	2224      	movs	r2, #36	; 0x24
     266:	705a      	strb	r2, [r3, #1]
	// switch to crystal as clock source, FLL input = 16 MHz / 512
	MCG_C1 =  MCG_C1_CLKS(2) | MCG_C1_FRDIV(4);
     268:	22a0      	movs	r2, #160	; 0xa0
     26a:	701a      	strb	r2, [r3, #0]
	// wait for crystal oscillator to begin
	while ((MCG_S & MCG_S_OSCINIT0) == 0) ;
     26c:	799a      	ldrb	r2, [r3, #6]
     26e:	0792      	lsls	r2, r2, #30
     270:	d5fc      	bpl.n	26c <ResetHandler+0xb0>
	// wait for FLL to use oscillator
	while ((MCG_S & MCG_S_IREFST) != 0) ;
     272:	799a      	ldrb	r2, [r3, #6]
     274:	06d4      	lsls	r4, r2, #27
     276:	d4fc      	bmi.n	272 <ResetHandler+0xb6>
	// wait for MCGOUT to use oscillator
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(2)) ;
     278:	4a3a      	ldr	r2, [pc, #232]	; (364 <ResetHandler+0x1a8>)
     27a:	7993      	ldrb	r3, [r2, #6]
     27c:	f003 030c 	and.w	r3, r3, #12
     280:	2b08      	cmp	r3, #8
     282:	4b38      	ldr	r3, [pc, #224]	; (364 <ResetHandler+0x1a8>)
     284:	d1f9      	bne.n	27a <ResetHandler+0xbe>
    #endif
   #else
    #if F_CPU == 72000000
	MCG_C5 = MCG_C5_PRDIV0(5);		 // config PLL input for 16 MHz Crystal / 6 = 2.667 Hz
    #else
	MCG_C5 = MCG_C5_PRDIV0(3);		 // config PLL input for 16 MHz Crystal / 4 = 4 MHz
     286:	2203      	movs	r2, #3
     288:	711a      	strb	r2, [r3, #4]
    #elif F_CPU == 120000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(6); // config PLL for 120 MHz output
    #elif F_CPU == 72000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(3); // config PLL for 72 MHz output
    #elif F_CPU == 96000000 || F_CPU == 48000000 || F_CPU == 24000000
	MCG_C6 = MCG_C6_PLLS | MCG_C6_VDIV0(0); // config PLL for 96 MHz output
     28a:	2240      	movs	r2, #64	; 0x40
     28c:	715a      	strb	r2, [r3, #5]
    #error "This clock speed isn't supported..."
    #endif
   #endif

	// wait for PLL to start using xtal as its input
	while (!(MCG_S & MCG_S_PLLST)) ;
     28e:	799a      	ldrb	r2, [r3, #6]
     290:	0690      	lsls	r0, r2, #26
     292:	d5fc      	bpl.n	28e <ResetHandler+0xd2>
	// wait for PLL to lock
	while (!(MCG_S & MCG_S_LOCK0)) ;
     294:	4a33      	ldr	r2, [pc, #204]	; (364 <ResetHandler+0x1a8>)
     296:	7991      	ldrb	r1, [r2, #6]
     298:	4b32      	ldr	r3, [pc, #200]	; (364 <ResetHandler+0x1a8>)
     29a:	0649      	lsls	r1, r1, #25
     29c:	d5fb      	bpl.n	296 <ResetHandler+0xda>
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(4) | SIM_CLKDIV2_USBFRAC;
#elif F_CPU == 96000000
	// config divisors: 96 MHz core, 48 MHz bus, 24 MHz flash, USB = 96 / 2
	#if F_BUS == 48000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(1) | SIM_CLKDIV1_OUTDIV4(3);
     29e:	4a32      	ldr	r2, [pc, #200]	; (368 <ResetHandler+0x1ac>)
     2a0:	4932      	ldr	r1, [pc, #200]	; (36c <ResetHandler+0x1b0>)
     2a2:	6011      	str	r1, [r2, #0]
	#elif F_BUS == 96000000
	SIM_CLKDIV1 = SIM_CLKDIV1_OUTDIV1(0) | SIM_CLKDIV1_OUTDIV2(0) | SIM_CLKDIV1_OUTDIV4(3);
	#else
	#error "This F_CPU & F_BUS combination is not supported"
	#endif
	SIM_CLKDIV2 = SIM_CLKDIV2_USBDIV(1);
     2a4:	2102      	movs	r1, #2
     2a6:	6051      	str	r1, [r2, #4]
#error "Error, F_CPU must be 256, 240, 216, 192, 180, 168, 144, 120, 96, 72, 48, 24, 16, 8, 4, or 2 MHz"
#endif

#if F_CPU > 16000000
	// switch to PLL as clock source, FLL input = 16 MHz / 512
	MCG_C1 = MCG_C1_CLKS(0) | MCG_C1_FRDIV(4);
     2a8:	2220      	movs	r2, #32
     2aa:	701a      	strb	r2, [r3, #0]
	// wait for PLL clock to be used
	while ((MCG_S & MCG_S_CLKST_MASK) != MCG_S_CLKST(3)) ;
     2ac:	799a      	ldrb	r2, [r3, #6]
     2ae:	f002 020c 	and.w	r2, r2, #12
     2b2:	2a0c      	cmp	r2, #12
     2b4:	d1fa      	bne.n	2ac <ResetHandler+0xf0>
	#if F_CPU == 256000000 || F_CPU == 216000000 || F_CPU == 180000000
	// USB uses IRC48
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_IRC48SEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
	#else
	// USB uses PLL clock
	SIM_SOPT2 = SIM_SOPT2_USBSRC | SIM_SOPT2_PLLFLLSEL | SIM_SOPT2_TRACECLKSEL | SIM_SOPT2_CLKOUTSEL(6);
     2b6:	4b2e      	ldr	r3, [pc, #184]	; (370 <ResetHandler+0x1b4>)
     2b8:	4a2e      	ldr	r2, [pc, #184]	; (374 <ResetHandler+0x1b8>)
     2ba:	601a      	str	r2, [r3, #0]
		RTC_CR = RTC_CR_SC16P | RTC_CR_SC4P | RTC_CR_OSCE;
	}
#endif

	// initialize the SysTick counter
	SYST_RVR = (F_CPU / 1000) - 1;
     2bc:	4b2e      	ldr	r3, [pc, #184]	; (378 <ResetHandler+0x1bc>)
     2be:	4a2f      	ldr	r2, [pc, #188]	; (37c <ResetHandler+0x1c0>)
     2c0:	601a      	str	r2, [r3, #0]
	SYST_CVR = 0;
     2c2:	2200      	movs	r2, #0
     2c4:	605a      	str	r2, [r3, #4]
	SYST_CSR = SYST_CSR_CLKSOURCE | SYST_CSR_TICKINT | SYST_CSR_ENABLE;
     2c6:	2207      	movs	r2, #7
     2c8:	f843 2c04 	str.w	r2, [r3, #-4]
	SCB_SHPR3 = 0x20200000;  // Systick = priority 32
     2cc:	4a2c      	ldr	r2, [pc, #176]	; (380 <ResetHandler+0x1c4>)
     2ce:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c

	//init_pins();
	__enable_irq();
     2d2:	b662      	cpsie	i

	_init_Teensyduino_internal_();
     2d4:	f006 fe8a 	bl	6fec <_init_Teensyduino_internal_>

#if defined(KINETISK)
	// RTC initialization
	if (RTC_SR & RTC_SR_TIF) {
     2d8:	4b14      	ldr	r3, [pc, #80]	; (32c <ResetHandler+0x170>)
     2da:	681b      	ldr	r3, [r3, #0]
     2dc:	07da      	lsls	r2, r3, #31
     2de:	d505      	bpl.n	2ec <ResetHandler+0x130>
		// compiled-in time will be stale.  Write a special
		// flag into the VBAT register file indicating the
		// RTC is set with known-stale time and should be
		// updated when fresh time is known.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2e0:	4828      	ldr	r0, [pc, #160]	; (384 <ResetHandler+0x1c8>)
     2e2:	f006 fe17 	bl	6f14 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0x5A94C3A5;
     2e6:	4b28      	ldr	r3, [pc, #160]	; (388 <ResetHandler+0x1cc>)
     2e8:	4a28      	ldr	r2, [pc, #160]	; (38c <ResetHandler+0x1d0>)
     2ea:	601a      	str	r2, [r3, #0]
	}
	if ((RCM_SRS0 & RCM_SRS0_PIN) && (*(uint32_t *)0x4003E01C == 0x5A94C3A5)) {
     2ec:	4b28      	ldr	r3, [pc, #160]	; (390 <ResetHandler+0x1d4>)
     2ee:	781b      	ldrb	r3, [r3, #0]
     2f0:	065b      	lsls	r3, r3, #25
     2f2:	d509      	bpl.n	308 <ResetHandler+0x14c>
     2f4:	4c24      	ldr	r4, [pc, #144]	; (388 <ResetHandler+0x1cc>)
     2f6:	4b25      	ldr	r3, [pc, #148]	; (38c <ResetHandler+0x1d0>)
     2f8:	6822      	ldr	r2, [r4, #0]
     2fa:	429a      	cmp	r2, r3
     2fc:	d104      	bne.n	308 <ResetHandler+0x14c>
		// Our compiled-in time will be very fresh, so set
		// the RTC with this, and clear the VBAT resister file
		// data so we don't mess with the time after it's been
		// set well.
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
     2fe:	4821      	ldr	r0, [pc, #132]	; (384 <ResetHandler+0x1c8>)
     300:	f006 fe08 	bl	6f14 <rtc_set>
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     304:	2300      	movs	r3, #0
     306:	6023      	str	r3, [r4, #0]
	}
#endif

	__libc_init_array();
     308:	f009 f974 	bl	95f4 <__libc_init_array>

	startup_late_hook();
     30c:	f006 fca4 	bl	6c58 <startup_late_hook>
	main();
     310:	f007 ff94 	bl	823c <main>
     314:	e7fe      	b.n	314 <ResetHandler+0x158>
     316:	bf00      	nop
     318:	4005200e 	.word	0x4005200e
     31c:	40048030 	.word	0x40048030
     320:	00043f82 	.word	0x00043f82
     324:	2b000001 	.word	0x2b000001
     328:	4003d010 	.word	0x4003d010
     32c:	4003d014 	.word	0x4003d014
     330:	4007d002 	.word	0x4007d002
     334:	4007e000 	.word	0x4007e000
     338:	1fff94f0 	.word	0x1fff94f0
     33c:	0001bc80 	.word	0x0001bc80
     340:	1fff8720 	.word	0x1fff8720
     344:	1fff94f0 	.word	0x1fff94f0
     348:	1fff9894 	.word	0x1fff9894
     34c:	1fff8200 	.word	0x1fff8200
     350:	00000000 	.word	0x00000000
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	e000ed08 	.word	0xe000ed08
     360:	40065000 	.word	0x40065000
     364:	40064000 	.word	0x40064000
     368:	40048044 	.word	0x40048044
     36c:	01030000 	.word	0x01030000
     370:	40048004 	.word	0x40048004
     374:	000510c0 	.word	0x000510c0
     378:	e000e014 	.word	0xe000e014
     37c:	000176ff 	.word	0x000176ff
     380:	20200000 	.word	0x20200000
     384:	651fef00 	.word	0x651fef00
     388:	4003e01c 	.word	0x4003e01c
     38c:	5a94c3a5 	.word	0x5a94c3a5
     390:	4007f000 	.word	0x4007f000
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <__do_global_dtors_aux>:
     410:	b510      	push	{r4, lr}
     412:	4c05      	ldr	r4, [pc, #20]	; (428 <__do_global_dtors_aux+0x18>)
     414:	7823      	ldrb	r3, [r4, #0]
     416:	b933      	cbnz	r3, 426 <__do_global_dtors_aux+0x16>
     418:	4b04      	ldr	r3, [pc, #16]	; (42c <__do_global_dtors_aux+0x1c>)
     41a:	b113      	cbz	r3, 422 <__do_global_dtors_aux+0x12>
     41c:	4804      	ldr	r0, [pc, #16]	; (430 <__do_global_dtors_aux+0x20>)
     41e:	f3af 8000 	nop.w
     422:	2301      	movs	r3, #1
     424:	7023      	strb	r3, [r4, #0]
     426:	bd10      	pop	{r4, pc}
     428:	1fff94f0 	.word	0x1fff94f0
     42c:	00000000 	.word	0x00000000
     430:	0001bc7c 	.word	0x0001bc7c

00000434 <frame_dummy>:
     434:	4b08      	ldr	r3, [pc, #32]	; (458 <frame_dummy+0x24>)
     436:	b510      	push	{r4, lr}
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4908      	ldr	r1, [pc, #32]	; (45c <frame_dummy+0x28>)
     43c:	4808      	ldr	r0, [pc, #32]	; (460 <frame_dummy+0x2c>)
     43e:	f3af 8000 	nop.w
     442:	4808      	ldr	r0, [pc, #32]	; (464 <frame_dummy+0x30>)
     444:	6803      	ldr	r3, [r0, #0]
     446:	b903      	cbnz	r3, 44a <frame_dummy+0x16>
     448:	bd10      	pop	{r4, pc}
     44a:	4b07      	ldr	r3, [pc, #28]	; (468 <frame_dummy+0x34>)
     44c:	2b00      	cmp	r3, #0
     44e:	d0fb      	beq.n	448 <frame_dummy+0x14>
     450:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     454:	4718      	bx	r3
     456:	bf00      	nop
     458:	00000000 	.word	0x00000000
     45c:	1fff94f4 	.word	0x1fff94f4
     460:	0001bc7c 	.word	0x0001bc7c
     464:	1fff94f0 	.word	0x1fff94f0
     468:	00000000 	.word	0x00000000

0000046c <Print::println(char const*)>:
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     46c:	b538      	push	{r3, r4, r5, lr}
     46e:	4604      	mov	r4, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     470:	4608      	mov	r0, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     472:	460d      	mov	r5, r1
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     474:	f009 ff24 	bl	a2c0 <strlen>
     478:	6823      	ldr	r3, [r4, #0]
     47a:	4602      	mov	r2, r0
     47c:	4629      	mov	r1, r5
     47e:	685b      	ldr	r3, [r3, #4]
     480:	4620      	mov	r0, r4
     482:	4798      	blx	r3
     484:	4605      	mov	r5, r0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     486:	4620      	mov	r0, r4
     488:	f007 ff06 	bl	8298 <Print::println()>
     48c:	4428      	add	r0, r5
     48e:	bd38      	pop	{r3, r4, r5, pc}

00000490 <GetDayDateTimeStringFromDateTime(DateTime, char*)>:
  }
}

#pragma region DATE_TIME_FUNCTIONS
void GetDayDateTimeStringFromDateTime(DateTime dt, char* bufptr)
{
     490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     494:	4604      	mov	r4, r0
     496:	b086      	sub	sp, #24
     498:	4688      	mov	r8, r1
  int mydayofweek = dt.dayOfTheWeek();
     49a:	f006 f983 	bl	67a4 <DateTime::dayOfTheWeek() const>
  int myhour = dt.hour();
  int mymin = dt.minute();
  int mysec = dt.second();
  char* dayofweek = (char*)daysOfTheWeek[mydayofweek];

  sprintf(bufptr, "%s %4d/%02d/%02d at %02d:%02d:%02d", dayofweek, mymonth, myday, myyear, myhour, mymin, mysec);
     49e:	7825      	ldrb	r5, [r4, #0]
     4a0:	7961      	ldrb	r1, [r4, #5]
     4a2:	7863      	ldrb	r3, [r4, #1]
     4a4:	7927      	ldrb	r7, [r4, #4]
     4a6:	4a0a      	ldr	r2, [pc, #40]	; (4d0 <GetDayDateTimeStringFromDateTime(DateTime, char*)+0x40>)
     4a8:	9104      	str	r1, [sp, #16]
     4aa:	78e6      	ldrb	r6, [r4, #3]
     4ac:	78a4      	ldrb	r4, [r4, #2]
     4ae:	9400      	str	r4, [sp, #0]
     4b0:	eb00 0e40 	add.w	lr, r0, r0, lsl #1
     4b4:	f505 65fa 	add.w	r5, r5, #2000	; 0x7d0
     4b8:	9501      	str	r5, [sp, #4]
     4ba:	4640      	mov	r0, r8
     4bc:	eb02 028e 	add.w	r2, r2, lr, lsl #2
     4c0:	9703      	str	r7, [sp, #12]
     4c2:	9602      	str	r6, [sp, #8]
     4c4:	4903      	ldr	r1, [pc, #12]	; (4d4 <GetDayDateTimeStringFromDateTime(DateTime, char*)+0x44>)
     4c6:	f009 fe5b 	bl	a180 <sprintf>
}
     4ca:	b006      	add	sp, #24
     4cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     4d0:	1fff8810 	.word	0x1fff8810
     4d4:	0000da44 	.word	0x0000da44

000004d8 <GetTouchPointInDisplayCoords(TS_Point)>:
  return adjstate;
}

#pragma region Helper Functions
TS_Point GetTouchPointInDisplayCoords(TS_Point Tp)
{
     4d8:	b530      	push	{r4, r5, lr}
     4da:	b083      	sub	sp, #12
     4dc:	f10d 0e08 	add.w	lr, sp, #8
     4e0:	e90e 0006 	stmdb	lr, {r1, r2}
     4e4:	4c1f      	ldr	r4, [pc, #124]	; (564 <GetTouchPointInDisplayCoords(TS_Point)+0x8c>)
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     4e6:	4d20      	ldr	r5, [pc, #128]	; (568 <GetTouchPointInDisplayCoords(TS_Point)+0x90>)
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     4e8:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
#error "Arduino 1.6.0 or later (SPI library) is required"
#endif

class TS_Point {
public:
	TS_Point(void) : x(0), y(0), z(0) {}
     4ec:	2200      	movs	r2, #0
     4ee:	8082      	strh	r2, [r0, #4]
     4f0:	f9bd 2000 	ldrsh.w	r2, [sp]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     4f4:	42ab      	cmp	r3, r5
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     4f6:	f6a2 62ae 	subw	r2, r2, #3758	; 0xeae
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     4fa:	da1c      	bge.n	536 <GetTouchPointInDisplayCoords(TS_Point)+0x5e>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     4fc:	491b      	ldr	r1, [pc, #108]	; (56c <GetTouchPointInDisplayCoords(TS_Point)+0x94>)
     4fe:	fb03 2302 	mla	r3, r3, r2, r2
     502:	fb81 1203 	smull	r1, r2, r1, r3
     506:	17db      	asrs	r3, r3, #31
     508:	eba3 22a2 	sub.w	r2, r3, r2, asr #10
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     50c:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     510:	4917      	ldr	r1, [pc, #92]	; (570 <GetTouchPointInDisplayCoords(TS_Point)+0x98>)
//Step1: Retrieve touch point from touch chip
  //TS_Point Tp = ts.getPoint();
  TS_Point Dp;
  //Step2: Map to display coordinates taking rotation into account
#ifdef SCREEN_ORIENTATION_1
  Dp.x = map(Tp.x, TS_MAXX, TS_MINX, 0, tft.width());
     512:	8002      	strh	r2, [r0, #0]
#include <type_traits>
// when the input number is an integer type, do all math as 32 bit signed long
template <class T, class A, class B, class C, class D>
long map(T _x, A _in_min, B _in_max, C _out_min, D _out_max, typename std::enable_if<std::is_integral<T>::value >::type* = 0)
{
	long x = _x, in_min = _in_min, in_max = _in_max, out_min = _out_min, out_max = _out_max;
     514:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     518:	428b      	cmp	r3, r1
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     51a:	f6a2 621c 	subw	r2, r2, #3612	; 0xe1c
	// Arduino's traditional algorithm
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
     51e:	db14      	blt.n	54a <GetTouchPointInDisplayCoords(TS_Point)+0x72>
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
     520:	4914      	ldr	r1, [pc, #80]	; (574 <GetTouchPointInDisplayCoords(TS_Point)+0x9c>)
     522:	fb03 f202 	mul.w	r2, r3, r2
     526:	fb81 3102 	smull	r3, r1, r1, r2
     52a:	17d3      	asrs	r3, r2, #31
     52c:	eba3 23a1 	sub.w	r3, r3, r1, asr #10
  Dp.y = map(Tp.y, TS_MAXY, TS_MINY, 0, tft.height());
     530:	8043      	strh	r3, [r0, #2]
  //Serial.printf(" GetTouchPointInDisplayCoords: %lu\t%d\t%d\t%d\t%d\t%d\n",
  //  millis(), Tp.x, Tp.y, Tp.z, Dp.x, Dp.y);
  ////DEBUG!!

  return Dp;
}
     532:	b003      	add	sp, #12
     534:	bd30      	pop	{r4, r5, pc}
     536:	4910      	ldr	r1, [pc, #64]	; (578 <GetTouchPointInDisplayCoords(TS_Point)+0xa0>)
     538:	fb03 f302 	mul.w	r3, r3, r2
     53c:	fb81 1203 	smull	r1, r2, r1, r3
     540:	441a      	add	r2, r3
     542:	17db      	asrs	r3, r3, #31
     544:	eba3 22e2 	sub.w	r2, r3, r2, asr #11
     548:	e7e0      	b.n	50c <GetTouchPointInDisplayCoords(TS_Point)+0x34>
	//return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	// st42's suggestion: https://github.com/arduino/Arduino/issues/2466#issuecomment-69873889
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
	if ((in_max - in_min) > (out_max - out_min)) {
		return (x - in_min) * (out_max - out_min+1) / (in_max - in_min+1) + out_min;
     54a:	490c      	ldr	r1, [pc, #48]	; (57c <GetTouchPointInDisplayCoords(TS_Point)+0xa4>)
     54c:	fb03 2202 	mla	r2, r3, r2, r2
     550:	fb81 1302 	smull	r1, r3, r1, r2
     554:	1899      	adds	r1, r3, r2
     556:	17d3      	asrs	r3, r2, #31
     558:	eba3 23e1 	sub.w	r3, r3, r1, asr #11
  //TS_Point Tp = ts.getPoint();
  TS_Point Dp;
  //Step2: Map to display coordinates taking rotation into account
#ifdef SCREEN_ORIENTATION_1
  Dp.x = map(Tp.x, TS_MAXX, TS_MINX, 0, tft.width());
  Dp.y = map(Tp.y, TS_MAXY, TS_MINY, 0, tft.height());
     55c:	8043      	strh	r3, [r0, #2]
  //Serial.printf(" GetTouchPointInDisplayCoords: %lu\t%d\t%d\t%d\t%d\t%d\n",
  //  millis(), Tp.x, Tp.y, Tp.z, Dp.x, Dp.y);
  ////DEBUG!!

  return Dp;
}
     55e:	b003      	add	sp, #12
     560:	bd30      	pop	{r4, r5, pc}
     562:	bf00      	nop
     564:	1fff9520 	.word	0x1fff9520
     568:	fffff3aa 	.word	0xfffff3aa
     56c:	530929c3 	.word	0x530929c3
     570:	fffff43c 	.word	0xfffff43c
     574:	57087fd5 	.word	0x57087fd5
     578:	a604dd25 	.word	0xa604dd25
     57c:	ae1fcc4f 	.word	0xae1fcc4f

00000580 <HideButtons()>:
  PlusBox.Draw(&tft, "+", ILI9341_BLACK, Arial_40, true);
  MinusBox.Draw(&tft, "-", ILI9341_BLACK, Arial_40, true);
}

void HideButtons()
{
     580:	b530      	push	{r4, r5, lr}
	disp->drawString(buff, strlen(buff), x, y); //03/09/21 in latest library version drawString1 was made into an overload of drawString
}

inline void CustomBox::Draw(ILI9341_t3n* disp, int newcolor)
{
	disp->fillRect(x, y, w, h, newcolor);
     582:	4817      	ldr	r0, [pc, #92]	; (5e0 <HideButtons()+0x60>)
     584:	4c17      	ldr	r4, [pc, #92]	; (5e4 <HideButtons()+0x64>)
     586:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
     58a:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
     58e:	f9b0 1000 	ldrsh.w	r1, [r0]
     592:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
     596:	b083      	sub	sp, #12
     598:	2500      	movs	r5, #0
     59a:	9000      	str	r0, [sp, #0]
     59c:	9501      	str	r5, [sp, #4]
     59e:	4620      	mov	r0, r4
     5a0:	f002 ffcc 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
     5a4:	4810      	ldr	r0, [pc, #64]	; (5e8 <HideButtons()+0x68>)
     5a6:	9501      	str	r5, [sp, #4]
     5a8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
     5ac:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
     5b0:	f9b0 1000 	ldrsh.w	r1, [r0]
     5b4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
     5b8:	9000      	str	r0, [sp, #0]
     5ba:	4620      	mov	r0, r4
     5bc:	f002 ffbe 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
     5c0:	480a      	ldr	r0, [pc, #40]	; (5ec <HideButtons()+0x6c>)
     5c2:	9501      	str	r5, [sp, #4]
     5c4:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
     5c8:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
     5cc:	f9b0 1000 	ldrsh.w	r1, [r0]
     5d0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
     5d4:	9000      	str	r0, [sp, #0]
     5d6:	4620      	mov	r0, r4
     5d8:	f002 ffb0 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  PlusBox.Draw(&tft, ILI9341_BLACK);
  MinusBox.Draw(&tft, ILI9341_BLACK);
  NextBox.Draw(&tft, ILI9341_BLACK);
}
     5dc:	b003      	add	sp, #12
     5de:	bd30      	pop	{r4, r5, pc}
     5e0:	1fff9694 	.word	0x1fff9694
     5e4:	1fff9520 	.word	0x1fff9520
     5e8:	1fff9600 	.word	0x1fff9600
     5ec:	1fff95e8 	.word	0x1fff95e8

000005f0 <ShowAdjButtons()>:

  return Dp;
}

void ShowAdjButtons()
{
     5f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Serial.printf("In ShowAdjButtons\n");
     5f4:	49b6      	ldr	r1, [pc, #728]	; (8d0 <ShowAdjButtons()+0x2e0>)
     5f6:	48b7      	ldr	r0, [pc, #732]	; (8d4 <ShowAdjButtons()+0x2e4>)
     5f8:	4db7      	ldr	r5, [pc, #732]	; (8d8 <ShowAdjButtons()+0x2e8>)
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     5fa:	4eb8      	ldr	r6, [pc, #736]	; (8dc <ShowAdjButtons()+0x2ec>)

  return Dp;
}

void ShowAdjButtons()
{
     5fc:	b09c      	sub	sp, #112	; 0x70
  Serial.printf("In ShowAdjButtons\n");
     5fe:	f007 fe63 	bl	82c8 <Print::printf(char const*, ...)>
  HideButtons();
     602:	f7ff ffbd 	bl	580 <HideButtons()>

  //03/13/21 new centering feature works great!
  NextBox.Draw(&tft, "NEXT", ILI9341_BLACK, Arial_20, true);
     606:	49b6      	ldr	r1, [pc, #728]	; (8e0 <ShowAdjButtons()+0x2f0>)
     608:	a80e      	add	r0, sp, #56	; 0x38
     60a:	f007 ff07 	bl	841c <String::String(char const*)>
     60e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     610:	ac15      	add	r4, sp, #84	; 0x54
     612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     614:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     618:	e884 0007 	stmia.w	r4, {r0, r1, r2}

inline void CustomBox::Draw(ILI9341_t3n* disp, String txt, int txtcolor, ILI9341_t3_font_t font, bool centered)
{
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
     61c:	a915      	add	r1, sp, #84	; 0x54
     61e:	48b1      	ldr	r0, [pc, #708]	; (8e4 <ShowAdjButtons()+0x2f4>)
     620:	f002 f8a2 	bl	2768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     624:	f8d6 a008 	ldr.w	sl, [r6, #8]
     628:	f8d6 9000 	ldr.w	r9, [r6]
     62c:	4650      	mov	r0, sl
     62e:	f008 fd75 	bl	911c <__aeabi_i2f>
     632:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     636:	f008 fdc5 	bl	91c4 <__aeabi_fmul>
     63a:	2100      	movs	r1, #0
     63c:	4604      	mov	r4, r0
     63e:	f008 ff73 	bl	9528 <__aeabi_fcmpge>
     642:	2800      	cmp	r0, #0
     644:	f000 810d 	beq.w	862 <ShowAdjButtons()+0x272>
     648:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     64c:	4620      	mov	r0, r4
     64e:	f008 fcb1 	bl	8fb4 <__addsf3>
     652:	f008 ff7d 	bl	9550 <__aeabi_f2iz>
     656:	4605      	mov	r5, r0
		txt_y = y + round((float)(h / 2.));
     658:	68f4      	ldr	r4, [r6, #12]
     65a:	f8d6 8004 	ldr.w	r8, [r6, #4]
     65e:	4620      	mov	r0, r4
     660:	f008 fd5c 	bl	911c <__aeabi_i2f>
     664:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     668:	f008 fdac 	bl	91c4 <__aeabi_fmul>
     66c:	2100      	movs	r1, #0
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     66e:	444d      	add	r5, r9
		txt_y = y + round((float)(h / 2.));
     670:	4607      	mov	r7, r0
     672:	f008 ff59 	bl	9528 <__aeabi_fcmpge>
     676:	2800      	cmp	r0, #0
     678:	f000 8120 	beq.w	8bc <ShowAdjButtons()+0x2cc>
     67c:	4638      	mov	r0, r7
     67e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     682:	f008 fc97 	bl	8fb4 <__addsf3>
     686:	f008 ff63 	bl	9550 <__aeabi_f2iz>
     68a:	4607      	mov	r7, r0
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
     68c:	8a33      	ldrh	r3, [r6, #16]
     68e:	9301      	str	r3, [sp, #4]
     690:	b224      	sxth	r4, r4
     692:	fa0f f38a 	sxth.w	r3, sl
     696:	fa0f f189 	sxth.w	r1, r9
     69a:	fa0f f288 	sxth.w	r2, r8
     69e:	9400      	str	r4, [sp, #0]
     6a0:	4890      	ldr	r0, [pc, #576]	; (8e4 <ShowAdjButtons()+0x2f4>)
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     6a2:	4e91      	ldr	r6, [pc, #580]	; (8e8 <ShowAdjButtons()+0x2f8>)
		txt_y = y + round((float)(h / 2.));
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
     6a4:	f002 ff4a 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
		txt_y = y + round((float)(h / 2.));
     6a8:	eb08 0407 	add.w	r4, r8, r7
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
	disp->setTextColor(txtcolor);
     6ac:	2100      	movs	r1, #0
     6ae:	488d      	ldr	r0, [pc, #564]	; (8e4 <ShowAdjButtons()+0x2f4>)
     6b0:	f002 fb88 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
	disp->setCursor(txt_x, txt_y, centered);
     6b4:	b222      	sxth	r2, r4
     6b6:	2301      	movs	r3, #1
     6b8:	b229      	sxth	r1, r5
     6ba:	488a      	ldr	r0, [pc, #552]	; (8e4 <ShowAdjButtons()+0x2f4>)
     6bc:	4d8b      	ldr	r5, [pc, #556]	; (8ec <ShowAdjButtons()+0x2fc>)
     6be:	f002 fb17 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
	disp->print(txt);
     6c2:	a90e      	add	r1, sp, #56	; 0x38
     6c4:	4887      	ldr	r0, [pc, #540]	; (8e4 <ShowAdjButtons()+0x2f4>)
     6c6:	f007 fdc1 	bl	824c <Print::print(String const&)>
     6ca:	a80e      	add	r0, sp, #56	; 0x38
     6cc:	f007 fe66 	bl	839c <String::~String()>
  PlusBox.Draw(&tft, "+", ILI9341_BLACK, Arial_40, true);
     6d0:	4987      	ldr	r1, [pc, #540]	; (8f0 <ShowAdjButtons()+0x300>)
     6d2:	a807      	add	r0, sp, #28
     6d4:	f007 fea2 	bl	841c <String::String(char const*)>
     6d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     6da:	ac0e      	add	r4, sp, #56	; 0x38
     6dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     6de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     6e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

inline void CustomBox::Draw(ILI9341_t3n* disp, String txt, int txtcolor, ILI9341_t3_font_t font, bool centered)
{
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
     6e6:	a90e      	add	r1, sp, #56	; 0x38
     6e8:	487e      	ldr	r0, [pc, #504]	; (8e4 <ShowAdjButtons()+0x2f4>)
     6ea:	f002 f83d 	bl	2768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     6ee:	f8d6 a008 	ldr.w	sl, [r6, #8]
     6f2:	f8d6 9000 	ldr.w	r9, [r6]
     6f6:	4650      	mov	r0, sl
     6f8:	f008 fd10 	bl	911c <__aeabi_i2f>
     6fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     700:	f008 fd60 	bl	91c4 <__aeabi_fmul>
     704:	2100      	movs	r1, #0
     706:	4604      	mov	r4, r0
     708:	f008 ff0e 	bl	9528 <__aeabi_fcmpge>
     70c:	2800      	cmp	r0, #0
     70e:	f000 80cc 	beq.w	8aa <ShowAdjButtons()+0x2ba>
     712:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     716:	4620      	mov	r0, r4
     718:	f008 fc4c 	bl	8fb4 <__addsf3>
     71c:	f008 ff18 	bl	9550 <__aeabi_f2iz>
     720:	4605      	mov	r5, r0
		txt_y = y + round((float)(h / 2.));
     722:	68f4      	ldr	r4, [r6, #12]
     724:	f8d6 8004 	ldr.w	r8, [r6, #4]
     728:	4620      	mov	r0, r4
     72a:	f008 fcf7 	bl	911c <__aeabi_i2f>
     72e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     732:	f008 fd47 	bl	91c4 <__aeabi_fmul>
     736:	2100      	movs	r1, #0
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     738:	444d      	add	r5, r9
		txt_y = y + round((float)(h / 2.));
     73a:	4607      	mov	r7, r0
     73c:	f008 fef4 	bl	9528 <__aeabi_fcmpge>
     740:	2800      	cmp	r0, #0
     742:	f000 80a9 	beq.w	898 <ShowAdjButtons()+0x2a8>
     746:	4638      	mov	r0, r7
     748:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     74c:	f008 fc32 	bl	8fb4 <__addsf3>
     750:	f008 fefe 	bl	9550 <__aeabi_f2iz>
     754:	4607      	mov	r7, r0
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
     756:	8a33      	ldrh	r3, [r6, #16]
     758:	9301      	str	r3, [sp, #4]
     75a:	b224      	sxth	r4, r4
     75c:	fa0f f38a 	sxth.w	r3, sl
     760:	fa0f f189 	sxth.w	r1, r9
     764:	fa0f f288 	sxth.w	r2, r8
     768:	9400      	str	r4, [sp, #0]
     76a:	485e      	ldr	r0, [pc, #376]	; (8e4 <ShowAdjButtons()+0x2f4>)
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     76c:	4e61      	ldr	r6, [pc, #388]	; (8f4 <ShowAdjButtons()+0x304>)
		txt_y = y + round((float)(h / 2.));
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
     76e:	f002 fee5 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
		txt_y = y + round((float)(h / 2.));
     772:	eb08 0407 	add.w	r4, r8, r7
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
	disp->setTextColor(txtcolor);
     776:	2100      	movs	r1, #0
     778:	485a      	ldr	r0, [pc, #360]	; (8e4 <ShowAdjButtons()+0x2f4>)
     77a:	f002 fb23 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
	disp->setCursor(txt_x, txt_y, centered);
     77e:	b222      	sxth	r2, r4
     780:	2301      	movs	r3, #1
     782:	b229      	sxth	r1, r5
     784:	4857      	ldr	r0, [pc, #348]	; (8e4 <ShowAdjButtons()+0x2f4>)
     786:	4d59      	ldr	r5, [pc, #356]	; (8ec <ShowAdjButtons()+0x2fc>)
     788:	f002 fab2 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
	disp->print(txt);
     78c:	a907      	add	r1, sp, #28
     78e:	4855      	ldr	r0, [pc, #340]	; (8e4 <ShowAdjButtons()+0x2f4>)
     790:	f007 fd5c 	bl	824c <Print::print(String const&)>
     794:	a807      	add	r0, sp, #28
     796:	f007 fe01 	bl	839c <String::~String()>
  MinusBox.Draw(&tft, "-", ILI9341_BLACK, Arial_40, true);
     79a:	4957      	ldr	r1, [pc, #348]	; (8f8 <ShowAdjButtons()+0x308>)
     79c:	a803      	add	r0, sp, #12
     79e:	f007 fe3d 	bl	841c <String::String(char const*)>
     7a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     7a4:	ac07      	add	r4, sp, #28
     7a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     7a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     7ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}

inline void CustomBox::Draw(ILI9341_t3n* disp, String txt, int txtcolor, ILI9341_t3_font_t font, bool centered)
{
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
     7b0:	a907      	add	r1, sp, #28
     7b2:	484c      	ldr	r0, [pc, #304]	; (8e4 <ShowAdjButtons()+0x2f4>)
     7b4:	f001 ffd8 	bl	2768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     7b8:	f8d6 a008 	ldr.w	sl, [r6, #8]
     7bc:	f8d6 9000 	ldr.w	r9, [r6]
     7c0:	4650      	mov	r0, sl
     7c2:	f008 fcab 	bl	911c <__aeabi_i2f>
     7c6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ca:	f008 fcfb 	bl	91c4 <__aeabi_fmul>
     7ce:	2100      	movs	r1, #0
     7d0:	4604      	mov	r4, r0
     7d2:	f008 fea9 	bl	9528 <__aeabi_fcmpge>
     7d6:	2800      	cmp	r0, #0
     7d8:	d055      	beq.n	886 <ShowAdjButtons()+0x296>
     7da:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7de:	4620      	mov	r0, r4
     7e0:	f008 fbe8 	bl	8fb4 <__addsf3>
     7e4:	f008 feb4 	bl	9550 <__aeabi_f2iz>
     7e8:	4605      	mov	r5, r0
		txt_y = y + round((float)(h / 2.));
     7ea:	68f4      	ldr	r4, [r6, #12]
     7ec:	f8d6 8004 	ldr.w	r8, [r6, #4]
     7f0:	4620      	mov	r0, r4
     7f2:	f008 fc93 	bl	911c <__aeabi_i2f>
     7f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7fa:	f008 fce3 	bl	91c4 <__aeabi_fmul>
     7fe:	2100      	movs	r1, #0
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     800:	444d      	add	r5, r9
		txt_y = y + round((float)(h / 2.));
     802:	4607      	mov	r7, r0
     804:	f008 fe90 	bl	9528 <__aeabi_fcmpge>
     808:	2800      	cmp	r0, #0
     80a:	d033      	beq.n	874 <ShowAdjButtons()+0x284>
     80c:	4638      	mov	r0, r7
     80e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     812:	f008 fbcf 	bl	8fb4 <__addsf3>
     816:	f008 fe9b 	bl	9550 <__aeabi_f2iz>
     81a:	4607      	mov	r7, r0
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
     81c:	8a33      	ldrh	r3, [r6, #16]
     81e:	9301      	str	r3, [sp, #4]
     820:	b224      	sxth	r4, r4
     822:	fa0f f38a 	sxth.w	r3, sl
     826:	fa0f f288 	sxth.w	r2, r8
     82a:	9400      	str	r4, [sp, #0]
     82c:	fa0f f189 	sxth.w	r1, r9
     830:	482c      	ldr	r0, [pc, #176]	; (8e4 <ShowAdjButtons()+0x2f4>)
     832:	f002 fe83 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
		txt_y = y + round((float)(h / 2.));
     836:	eb08 0407 	add.w	r4, r8, r7
	}

	//Serial.printf("txt cursor set to (%d,%d)\n", txt_x, txt_y);
	disp->fillRect(x, y, w, h, color);
	disp->setTextColor(txtcolor);
     83a:	2100      	movs	r1, #0
     83c:	4829      	ldr	r0, [pc, #164]	; (8e4 <ShowAdjButtons()+0x2f4>)
     83e:	f002 fac1 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
	disp->setCursor(txt_x, txt_y, centered);
     842:	b222      	sxth	r2, r4
     844:	2301      	movs	r3, #1
     846:	b229      	sxth	r1, r5
     848:	4826      	ldr	r0, [pc, #152]	; (8e4 <ShowAdjButtons()+0x2f4>)
     84a:	f002 fa51 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
	disp->print(txt);
     84e:	a903      	add	r1, sp, #12
     850:	4824      	ldr	r0, [pc, #144]	; (8e4 <ShowAdjButtons()+0x2f4>)
     852:	f007 fcfb 	bl	824c <Print::print(String const&)>
     856:	a803      	add	r0, sp, #12
     858:	f007 fda0 	bl	839c <String::~String()>
}
     85c:	b01c      	add	sp, #112	; 0x70
     85e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     862:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     866:	4620      	mov	r0, r4
     868:	f008 fba2 	bl	8fb0 <__aeabi_fsub>
     86c:	f008 fe70 	bl	9550 <__aeabi_f2iz>
     870:	4605      	mov	r5, r0
     872:	e6f1      	b.n	658 <ShowAdjButtons()+0x68>
		txt_y = y + round((float)(h / 2.));
     874:	4638      	mov	r0, r7
     876:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     87a:	f008 fb99 	bl	8fb0 <__aeabi_fsub>
     87e:	f008 fe67 	bl	9550 <__aeabi_f2iz>
     882:	4607      	mov	r7, r0
     884:	e7ca      	b.n	81c <ShowAdjButtons()+0x22c>
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     886:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     88a:	4620      	mov	r0, r4
     88c:	f008 fb90 	bl	8fb0 <__aeabi_fsub>
     890:	f008 fe5e 	bl	9550 <__aeabi_f2iz>
     894:	4605      	mov	r5, r0
     896:	e7a8      	b.n	7ea <ShowAdjButtons()+0x1fa>
		txt_y = y + round((float)(h / 2.));
     898:	4638      	mov	r0, r7
     89a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     89e:	f008 fb87 	bl	8fb0 <__aeabi_fsub>
     8a2:	f008 fe55 	bl	9550 <__aeabi_f2iz>
     8a6:	4607      	mov	r7, r0
     8a8:	e755      	b.n	756 <ShowAdjButtons()+0x166>
	int txt_x = x;
	int txt_y = y;
	disp->setFont(font);
	if (centered)
	{
		txt_x = x + round((float)(w / 2.));
     8aa:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8ae:	4620      	mov	r0, r4
     8b0:	f008 fb7e 	bl	8fb0 <__aeabi_fsub>
     8b4:	f008 fe4c 	bl	9550 <__aeabi_f2iz>
     8b8:	4605      	mov	r5, r0
     8ba:	e732      	b.n	722 <ShowAdjButtons()+0x132>
		txt_y = y + round((float)(h / 2.));
     8bc:	4638      	mov	r0, r7
     8be:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8c2:	f008 fb75 	bl	8fb0 <__aeabi_fsub>
     8c6:	f008 fe43 	bl	9550 <__aeabi_f2iz>
     8ca:	4607      	mov	r7, r0
     8cc:	e6de      	b.n	68c <ShowAdjButtons()+0x9c>
     8ce:	bf00      	nop
     8d0:	0000da6c 	.word	0x0000da6c
     8d4:	1fff8a8c 	.word	0x1fff8a8c
     8d8:	000171dc 	.word	0x000171dc
     8dc:	1fff95e8 	.word	0x1fff95e8
     8e0:	0000da80 	.word	0x0000da80
     8e4:	1fff9520 	.word	0x1fff9520
     8e8:	1fff9694 	.word	0x1fff9694
     8ec:	000171f8 	.word	0x000171f8
     8f0:	0000da88 	.word	0x0000da88
     8f4:	1fff9600 	.word	0x1fff9600
     8f8:	0000da8c 	.word	0x0000da8c

000008fc <ShowNormalTimeDisplay()>:
  MinusBox.Draw(&tft, ILI9341_BLACK);
  NextBox.Draw(&tft, ILI9341_BLACK);
}

void ShowNormalTimeDisplay()
{
     8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
     8fe:	b085      	sub	sp, #20
  //Serial.printf("In ShowNormalTimeDisplay\n");
  now = rtc.now();
     900:	ac02      	add	r4, sp, #8
     902:	4620      	mov	r0, r4
     904:	f005 ff7c 	bl	6800 <RTC_DS3231::now()>
     908:	e894 0003 	ldmia.w	r4, {r0, r1}
     90c:	4e1e      	ldr	r6, [pc, #120]	; (988 <ShowNormalTimeDisplay()+0x8c>)
  int hournum = now.hour();
     90e:	0e04      	lsrs	r4, r0, #24

  //guard against 1259->1300 && 2359->0000 transitions
  if (hournum > 12)
     910:	2c0c      	cmp	r4, #12
}

void ShowNormalTimeDisplay()
{
  //Serial.printf("In ShowNormalTimeDisplay\n");
  now = rtc.now();
     912:	80b1      	strh	r1, [r6, #4]
     914:	6030      	str	r0, [r6, #0]
  int hournum = now.hour();

  //guard against 1259->1300 && 2359->0000 transitions
  if (hournum > 12)
     916:	dd31      	ble.n	97c <ShowNormalTimeDisplay()+0x80>
  {
    hournum -= 12;
     918:	f1a4 030c 	sub.w	r3, r4, #12
  else if (hournum == 0)
  {
    hournum += 12;
  }

  hournum = (hournum > 12) ? hournum - 12 : hournum;
     91c:	2b0c      	cmp	r3, #12
     91e:	bfc8      	it	gt
     920:	3c18      	subgt	r4, #24
     922:	dd2f      	ble.n	984 <ShowNormalTimeDisplay()+0x88>
	color = in_color;
}

inline void CustomBox::Draw(ILI9341_t3n* disp)
{
	disp->fillRect(x, y, w, h, color);
     924:	4d19      	ldr	r5, [pc, #100]	; (98c <ShowNormalTimeDisplay()+0x90>)

  tft.setCursor(0, 100);
     926:	481a      	ldr	r0, [pc, #104]	; (990 <ShowNormalTimeDisplay()+0x94>)
     928:	2300      	movs	r3, #0
     92a:	4619      	mov	r1, r3
     92c:	2264      	movs	r2, #100	; 0x64
     92e:	f002 f9df 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
     932:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
     936:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
     93a:	f9b5 1000 	ldrsh.w	r1, [r5]
     93e:	8a2f      	ldrh	r7, [r5, #16]
     940:	f9b5 500c 	ldrsh.w	r5, [r5, #12]
     944:	4812      	ldr	r0, [pc, #72]	; (990 <ShowNormalTimeDisplay()+0x94>)
     946:	e88d 00a0 	stmia.w	sp, {r5, r7}
     94a:	f002 fdf7 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  TimeBox.Draw(&tft); //redraws black background

  tft.setTextColor(ILI9341_RED);
     94e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
     952:	480f      	ldr	r0, [pc, #60]	; (990 <ShowNormalTimeDisplay()+0x94>)
     954:	f002 fa36 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
  tft.setFont(Arial_72);
     958:	490e      	ldr	r1, [pc, #56]	; (994 <ShowNormalTimeDisplay()+0x98>)
     95a:	480d      	ldr	r0, [pc, #52]	; (990 <ShowNormalTimeDisplay()+0x94>)
     95c:	f001 ff04 	bl	2768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>
  tft.setCursor(160, 120, true);//try the text centering feature
     960:	2301      	movs	r3, #1
     962:	2278      	movs	r2, #120	; 0x78
     964:	21a0      	movs	r1, #160	; 0xa0
     966:	480a      	ldr	r0, [pc, #40]	; (990 <ShowNormalTimeDisplay()+0x94>)
     968:	f002 f9c2 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
  tft.printf("%2d:%02d", hournum, now.minute());
     96c:	7933      	ldrb	r3, [r6, #4]
     96e:	490a      	ldr	r1, [pc, #40]	; (998 <ShowNormalTimeDisplay()+0x9c>)
     970:	4807      	ldr	r0, [pc, #28]	; (990 <ShowNormalTimeDisplay()+0x94>)
     972:	4622      	mov	r2, r4
     974:	f007 fca8 	bl	82c8 <Print::printf(char const*, ...)>
}
     978:	b005      	add	sp, #20
     97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  {
    hournum -= 12;
  }
  else if (hournum == 0)
  {
    hournum += 12;
     97c:	2c00      	cmp	r4, #0
     97e:	bf08      	it	eq
     980:	240c      	moveq	r4, #12
     982:	e7cf      	b.n	924 <ShowNormalTimeDisplay()+0x28>
     984:	461c      	mov	r4, r3
     986:	e7cd      	b.n	924 <ShowNormalTimeDisplay()+0x28>
     988:	1fff9620 	.word	0x1fff9620
     98c:	1fff9658 	.word	0x1fff9658
     990:	1fff9520 	.word	0x1fff9520
     994:	0000e108 	.word	0x0000e108
     998:	0000da90 	.word	0x0000da90

0000099c <ShowLongTimeDisplay()>:
  tft.setCursor(160, 120, true);//try the text centering feature
  tft.printf("%2d:%02d", hournum, now.minute());
}

void ShowLongTimeDisplay()
{
     99c:	b570      	push	{r4, r5, r6, lr}
     99e:	b084      	sub	sp, #16
  //Serial.printf("In ShowLongTimeDisplay\n");
  now = rtc.now();
     9a0:	ac02      	add	r4, sp, #8
     9a2:	4620      	mov	r0, r4
     9a4:	f005 ff2c 	bl	6800 <RTC_DS3231::now()>
     9a8:	e894 0003 	ldmia.w	r4, {r0, r1}
     9ac:	4c1c      	ldr	r4, [pc, #112]	; (a20 <ShowLongTimeDisplay()+0x84>)
     9ae:	4d1d      	ldr	r5, [pc, #116]	; (a24 <ShowLongTimeDisplay()+0x88>)
     9b0:	6020      	str	r0, [r4, #0]
     9b2:	80a1      	strh	r1, [r4, #4]
  tft.setTextColor(ILI9341_RED);
     9b4:	481c      	ldr	r0, [pc, #112]	; (a28 <ShowLongTimeDisplay()+0x8c>)
     9b6:	f44f 4178 	mov.w	r1, #63488	; 0xf800
     9ba:	f002 fa03 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
  tft.setCursor(160, 120, true);//try the text centering feature
     9be:	2301      	movs	r3, #1
     9c0:	2278      	movs	r2, #120	; 0x78
     9c2:	21a0      	movs	r1, #160	; 0xa0
     9c4:	4818      	ldr	r0, [pc, #96]	; (a28 <ShowLongTimeDisplay()+0x8c>)
     9c6:	f002 f993 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
  tft.setFont(Arial_60);
     9ca:	4918      	ldr	r1, [pc, #96]	; (a2c <ShowLongTimeDisplay()+0x90>)
     9cc:	4816      	ldr	r0, [pc, #88]	; (a28 <ShowLongTimeDisplay()+0x8c>)
     9ce:	f001 fecb 	bl	2768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>
     9d2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
     9d6:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
     9da:	f9b5 1000 	ldrsh.w	r1, [r5]
     9de:	8a2e      	ldrh	r6, [r5, #16]
     9e0:	f9b5 500c 	ldrsh.w	r5, [r5, #12]
     9e4:	4810      	ldr	r0, [pc, #64]	; (a28 <ShowLongTimeDisplay()+0x8c>)
     9e6:	e88d 0060 	stmia.w	sp, {r5, r6}
     9ea:	f002 fda7 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  TimeBox.Draw(&tft); //redraws black background

  int hournum = now.hour();
     9ee:	78e2      	ldrb	r2, [r4, #3]

  //guard against 1259->1300 && 2359->0000 transitions
  if (hournum > 12)
     9f0:	2a0c      	cmp	r2, #12
     9f2:	dd0e      	ble.n	a12 <ShowLongTimeDisplay()+0x76>
  {
    hournum -= 12;
     9f4:	f1a2 030c 	sub.w	r3, r2, #12
  else if (hournum == 0)
  {
    hournum += 12;
  }

  hournum = (hournum > 12) ? hournum - 12 : hournum;
     9f8:	2b0c      	cmp	r3, #12
     9fa:	bfc8      	it	gt
     9fc:	3a18      	subgt	r2, #24
     9fe:	dd0c      	ble.n	a1a <ShowLongTimeDisplay()+0x7e>

  tft.printf("%2d:%02d:%02d", hournum, now.minute(), now.second());
     a00:	7961      	ldrb	r1, [r4, #5]
     a02:	7923      	ldrb	r3, [r4, #4]
     a04:	4808      	ldr	r0, [pc, #32]	; (a28 <ShowLongTimeDisplay()+0x8c>)
     a06:	9100      	str	r1, [sp, #0]
     a08:	4909      	ldr	r1, [pc, #36]	; (a30 <ShowLongTimeDisplay()+0x94>)
     a0a:	f007 fc5d 	bl	82c8 <Print::printf(char const*, ...)>
}
     a0e:	b004      	add	sp, #16
     a10:	bd70      	pop	{r4, r5, r6, pc}
  {
    hournum -= 12;
  }
  else if (hournum == 0)
  {
    hournum += 12;
     a12:	2a00      	cmp	r2, #0
     a14:	bf08      	it	eq
     a16:	220c      	moveq	r2, #12
     a18:	e7f2      	b.n	a00 <ShowLongTimeDisplay()+0x64>
     a1a:	461a      	mov	r2, r3
     a1c:	e7f0      	b.n	a00 <ShowLongTimeDisplay()+0x64>
     a1e:	bf00      	nop
     a20:	1fff9620 	.word	0x1fff9620
     a24:	1fff9658 	.word	0x1fff9658
     a28:	1fff9520 	.word	0x1fff9520
     a2c:	00017230 	.word	0x00017230
     a30:	0000da9c 	.word	0x0000da9c

00000a34 <HideHighlightBars()>:
    break;
  }
}

void HideHighlightBars()
{
     a34:	b570      	push	{r4, r5, r6, lr}
  tft.fillRect(0, DATE_HIGHLIGHT_BOX_YLOC, ALL_DATE_HIGHLIGHT_BOX_WIDTH, DATE_HIGHLIGHT_BOX_HEIGHT, ILI9341_BLACK);
     a36:	4d0c      	ldr	r5, [pc, #48]	; (a68 <HideHighlightBars()+0x34>)
    break;
  }
}

void HideHighlightBars()
{
     a38:	b082      	sub	sp, #8
  tft.fillRect(0, DATE_HIGHLIGHT_BOX_YLOC, ALL_DATE_HIGHLIGHT_BOX_WIDTH, DATE_HIGHLIGHT_BOX_HEIGHT, ILI9341_BLACK);
     a3a:	2400      	movs	r4, #0
     a3c:	2605      	movs	r6, #5
     a3e:	4628      	mov	r0, r5
     a40:	4621      	mov	r1, r4
     a42:	9401      	str	r4, [sp, #4]
     a44:	9600      	str	r6, [sp, #0]
     a46:	f44f 73a0 	mov.w	r3, #320	; 0x140
     a4a:	2228      	movs	r2, #40	; 0x28
     a4c:	f002 fd76 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  tft.fillRect(0, TIME_HIGHLIGHT_BOX_YLOC, ALL_TIME_HIGHLIGHT_BOX_WIDTH, TIME_HIGHLIGHT_BOX_HEIGHT, ILI9341_BLACK);
     a50:	9401      	str	r4, [sp, #4]
     a52:	9600      	str	r6, [sp, #0]
     a54:	4621      	mov	r1, r4
     a56:	4628      	mov	r0, r5
     a58:	f44f 73a0 	mov.w	r3, #320	; 0x140
     a5c:	224b      	movs	r2, #75	; 0x4b
     a5e:	f002 fd6d 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
}
     a62:	b002      	add	sp, #8
     a64:	bd70      	pop	{r4, r5, r6, pc}
     a66:	bf00      	nop
     a68:	1fff9520 	.word	0x1fff9520

00000a6c <ShowHighlightBar(AdjustmentState)>:
  tft.printf("%2d:%02d:%02d", hournum, now.minute(), now.second());
}


void ShowHighlightBar(AdjustmentState adjstate)
{
     a6c:	b530      	push	{r4, r5, lr}
     a6e:	b083      	sub	sp, #12
  switch (adjstate)
     a70:	2807      	cmp	r0, #7
     a72:	d816      	bhi.n	aa2 <ShowHighlightBar(AdjustmentState)+0x36>
     a74:	e8df f000 	tbb	[pc, r0]
     a78:	28242017 	.word	0x28242017
     a7c:	30042c15 	.word	0x30042c15
  case ADJ_MONTH:
    HideHighlightBars();
    MonthHighlightBox.Draw(&tft);
    break;
  case ADJ_DAY:
    HideHighlightBars();
     a80:	f7ff ffd8 	bl	a34 <HideHighlightBars()>
     a84:	4c16      	ldr	r4, [pc, #88]	; (ae0 <ShowHighlightBar(AdjustmentState)+0x74>)
     a86:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
     a8a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
     a8e:	f9b4 1000 	ldrsh.w	r1, [r4]
     a92:	8a25      	ldrh	r5, [r4, #16]
     a94:	f9b4 400c 	ldrsh.w	r4, [r4, #12]
     a98:	4812      	ldr	r0, [pc, #72]	; (ae4 <ShowHighlightBar(AdjustmentState)+0x78>)
     a9a:	e88d 0030 	stmia.w	sp, {r4, r5}
     a9e:	f002 fd4d 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    YearHighlightBox.Draw(&tft);
    break;
  default:
    break;
  }
}
     aa2:	b003      	add	sp, #12
     aa4:	bd30      	pop	{r4, r5, pc}
void ShowHighlightBar(AdjustmentState adjstate)
{
  switch (adjstate)
  {
  case ADJ_NONE:
    Serial.printf("ADJ_NONE case in ShowHighlightBox()\n");
     aa6:	4910      	ldr	r1, [pc, #64]	; (ae8 <ShowHighlightBar(AdjustmentState)+0x7c>)
     aa8:	4810      	ldr	r0, [pc, #64]	; (aec <ShowHighlightBar(AdjustmentState)+0x80>)
     aaa:	f007 fc0d 	bl	82c8 <Print::printf(char const*, ...)>
    YearHighlightBox.Draw(&tft);
    break;
  default:
    break;
  }
}
     aae:	b003      	add	sp, #12
     ab0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
{
  switch (adjstate)
  {
  case ADJ_NONE:
    Serial.printf("ADJ_NONE case in ShowHighlightBox()\n");
    HideHighlightBars();
     ab4:	f7ff bfbe 	b.w	a34 <HideHighlightBars()>
    break;
  case ADJ_HOUR:
    HideHighlightBars();
     ab8:	f7ff ffbc 	bl	a34 <HideHighlightBars()>
     abc:	4c0c      	ldr	r4, [pc, #48]	; (af0 <ShowHighlightBar(AdjustmentState)+0x84>)
     abe:	e7e2      	b.n	a86 <ShowHighlightBar(AdjustmentState)+0x1a>
    HourHighlightBox.Draw(&tft);
    break;
  case ADJ_MIN:
    HideHighlightBars();
     ac0:	f7ff ffb8 	bl	a34 <HideHighlightBars()>
     ac4:	4c0b      	ldr	r4, [pc, #44]	; (af4 <ShowHighlightBar(AdjustmentState)+0x88>)
     ac6:	e7de      	b.n	a86 <ShowHighlightBar(AdjustmentState)+0x1a>
    MinuteHighlightBox.Draw(&tft);
    break;
  case ADJ_SEC:
    HideHighlightBars();
     ac8:	f7ff ffb4 	bl	a34 <HideHighlightBars()>
     acc:	4c0a      	ldr	r4, [pc, #40]	; (af8 <ShowHighlightBar(AdjustmentState)+0x8c>)
     ace:	e7da      	b.n	a86 <ShowHighlightBar(AdjustmentState)+0x1a>
    SecondHighlightBox.Draw(&tft);
    break;
  case ADJ_DAYOFWEEK:
    break;
  case ADJ_MONTH:
    HideHighlightBars();
     ad0:	f7ff ffb0 	bl	a34 <HideHighlightBars()>
     ad4:	4c09      	ldr	r4, [pc, #36]	; (afc <ShowHighlightBar(AdjustmentState)+0x90>)
     ad6:	e7d6      	b.n	a86 <ShowHighlightBar(AdjustmentState)+0x1a>
  case ADJ_DAY:
    HideHighlightBars();
    DayHighlightBox.Draw(&tft);
    break;
  case ADJ_YEAR:
    HideHighlightBars();
     ad8:	f7ff ffac 	bl	a34 <HideHighlightBars()>
     adc:	4c08      	ldr	r4, [pc, #32]	; (b00 <ShowHighlightBar(AdjustmentState)+0x94>)
     ade:	e7d2      	b.n	a86 <ShowHighlightBar(AdjustmentState)+0x1a>
     ae0:	1fff950c 	.word	0x1fff950c
     ae4:	1fff9520 	.word	0x1fff9520
     ae8:	0000daac 	.word	0x0000daac
     aec:	1fff8a8c 	.word	0x1fff8a8c
     af0:	1fff9644 	.word	0x1fff9644
     af4:	1fff962c 	.word	0x1fff962c
     af8:	1fff9680 	.word	0x1fff9680
     afc:	1fff95c0 	.word	0x1fff95c0
     b00:	1fff970c 	.word	0x1fff970c

00000b04 <ShowDateDisplay()>:
  tft.fillRect(0, DATE_HIGHLIGHT_BOX_YLOC, ALL_DATE_HIGHLIGHT_BOX_WIDTH, DATE_HIGHLIGHT_BOX_HEIGHT, ILI9341_BLACK);
  tft.fillRect(0, TIME_HIGHLIGHT_BOX_YLOC, ALL_TIME_HIGHLIGHT_BOX_WIDTH, TIME_HIGHLIGHT_BOX_HEIGHT, ILI9341_BLACK);
}

void ShowDateDisplay()
{
     b04:	b530      	push	{r4, r5, lr}
     b06:	b085      	sub	sp, #20
  DateTime now = rtc.now();
     b08:	a802      	add	r0, sp, #8
     b0a:	f005 fe79 	bl	6800 <RTC_DS3231::now()>
     b0e:	481b      	ldr	r0, [pc, #108]	; (b7c <ShowDateDisplay()+0x78>)
     b10:	4c1b      	ldr	r4, [pc, #108]	; (b80 <ShowDateDisplay()+0x7c>)
     b12:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
     b16:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
     b1a:	f9b0 1000 	ldrsh.w	r1, [r0]
     b1e:	8a05      	ldrh	r5, [r0, #16]
     b20:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
     b24:	e88d 0021 	stmia.w	sp, {r0, r5}
     b28:	4620      	mov	r0, r4
     b2a:	f002 fd07 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  DateBox.Draw(&tft);
  tft.setTextColor(ILI9341_YELLOW);
     b2e:	4620      	mov	r0, r4
     b30:	f64f 71e0 	movw	r1, #65504	; 0xffe0
     b34:	f002 f946 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
  tft.setCursor(0, 0);
     b38:	2300      	movs	r3, #0
     b3a:	461a      	mov	r2, r3
     b3c:	4619      	mov	r1, r3
     b3e:	4620      	mov	r0, r4
     b40:	f002 f8d6 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
  //tft.setTextSize(3);
  tft.setFont(Arial_28);
     b44:	4620      	mov	r0, r4
     b46:	490f      	ldr	r1, [pc, #60]	; (b84 <ShowDateDisplay()+0x80>)
     b48:	f001 fe0e 	bl	2768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>
  tft.printf("%s %02d/%02d/%02d\n",
    daysOfTheWeek[now.dayOfTheWeek()], now.month(), now.day(), now.year());
     b4c:	a802      	add	r0, sp, #8
     b4e:	f005 fe29 	bl	67a4 <DateTime::dayOfTheWeek() const>
     b52:	f89d 1008 	ldrb.w	r1, [sp, #8]
     b56:	f89d 500a 	ldrb.w	r5, [sp, #10]
  DateBox.Draw(&tft);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setCursor(0, 0);
  //tft.setTextSize(3);
  tft.setFont(Arial_28);
  tft.printf("%s %02d/%02d/%02d\n",
     b5a:	4a0b      	ldr	r2, [pc, #44]	; (b88 <ShowDateDisplay()+0x84>)
    daysOfTheWeek[now.dayOfTheWeek()], now.month(), now.day(), now.year());
     b5c:	9500      	str	r5, [sp, #0]
     b5e:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
  DateBox.Draw(&tft);
  tft.setTextColor(ILI9341_YELLOW);
  tft.setCursor(0, 0);
  //tft.setTextSize(3);
  tft.setFont(Arial_28);
  tft.printf("%s %02d/%02d/%02d\n",
     b62:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    daysOfTheWeek[now.dayOfTheWeek()], now.month(), now.day(), now.year());
     b66:	9101      	str	r1, [sp, #4]
     b68:	f89d 3009 	ldrb.w	r3, [sp, #9]
     b6c:	4907      	ldr	r1, [pc, #28]	; (b8c <ShowDateDisplay()+0x88>)
     b6e:	4620      	mov	r0, r4
     b70:	eb02 0285 	add.w	r2, r2, r5, lsl #2
     b74:	f007 fba8 	bl	82c8 <Print::printf(char const*, ...)>
}
     b78:	b005      	add	sp, #20
     b7a:	bd30      	pop	{r4, r5, pc}
     b7c:	1fff966c 	.word	0x1fff966c
     b80:	1fff9520 	.word	0x1fff9520
     b84:	00017214 	.word	0x00017214
     b88:	1fff8810 	.word	0x1fff8810
     b8c:	0000dad4 	.word	0x0000dad4

00000b90 <AdjustTimeAndDate(TS_Point)>:
  sprintf(bufptr, "%02d", dt.minute());
}
#pragma endregion DATE_TIME_FUNCTIONS

AdjustmentState AdjustTimeAndDate(TS_Point Dp)
{
     b90:	b570      	push	{r4, r5, r6, lr}
     b92:	b08c      	sub	sp, #48	; 0x30
     b94:	ab04      	add	r3, sp, #16
     b96:	e883 0003 	stmia.w	r3, {r0, r1}
  AdjustmentState adjstate = ADJ_NONE;
  DateTime newtime;
     b9a:	499a      	ldr	r1, [pc, #616]	; (e04 <AdjustTimeAndDate(TS_Point)+0x274>)
     b9c:	f9bd 4010 	ldrsh.w	r4, [sp, #16]
     ba0:	f9bd 5012 	ldrsh.w	r5, [sp, #18]
     ba4:	a806      	add	r0, sp, #24
     ba6:	f005 fcb5 	bl	6514 <DateTime::DateTime(unsigned long)>
  DateTime now = rtc.now();
     baa:	a808      	add	r0, sp, #32
     bac:	f005 fe28 	bl	6800 <RTC_DS3231::now()>
  //int new_hour, new_minute, new_month, new_day, new_year;
  int new_hour, new_minute, new_month, new_day;

  //Serial.printf("In GetCurAdjState with CurAdjState = %d, at point (%d,%d)\n", CurAdjState, Dp.x, Dp.y);

  switch (CurAdjState)
     bb0:	4b95      	ldr	r3, [pc, #596]	; (e08 <AdjustTimeAndDate(TS_Point)+0x278>)
     bb2:	781b      	ldrb	r3, [r3, #0]
     bb4:	2b07      	cmp	r3, #7
     bb6:	d819      	bhi.n	bec <AdjustTimeAndDate(TS_Point)+0x5c>
     bb8:	e8df f013 	tbh	[pc, r3, lsl #1]
     bbc:	01c90008 	.word	0x01c90008
     bc0:	001b024c 	.word	0x001b024c
     bc4:	00a10018 	.word	0x00a10018
     bc8:	02e20142 	.word	0x02e20142
	//  true if (in_x, in_y) falls within box region.  Othewise, false

	//Serial.printf("TouchHit(%d,%d), box (x,y,w,h) = (%d,%d,%d,%d)\n",
	//	in_x, in_y, x, y, w, h);

	return (in_x > x && in_y > y && in_x < x + w && in_y < y + h);
     bcc:	4b8f      	ldr	r3, [pc, #572]	; (e0c <AdjustTimeAndDate(TS_Point)+0x27c>)
     bce:	681a      	ldr	r2, [r3, #0]
     bd0:	4294      	cmp	r4, r2
     bd2:	dd03      	ble.n	bdc <AdjustTimeAndDate(TS_Point)+0x4c>
     bd4:	6859      	ldr	r1, [r3, #4]
     bd6:	428d      	cmp	r5, r1
     bd8:	f300 85f6 	bgt.w	17c8 <AdjustTimeAndDate(TS_Point)+0xc38>
     bdc:	4b8c      	ldr	r3, [pc, #560]	; (e10 <AdjustTimeAndDate(TS_Point)+0x280>)
     bde:	681a      	ldr	r2, [r3, #0]
     be0:	4294      	cmp	r4, r2
     be2:	dd03      	ble.n	bec <AdjustTimeAndDate(TS_Point)+0x5c>
     be4:	6859      	ldr	r1, [r3, #4]
     be6:	428d      	cmp	r5, r1
     be8:	f300 85fe 	bgt.w	17e8 <AdjustTimeAndDate(TS_Point)+0xc58>
}
#pragma endregion DATE_TIME_FUNCTIONS

AdjustmentState AdjustTimeAndDate(TS_Point Dp)
{
  AdjustmentState adjstate = ADJ_NONE;
     bec:	2000      	movs	r0, #0
    break;
  }

  //Serial.printf("AdjustTimeAndDate(%d, %d) returns %d\n", Dp.x, Dp.y, (int)adjstate);
  return adjstate;
}
     bee:	b00c      	add	sp, #48	; 0x30
     bf0:	bd70      	pop	{r4, r5, r6, pc}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     bf2:	211f      	movs	r1, #31
     bf4:	4887      	ldr	r0, [pc, #540]	; (e14 <AdjustTimeAndDate(TS_Point)+0x284>)
     bf6:	f007 f9b1 	bl	7f5c <usb_serial_write>
     bfa:	4b87      	ldr	r3, [pc, #540]	; (e18 <AdjustTimeAndDate(TS_Point)+0x288>)
     bfc:	681a      	ldr	r2, [r3, #0]
     bfe:	4294      	cmp	r4, r2
     c00:	f340 83a6 	ble.w	1350 <AdjustTimeAndDate(TS_Point)+0x7c0>
     c04:	6859      	ldr	r1, [r3, #4]
     c06:	428d      	cmp	r5, r1
     c08:	f340 83a2 	ble.w	1350 <AdjustTimeAndDate(TS_Point)+0x7c0>
     c0c:	6898      	ldr	r0, [r3, #8]
     c0e:	4402      	add	r2, r0
     c10:	4294      	cmp	r4, r2
     c12:	f280 839d 	bge.w	1350 <AdjustTimeAndDate(TS_Point)+0x7c0>
     c16:	68db      	ldr	r3, [r3, #12]
     c18:	4419      	add	r1, r3
     c1a:	428d      	cmp	r5, r1
     c1c:	f280 8398 	bge.w	1350 <AdjustTimeAndDate(TS_Point)+0x7c0>
    Serial.print("In GetCurAdjState ADJ_SEC case\n");
    adjstate = ADJ_SEC;

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
     c20:	497e      	ldr	r1, [pc, #504]	; (e1c <AdjustTimeAndDate(TS_Point)+0x28c>)
     c22:	462b      	mov	r3, r5
     c24:	4622      	mov	r2, r4
      ShowLongTimeDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
     c26:	487e      	ldr	r0, [pc, #504]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     c28:	f007 fb4e 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute(), now.second());
     c2c:	f89d 1020 	ldrb.w	r1, [sp, #32]
     c30:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
     c34:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
     c38:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     c3c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c40:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     c44:	9503      	str	r5, [sp, #12]
     c46:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     c4a:	9100      	str	r1, [sp, #0]
     c4c:	9402      	str	r4, [sp, #8]
     c4e:	9001      	str	r0, [sp, #4]
     c50:	4974      	ldr	r1, [pc, #464]	; (e24 <AdjustTimeAndDate(TS_Point)+0x294>)
     c52:	4873      	ldr	r0, [pc, #460]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     c54:	f007 fb38 	bl	82c8 <Print::printf(char const*, ...)>

      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), now.minute(), 0);
     c58:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
     c5c:	f89d 1020 	ldrb.w	r1, [sp, #32]
     c60:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
     c64:	9001      	str	r0, [sp, #4]
     c66:	ac0a      	add	r4, sp, #40	; 0x28
     c68:	2000      	movs	r0, #0
     c6a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c6e:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     c72:	9002      	str	r0, [sp, #8]
     c74:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     c78:	4620      	mov	r0, r4
     c7a:	9500      	str	r5, [sp, #0]
     c7c:	f005 fcc2 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     c80:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute(), newtime.second());
     c84:	b2c3      	uxtb	r3, r0
     c86:	b2cd      	uxtb	r5, r1
     c88:	0e02      	lsrs	r2, r0, #24
     c8a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
     c8e:	f3c1 2607 	ubfx	r6, r1, #8, #8
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute(), now.second());

      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), now.minute(), 0);
     c92:	9006      	str	r0, [sp, #24]
     c94:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute(), newtime.second());
     c98:	9300      	str	r3, [sp, #0]
     c9a:	4963      	ldr	r1, [pc, #396]	; (e28 <AdjustTimeAndDate(TS_Point)+0x298>)
     c9c:	9502      	str	r5, [sp, #8]
     c9e:	f3c0 4307 	ubfx	r3, r0, #16, #8
     ca2:	9201      	str	r2, [sp, #4]
     ca4:	9603      	str	r6, [sp, #12]
     ca6:	f3c0 2207 	ubfx	r2, r0, #8, #8
     caa:	485d      	ldr	r0, [pc, #372]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     cac:	f007 fb0c 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
     cb0:	a806      	add	r0, sp, #24
     cb2:	f005 fe8d 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
     cb6:	4620      	mov	r0, r4
     cb8:	f005 fda2 	bl	6800 <RTC_DS3231::now()>
     cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute(), now.second());
     cc0:	b2c3      	uxtb	r3, r0
     cc2:	0e02      	lsrs	r2, r0, #24
     cc4:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
     cc8:	f3c1 2507 	ubfx	r5, r1, #8, #8
     ccc:	b2cc      	uxtb	r4, r1
      Serial.printf("Old time is %d/%d/%d %d:%d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute(), now.second());

      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), now.minute(), 0);
      Serial.printf("New time is %d/%d/%d %d:%d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute(), newtime.second());
      rtc.adjust(newtime);
      now = rtc.now();
     cce:	9008      	str	r0, [sp, #32]
     cd0:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute(), now.second());
     cd4:	9300      	str	r3, [sp, #0]
     cd6:	9201      	str	r2, [sp, #4]
     cd8:	f3c0 2307 	ubfx	r3, r0, #8, #8
     cdc:	f3c0 4207 	ubfx	r2, r0, #16, #8
     ce0:	4952      	ldr	r1, [pc, #328]	; (e2c <AdjustTimeAndDate(TS_Point)+0x29c>)
     ce2:	9503      	str	r5, [sp, #12]
     ce4:	9402      	str	r4, [sp, #8]
     ce6:	484e      	ldr	r0, [pc, #312]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     ce8:	f007 faee 	bl	82c8 <Print::printf(char const*, ...)>
      ShowLongTimeDisplay();
     cec:	f7ff fe56 	bl	99c <ShowLongTimeDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
     cf0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     cf4:	f006 f92c 	bl	6f50 <delay>
      delay(500); //prevent multiple NEXT transitions
    }
    break;
  case ADJ_SEC:
    Serial.print("In GetCurAdjState ADJ_SEC case\n");
    adjstate = ADJ_SEC;
     cf8:	2003      	movs	r0, #3
    break;
  }

  //Serial.printf("AdjustTimeAndDate(%d, %d) returns %d\n", Dp.x, Dp.y, (int)adjstate);
  return adjstate;
}
     cfa:	b00c      	add	sp, #48	; 0x30
     cfc:	bd70      	pop	{r4, r5, r6, pc}
     cfe:	2121      	movs	r1, #33	; 0x21
     d00:	484b      	ldr	r0, [pc, #300]	; (e30 <AdjustTimeAndDate(TS_Point)+0x2a0>)
     d02:	f007 f92b 	bl	7f5c <usb_serial_write>
     d06:	4b44      	ldr	r3, [pc, #272]	; (e18 <AdjustTimeAndDate(TS_Point)+0x288>)
     d08:	681a      	ldr	r2, [r3, #0]
     d0a:	42a2      	cmp	r2, r4
     d0c:	f280 83c6 	bge.w	149c <AdjustTimeAndDate(TS_Point)+0x90c>
     d10:	6859      	ldr	r1, [r3, #4]
     d12:	42a9      	cmp	r1, r5
     d14:	f280 83c2 	bge.w	149c <AdjustTimeAndDate(TS_Point)+0x90c>
     d18:	6898      	ldr	r0, [r3, #8]
     d1a:	4402      	add	r2, r0
     d1c:	42a2      	cmp	r2, r4
     d1e:	f340 83bd 	ble.w	149c <AdjustTimeAndDate(TS_Point)+0x90c>
     d22:	68db      	ldr	r3, [r3, #12]
     d24:	4419      	add	r1, r3
     d26:	42a9      	cmp	r1, r5
     d28:	f340 83b8 	ble.w	149c <AdjustTimeAndDate(TS_Point)+0x90c>
    Serial.print("In GetCurAdjState ADJ_MONTH case\n");
    adjstate = ADJ_MONTH;

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
     d2c:	4622      	mov	r2, r4
     d2e:	462b      	mov	r3, r5
     d30:	493a      	ldr	r1, [pc, #232]	; (e1c <AdjustTimeAndDate(TS_Point)+0x28c>)
     d32:	483b      	ldr	r0, [pc, #236]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     d34:	f007 fac8 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
     d38:	f89d 1020 	ldrb.w	r1, [sp, #32]
     d3c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     d40:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
     d44:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     d48:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     d4c:	9001      	str	r0, [sp, #4]
     d4e:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     d52:	9100      	str	r1, [sp, #0]
     d54:	9402      	str	r4, [sp, #8]
     d56:	4937      	ldr	r1, [pc, #220]	; (e34 <AdjustTimeAndDate(TS_Point)+0x2a4>)
     d58:	4831      	ldr	r0, [pc, #196]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     d5a:	f007 fab5 	bl	82c8 <Print::printf(char const*, ...)>
      new_month = now.month() + 1;
     d5e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d62:	1c5a      	adds	r2, r3, #1
      if (new_month > 12)
     d64:	2a0c      	cmp	r2, #12
     d66:	dd01      	ble.n	d6c <AdjustTimeAndDate(TS_Point)+0x1dc>
      {
        new_month -= 12;
     d68:	f1a3 020b 	sub.w	r2, r3, #11
      }
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
     d6c:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
     d70:	f89d 1020 	ldrb.w	r1, [sp, #32]
     d74:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
     d78:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
     d7c:	9402      	str	r4, [sp, #8]
     d7e:	ac0a      	add	r4, sp, #40	; 0x28
     d80:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     d84:	9001      	str	r0, [sp, #4]
     d86:	b2d2      	uxtb	r2, r2
     d88:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     d8c:	4620      	mov	r0, r4
     d8e:	9500      	str	r5, [sp, #0]
     d90:	f005 fc38 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     d94:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
     d98:	b2c3      	uxtb	r3, r0
     d9a:	0e02      	lsrs	r2, r0, #24
     d9c:	b2cd      	uxtb	r5, r1
     d9e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
      new_month = now.month() + 1;
      if (new_month > 12)
      {
        new_month -= 12;
      }
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
     da2:	9006      	str	r0, [sp, #24]
     da4:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
     da8:	9300      	str	r3, [sp, #0]
     daa:	4923      	ldr	r1, [pc, #140]	; (e38 <AdjustTimeAndDate(TS_Point)+0x2a8>)
     dac:	9201      	str	r2, [sp, #4]
     dae:	f3c0 4307 	ubfx	r3, r0, #16, #8
     db2:	f3c0 2207 	ubfx	r2, r0, #8, #8
     db6:	9502      	str	r5, [sp, #8]
     db8:	4819      	ldr	r0, [pc, #100]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     dba:	f007 fa85 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
     dbe:	a806      	add	r0, sp, #24
     dc0:	f005 fe06 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
     dc4:	4620      	mov	r0, r4
     dc6:	f005 fd1b 	bl	6800 <RTC_DS3231::now()>
     dca:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
     dce:	b2c3      	uxtb	r3, r0
     dd0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
     dd4:	0e02      	lsrs	r2, r0, #24
     dd6:	b2cc      	uxtb	r4, r1
     dd8:	9300      	str	r3, [sp, #0]
     dda:	9201      	str	r2, [sp, #4]
        new_month -= 12;
      }
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
     ddc:	9008      	str	r0, [sp, #32]
     dde:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
     de2:	9402      	str	r4, [sp, #8]
     de4:	f3c0 4307 	ubfx	r3, r0, #16, #8
     de8:	f3c0 2207 	ubfx	r2, r0, #8, #8
      new_month = (new_month <= 0) ? 12 : new_month;
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
     dec:	4913      	ldr	r1, [pc, #76]	; (e3c <AdjustTimeAndDate(TS_Point)+0x2ac>)
     dee:	480c      	ldr	r0, [pc, #48]	; (e20 <AdjustTimeAndDate(TS_Point)+0x290>)
     df0:	f007 fa6a 	bl	82c8 <Print::printf(char const*, ...)>
      ShowDateDisplay();
     df4:	f7ff fe86 	bl	b04 <ShowDateDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
     df8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     dfc:	f006 f8a8 	bl	6f50 <delay>
    break;
  case ADJ_DAYOFWEEK:
    break;
  case ADJ_MONTH:
    Serial.print("In GetCurAdjState ADJ_MONTH case\n");
    adjstate = ADJ_MONTH;
     e00:	2005      	movs	r0, #5
     e02:	e6f4      	b.n	bee <AdjustTimeAndDate(TS_Point)+0x5e>
     e04:	386d4380 	.word	0x386d4380
     e08:	1fff9640 	.word	0x1fff9640
     e0c:	1fff9658 	.word	0x1fff9658
     e10:	1fff966c 	.word	0x1fff966c
     e14:	0000db68 	.word	0x0000db68
     e18:	1fff9694 	.word	0x1fff9694
     e1c:	0000dc30 	.word	0x0000dc30
     e20:	1fff8a8c 	.word	0x1fff8a8c
     e24:	0000dd10 	.word	0x0000dd10
     e28:	0000dd30 	.word	0x0000dd30
     e2c:	0000dd50 	.word	0x0000dd50
     e30:	0000db88 	.word	0x0000db88
     e34:	0000dc4c 	.word	0x0000dc4c
     e38:	0000db0c 	.word	0x0000db0c
     e3c:	0000db28 	.word	0x0000db28
     e40:	211f      	movs	r1, #31
     e42:	48c5      	ldr	r0, [pc, #788]	; (1158 <AdjustTimeAndDate(TS_Point)+0x5c8>)
     e44:	f007 f88a 	bl	7f5c <usb_serial_write>
     e48:	4bc4      	ldr	r3, [pc, #784]	; (115c <AdjustTimeAndDate(TS_Point)+0x5cc>)
     e4a:	681a      	ldr	r2, [r3, #0]
     e4c:	4294      	cmp	r4, r2
     e4e:	f340 8398 	ble.w	1582 <AdjustTimeAndDate(TS_Point)+0x9f2>
     e52:	6859      	ldr	r1, [r3, #4]
     e54:	428d      	cmp	r5, r1
     e56:	f340 8394 	ble.w	1582 <AdjustTimeAndDate(TS_Point)+0x9f2>
     e5a:	6898      	ldr	r0, [r3, #8]
     e5c:	4402      	add	r2, r0
     e5e:	4294      	cmp	r4, r2
     e60:	f280 838f 	bge.w	1582 <AdjustTimeAndDate(TS_Point)+0x9f2>
     e64:	68db      	ldr	r3, [r3, #12]
     e66:	4419      	add	r1, r3
     e68:	428d      	cmp	r5, r1
     e6a:	f280 838a 	bge.w	1582 <AdjustTimeAndDate(TS_Point)+0x9f2>
    Serial.print("In GetCurAdjState ADJ_DAY case\n");
    adjstate = ADJ_DAY;

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
     e6e:	4622      	mov	r2, r4
     e70:	462b      	mov	r3, r5
     e72:	49bb      	ldr	r1, [pc, #748]	; (1160 <AdjustTimeAndDate(TS_Point)+0x5d0>)
     e74:	48bb      	ldr	r0, [pc, #748]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
     e76:	f007 fa27 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
     e7a:	f89d 1020 	ldrb.w	r1, [sp, #32]
     e7e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     e82:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
     e86:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     e8a:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     e8e:	9001      	str	r0, [sp, #4]
     e90:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     e94:	9100      	str	r1, [sp, #0]
     e96:	9402      	str	r4, [sp, #8]
     e98:	49b3      	ldr	r1, [pc, #716]	; (1168 <AdjustTimeAndDate(TS_Point)+0x5d8>)
     e9a:	48b2      	ldr	r0, [pc, #712]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
     e9c:	f007 fa14 	bl	82c8 <Print::printf(char const*, ...)>
     ea0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    daysOfTheWeek[now.dayOfTheWeek()], now.month(), now.day(), now.year());
}

int AdjustDayValue(int month, int day)
{
  if (day > aDaysInMonth[month - 1])
     ea4:	4bb1      	ldr	r3, [pc, #708]	; (116c <AdjustTimeAndDate(TS_Point)+0x5dc>)

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      new_day = AdjustDayValue(now.month(), now.day() + 1); //not all months have same number of days
     ea6:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    daysOfTheWeek[now.dayOfTheWeek()], now.month(), now.day(), now.year());
}

int AdjustDayValue(int month, int day)
{
  if (day > aDaysInMonth[month - 1])
     eaa:	1e50      	subs	r0, r2, #1

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      new_day = AdjustDayValue(now.month(), now.day() + 1); //not all months have same number of days
     eac:	3101      	adds	r1, #1
    daysOfTheWeek[now.dayOfTheWeek()], now.month(), now.day(), now.year());
}

int AdjustDayValue(int month, int day)
{
  if (day > aDaysInMonth[month - 1])
     eae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     eb2:	4299      	cmp	r1, r3
     eb4:	f300 84aa 	bgt.w	180c <AdjustTimeAndDate(TS_Point)+0xc7c>
     eb8:	b2cb      	uxtb	r3, r1
    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      new_day = AdjustDayValue(now.month(), now.day() + 1); //not all months have same number of days
      newtime = DateTime(now.year(), now.month(), new_day, now.hour(), now.minute(), now.second());
     eba:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
     ebe:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
     ec2:	f89d 1020 	ldrb.w	r1, [sp, #32]
     ec6:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
     eca:	9402      	str	r4, [sp, #8]
     ecc:	9001      	str	r0, [sp, #4]
     ece:	ac0a      	add	r4, sp, #40	; 0x28
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      new_day = now.day() - 1;
      new_day = (new_day <= 0) ? aDaysInMonth[now.month() - 1] : new_day;
      newtime = DateTime(now.year(), now.month(), new_day, now.hour(), now.minute(), now.second());
     ed0:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     ed4:	4620      	mov	r0, r4
     ed6:	9500      	str	r5, [sp, #0]
     ed8:	f005 fb94 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     edc:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
     ee0:	b2c3      	uxtb	r3, r0
     ee2:	0e02      	lsrs	r2, r0, #24
     ee4:	b2cd      	uxtb	r5, r1
     ee6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      new_day = now.day() - 1;
      new_day = (new_day <= 0) ? aDaysInMonth[now.month() - 1] : new_day;
      newtime = DateTime(now.year(), now.month(), new_day, now.hour(), now.minute(), now.second());
     eea:	9006      	str	r0, [sp, #24]
     eec:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
     ef0:	9300      	str	r3, [sp, #0]
     ef2:	499f      	ldr	r1, [pc, #636]	; (1170 <AdjustTimeAndDate(TS_Point)+0x5e0>)
     ef4:	9201      	str	r2, [sp, #4]
     ef6:	f3c0 4307 	ubfx	r3, r0, #16, #8
     efa:	f3c0 2207 	ubfx	r2, r0, #8, #8
     efe:	9502      	str	r5, [sp, #8]
     f00:	4898      	ldr	r0, [pc, #608]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
     f02:	f007 f9e1 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
     f06:	a806      	add	r0, sp, #24
     f08:	f005 fd62 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
     f0c:	4620      	mov	r0, r4
     f0e:	f005 fc77 	bl	6800 <RTC_DS3231::now()>
     f12:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
     f16:	b2c3      	uxtb	r3, r0
     f18:	0e02      	lsrs	r2, r0, #24
     f1a:	b2cc      	uxtb	r4, r1
     f1c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
      new_day = now.day() - 1;
      new_day = (new_day <= 0) ? aDaysInMonth[now.month() - 1] : new_day;
      newtime = DateTime(now.year(), now.month(), new_day, now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
     f20:	9008      	str	r0, [sp, #32]
     f22:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
     f26:	9300      	str	r3, [sp, #0]
     f28:	9201      	str	r2, [sp, #4]
     f2a:	f3c0 2307 	ubfx	r3, r0, #8, #8
     f2e:	f3c0 4207 	ubfx	r2, r0, #16, #8
     f32:	4990      	ldr	r1, [pc, #576]	; (1174 <AdjustTimeAndDate(TS_Point)+0x5e4>)
     f34:	9402      	str	r4, [sp, #8]
     f36:	488b      	ldr	r0, [pc, #556]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
     f38:	f007 f9c6 	bl	82c8 <Print::printf(char const*, ...)>
      ShowDateDisplay();
     f3c:	f7ff fde2 	bl	b04 <ShowDateDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
     f40:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f44:	f006 f804 	bl	6f50 <delay>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_DAY;
     f48:	2006      	movs	r0, #6
    break;
  }

  //Serial.printf("AdjustTimeAndDate(%d, %d) returns %d\n", Dp.x, Dp.y, (int)adjstate);
  return adjstate;
}
     f4a:	b00c      	add	sp, #48	; 0x30
     f4c:	bd70      	pop	{r4, r5, r6, pc}
     f4e:	2120      	movs	r1, #32
     f50:	4889      	ldr	r0, [pc, #548]	; (1178 <AdjustTimeAndDate(TS_Point)+0x5e8>)
     f52:	f007 f803 	bl	7f5c <usb_serial_write>
     f56:	4b81      	ldr	r3, [pc, #516]	; (115c <AdjustTimeAndDate(TS_Point)+0x5cc>)
     f58:	681a      	ldr	r2, [r3, #0]
     f5a:	4294      	cmp	r4, r2
     f5c:	f340 8355 	ble.w	160a <AdjustTimeAndDate(TS_Point)+0xa7a>
     f60:	6859      	ldr	r1, [r3, #4]
     f62:	428d      	cmp	r5, r1
     f64:	f340 8351 	ble.w	160a <AdjustTimeAndDate(TS_Point)+0xa7a>
     f68:	6898      	ldr	r0, [r3, #8]
     f6a:	4402      	add	r2, r0
     f6c:	4294      	cmp	r4, r2
     f6e:	f280 834c 	bge.w	160a <AdjustTimeAndDate(TS_Point)+0xa7a>
     f72:	68db      	ldr	r3, [r3, #12]
     f74:	4419      	add	r1, r3
     f76:	428d      	cmp	r5, r1
     f78:	f280 8347 	bge.w	160a <AdjustTimeAndDate(TS_Point)+0xa7a>
    Serial.print("In GetCurAdjState ADJ_HOUR case\n");
    adjstate = ADJ_HOUR;

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
     f7c:	4622      	mov	r2, r4
     f7e:	462b      	mov	r3, r5
     f80:	4977      	ldr	r1, [pc, #476]	; (1160 <AdjustTimeAndDate(TS_Point)+0x5d0>)
     f82:	4878      	ldr	r0, [pc, #480]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
     f84:	f007 f9a0 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
     f88:	f89d 1020 	ldrb.w	r1, [sp, #32]
     f8c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
     f90:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
     f94:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f98:	9001      	str	r0, [sp, #4]
     f9a:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     f9e:	9100      	str	r1, [sp, #0]
     fa0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     fa4:	9402      	str	r4, [sp, #8]
     fa6:	4970      	ldr	r1, [pc, #448]	; (1168 <AdjustTimeAndDate(TS_Point)+0x5d8>)
     fa8:	486e      	ldr	r0, [pc, #440]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
     faa:	f007 f98d 	bl	82c8 <Print::printf(char const*, ...)>
      new_hour = now.hour() + 1;
     fae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     fb2:	1c58      	adds	r0, r3, #1
      if (new_hour >= 24)
     fb4:	2817      	cmp	r0, #23
     fb6:	dd01      	ble.n	fbc <AdjustTimeAndDate(TS_Point)+0x42c>
      {
        new_hour -= 24;
     fb8:	f1a3 0017 	sub.w	r0, r3, #23
      new_hour = now.hour() - 1;
      if (new_hour < 0)
      {
        new_hour += 24;
      }
      newtime = DateTime(now.year(), now.month(), now.day(), new_hour, now.minute(), now.second());
     fbc:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
     fc0:	f89d 1020 	ldrb.w	r1, [sp, #32]
     fc4:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
     fc8:	9402      	str	r4, [sp, #8]
     fca:	b2c0      	uxtb	r0, r0
     fcc:	ac0a      	add	r4, sp, #40	; 0x28
     fce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     fd2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     fd6:	9000      	str	r0, [sp, #0]
     fd8:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
     fdc:	4620      	mov	r0, r4
     fde:	9501      	str	r5, [sp, #4]
     fe0:	f005 fb10 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
     fe4:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
     fe8:	b2c3      	uxtb	r3, r0
     fea:	0e02      	lsrs	r2, r0, #24
     fec:	b2cd      	uxtb	r5, r1
     fee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
      new_hour = now.hour() - 1;
      if (new_hour < 0)
      {
        new_hour += 24;
      }
      newtime = DateTime(now.year(), now.month(), now.day(), new_hour, now.minute(), now.second());
     ff2:	9006      	str	r0, [sp, #24]
     ff4:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
     ff8:	9300      	str	r3, [sp, #0]
     ffa:	495d      	ldr	r1, [pc, #372]	; (1170 <AdjustTimeAndDate(TS_Point)+0x5e0>)
     ffc:	9201      	str	r2, [sp, #4]
     ffe:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1002:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1006:	9502      	str	r5, [sp, #8]
    1008:	4856      	ldr	r0, [pc, #344]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
    100a:	f007 f95d 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
    100e:	a806      	add	r0, sp, #24
    1010:	f005 fcde 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
    1014:	4620      	mov	r0, r4
    1016:	f005 fbf3 	bl	6800 <RTC_DS3231::now()>
    101a:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    101e:	b2c3      	uxtb	r3, r0
    1020:	0e02      	lsrs	r2, r0, #24
    1022:	b2cc      	uxtb	r4, r1
    1024:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
        new_hour += 24;
      }
      newtime = DateTime(now.year(), now.month(), now.day(), new_hour, now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
    1028:	9008      	str	r0, [sp, #32]
    102a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    102e:	9300      	str	r3, [sp, #0]
    1030:	4950      	ldr	r1, [pc, #320]	; (1174 <AdjustTimeAndDate(TS_Point)+0x5e4>)
    1032:	9201      	str	r2, [sp, #4]
    1034:	f3c0 2307 	ubfx	r3, r0, #8, #8
    1038:	f3c0 4207 	ubfx	r2, r0, #16, #8
    103c:	9402      	str	r4, [sp, #8]
    103e:	4849      	ldr	r0, [pc, #292]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
    1040:	f007 f942 	bl	82c8 <Print::printf(char const*, ...)>
      ShowLongTimeDisplay();
    1044:	f7ff fcaa 	bl	99c <ShowLongTimeDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    1048:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    104c:	f005 ff80 	bl	6f50 <delay>
      ShowHighlightBar(ADJ_MONTH);
    }
    break;
  case ADJ_HOUR:
    Serial.print("In GetCurAdjState ADJ_HOUR case\n");
    adjstate = ADJ_HOUR;
    1050:	2001      	movs	r0, #1
    1052:	e5cc      	b.n	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    1054:	211f      	movs	r1, #31
    1056:	4849      	ldr	r0, [pc, #292]	; (117c <AdjustTimeAndDate(TS_Point)+0x5ec>)
    1058:	f006 ff80 	bl	7f5c <usb_serial_write>
    105c:	4b3f      	ldr	r3, [pc, #252]	; (115c <AdjustTimeAndDate(TS_Point)+0x5cc>)
    105e:	681a      	ldr	r2, [r3, #0]
    1060:	4294      	cmp	r4, r2
    1062:	f340 818c 	ble.w	137e <AdjustTimeAndDate(TS_Point)+0x7ee>
    1066:	6859      	ldr	r1, [r3, #4]
    1068:	428d      	cmp	r5, r1
    106a:	f340 8188 	ble.w	137e <AdjustTimeAndDate(TS_Point)+0x7ee>
    106e:	6898      	ldr	r0, [r3, #8]
    1070:	4402      	add	r2, r0
    1072:	4294      	cmp	r4, r2
    1074:	f280 8183 	bge.w	137e <AdjustTimeAndDate(TS_Point)+0x7ee>
    1078:	68db      	ldr	r3, [r3, #12]
    107a:	4419      	add	r1, r3
    107c:	428d      	cmp	r5, r1
    107e:	f280 817e 	bge.w	137e <AdjustTimeAndDate(TS_Point)+0x7ee>
    Serial.print("In GetCurAdjState ADJ_MIN case\n");
    adjstate = ADJ_MIN;

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
    1082:	4622      	mov	r2, r4
    1084:	462b      	mov	r3, r5
    1086:	4936      	ldr	r1, [pc, #216]	; (1160 <AdjustTimeAndDate(TS_Point)+0x5d0>)
    1088:	4836      	ldr	r0, [pc, #216]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
    108a:	f007 f91d 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    108e:	f89d 1020 	ldrb.w	r1, [sp, #32]
    1092:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    1096:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    109a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    109e:	9001      	str	r0, [sp, #4]
    10a0:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    10a4:	9100      	str	r1, [sp, #0]
    10a6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    10aa:	9402      	str	r4, [sp, #8]
    10ac:	492e      	ldr	r1, [pc, #184]	; (1168 <AdjustTimeAndDate(TS_Point)+0x5d8>)
    10ae:	482d      	ldr	r0, [pc, #180]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
    10b0:	f007 f90a 	bl	82c8 <Print::printf(char const*, ...)>
      new_minute = now.minute() + 1;
    10b4:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    10b8:	3301      	adds	r3, #1
      if (new_minute >= 60)
    10ba:	2b3b      	cmp	r3, #59	; 0x3b
    10bc:	f340 83a4 	ble.w	1808 <AdjustTimeAndDate(TS_Point)+0xc78>
    10c0:	2000      	movs	r0, #0
      {
        new_minute = 0;
      }

      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), new_minute, now.second());
    10c2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    10c6:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
    10ca:	f89d 6025 	ldrb.w	r6, [sp, #37]	; 0x25
    10ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10d2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    10d6:	9001      	str	r0, [sp, #4]
    10d8:	ac0a      	add	r4, sp, #40	; 0x28
    10da:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    10de:	4620      	mov	r0, r4
    10e0:	9500      	str	r5, [sp, #0]
    10e2:	9602      	str	r6, [sp, #8]
    10e4:	f005 fa8e 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    10e8:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    10ec:	b2c3      	uxtb	r3, r0
    10ee:	0e02      	lsrs	r2, r0, #24
    10f0:	b2cd      	uxtb	r5, r1
    10f2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
      if (new_minute >= 60)
      {
        new_minute = 0;
      }

      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), new_minute, now.second());
    10f6:	9006      	str	r0, [sp, #24]
    10f8:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    10fc:	9300      	str	r3, [sp, #0]
    10fe:	491c      	ldr	r1, [pc, #112]	; (1170 <AdjustTimeAndDate(TS_Point)+0x5e0>)
    1100:	9201      	str	r2, [sp, #4]
    1102:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1106:	f3c0 2207 	ubfx	r2, r0, #8, #8
    110a:	9502      	str	r5, [sp, #8]
    110c:	4815      	ldr	r0, [pc, #84]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
    110e:	f007 f8db 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
    1112:	a806      	add	r0, sp, #24
    1114:	f005 fc5c 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
    1118:	4620      	mov	r0, r4
    111a:	f005 fb71 	bl	6800 <RTC_DS3231::now()>
    111e:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    1122:	b2c3      	uxtb	r3, r0
    1124:	0e02      	lsrs	r2, r0, #24
    1126:	b2cc      	uxtb	r4, r1
    1128:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
      }

      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), new_minute, now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
    112c:	9008      	str	r0, [sp, #32]
    112e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    1132:	9300      	str	r3, [sp, #0]
    1134:	490f      	ldr	r1, [pc, #60]	; (1174 <AdjustTimeAndDate(TS_Point)+0x5e4>)
    1136:	9201      	str	r2, [sp, #4]
    1138:	f3c0 2307 	ubfx	r3, r0, #8, #8
    113c:	f3c0 4207 	ubfx	r2, r0, #16, #8
    1140:	9402      	str	r4, [sp, #8]
    1142:	4808      	ldr	r0, [pc, #32]	; (1164 <AdjustTimeAndDate(TS_Point)+0x5d4>)
    1144:	f007 f8c0 	bl	82c8 <Print::printf(char const*, ...)>
      ShowLongTimeDisplay();
    1148:	f7ff fc28 	bl	99c <ShowLongTimeDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    114c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1150:	f005 fefe 	bl	6f50 <delay>
      delay(500); //prevent multiple NEXT transitions
    }
    break;
  case ADJ_MIN:
    Serial.print("In GetCurAdjState ADJ_MIN case\n");
    adjstate = ADJ_MIN;
    1154:	2002      	movs	r0, #2
    1156:	e54a      	b.n	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    1158:	0000dbac 	.word	0x0000dbac
    115c:	1fff9694 	.word	0x1fff9694
    1160:	0000dc30 	.word	0x0000dc30
    1164:	1fff8a8c 	.word	0x1fff8a8c
    1168:	0000dc4c 	.word	0x0000dc4c
    116c:	1fff8864 	.word	0x1fff8864
    1170:	0000db0c 	.word	0x0000db0c
    1174:	0000db28 	.word	0x0000db28
    1178:	0000dae8 	.word	0x0000dae8
    117c:	0000db48 	.word	0x0000db48
    1180:	2120      	movs	r1, #32
    1182:	48b9      	ldr	r0, [pc, #740]	; (1468 <AdjustTimeAndDate(TS_Point)+0x8d8>)
    1184:	f006 feea 	bl	7f5c <usb_serial_write>
    1188:	4bb8      	ldr	r3, [pc, #736]	; (146c <AdjustTimeAndDate(TS_Point)+0x8dc>)
    118a:	681a      	ldr	r2, [r3, #0]
    118c:	4294      	cmp	r4, r2
    118e:	dd71      	ble.n	1274 <AdjustTimeAndDate(TS_Point)+0x6e4>
    1190:	6859      	ldr	r1, [r3, #4]
    1192:	428d      	cmp	r5, r1
    1194:	dd6e      	ble.n	1274 <AdjustTimeAndDate(TS_Point)+0x6e4>
    1196:	6898      	ldr	r0, [r3, #8]
    1198:	4402      	add	r2, r0
    119a:	4294      	cmp	r4, r2
    119c:	da6a      	bge.n	1274 <AdjustTimeAndDate(TS_Point)+0x6e4>
    119e:	68db      	ldr	r3, [r3, #12]
    11a0:	4419      	add	r1, r3
    11a2:	428d      	cmp	r5, r1
    11a4:	da66      	bge.n	1274 <AdjustTimeAndDate(TS_Point)+0x6e4>
    Serial.print("In GetCurAdjState ADJ_YEAR case\n");
    adjstate = ADJ_YEAR;

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
    11a6:	462b      	mov	r3, r5
    11a8:	4622      	mov	r2, r4
    11aa:	49b1      	ldr	r1, [pc, #708]	; (1470 <AdjustTimeAndDate(TS_Point)+0x8e0>)
    11ac:	48b1      	ldr	r0, [pc, #708]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    11ae:	f007 f88b 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    11b2:	f89d 1020 	ldrb.w	r1, [sp, #32]
    11b6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    11ba:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    11be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    11c2:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    11c6:	9402      	str	r4, [sp, #8]
    11c8:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    11cc:	9100      	str	r1, [sp, #0]
    11ce:	9001      	str	r0, [sp, #4]
    11d0:	49a9      	ldr	r1, [pc, #676]	; (1478 <AdjustTimeAndDate(TS_Point)+0x8e8>)
    11d2:	48a8      	ldr	r0, [pc, #672]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    11d4:	f007 f878 	bl	82c8 <Print::printf(char const*, ...)>
      newtime = DateTime(now.year() + 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
    11d8:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    11dc:	f89d 1020 	ldrb.w	r1, [sp, #32]
    11e0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    11e4:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
    11e8:	9402      	str	r4, [sp, #8]
    11ea:	ac0a      	add	r4, sp, #40	; 0x28
    11ec:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    11f0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    11f4:	9001      	str	r0, [sp, #4]
    11f6:	f201 71d1 	addw	r1, r1, #2001	; 0x7d1
    11fa:	4620      	mov	r0, r4
    11fc:	9500      	str	r5, [sp, #0]
    11fe:	f005 fa01 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1202:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    1206:	b2c3      	uxtb	r3, r0
    1208:	0e02      	lsrs	r2, r0, #24
    120a:	b2cd      	uxtb	r5, r1
    120c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0

    if (PlusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      newtime = DateTime(now.year() + 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
    1210:	9006      	str	r0, [sp, #24]
    1212:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    1216:	9300      	str	r3, [sp, #0]
    1218:	4998      	ldr	r1, [pc, #608]	; (147c <AdjustTimeAndDate(TS_Point)+0x8ec>)
    121a:	9201      	str	r2, [sp, #4]
    121c:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1220:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1224:	9502      	str	r5, [sp, #8]
    1226:	4893      	ldr	r0, [pc, #588]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    1228:	f007 f84e 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
    122c:	a806      	add	r0, sp, #24
    122e:	f005 fbcf 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
    1232:	4620      	mov	r0, r4
    1234:	f005 fae4 	bl	6800 <RTC_DS3231::now()>
    1238:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    123c:	b2c3      	uxtb	r3, r0
    123e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    1242:	0e02      	lsrs	r2, r0, #24
    1244:	b2cc      	uxtb	r4, r1
    1246:	9300      	str	r3, [sp, #0]
    1248:	9201      	str	r2, [sp, #4]
      Serial.printf("Plus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      newtime = DateTime(now.year() + 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
    124a:	9008      	str	r0, [sp, #32]
    124c:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    1250:	9402      	str	r4, [sp, #8]
    1252:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1256:	f3c0 2207 	ubfx	r2, r0, #8, #8
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      newtime = DateTime(now.year() - 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    125a:	4989      	ldr	r1, [pc, #548]	; (1480 <AdjustTimeAndDate(TS_Point)+0x8f0>)
    125c:	4885      	ldr	r0, [pc, #532]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    125e:	f007 f833 	bl	82c8 <Print::printf(char const*, ...)>
      ShowDateDisplay();
    1262:	f7ff fc4f 	bl	b04 <ShowDateDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    1266:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    126a:	f005 fe71 	bl	6f50 <delay>
      delay(500); //prevent multiple NEXT transitions
    }
    break;
  case ADJ_YEAR:
    Serial.print("In GetCurAdjState ADJ_YEAR case\n");
    adjstate = ADJ_YEAR;
    126e:	2007      	movs	r0, #7
    break;
  }

  //Serial.printf("AdjustTimeAndDate(%d, %d) returns %d\n", Dp.x, Dp.y, (int)adjstate);
  return adjstate;
}
    1270:	b00c      	add	sp, #48	; 0x30
    1272:	bd70      	pop	{r4, r5, r6, pc}
    1274:	4b83      	ldr	r3, [pc, #524]	; (1484 <AdjustTimeAndDate(TS_Point)+0x8f4>)
    1276:	681a      	ldr	r2, [r3, #0]
    1278:	4294      	cmp	r4, r2
    127a:	f340 8244 	ble.w	1706 <AdjustTimeAndDate(TS_Point)+0xb76>
    127e:	6859      	ldr	r1, [r3, #4]
    1280:	428d      	cmp	r5, r1
    1282:	f340 8240 	ble.w	1706 <AdjustTimeAndDate(TS_Point)+0xb76>
    1286:	6898      	ldr	r0, [r3, #8]
    1288:	4402      	add	r2, r0
    128a:	4294      	cmp	r4, r2
    128c:	f280 823b 	bge.w	1706 <AdjustTimeAndDate(TS_Point)+0xb76>
    1290:	68db      	ldr	r3, [r3, #12]
    1292:	4419      	add	r1, r3
    1294:	428d      	cmp	r5, r1
    1296:	f280 8236 	bge.w	1706 <AdjustTimeAndDate(TS_Point)+0xb76>
      ShowDateDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
    129a:	462b      	mov	r3, r5
    129c:	4622      	mov	r2, r4
    129e:	497a      	ldr	r1, [pc, #488]	; (1488 <AdjustTimeAndDate(TS_Point)+0x8f8>)
    12a0:	4874      	ldr	r0, [pc, #464]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    12a2:	f007 f811 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    12a6:	f89d 1020 	ldrb.w	r1, [sp, #32]
    12aa:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    12ae:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    12b2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    12b6:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    12ba:	9402      	str	r4, [sp, #8]
    12bc:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    12c0:	9100      	str	r1, [sp, #0]
    12c2:	9001      	str	r0, [sp, #4]
    12c4:	496c      	ldr	r1, [pc, #432]	; (1478 <AdjustTimeAndDate(TS_Point)+0x8e8>)
    12c6:	486b      	ldr	r0, [pc, #428]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    12c8:	f006 fffe 	bl	82c8 <Print::printf(char const*, ...)>
      newtime = DateTime(now.year() - 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
    12cc:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    12d0:	f89d 1020 	ldrb.w	r1, [sp, #32]
    12d4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    12d8:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
    12dc:	9402      	str	r4, [sp, #8]
    12de:	ac0a      	add	r4, sp, #40	; 0x28
    12e0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    12e4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    12e8:	9001      	str	r0, [sp, #4]
    12ea:	f201 71cf 	addw	r1, r1, #1999	; 0x7cf
    12ee:	4620      	mov	r0, r4
    12f0:	9500      	str	r5, [sp, #0]
    12f2:	f005 f987 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    12f6:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    12fa:	b2c3      	uxtb	r3, r0
    12fc:	0e02      	lsrs	r2, r0, #24
    12fe:	b2cd      	uxtb	r5, r1
    1300:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      newtime = DateTime(now.year() - 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
    1304:	9006      	str	r0, [sp, #24]
    1306:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    130a:	9300      	str	r3, [sp, #0]
    130c:	495b      	ldr	r1, [pc, #364]	; (147c <AdjustTimeAndDate(TS_Point)+0x8ec>)
    130e:	9201      	str	r2, [sp, #4]
    1310:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1314:	f3c0 2207 	ubfx	r2, r0, #8, #8
    1318:	9502      	str	r5, [sp, #8]
    131a:	4856      	ldr	r0, [pc, #344]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    131c:	f006 ffd4 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
    1320:	a806      	add	r0, sp, #24
    1322:	f005 fb55 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
    1326:	4620      	mov	r0, r4
    1328:	f005 fa6a 	bl	6800 <RTC_DS3231::now()>
    132c:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    1330:	b2c3      	uxtb	r3, r0
    1332:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    1336:	0e02      	lsrs	r2, r0, #24
    1338:	b2cc      	uxtb	r4, r1
    133a:	9300      	str	r3, [sp, #0]
    133c:	9201      	str	r2, [sp, #4]
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      newtime = DateTime(now.year() - 1, now.month(), now.day(), now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
    133e:	9008      	str	r0, [sp, #32]
    1340:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    1344:	9402      	str	r4, [sp, #8]
    1346:	f3c0 2307 	ubfx	r3, r0, #8, #8
    134a:	f3c0 4207 	ubfx	r2, r0, #16, #8
    134e:	e784      	b.n	125a <AdjustTimeAndDate(TS_Point)+0x6ca>
    1350:	4b4c      	ldr	r3, [pc, #304]	; (1484 <AdjustTimeAndDate(TS_Point)+0x8f4>)
    1352:	681a      	ldr	r2, [r3, #0]
    1354:	42a2      	cmp	r2, r4
    1356:	f280 81a2 	bge.w	169e <AdjustTimeAndDate(TS_Point)+0xb0e>
    135a:	6859      	ldr	r1, [r3, #4]
    135c:	42a9      	cmp	r1, r5
    135e:	f280 819e 	bge.w	169e <AdjustTimeAndDate(TS_Point)+0xb0e>
    1362:	6898      	ldr	r0, [r3, #8]
    1364:	4402      	add	r2, r0
    1366:	42a2      	cmp	r2, r4
    1368:	f340 8199 	ble.w	169e <AdjustTimeAndDate(TS_Point)+0xb0e>
    136c:	68db      	ldr	r3, [r3, #12]
    136e:	4419      	add	r1, r3
    1370:	42a9      	cmp	r1, r5
    1372:	f340 8194 	ble.w	169e <AdjustTimeAndDate(TS_Point)+0xb0e>
      ShowLongTimeDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
    1376:	462b      	mov	r3, r5
    1378:	4622      	mov	r2, r4
    137a:	4943      	ldr	r1, [pc, #268]	; (1488 <AdjustTimeAndDate(TS_Point)+0x8f8>)
    137c:	e453      	b.n	c26 <AdjustTimeAndDate(TS_Point)+0x96>
    137e:	4b41      	ldr	r3, [pc, #260]	; (1484 <AdjustTimeAndDate(TS_Point)+0x8f4>)
    1380:	681a      	ldr	r2, [r3, #0]
    1382:	4294      	cmp	r4, r2
    1384:	f340 81dc 	ble.w	1740 <AdjustTimeAndDate(TS_Point)+0xbb0>
    1388:	6859      	ldr	r1, [r3, #4]
    138a:	428d      	cmp	r5, r1
    138c:	f340 81d8 	ble.w	1740 <AdjustTimeAndDate(TS_Point)+0xbb0>
    1390:	6898      	ldr	r0, [r3, #8]
    1392:	4402      	add	r2, r0
    1394:	4294      	cmp	r4, r2
    1396:	f280 81d3 	bge.w	1740 <AdjustTimeAndDate(TS_Point)+0xbb0>
    139a:	68db      	ldr	r3, [r3, #12]
    139c:	4419      	add	r1, r3
    139e:	428d      	cmp	r5, r1
    13a0:	f280 81ce 	bge.w	1740 <AdjustTimeAndDate(TS_Point)+0xbb0>
      ShowLongTimeDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
    13a4:	462b      	mov	r3, r5
    13a6:	4622      	mov	r2, r4
    13a8:	4937      	ldr	r1, [pc, #220]	; (1488 <AdjustTimeAndDate(TS_Point)+0x8f8>)
    13aa:	4832      	ldr	r0, [pc, #200]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    13ac:	f006 ff8c 	bl	82c8 <Print::printf(char const*, ...)>
      newtime = DateTime(now.year(), now.month(), now.day(), now.hour(), now.minute() - 1);
    13b0:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    13b4:	f89d 4023 	ldrb.w	r4, [sp, #35]	; 0x23
    13b8:	f89d 1020 	ldrb.w	r1, [sp, #32]
    13bc:	9400      	str	r4, [sp, #0]
    13be:	3801      	subs	r0, #1
    13c0:	b2c0      	uxtb	r0, r0
    13c2:	ac0a      	add	r4, sp, #40	; 0x28
    13c4:	2500      	movs	r5, #0
    13c6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    13ca:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    13ce:	9001      	str	r0, [sp, #4]
    13d0:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    13d4:	4620      	mov	r0, r4
    13d6:	9502      	str	r5, [sp, #8]
    13d8:	f005 f914 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    13dc:	e894 0003 	ldmia.w	r4, {r0, r1}
    13e0:	9006      	str	r0, [sp, #24]
    13e2:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("ADJ_HOUR case in DoMinusOp().  Decrementing Hour Value\n");
    13e6:	4823      	ldr	r0, [pc, #140]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    13e8:	4928      	ldr	r1, [pc, #160]	; (148c <AdjustTimeAndDate(TS_Point)+0x8fc>)
    13ea:	f006 ff6d 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d:%d:%d:%d\n", now.day(), now.month(), now.year(), now.hour());
    13ee:	f89d 1020 	ldrb.w	r1, [sp, #32]
    13f2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    13f6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    13fa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    13fe:	9001      	str	r0, [sp, #4]
    1400:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    1404:	9100      	str	r1, [sp, #0]
    1406:	481b      	ldr	r0, [pc, #108]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    1408:	4921      	ldr	r1, [pc, #132]	; (1490 <AdjustTimeAndDate(TS_Point)+0x900>)
    140a:	f006 ff5d 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("New time is %d:%d:%d:%d\n", newtime.day(), newtime.month(), newtime.year(), newtime.hour());
    140e:	f89d 1018 	ldrb.w	r1, [sp, #24]
    1412:	f89d 001b 	ldrb.w	r0, [sp, #27]
    1416:	f89d 3019 	ldrb.w	r3, [sp, #25]
    141a:	f89d 201a 	ldrb.w	r2, [sp, #26]
    141e:	9001      	str	r0, [sp, #4]
    1420:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    1424:	9100      	str	r1, [sp, #0]
    1426:	4813      	ldr	r0, [pc, #76]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    1428:	491a      	ldr	r1, [pc, #104]	; (1494 <AdjustTimeAndDate(TS_Point)+0x904>)
    142a:	f006 ff4d 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
    142e:	a806      	add	r0, sp, #24
    1430:	f005 face 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      Serial.printf("RTC now set to %d:%d:%d:%d\n", now.day(), now.month(), now.year(), now.hour());
    1434:	f89d 1020 	ldrb.w	r1, [sp, #32]
    1438:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    143c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1440:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    1444:	9001      	str	r0, [sp, #4]
    1446:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    144a:	9100      	str	r1, [sp, #0]
    144c:	4809      	ldr	r0, [pc, #36]	; (1474 <AdjustTimeAndDate(TS_Point)+0x8e4>)
    144e:	4912      	ldr	r1, [pc, #72]	; (1498 <AdjustTimeAndDate(TS_Point)+0x908>)
    1450:	f006 ff3a 	bl	82c8 <Print::printf(char const*, ...)>
      ShowLongTimeDisplay();
    1454:	f7ff faa2 	bl	99c <ShowLongTimeDisplay()>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    1458:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    145c:	f005 fd78 	bl	6f50 <delay>
      delay(500); //prevent multiple NEXT transitions
    }
    break;
  case ADJ_MIN:
    Serial.print("In GetCurAdjState ADJ_MIN case\n");
    adjstate = ADJ_MIN;
    1460:	2002      	movs	r0, #2
    1462:	f7ff bbc4 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    1466:	bf00      	nop
    1468:	0000dc0c 	.word	0x0000dc0c
    146c:	1fff9694 	.word	0x1fff9694
    1470:	0000dc30 	.word	0x0000dc30
    1474:	1fff8a8c 	.word	0x1fff8a8c
    1478:	0000dc4c 	.word	0x0000dc4c
    147c:	0000db0c 	.word	0x0000db0c
    1480:	0000db28 	.word	0x0000db28
    1484:	1fff9600 	.word	0x1fff9600
    1488:	0000dc68 	.word	0x0000dc68
    148c:	0000dc84 	.word	0x0000dc84
    1490:	0000dcbc 	.word	0x0000dcbc
    1494:	0000dcd8 	.word	0x0000dcd8
    1498:	0000dcf4 	.word	0x0000dcf4
    149c:	4bc3      	ldr	r3, [pc, #780]	; (17ac <AdjustTimeAndDate(TS_Point)+0xc1c>)
    149e:	681a      	ldr	r2, [r3, #0]
    14a0:	4294      	cmp	r4, r2
    14a2:	f340 8119 	ble.w	16d8 <AdjustTimeAndDate(TS_Point)+0xb48>
    14a6:	6859      	ldr	r1, [r3, #4]
    14a8:	428d      	cmp	r5, r1
    14aa:	f340 8115 	ble.w	16d8 <AdjustTimeAndDate(TS_Point)+0xb48>
    14ae:	6898      	ldr	r0, [r3, #8]
    14b0:	4402      	add	r2, r0
    14b2:	4294      	cmp	r4, r2
    14b4:	f280 8110 	bge.w	16d8 <AdjustTimeAndDate(TS_Point)+0xb48>
    14b8:	68db      	ldr	r3, [r3, #12]
    14ba:	4419      	add	r1, r3
    14bc:	428d      	cmp	r5, r1
    14be:	f280 810b 	bge.w	16d8 <AdjustTimeAndDate(TS_Point)+0xb48>
      ShowDateDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
    14c2:	4622      	mov	r2, r4
    14c4:	462b      	mov	r3, r5
    14c6:	49ba      	ldr	r1, [pc, #744]	; (17b0 <AdjustTimeAndDate(TS_Point)+0xc20>)
    14c8:	48ba      	ldr	r0, [pc, #744]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    14ca:	f006 fefd 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    14ce:	f89d 1020 	ldrb.w	r1, [sp, #32]
    14d2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    14d6:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    14da:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    14de:	9001      	str	r0, [sp, #4]
    14e0:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    14e4:	9100      	str	r1, [sp, #0]
    14e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    14ea:	9402      	str	r4, [sp, #8]
    14ec:	49b2      	ldr	r1, [pc, #712]	; (17b8 <AdjustTimeAndDate(TS_Point)+0xc28>)
    14ee:	48b1      	ldr	r0, [pc, #708]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    14f0:	f006 feea 	bl	82c8 <Print::printf(char const*, ...)>
      new_month = now.month() - 1;
    14f4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    14f8:	3a01      	subs	r2, #1
      new_month = (new_month <= 0) ? 12 : new_month;
    14fa:	2a00      	cmp	r2, #0
    14fc:	f340 8190 	ble.w	1820 <AdjustTimeAndDate(TS_Point)+0xc90>
    1500:	b2d2      	uxtb	r2, r2
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
    1502:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    1506:	f89d 1020 	ldrb.w	r1, [sp, #32]
    150a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    150e:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
    1512:	9402      	str	r4, [sp, #8]
    1514:	ac0a      	add	r4, sp, #40	; 0x28
    1516:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    151a:	9001      	str	r0, [sp, #4]
    151c:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    1520:	4620      	mov	r0, r4
    1522:	9500      	str	r5, [sp, #0]
    1524:	f005 f86e 	bl	6604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1528:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    152c:	b2c3      	uxtb	r3, r0
    152e:	0e02      	lsrs	r2, r0, #24
    1530:	b2cd      	uxtb	r5, r1
    1532:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
      new_month = now.month() - 1;
      new_month = (new_month <= 0) ? 12 : new_month;
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
    1536:	9006      	str	r0, [sp, #24]
    1538:	f8ad 101c 	strh.w	r1, [sp, #28]
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
    153c:	9300      	str	r3, [sp, #0]
    153e:	499f      	ldr	r1, [pc, #636]	; (17bc <AdjustTimeAndDate(TS_Point)+0xc2c>)
    1540:	9201      	str	r2, [sp, #4]
    1542:	f3c0 4307 	ubfx	r3, r0, #16, #8
    1546:	f3c0 2207 	ubfx	r2, r0, #8, #8
    154a:	9502      	str	r5, [sp, #8]
    154c:	4899      	ldr	r0, [pc, #612]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    154e:	f006 febb 	bl	82c8 <Print::printf(char const*, ...)>
      rtc.adjust(newtime);
    1552:	a806      	add	r0, sp, #24
    1554:	f005 fa3c 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
      now = rtc.now();
    1558:	4620      	mov	r0, r4
    155a:	f005 f951 	bl	6800 <RTC_DS3231::now()>
    155e:	e894 0003 	ldmia.w	r4, {r0, r1}
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    1562:	b2c3      	uxtb	r3, r0
    1564:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
    1568:	0e02      	lsrs	r2, r0, #24
    156a:	b2cc      	uxtb	r4, r1
    156c:	9300      	str	r3, [sp, #0]
    156e:	9201      	str	r2, [sp, #4]
      new_month = now.month() - 1;
      new_month = (new_month <= 0) ? 12 : new_month;
      newtime = DateTime(now.year(), new_month, now.day(), now.hour(), now.minute(), now.second());
      Serial.printf("New time is %d/%d/%d %d:%d\n", newtime.month(), newtime.day(), newtime.year(), newtime.hour(), newtime.minute());
      rtc.adjust(newtime);
      now = rtc.now();
    1570:	9008      	str	r0, [sp, #32]
    1572:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
      Serial.printf("RTC now set to %d/%d/%d %d:%d\n", now.day(), now.month(), now.year(), now.hour(), now.minute());
    1576:	9402      	str	r4, [sp, #8]
    1578:	f3c0 2307 	ubfx	r3, r0, #8, #8
    157c:	f3c0 4207 	ubfx	r2, r0, #16, #8
    1580:	e434      	b.n	dec <AdjustTimeAndDate(TS_Point)+0x25c>
    1582:	4b8a      	ldr	r3, [pc, #552]	; (17ac <AdjustTimeAndDate(TS_Point)+0xc1c>)
    1584:	681a      	ldr	r2, [r3, #0]
    1586:	4294      	cmp	r4, r2
    1588:	f340 80f3 	ble.w	1772 <AdjustTimeAndDate(TS_Point)+0xbe2>
    158c:	6859      	ldr	r1, [r3, #4]
    158e:	428d      	cmp	r5, r1
    1590:	f340 80ef 	ble.w	1772 <AdjustTimeAndDate(TS_Point)+0xbe2>
    1594:	6898      	ldr	r0, [r3, #8]
    1596:	4402      	add	r2, r0
    1598:	4294      	cmp	r4, r2
    159a:	f280 80ea 	bge.w	1772 <AdjustTimeAndDate(TS_Point)+0xbe2>
    159e:	68db      	ldr	r3, [r3, #12]
    15a0:	4419      	add	r1, r3
    15a2:	428d      	cmp	r5, r1
    15a4:	f280 80e5 	bge.w	1772 <AdjustTimeAndDate(TS_Point)+0xbe2>
      ShowDateDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
    15a8:	4622      	mov	r2, r4
    15aa:	462b      	mov	r3, r5
    15ac:	4980      	ldr	r1, [pc, #512]	; (17b0 <AdjustTimeAndDate(TS_Point)+0xc20>)
    15ae:	4881      	ldr	r0, [pc, #516]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    15b0:	f006 fe8a 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    15b4:	f89d 1020 	ldrb.w	r1, [sp, #32]
    15b8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    15bc:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    15c0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    15c4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    15c8:	9001      	str	r0, [sp, #4]
    15ca:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    15ce:	9100      	str	r1, [sp, #0]
    15d0:	9402      	str	r4, [sp, #8]
    15d2:	4979      	ldr	r1, [pc, #484]	; (17b8 <AdjustTimeAndDate(TS_Point)+0xc28>)
    15d4:	4877      	ldr	r0, [pc, #476]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    15d6:	f006 fe77 	bl	82c8 <Print::printf(char const*, ...)>
      new_day = now.day() - 1;
    15da:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    15de:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    15e2:	3b01      	subs	r3, #1
      new_day = (new_day <= 0) ? aDaysInMonth[now.month() - 1] : new_day;
    15e4:	2b00      	cmp	r3, #0
    15e6:	dc03      	bgt.n	15f0 <AdjustTimeAndDate(TS_Point)+0xa60>
    15e8:	4b75      	ldr	r3, [pc, #468]	; (17c0 <AdjustTimeAndDate(TS_Point)+0xc30>)
    15ea:	1e51      	subs	r1, r2, #1
    15ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
      newtime = DateTime(now.year(), now.month(), new_day, now.hour(), now.minute(), now.second());
    15f0:	f89d 4025 	ldrb.w	r4, [sp, #37]	; 0x25
    15f4:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    15f8:	9402      	str	r4, [sp, #8]
    15fa:	f89d 1020 	ldrb.w	r1, [sp, #32]
    15fe:	f89d 5023 	ldrb.w	r5, [sp, #35]	; 0x23
    1602:	9001      	str	r0, [sp, #4]
    1604:	ac0a      	add	r4, sp, #40	; 0x28
    1606:	b2db      	uxtb	r3, r3
    1608:	e462      	b.n	ed0 <AdjustTimeAndDate(TS_Point)+0x340>
    160a:	4b68      	ldr	r3, [pc, #416]	; (17ac <AdjustTimeAndDate(TS_Point)+0xc1c>)
    160c:	681a      	ldr	r2, [r3, #0]
    160e:	4294      	cmp	r4, r2
    1610:	dd2c      	ble.n	166c <AdjustTimeAndDate(TS_Point)+0xadc>
    1612:	6859      	ldr	r1, [r3, #4]
    1614:	428d      	cmp	r5, r1
    1616:	dd29      	ble.n	166c <AdjustTimeAndDate(TS_Point)+0xadc>
    1618:	6898      	ldr	r0, [r3, #8]
    161a:	4402      	add	r2, r0
    161c:	4294      	cmp	r4, r2
    161e:	da25      	bge.n	166c <AdjustTimeAndDate(TS_Point)+0xadc>
    1620:	68db      	ldr	r3, [r3, #12]
    1622:	4419      	add	r1, r3
    1624:	428d      	cmp	r5, r1
    1626:	da21      	bge.n	166c <AdjustTimeAndDate(TS_Point)+0xadc>
      ShowLongTimeDisplay();
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (MinusBox.TouchHit(Dp.x, Dp.y))
    {
      Serial.printf("Minus box touch at (%d,%d)\n", Dp.x, Dp.y);
    1628:	4622      	mov	r2, r4
    162a:	462b      	mov	r3, r5
    162c:	4960      	ldr	r1, [pc, #384]	; (17b0 <AdjustTimeAndDate(TS_Point)+0xc20>)
    162e:	4861      	ldr	r0, [pc, #388]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    1630:	f006 fe4a 	bl	82c8 <Print::printf(char const*, ...)>
      Serial.printf("Old time is %d/%d/%d %d:%d\n", now.month(), now.day(), now.year(), now.hour(), now.minute());
    1634:	f89d 1020 	ldrb.w	r1, [sp, #32]
    1638:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    163c:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
    1640:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1644:	9001      	str	r0, [sp, #4]
    1646:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
    164a:	9100      	str	r1, [sp, #0]
    164c:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    1650:	9402      	str	r4, [sp, #8]
    1652:	4959      	ldr	r1, [pc, #356]	; (17b8 <AdjustTimeAndDate(TS_Point)+0xc28>)
    1654:	4857      	ldr	r0, [pc, #348]	; (17b4 <AdjustTimeAndDate(TS_Point)+0xc24>)
    1656:	f006 fe37 	bl	82c8 <Print::printf(char const*, ...)>
      new_hour = now.hour() - 1;
    165a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
      if (new_hour < 0)
    165e:	1e58      	subs	r0, r3, #1
    1660:	2b00      	cmp	r3, #0
    1662:	f47f acab 	bne.w	fbc <AdjustTimeAndDate(TS_Point)+0x42c>
      {
        new_hour += 24;
    1666:	f103 0017 	add.w	r0, r3, #23
    166a:	e4a7      	b.n	fbc <AdjustTimeAndDate(TS_Point)+0x42c>
    166c:	4b55      	ldr	r3, [pc, #340]	; (17c4 <AdjustTimeAndDate(TS_Point)+0xc34>)
    166e:	681a      	ldr	r2, [r3, #0]
    1670:	4294      	cmp	r4, r2
    1672:	dd2e      	ble.n	16d2 <AdjustTimeAndDate(TS_Point)+0xb42>
    1674:	6859      	ldr	r1, [r3, #4]
    1676:	428d      	cmp	r5, r1
    1678:	dd2b      	ble.n	16d2 <AdjustTimeAndDate(TS_Point)+0xb42>
    167a:	6898      	ldr	r0, [r3, #8]
    167c:	4402      	add	r2, r0
    167e:	4294      	cmp	r4, r2
    1680:	da27      	bge.n	16d2 <AdjustTimeAndDate(TS_Point)+0xb42>
    1682:	68db      	ldr	r3, [r3, #12]
    1684:	4419      	add	r1, r3
    1686:	428d      	cmp	r5, r1
    1688:	da23      	bge.n	16d2 <AdjustTimeAndDate(TS_Point)+0xb42>
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_MIN;
      ShowHighlightBar(ADJ_MIN);
    168a:	2002      	movs	r0, #2
    168c:	f7ff f9ee 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      delay(500); //prevent multiple NEXT transitions
    1690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1694:	f005 fc5c 	bl	6f50 <delay>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_MIN;
    1698:	2002      	movs	r0, #2
    169a:	f7ff baa8 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    169e:	4b49      	ldr	r3, [pc, #292]	; (17c4 <AdjustTimeAndDate(TS_Point)+0xc34>)
    16a0:	681a      	ldr	r2, [r3, #0]
    16a2:	42a2      	cmp	r2, r4
    16a4:	f6bf ab28 	bge.w	cf8 <AdjustTimeAndDate(TS_Point)+0x168>
    16a8:	6859      	ldr	r1, [r3, #4]
    16aa:	42a9      	cmp	r1, r5
    16ac:	f6bf ab24 	bge.w	cf8 <AdjustTimeAndDate(TS_Point)+0x168>
    16b0:	6898      	ldr	r0, [r3, #8]
    16b2:	4402      	add	r2, r0
    16b4:	42a2      	cmp	r2, r4
    16b6:	f77f ab1f 	ble.w	cf8 <AdjustTimeAndDate(TS_Point)+0x168>
    16ba:	68db      	ldr	r3, [r3, #12]
    16bc:	4419      	add	r1, r3
    16be:	42a9      	cmp	r1, r5
    16c0:	f77f ab1a 	ble.w	cf8 <AdjustTimeAndDate(TS_Point)+0x168>
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_HOUR;
      ShowHighlightBar(ADJ_HOUR);
    16c4:	2001      	movs	r0, #1
    16c6:	f7ff f9d1 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      delay(500); //prevent multiple NEXT transitions
    16ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    16ce:	f005 fc3f 	bl	6f50 <delay>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_HOUR;
    16d2:	2001      	movs	r0, #1
    16d4:	f7ff ba8b 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    16d8:	4b3a      	ldr	r3, [pc, #232]	; (17c4 <AdjustTimeAndDate(TS_Point)+0xc34>)
    16da:	681a      	ldr	r2, [r3, #0]
    16dc:	4294      	cmp	r4, r2
    16de:	dd2c      	ble.n	173a <AdjustTimeAndDate(TS_Point)+0xbaa>
    16e0:	6859      	ldr	r1, [r3, #4]
    16e2:	428d      	cmp	r5, r1
    16e4:	dd29      	ble.n	173a <AdjustTimeAndDate(TS_Point)+0xbaa>
    16e6:	6898      	ldr	r0, [r3, #8]
    16e8:	4402      	add	r2, r0
    16ea:	4294      	cmp	r4, r2
    16ec:	da25      	bge.n	173a <AdjustTimeAndDate(TS_Point)+0xbaa>
    16ee:	68db      	ldr	r3, [r3, #12]
    16f0:	4419      	add	r1, r3
    16f2:	428d      	cmp	r5, r1
    16f4:	da21      	bge.n	173a <AdjustTimeAndDate(TS_Point)+0xbaa>
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_DAY;
      ShowHighlightBar(ADJ_DAY);
    16f6:	2006      	movs	r0, #6
    16f8:	f7ff f9b8 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      delay(500); //prevent multiple NEXT transitions
    16fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1700:	f005 fc26 	bl	6f50 <delay>
    1704:	e420      	b.n	f48 <AdjustTimeAndDate(TS_Point)+0x3b8>
    1706:	4b2f      	ldr	r3, [pc, #188]	; (17c4 <AdjustTimeAndDate(TS_Point)+0xc34>)
    1708:	681a      	ldr	r2, [r3, #0]
    170a:	4294      	cmp	r4, r2
    170c:	f77f adaf 	ble.w	126e <AdjustTimeAndDate(TS_Point)+0x6de>
    1710:	6859      	ldr	r1, [r3, #4]
    1712:	428d      	cmp	r5, r1
    1714:	f77f adab 	ble.w	126e <AdjustTimeAndDate(TS_Point)+0x6de>
    1718:	6898      	ldr	r0, [r3, #8]
    171a:	4402      	add	r2, r0
    171c:	4294      	cmp	r4, r2
    171e:	f6bf ada6 	bge.w	126e <AdjustTimeAndDate(TS_Point)+0x6de>
    1722:	68db      	ldr	r3, [r3, #12]
    1724:	4419      	add	r1, r3
    1726:	428d      	cmp	r5, r1
    1728:	f6bf ada1 	bge.w	126e <AdjustTimeAndDate(TS_Point)+0x6de>
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_MONTH;
      ShowHighlightBar(ADJ_MONTH);
    172c:	2005      	movs	r0, #5
    172e:	f7ff f99d 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      delay(500); //prevent multiple NEXT transitions
    1732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1736:	f005 fc0b 	bl	6f50 <delay>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_MONTH;
    173a:	2005      	movs	r0, #5
  default:
    break;
  }

  //Serial.printf("AdjustTimeAndDate(%d, %d) returns %d\n", Dp.x, Dp.y, (int)adjstate);
  return adjstate;
    173c:	f7ff ba57 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    1740:	4b20      	ldr	r3, [pc, #128]	; (17c4 <AdjustTimeAndDate(TS_Point)+0xc34>)
    1742:	681a      	ldr	r2, [r3, #0]
    1744:	4294      	cmp	r4, r2
    1746:	dda7      	ble.n	1698 <AdjustTimeAndDate(TS_Point)+0xb08>
    1748:	6859      	ldr	r1, [r3, #4]
    174a:	428d      	cmp	r5, r1
    174c:	dda4      	ble.n	1698 <AdjustTimeAndDate(TS_Point)+0xb08>
    174e:	6898      	ldr	r0, [r3, #8]
    1750:	4402      	add	r2, r0
    1752:	4294      	cmp	r4, r2
    1754:	daa0      	bge.n	1698 <AdjustTimeAndDate(TS_Point)+0xb08>
    1756:	68db      	ldr	r3, [r3, #12]
    1758:	4419      	add	r1, r3
    175a:	428d      	cmp	r5, r1
    175c:	da9c      	bge.n	1698 <AdjustTimeAndDate(TS_Point)+0xb08>
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_SEC;
      ShowHighlightBar(ADJ_SEC);
    175e:	2003      	movs	r0, #3
    1760:	f7ff f984 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      delay(500); //prevent multiple NEXT transitions
    1764:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1768:	f005 fbf2 	bl	6f50 <delay>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_SEC;
    176c:	2003      	movs	r0, #3
    176e:	f7ff ba3e 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    1772:	4b14      	ldr	r3, [pc, #80]	; (17c4 <AdjustTimeAndDate(TS_Point)+0xc34>)
    1774:	681a      	ldr	r2, [r3, #0]
    1776:	4294      	cmp	r4, r2
    1778:	f77f abe6 	ble.w	f48 <AdjustTimeAndDate(TS_Point)+0x3b8>
    177c:	6859      	ldr	r1, [r3, #4]
    177e:	428d      	cmp	r5, r1
    1780:	f77f abe2 	ble.w	f48 <AdjustTimeAndDate(TS_Point)+0x3b8>
    1784:	6898      	ldr	r0, [r3, #8]
    1786:	4402      	add	r2, r0
    1788:	4294      	cmp	r4, r2
    178a:	f6bf abdd 	bge.w	f48 <AdjustTimeAndDate(TS_Point)+0x3b8>
    178e:	68db      	ldr	r3, [r3, #12]
    1790:	4419      	add	r1, r3
    1792:	428d      	cmp	r5, r1
    1794:	f6bf abd8 	bge.w	f48 <AdjustTimeAndDate(TS_Point)+0x3b8>
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_YEAR;
      ShowHighlightBar(ADJ_YEAR);
    1798:	2007      	movs	r0, #7
    179a:	f7ff f967 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      delay(500); //prevent multiple NEXT transitions
    179e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    17a2:	f005 fbd5 	bl	6f50 <delay>
      delay(500);  //delay for a while to avoid multiple 'add' operations
    }
    else if (NextBox.TouchHit(Dp.x, Dp.y))
    {
      //Serial.printf("Next box touch at (%d,%d)\n", Dp.x, Dp.y);
      adjstate = ADJ_YEAR;
    17a6:	2007      	movs	r0, #7
    17a8:	f7ff ba21 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    17ac:	1fff9600 	.word	0x1fff9600
    17b0:	0000dc68 	.word	0x0000dc68
    17b4:	1fff8a8c 	.word	0x1fff8a8c
    17b8:	0000dc4c 	.word	0x0000dc4c
    17bc:	0000db0c 	.word	0x0000db0c
    17c0:	1fff8864 	.word	0x1fff8864
    17c4:	1fff95e8 	.word	0x1fff95e8
    17c8:	6898      	ldr	r0, [r3, #8]
    17ca:	4402      	add	r2, r0
    17cc:	4294      	cmp	r4, r2
    17ce:	f6bf aa05 	bge.w	bdc <AdjustTimeAndDate(TS_Point)+0x4c>
    17d2:	68db      	ldr	r3, [r3, #12]
    17d4:	4419      	add	r1, r3
    17d6:	428d      	cmp	r5, r1
    17d8:	f6bf aa00 	bge.w	bdc <AdjustTimeAndDate(TS_Point)+0x4c>
  {
  case ADJ_NONE:
    if (TimeBox.TouchHit(Dp.x, Dp.y))
    {
      adjstate = ADJ_HOUR; //always start with hour
      ShowHighlightBar(ADJ_HOUR);
    17dc:	2001      	movs	r0, #1
    17de:	f7ff f945 	bl	a6c <ShowHighlightBar(AdjustmentState)>
  switch (CurAdjState)
  {
  case ADJ_NONE:
    if (TimeBox.TouchHit(Dp.x, Dp.y))
    {
      adjstate = ADJ_HOUR; //always start with hour
    17e2:	2001      	movs	r0, #1
    17e4:	f7ff ba03 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    17e8:	6898      	ldr	r0, [r3, #8]
    17ea:	4402      	add	r2, r0
    17ec:	4294      	cmp	r4, r2
    17ee:	f6bf a9fd 	bge.w	bec <AdjustTimeAndDate(TS_Point)+0x5c>
    17f2:	68db      	ldr	r3, [r3, #12]
    17f4:	4419      	add	r1, r3
    17f6:	428d      	cmp	r5, r1
    17f8:	f6bf a9f8 	bge.w	bec <AdjustTimeAndDate(TS_Point)+0x5c>
      ShowHighlightBar(ADJ_HOUR);
    }
    else if (DateBox.TouchHit(Dp.x, Dp.y))
    {
      adjstate = ADJ_MONTH; //always start with month
      ShowHighlightBar(ADJ_MONTH);
    17fc:	2005      	movs	r0, #5
    17fe:	f7ff f935 	bl	a6c <ShowHighlightBar(AdjustmentState)>
      adjstate = ADJ_HOUR; //always start with hour
      ShowHighlightBar(ADJ_HOUR);
    }
    else if (DateBox.TouchHit(Dp.x, Dp.y))
    {
      adjstate = ADJ_MONTH; //always start with month
    1802:	2005      	movs	r0, #5
    1804:	f7ff b9f3 	b.w	bee <AdjustTimeAndDate(TS_Point)+0x5e>
    1808:	b2d8      	uxtb	r0, r3
    180a:	e45a      	b.n	10c2 <AdjustTimeAndDate(TS_Point)+0x532>

int AdjustDayValue(int month, int day)
{
  if (day > aDaysInMonth[month - 1])
  {
    Serial.printf("%d is greater than max days (%d) for this month - setting to 1\n", day, aDaysInMonth[month - 1]);
    180c:	460a      	mov	r2, r1
    180e:	4805      	ldr	r0, [pc, #20]	; (1824 <AdjustTimeAndDate(TS_Point)+0xc94>)
    1810:	4905      	ldr	r1, [pc, #20]	; (1828 <AdjustTimeAndDate(TS_Point)+0xc98>)
    1812:	f006 fd59 	bl	82c8 <Print::printf(char const*, ...)>
    1816:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    181a:	2301      	movs	r3, #1
    181c:	f7ff bb4d 	b.w	eba <AdjustTimeAndDate(TS_Point)+0x32a>
    1820:	220c      	movs	r2, #12
    1822:	e66e      	b.n	1502 <AdjustTimeAndDate(TS_Point)+0x972>
    1824:	1fff8a8c 	.word	0x1fff8a8c
    1828:	0000dbcc 	.word	0x0000dbcc

0000182c <loop>:
  mSecSinceLastClockUpdate = 0; //used to space out clock updates in loop()
}


void loop(void)
{
    182c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  //Serial.printf("%lu: mSecSinceLastClockUpdate = %lu\n", millis(), (long int)mSecSinceLastClockUpdate);
  delay(100);
    1830:	2064      	movs	r0, #100	; 0x64
  mSecSinceLastClockUpdate = 0; //used to space out clock updates in loop()
}


void loop(void)
{
    1832:	b089      	sub	sp, #36	; 0x24

  //Serial.printf("%lu: mSecSinceLastClockUpdate = %lu\n", millis(), (long int)mSecSinceLastClockUpdate);
  delay(100);
    1834:	f005 fb8c 	bl	6f50 <delay>

  //see if there is a touch anywhere
  if (ts.touched())
    1838:	483b      	ldr	r0, [pc, #236]	; (1928 <loop+0xfc>)
    183a:	f000 fc13 	bl	2064 <XPT2046_Touchscreen::touched()>
    183e:	b960      	cbnz	r0, 185a <loop+0x2e>
    1840:	493a      	ldr	r1, [pc, #232]	; (192c <loop+0x100>)
    1842:	4c3b      	ldr	r4, [pc, #236]	; (1930 <loop+0x104>)
    1844:	680b      	ldr	r3, [r1, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1846:	6822      	ldr	r2, [r4, #0]
    1848:	9204      	str	r2, [sp, #16]
	return ret;
    184a:	9a04      	ldr	r2, [sp, #16]

    mSecSinceLastClockUpdate = 0;
  }


  if (mSecSinceLastClockUpdate > CLOCK_UPDATE_MSEC)
    184c:	1ad2      	subs	r2, r2, r3
    184e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
    1852:	d84d      	bhi.n	18f0 <loop+0xc4>
    else
    {
      ShowNormalTimeDisplay();
    }
  }
}
    1854:	b009      	add	sp, #36	; 0x24
    1856:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    185a:	4c35      	ldr	r4, [pc, #212]	; (1930 <loop+0x104>)
	elapsedMillis(void) { ms = millis(); }
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    185c:	4e35      	ldr	r6, [pc, #212]	; (1934 <loop+0x108>)
    185e:	6823      	ldr	r3, [r4, #0]
    1860:	9300      	str	r3, [sp, #0]
	return ret;
    1862:	9a00      	ldr	r2, [sp, #0]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1864:	6823      	ldr	r3, [r4, #0]
    1866:	9301      	str	r3, [sp, #4]
	return ret;
    1868:	9b01      	ldr	r3, [sp, #4]
    186a:	6032      	str	r2, [r6, #0]
  //see if there is a touch anywhere
  if (ts.touched())
  {
    mSecSinceLastTouch = 0; //reset the timeout watchdog

    while (mSecSinceLastTouch < TOUCH_TIMEOUT_MSEC)
    186c:	1a9b      	subs	r3, r3, r2
    186e:	f241 3787 	movw	r7, #4999	; 0x1387
    1872:	42bb      	cmp	r3, r7
    1874:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 193c <loop+0x110>
    1878:	d829      	bhi.n	18ce <loop+0xa2>
    187a:	ad04      	add	r5, sp, #16

      TS_Point Tp = ts.getPoint();// Retrieve the touch point
      if (Tp.z > 1000)
      {
        mSecSinceLastTouch = 0; //reset the timeout watchdog
        TS_Point Dp = GetTouchPointInDisplayCoords(Tp);
    187c:	f10d 0818 	add.w	r8, sp, #24
    1880:	e006      	b.n	1890 <loop+0x64>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1882:	6823      	ldr	r3, [r4, #0]
    1884:	9301      	str	r3, [sp, #4]
	return ret;
    1886:	9b01      	ldr	r3, [sp, #4]
  //see if there is a touch anywhere
  if (ts.touched())
  {
    mSecSinceLastTouch = 0; //reset the timeout watchdog

    while (mSecSinceLastTouch < TOUCH_TIMEOUT_MSEC)
    1888:	6832      	ldr	r2, [r6, #0]
    188a:	1a9b      	subs	r3, r3, r2
    188c:	42bb      	cmp	r3, r7
    188e:	d81e      	bhi.n	18ce <loop+0xa2>
    {
      //Serial.printf("mSecSinceLastTouch = %lu\n", (unsigned long int)mSecSinceLastTouch);

      TS_Point Tp = ts.getPoint();// Retrieve the touch point
    1890:	4925      	ldr	r1, [pc, #148]	; (1928 <loop+0xfc>)
    1892:	4628      	mov	r0, r5
    1894:	f000 fbd6 	bl	2044 <XPT2046_Touchscreen::getPoint()>
      if (Tp.z > 1000)
    1898:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    189c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    18a0:	ddef      	ble.n	1882 <loop+0x56>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18a2:	6823      	ldr	r3, [r4, #0]
    18a4:	9302      	str	r3, [sp, #8]
	return ret;
    18a6:	9b02      	ldr	r3, [sp, #8]
    18a8:	6033      	str	r3, [r6, #0]
      {
        mSecSinceLastTouch = 0; //reset the timeout watchdog
        TS_Point Dp = GetTouchPointInDisplayCoords(Tp);
    18aa:	e895 0006 	ldmia.w	r5, {r1, r2}
    18ae:	4640      	mov	r0, r8
    18b0:	f7fe fe12 	bl	4d8 <GetTouchPointInDisplayCoords(TS_Point)>

        CurAdjState = (AdjustmentState)AdjustTimeAndDate(Dp);
    18b4:	e898 0003 	ldmia.w	r8, {r0, r1}
    18b8:	f7ff f96a 	bl	b90 <AdjustTimeAndDate(TS_Point)>
    18bc:	f889 0000 	strb.w	r0, [r9]
        //Serial.printf("Tp.z = %d: AdjustTimeAndDate(%d, %d) returns %d\n", Tp.z, Dp.x, Dp.y, (int)CurAdjState);

        if (CurAdjState > ADJ_NONE)
    18c0:	2800      	cmp	r0, #0
    18c2:	d0de      	beq.n	1882 <loop+0x56>
        {
          ShowLongTimeDisplay();
    18c4:	f7ff f86a 	bl	99c <ShowLongTimeDisplay()>
          ShowAdjButtons();
    18c8:	f7fe fe92 	bl	5f0 <ShowAdjButtons()>
    18cc:	e7d9      	b.n	1882 <loop+0x56>
        }
      }
    }

    HideButtons();
    18ce:	f7fe fe57 	bl	580 <HideButtons()>
    HideHighlightBars();
    18d2:	f7ff f8af 	bl	a34 <HideHighlightBars()>
    ShowNormalTimeDisplay();
    18d6:	f7ff f811 	bl	8fc <ShowNormalTimeDisplay()>
    ShowDateDisplay();
    18da:	f7ff f913 	bl	b04 <ShowDateDisplay()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    18de:	6823      	ldr	r3, [r4, #0]
    18e0:	9303      	str	r3, [sp, #12]
    18e2:	4912      	ldr	r1, [pc, #72]	; (192c <loop+0x100>)
	return ret;
    18e4:	9b03      	ldr	r3, [sp, #12]
    18e6:	600b      	str	r3, [r1, #0]
    CurAdjState = ADJ_NONE;
    18e8:	2200      	movs	r2, #0
    18ea:	f889 2000 	strb.w	r2, [r9]
    18ee:	e7aa      	b.n	1846 <loop+0x1a>


  if (mSecSinceLastClockUpdate > CLOCK_UPDATE_MSEC)
  {
    mSecSinceLastClockUpdate -= CLOCK_UPDATE_MSEC;
    now = rtc.now();
    18f0:	ac06      	add	r4, sp, #24
	elapsedMillis & operator -= (unsigned long val)      { ms += val ; return *this; }
    18f2:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    18f6:	4620      	mov	r0, r4
    18f8:	600b      	str	r3, [r1, #0]
    18fa:	f004 ff81 	bl	6800 <RTC_DS3231::now()>
    18fe:	e894 0003 	ldmia.w	r4, {r0, r1}
    1902:	4b0d      	ldr	r3, [pc, #52]	; (1938 <loop+0x10c>)
    1904:	6018      	str	r0, [r3, #0]
    1906:	8099      	strh	r1, [r3, #4]

    ShowDateDisplay(); //Display day and date
    1908:	f7ff f8fc 	bl	b04 <ShowDateDisplay()>

    //Display time
    if (CurAdjState > ADJ_NONE)
    190c:	4b0b      	ldr	r3, [pc, #44]	; (193c <loop+0x110>)
    190e:	781b      	ldrb	r3, [r3, #0]
    1910:	b923      	cbnz	r3, 191c <loop+0xf0>
    {
      ShowLongTimeDisplay();
    }
    else
    {
      ShowNormalTimeDisplay();
    1912:	f7fe fff3 	bl	8fc <ShowNormalTimeDisplay()>
    }
  }
}
    1916:	b009      	add	sp, #36	; 0x24
    1918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ShowDateDisplay(); //Display day and date

    //Display time
    if (CurAdjState > ADJ_NONE)
    {
      ShowLongTimeDisplay();
    191c:	f7ff f83e 	bl	99c <ShowLongTimeDisplay()>
    else
    {
      ShowNormalTimeDisplay();
    }
  }
}
    1920:	b009      	add	sp, #36	; 0x24
    1922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1926:	bf00      	nop
    1928:	1fff8800 	.word	0x1fff8800
    192c:	1fff961c 	.word	0x1fff961c
    1930:	1fff9724 	.word	0x1fff9724
    1934:	1fff9628 	.word	0x1fff9628
    1938:	1fff9620 	.word	0x1fff9620
    193c:	1fff9640 	.word	0x1fff9640

00001940 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii>:
  }
  else
  {
    return day;
  }
}
    1940:	b5f0      	push	{r4, r5, r6, r7, lr}
    1942:	b087      	sub	sp, #28
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1944:	4d4e      	ldr	r5, [pc, #312]	; (1a80 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x140>)
#define TFT_MOSI 11
#define TOUCH_CS  8
#pragma endregion DISPLAY_PIN_ASSIGNMENTS

XPT2046_Touchscreen ts(TOUCH_CS);
ILI9341_t3n tft = ILI9341_t3n(TFT_CS, TFT_DC, TFT_RST, TFT_MOSI, TFT_SCK, TFT_MISO);
    1946:	484f      	ldr	r0, [pc, #316]	; (1a84 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x144>)
const int MINUSBOX_Y = 180;
const int MINUSBOX_WIDTH = 50;
const int MINUSBOX_HEIGHT = 50;
const int MINUSBOX_COLOR = ILI9341_YELLOW;

const String nextstr = "NEXT";
    1948:	4c4f      	ldr	r4, [pc, #316]	; (1a88 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x148>)
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    194a:	4e50      	ldr	r6, [pc, #320]	; (1a8c <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x14c>)
#define FORCE_RTC_TO_LAST_COMPILE_TIME //uncomment to manually set RTC to last compile time

RTC_DS3231 rtc;

char daysOfTheWeek[7][12] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
DateTime now, lastTime;
    194c:	4f50      	ldr	r7, [pc, #320]	; (1a90 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x150>)
#define TFT_MOSI 11
#define TOUCH_CS  8
#pragma endregion DISPLAY_PIN_ASSIGNMENTS

XPT2046_Touchscreen ts(TOUCH_CS);
ILI9341_t3n tft = ILI9341_t3n(TFT_CS, TFT_DC, TFT_RST, TFT_MOSI, TFT_SCK, TFT_MISO);
    194e:	210c      	movs	r1, #12
    1950:	220d      	movs	r2, #13
    1952:	230b      	movs	r3, #11
    1954:	9102      	str	r1, [sp, #8]
    1956:	9201      	str	r2, [sp, #4]
    1958:	9300      	str	r3, [sp, #0]
    195a:	2209      	movs	r2, #9
    195c:	2307      	movs	r3, #7
    195e:	210a      	movs	r1, #10
    1960:	f000 fe84 	bl	266c <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
    1964:	682b      	ldr	r3, [r5, #0]
    1966:	9304      	str	r3, [sp, #16]
class elapsedMillis
{
private:
	unsigned long ms;
public:
	elapsedMillis(void) { ms = millis(); }
    1968:	4b4a      	ldr	r3, [pc, #296]	; (1a94 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x154>)
	return ret;
    196a:	9a04      	ldr	r2, [sp, #16]
const int MINUSBOX_Y = 180;
const int MINUSBOX_WIDTH = 50;
const int MINUSBOX_HEIGHT = 50;
const int MINUSBOX_COLOR = ILI9341_YELLOW;

const String nextstr = "NEXT";
    196c:	494a      	ldr	r1, [pc, #296]	; (1a98 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x158>)
    196e:	601a      	str	r2, [r3, #0]
    1970:	4620      	mov	r0, r4
    1972:	f006 fd53 	bl	841c <String::String(char const*)>
    1976:	4620      	mov	r0, r4
    1978:	4a48      	ldr	r2, [pc, #288]	; (1a9c <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x15c>)
    197a:	4949      	ldr	r1, [pc, #292]	; (1aa0 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x160>)
    197c:	4c49      	ldr	r4, [pc, #292]	; (1aa4 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x164>)
    197e:	f006 fea5 	bl	86cc <__aeabi_atexit>
    1982:	f8df e14c 	ldr.w	lr, [pc, #332]	; 1ad0 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x190>
    1986:	4948      	ldr	r1, [pc, #288]	; (1aa8 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x168>)
    1988:	4b48      	ldr	r3, [pc, #288]	; (1aac <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x16c>)
    198a:	4849      	ldr	r0, [pc, #292]	; (1ab0 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x170>)
    198c:	2214      	movs	r2, #20
    198e:	6022      	str	r2, [r4, #0]
    1990:	f8ce 2000 	str.w	r2, [lr]
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    1994:	f04f 0c1f 	mov.w	ip, #31

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    1998:	2232      	movs	r2, #50	; 0x32
	h = in_h;
	color = in_color;
    199a:	f8c4 c010 	str.w	ip, [r4, #16]

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    199e:	60a2      	str	r2, [r4, #8]
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    19a0:	f04f 0cb4 	mov.w	ip, #180	; 0xb4
	w = in_w;
	h = in_h;
    19a4:	60e2      	str	r2, [r4, #12]

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    19a6:	608a      	str	r2, [r1, #8]
	h = in_h;
    19a8:	60ca      	str	r2, [r1, #12]
    19aa:	60da      	str	r2, [r3, #12]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19ac:	22dc      	movs	r2, #220	; 0xdc
	y = in_y;
    19ae:	f8c4 c004 	str.w	ip, [r4, #4]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19b2:	601a      	str	r2, [r3, #0]
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    19b4:	f64f 74e0 	movw	r4, #65504	; 0xffe0

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    19b8:	2264      	movs	r2, #100	; 0x64
	h = in_h;
	color = in_color;
    19ba:	610c      	str	r4, [r1, #16]

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    19bc:	609a      	str	r2, [r3, #8]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19be:	2478      	movs	r4, #120	; 0x78
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    19c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    19c4:	f8c1 c004 	str.w	ip, [r1, #4]
    19c8:	f8c3 c004 	str.w	ip, [r3, #4]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19cc:	600c      	str	r4, [r1, #0]
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    19ce:	611a      	str	r2, [r3, #16]
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    19d0:	214b      	movs	r1, #75	; 0x4b
	w = in_w;
	h = in_h;
    19d2:	2205      	movs	r2, #5
	color = in_color;
    19d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19d8:	6034      	str	r4, [r6, #0]
    19da:	4c36      	ldr	r4, [pc, #216]	; (1ab4 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x174>)
	y = in_y;
    19dc:	f8ce 1004 	str.w	r1, [lr, #4]
	w = in_w;
    19e0:	f8ce 1008 	str.w	r1, [lr, #8]
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    19e4:	6071      	str	r1, [r6, #4]
	w = in_w;
    19e6:	60b1      	str	r1, [r6, #8]
	h = in_h;
    19e8:	f8ce 200c 	str.w	r2, [lr, #12]
    19ec:	60f2      	str	r2, [r6, #12]
	color = in_color;
    19ee:	f8ce 3010 	str.w	r3, [lr, #16]
    19f2:	6133      	str	r3, [r6, #16]
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    19f4:	6041      	str	r1, [r0, #4]
	w = in_w;
    19f6:	6081      	str	r1, [r0, #8]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19f8:	f04f 0ee6 	mov.w	lr, #230	; 0xe6
	y = in_y;
    19fc:	2128      	movs	r1, #40	; 0x28
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    19fe:	2648      	movs	r6, #72	; 0x48
	y = in_y;
	w = in_w;
	h = in_h;
    1a00:	60c2      	str	r2, [r0, #12]
	color = in_color;
    1a02:	6103      	str	r3, [r0, #16]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a04:	f8c0 e000 	str.w	lr, [r0]
    1a08:	6026      	str	r6, [r4, #0]
	y = in_y;
    1a0a:	6061      	str	r1, [r4, #4]
	w = in_w;
    1a0c:	60a1      	str	r1, [r4, #8]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1a0e:	6828      	ldr	r0, [r5, #0]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a10:	4e29      	ldr	r6, [pc, #164]	; (1ab8 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x178>)
    1a12:	9005      	str	r0, [sp, #20]
    1a14:	f8df e0bc 	ldr.w	lr, [pc, #188]	; 1ad4 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x194>
    1a18:	4828      	ldr	r0, [pc, #160]	; (1abc <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x17c>)
	y = in_y;
	w = in_w;
	h = in_h;
    1a1a:	60e2      	str	r2, [r4, #12]
	color = in_color;
    1a1c:	6123      	str	r3, [r4, #16]
	return ret;
    1a1e:	9c05      	ldr	r4, [sp, #20]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a20:	4d27      	ldr	r5, [pc, #156]	; (1ac0 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x180>)
    1a22:	f8ce 4000 	str.w	r4, [lr]
	y = in_y;
	w = in_w;
	h = in_h;
    1a26:	60c2      	str	r2, [r0, #12]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a28:	f04f 0eb2 	mov.w	lr, #178	; 0xb2
	y = in_y;
	w = in_w;
	h = in_h;
    1a2c:	60f2      	str	r2, [r6, #12]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a2e:	2484      	movs	r4, #132	; 0x84
	y = in_y;
	w = in_w;
    1a30:	225a      	movs	r2, #90	; 0x5a
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a32:	f8c6 e000 	str.w	lr, [r6]
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    1a36:	6103      	str	r3, [r0, #16]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a38:	6004      	str	r4, [r0, #0]
	y = in_y;
    1a3a:	6071      	str	r1, [r6, #4]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a3c:	4c21      	ldr	r4, [pc, #132]	; (1ac4 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x184>)
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    1a3e:	6133      	str	r3, [r6, #16]

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    1a40:	60b2      	str	r2, [r6, #8]
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    1a42:	2352      	movs	r3, #82	; 0x52
	w = in_w;
    1a44:	f44f 76af 	mov.w	r6, #350	; 0x15e
	h = in_h;
    1a48:	2250      	movs	r2, #80	; 0x50
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    1a4a:	6041      	str	r1, [r0, #4]
	w = in_w;
    1a4c:	6081      	str	r1, [r0, #8]
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
    1a4e:	606b      	str	r3, [r5, #4]
#define FORCE_RTC_TO_LAST_COMPILE_TIME //uncomment to manually set RTC to last compile time

RTC_DS3231 rtc;

char daysOfTheWeek[7][12] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
DateTime now, lastTime;
    1a50:	4639      	mov	r1, r7
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a52:	2300      	movs	r3, #0
	y = in_y;
	w = in_w;
    1a54:	60ae      	str	r6, [r5, #8]
	h = in_h;
    1a56:	60ea      	str	r2, [r5, #12]

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    1a58:	f44f 76a0 	mov.w	r6, #320	; 0x140
	h = in_h;
    1a5c:	221e      	movs	r2, #30
    1a5e:	481a      	ldr	r0, [pc, #104]	; (1ac8 <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x188>)
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a60:	602b      	str	r3, [r5, #0]
	y = in_y;
	w = in_w;
	h = in_h;
	color = in_color;
    1a62:	612b      	str	r3, [r5, #16]
	color = in_color;
}

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
    1a64:	6023      	str	r3, [r4, #0]
	y = in_y;
    1a66:	6063      	str	r3, [r4, #4]
	w = in_w;
	h = in_h;
	color = in_color;
    1a68:	6123      	str	r3, [r4, #16]
CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
	h = in_h;
    1a6a:	60e2      	str	r2, [r4, #12]

CustomBox::CustomBox(int in_x, int in_y, int in_w, int in_h, int in_color)
{
	x = in_x;
	y = in_y;
	w = in_w;
    1a6c:	60a6      	str	r6, [r4, #8]
    1a6e:	f004 fd51 	bl	6514 <DateTime::DateTime(unsigned long)>
    1a72:	4639      	mov	r1, r7
    1a74:	4815      	ldr	r0, [pc, #84]	; (1acc <_GLOBAL__sub_I__ZN9CustomBoxC2Eiii+0x18c>)
    1a76:	f004 fd4d 	bl	6514 <DateTime::DateTime(unsigned long)>
  }
  else
  {
    return day;
  }
}
    1a7a:	b007      	add	sp, #28
    1a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1a7e:	bf00      	nop
    1a80:	1fff9724 	.word	0x1fff9724
    1a84:	1fff9520 	.word	0x1fff9520
    1a88:	1fff95d4 	.word	0x1fff95d4
    1a8c:	1fff962c 	.word	0x1fff962c
    1a90:	386d4380 	.word	0x386d4380
    1a94:	1fff961c 	.word	0x1fff961c
    1a98:	0000da80 	.word	0x0000da80
    1a9c:	1fff87fc 	.word	0x1fff87fc
    1aa0:	0000839d 	.word	0x0000839d
    1aa4:	1fff9694 	.word	0x1fff9694
    1aa8:	1fff9600 	.word	0x1fff9600
    1aac:	1fff95e8 	.word	0x1fff95e8
    1ab0:	1fff9680 	.word	0x1fff9680
    1ab4:	1fff95c0 	.word	0x1fff95c0
    1ab8:	1fff970c 	.word	0x1fff970c
    1abc:	1fff950c 	.word	0x1fff950c
    1ac0:	1fff9658 	.word	0x1fff9658
    1ac4:	1fff966c 	.word	0x1fff966c
    1ac8:	1fff9620 	.word	0x1fff9620
    1acc:	1fff9614 	.word	0x1fff9614
    1ad0:	1fff9644 	.word	0x1fff9644
    1ad4:	1fff9628 	.word	0x1fff9628

00001ad8 <setup>:


#pragma endregion RTC Support

void setup()
{
    1ad8:	b570      	push	{r4, r5, r6, lr}
  Serial.begin(9600);
  delay(3000);
    1ada:	f640 30b8 	movw	r0, #3000	; 0xbb8


#pragma endregion RTC Support

void setup()
{
    1ade:	b084      	sub	sp, #16
  Serial.begin(9600);
  delay(3000);
    1ae0:	f005 fa36 	bl	6f50 <delay>
    1ae4:	211c      	movs	r1, #28
    1ae6:	4888      	ldr	r0, [pc, #544]	; (1d08 <setup+0x230>)
	color = in_color;
}

inline void CustomBox::Draw(ILI9341_t3n* disp)
{
	disp->fillRect(x, y, w, h, color);
    1ae8:	4c88      	ldr	r4, [pc, #544]	; (1d0c <setup+0x234>)
    1aea:	f006 fa37 	bl	7f5c <usb_serial_write>
    1aee:	4888      	ldr	r0, [pc, #544]	; (1d10 <setup+0x238>)
    1af0:	f006 fbd2 	bl	8298 <Print::println()>
    1af4:	2118      	movs	r1, #24
    1af6:	4887      	ldr	r0, [pc, #540]	; (1d14 <setup+0x23c>)
    1af8:	f006 fa30 	bl	7f5c <usb_serial_write>
    1afc:	4884      	ldr	r0, [pc, #528]	; (1d10 <setup+0x238>)
    1afe:	f006 fbcb 	bl	8298 <Print::println()>
  Serial.println("Teensy 3.2 TFT Clock Program");

#pragma region DISPLAY INITIALIZATION
  Serial.println("Initializing TFT display");

  tft.begin();
    1b02:	4a85      	ldr	r2, [pc, #532]	; (1d18 <setup+0x240>)
    1b04:	4985      	ldr	r1, [pc, #532]	; (1d1c <setup+0x244>)
    1b06:	4886      	ldr	r0, [pc, #536]	; (1d20 <setup+0x248>)
    1b08:	f002 fa1e 	bl	3f48 <ILI9341_t3n::begin(unsigned long, unsigned long)>
  // Note: you can now set the SPI speed to any value
  // the default value is 30Mhz, but most ILI9341 displays
  // can handle at least 60Mhz and as much as 100Mhz
  //  tft.setClock(60000000);
  tft.fillScreen(ILI9341_BLACK);
    1b0c:	2100      	movs	r1, #0
    1b0e:	4884      	ldr	r0, [pc, #528]	; (1d20 <setup+0x248>)
    1b10:	f001 fe64 	bl	37dc <ILI9341_t3n::fillScreen(unsigned short)>
  tft.setTextColor(ILI9341_YELLOW);
    1b14:	f64f 71e0 	movw	r1, #65504	; 0xffe0
    1b18:	4881      	ldr	r0, [pc, #516]	; (1d20 <setup+0x248>)
    1b1a:	f001 f953 	bl	2dc4 <ILI9341_t3n::setTextColor(unsigned short)>
  void setCursor(int16_t x, int16_t y, bool autoCenter = false);
  void getCursor(int16_t *x, int16_t *y);
  void setTextColor(uint16_t c);
  void setTextColor(uint16_t c, uint16_t bg);
  void setTextSize(uint8_t sx, uint8_t sy);
  void inline setTextSize(uint8_t s) { setTextSize(s, s); }
    1b1e:	2202      	movs	r2, #2
    1b20:	4611      	mov	r1, r2
    1b22:	487f      	ldr	r0, [pc, #508]	; (1d20 <setup+0x248>)
    1b24:	f001 f940 	bl	2da8 <ILI9341_t3n::setTextSize(unsigned char, unsigned char)>
  tft.setTextSize(2);
  tft.setRotation(1);
    1b28:	2101      	movs	r1, #1
    1b2a:	487d      	ldr	r0, [pc, #500]	; (1d20 <setup+0x248>)
    1b2c:	f001 fee8 	bl	3900 <ILI9341_t3n::setRotation(unsigned char)>
    1b30:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    1b34:	8a25      	ldrh	r5, [r4, #16]
    1b36:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    1b3a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    1b3e:	f9b4 1000 	ldrsh.w	r1, [r4]
    1b42:	e88d 0021 	stmia.w	sp, {r0, r5}
    1b46:	4876      	ldr	r0, [pc, #472]	; (1d20 <setup+0x248>)
    1b48:	f001 fcf8 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
#endif // !N0_DIAGNOSTICS
#pragma endregion region TFT DIAGNOSTICS

#pragma region RTC_SETUP
  DateBox.Draw(&tft); //erase previous text
  tft.setCursor(0, 0);
    1b4c:	2300      	movs	r3, #0
    1b4e:	4619      	mov	r1, r3
    1b50:	461a      	mov	r2, r3
    1b52:	4873      	ldr	r0, [pc, #460]	; (1d20 <setup+0x248>)
    1b54:	f001 f8cc 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
    1b58:	2113      	movs	r1, #19
    1b5a:	4872      	ldr	r0, [pc, #456]	; (1d24 <setup+0x24c>)
    1b5c:	f006 f9fe 	bl	7f5c <usb_serial_write>
    1b60:	486b      	ldr	r0, [pc, #428]	; (1d10 <setup+0x238>)
    1b62:	f006 fb99 	bl	8298 <Print::println()>
  Serial.println("Initializing RTC...");
  //tft.println("Initializing RTC...");
  delay(1000);
    1b66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1b6a:	f005 f9f1 	bl	6f50 <delay>

  if (!rtc.begin())
    1b6e:	486e      	ldr	r0, [pc, #440]	; (1d28 <setup+0x250>)
    1b70:	f004 fe2e 	bl	67d0 <RTC_DS3231::begin()>
    1b74:	bb20      	cbnz	r0, 1bc0 <setup+0xe8>
    1b76:	4605      	mov	r5, r0
    1b78:	8a26      	ldrh	r6, [r4, #16]
    1b7a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    1b7e:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    1b82:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    1b86:	f9b4 1000 	ldrsh.w	r1, [r4]
    1b8a:	e88d 0041 	stmia.w	sp, {r0, r6}
    1b8e:	4864      	ldr	r0, [pc, #400]	; (1d20 <setup+0x248>)
    1b90:	f001 fcd4 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  {
    DateBox.Draw(&tft); //erase previous text
    tft.setCursor(0, 0);
    1b94:	462b      	mov	r3, r5
    1b96:	462a      	mov	r2, r5
    1b98:	4629      	mov	r1, r5
    1b9a:	4861      	ldr	r0, [pc, #388]	; (1d20 <setup+0x248>)
    1b9c:	f001 f8a8 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
    1ba0:	2111      	movs	r1, #17
    1ba2:	4862      	ldr	r0, [pc, #392]	; (1d2c <setup+0x254>)
    1ba4:	f006 f9da 	bl	7f5c <usb_serial_write>
    1ba8:	4859      	ldr	r0, [pc, #356]	; (1d10 <setup+0x238>)
    1baa:	f006 fb75 	bl	8298 <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1bae:	2211      	movs	r2, #17
    1bb0:	495e      	ldr	r1, [pc, #376]	; (1d2c <setup+0x254>)
    1bb2:	485b      	ldr	r0, [pc, #364]	; (1d20 <setup+0x248>)
    1bb4:	f003 ffda 	bl	5b6c <ILI9341_t3n::write(unsigned char const*, unsigned int)>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1bb8:	4859      	ldr	r0, [pc, #356]	; (1d20 <setup+0x248>)
    1bba:	f006 fb6d 	bl	8298 <Print::println()>
    1bbe:	e7fe      	b.n	1bbe <setup+0xe6>
    Serial.println("Couldn't find RTC");
    tft.println("Couldn't find RTC");
    while (1);
  }

  bool lp = rtc.lostPower();
    1bc0:	4859      	ldr	r0, [pc, #356]	; (1d28 <setup+0x250>)
    1bc2:	f004 ff73 	bl	6aac <RTC_DS3231::lostPower()>
    1bc6:	2114      	movs	r1, #20
    1bc8:	4605      	mov	r5, r0
    1bca:	4859      	ldr	r0, [pc, #356]	; (1d30 <setup+0x258>)
    1bcc:	f006 f9c6 	bl	7f5c <usb_serial_write>
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1bd0:	4629      	mov	r1, r5
    1bd2:	484f      	ldr	r0, [pc, #316]	; (1d10 <setup+0x238>)
    1bd4:	f006 fbc6 	bl	8364 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1bd8:	484d      	ldr	r0, [pc, #308]	; (1d10 <setup+0x238>)
    1bda:	f006 fb5d 	bl	8298 <Print::println()>
    1bde:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    1be2:	8a26      	ldrh	r6, [r4, #16]
    1be4:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    1be8:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    1bec:	f9b4 1000 	ldrsh.w	r1, [r4]
    1bf0:	e88d 0041 	stmia.w	sp, {r0, r6}
    1bf4:	484a      	ldr	r0, [pc, #296]	; (1d20 <setup+0x248>)
    1bf6:	f001 fca1 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  Serial.print("lostPower() reports "); Serial.println(lp);
  DateBox.Draw(&tft); //erase previous text
  tft.setCursor(0, 0);
    1bfa:	2300      	movs	r3, #0
    1bfc:	461a      	mov	r2, r3
    1bfe:	4619      	mov	r1, r3
    1c00:	4847      	ldr	r0, [pc, #284]	; (1d20 <setup+0x248>)
    1c02:	f001 f875 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
  tft.printf("lostPower() = %d\n", lp);
    1c06:	462a      	mov	r2, r5
    1c08:	494a      	ldr	r1, [pc, #296]	; (1d34 <setup+0x25c>)
    1c0a:	4845      	ldr	r0, [pc, #276]	; (1d20 <setup+0x248>)
    1c0c:	f006 fb5c 	bl	82c8 <Print::printf(char const*, ...)>
  delay(1000);
    1c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1c14:	f005 f99c 	bl	6f50 <delay>
  if (rtc.lostPower())
    1c18:	4843      	ldr	r0, [pc, #268]	; (1d28 <setup+0x250>)
    1c1a:	f004 ff47 	bl	6aac <RTC_DS3231::lostPower()>
    1c1e:	2800      	cmp	r0, #0
    1c20:	d14b      	bne.n	1cba <setup+0x1e2>
    1c22:	ac02      	add	r4, sp, #8
    1c24:	2120      	movs	r1, #32
    1c26:	4844      	ldr	r0, [pc, #272]	; (1d38 <setup+0x260>)
  // following line sets the RTC to the date & time this sketch was compiled
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
#endif // 

  //DateTime now = rtc.now();
  now = rtc.now();
    1c28:	4d44      	ldr	r5, [pc, #272]	; (1d3c <setup+0x264>)
    //rtc.adjust(DateTime(2021, 02, 13, 00, 59, 45));
  //DEBUG!!

    //02/15/21 needed detect hour changes for screen refresh
  now = rtc.now();
  lasthour = now.hour();
    1c2a:	4e45      	ldr	r6, [pc, #276]	; (1d40 <setup+0x268>)
    1c2c:	f006 f996 	bl	7f5c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1c30:	4837      	ldr	r0, [pc, #220]	; (1d10 <setup+0x238>)
    1c32:	f006 fb31 	bl	8298 <Print::println()>
  }

#ifdef FORCE_RTC_TO_LAST_COMPILE_TIME
  Serial.println("Forcing RTC to last compile time");
  // following line sets the RTC to the date & time this sketch was compiled
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    1c36:	4a43      	ldr	r2, [pc, #268]	; (1d44 <setup+0x26c>)
    1c38:	4943      	ldr	r1, [pc, #268]	; (1d48 <setup+0x270>)
    1c3a:	4620      	mov	r0, r4
    1c3c:	f004 fd06 	bl	664c <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)>
    1c40:	4620      	mov	r0, r4
    1c42:	f004 fec5 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
#endif // 

  //DateTime now = rtc.now();
  now = rtc.now();
    1c46:	4620      	mov	r0, r4
    1c48:	f004 fdda 	bl	6800 <RTC_DS3231::now()>
    1c4c:	e894 0003 	ldmia.w	r4, {r0, r1}
  memset(buffer, '\0', 100);
    1c50:	2264      	movs	r2, #100	; 0x64
  // following line sets the RTC to the date & time this sketch was compiled
  rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
#endif // 

  //DateTime now = rtc.now();
  now = rtc.now();
    1c52:	6028      	str	r0, [r5, #0]
    1c54:	80a9      	strh	r1, [r5, #4]
  memset(buffer, '\0', 100);
    1c56:	483d      	ldr	r0, [pc, #244]	; (1d4c <setup+0x274>)
    1c58:	2100      	movs	r1, #0
    1c5a:	f008 f835 	bl	9cc8 <memset>
  GetDayDateTimeStringFromDateTime(now, buffer);
    1c5e:	4629      	mov	r1, r5
    1c60:	4620      	mov	r0, r4
    1c62:	f004 fce5 	bl	6630 <DateTime::DateTime(DateTime const&)>
    1c66:	4620      	mov	r0, r4
    1c68:	4938      	ldr	r1, [pc, #224]	; (1d4c <setup+0x274>)
    1c6a:	f7fe fc11 	bl	490 <GetDayDateTimeStringFromDateTime(DateTime, char*)>
    1c6e:	2121      	movs	r1, #33	; 0x21
    1c70:	4837      	ldr	r0, [pc, #220]	; (1d50 <setup+0x278>)
    1c72:	f006 f973 	bl	7f5c <usb_serial_write>
    1c76:	4826      	ldr	r0, [pc, #152]	; (1d10 <setup+0x238>)
    1c78:	f006 fb0e 	bl	8298 <Print::println()>
    1c7c:	210e      	movs	r1, #14
    1c7e:	4835      	ldr	r0, [pc, #212]	; (1d54 <setup+0x27c>)
    1c80:	f006 f96c 	bl	7f5c <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1c84:	4831      	ldr	r0, [pc, #196]	; (1d4c <setup+0x274>)
    1c86:	f008 fb1b 	bl	a2c0 <strlen>
    1c8a:	4601      	mov	r1, r0
    1c8c:	482f      	ldr	r0, [pc, #188]	; (1d4c <setup+0x274>)
    1c8e:	f006 f965 	bl	7f5c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    1c92:	481f      	ldr	r0, [pc, #124]	; (1d10 <setup+0x238>)
    1c94:	f006 fb00 	bl	8298 <Print::println()>
    //tft.println("Setting time to just before midnight");
    //rtc.adjust(DateTime(2021, 02, 13, 00, 59, 45));
  //DEBUG!!

    //02/15/21 needed detect hour changes for screen refresh
  now = rtc.now();
    1c98:	4620      	mov	r0, r4
    1c9a:	f004 fdb1 	bl	6800 <RTC_DS3231::now()>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1c9e:	4b2e      	ldr	r3, [pc, #184]	; (1d58 <setup+0x280>)
    1ca0:	e894 0003 	ldmia.w	r4, {r0, r1}
    1ca4:	681a      	ldr	r2, [r3, #0]
    1ca6:	9202      	str	r2, [sp, #8]
	elapsedMillis(unsigned long val) { ms = millis() - val; }
	elapsedMillis(const elapsedMillis &orig) { ms = orig.ms; }
	operator unsigned long () const { return millis() - ms; }
	elapsedMillis & operator = (const elapsedMillis &rhs) { ms = rhs.ms; return *this; }
	elapsedMillis & operator = (unsigned long val) { ms = millis() - val; return *this; }
    1ca8:	4b2c      	ldr	r3, [pc, #176]	; (1d5c <setup+0x284>)
	return ret;
    1caa:	9a02      	ldr	r2, [sp, #8]
    1cac:	80a9      	strh	r1, [r5, #4]
  lasthour = now.hour();
    1cae:	0e04      	lsrs	r4, r0, #24
    //tft.println("Setting time to just before midnight");
    //rtc.adjust(DateTime(2021, 02, 13, 00, 59, 45));
  //DEBUG!!

    //02/15/21 needed detect hour changes for screen refresh
  now = rtc.now();
    1cb0:	6028      	str	r0, [r5, #0]
  lasthour = now.hour();
    1cb2:	6034      	str	r4, [r6, #0]
    1cb4:	601a      	str	r2, [r3, #0]
  mSecSinceLastClockUpdate = 0; //used to space out clock updates in loop()
}
    1cb6:	b004      	add	sp, #16
    1cb8:	bd70      	pop	{r4, r5, r6, pc}
  tft.setCursor(0, 0);
  tft.printf("lostPower() = %d\n", lp);
  delay(1000);
  if (rtc.lostPower())
  {
    Serial.println("RTC lost power.  Setting RTC to last compile time");
    1cba:	4929      	ldr	r1, [pc, #164]	; (1d60 <setup+0x288>)
    1cbc:	4814      	ldr	r0, [pc, #80]	; (1d10 <setup+0x238>)
    1cbe:	f7fe fbd5 	bl	46c <Print::println(char const*)>
    1cc2:	8a25      	ldrh	r5, [r4, #16]
    1cc4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
    1cc8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    1ccc:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
    1cd0:	f9b4 1000 	ldrsh.w	r1, [r4]
    1cd4:	e88d 0021 	stmia.w	sp, {r0, r5}
    1cd8:	4811      	ldr	r0, [pc, #68]	; (1d20 <setup+0x248>)
    1cda:	f001 fc2f 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    DateBox.Draw(&tft); //erase previous text
    tft.setCursor(0, 0);
    1cde:	2300      	movs	r3, #0
    1ce0:	461a      	mov	r2, r3
    1ce2:	4619      	mov	r1, r3
    1ce4:	480e      	ldr	r0, [pc, #56]	; (1d20 <setup+0x248>)
    1ce6:	f001 f803 	bl	2cf0 <ILI9341_t3n::setCursor(short, short, bool)>
    tft.println("RTC lost power.  Setting RTC to last compile time");

    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    1cea:	ac02      	add	r4, sp, #8
  if (rtc.lostPower())
  {
    Serial.println("RTC lost power.  Setting RTC to last compile time");
    DateBox.Draw(&tft); //erase previous text
    tft.setCursor(0, 0);
    tft.println("RTC lost power.  Setting RTC to last compile time");
    1cec:	491c      	ldr	r1, [pc, #112]	; (1d60 <setup+0x288>)
    1cee:	480c      	ldr	r0, [pc, #48]	; (1d20 <setup+0x248>)
    1cf0:	f7fe fbbc 	bl	46c <Print::println(char const*)>

    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    1cf4:	4620      	mov	r0, r4
    1cf6:	4a13      	ldr	r2, [pc, #76]	; (1d44 <setup+0x26c>)
    1cf8:	4913      	ldr	r1, [pc, #76]	; (1d48 <setup+0x270>)
    1cfa:	f004 fca7 	bl	664c <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)>
    1cfe:	4620      	mov	r0, r4
    1d00:	f004 fe66 	bl	69d0 <RTC_DS3231::adjust(DateTime const&)>
    1d04:	e78e      	b.n	1c24 <setup+0x14c>
    1d06:	bf00      	nop
    1d08:	0000dd74 	.word	0x0000dd74
    1d0c:	1fff966c 	.word	0x1fff966c
    1d10:	1fff8a8c 	.word	0x1fff8a8c
    1d14:	0000dd94 	.word	0x0000dd94
    1d18:	001e8480 	.word	0x001e8480
    1d1c:	01c9c380 	.word	0x01c9c380
    1d20:	1fff9520 	.word	0x1fff9520
    1d24:	0000ddb0 	.word	0x0000ddb0
    1d28:	1fff95e4 	.word	0x1fff95e4
    1d2c:	0000ddc4 	.word	0x0000ddc4
    1d30:	0000ddd8 	.word	0x0000ddd8
    1d34:	0000ddf0 	.word	0x0000ddf0
    1d38:	0000de50 	.word	0x0000de50
    1d3c:	1fff9620 	.word	0x1fff9620
    1d40:	1fff95fc 	.word	0x1fff95fc
    1d44:	0000de38 	.word	0x0000de38
    1d48:	0000de44 	.word	0x0000de44
    1d4c:	1fff96a8 	.word	0x1fff96a8
    1d50:	0000de74 	.word	0x0000de74
    1d54:	0000de98 	.word	0x0000de98
    1d58:	1fff9724 	.word	0x1fff9724
    1d5c:	1fff961c 	.word	0x1fff961c
    1d60:	0000de04 	.word	0x0000de04

00001d64 <besttwoavg(short, short, short)>:
}

static int16_t besttwoavg( int16_t x , int16_t y , int16_t z ) {
  int16_t da, db, dc;
  int16_t reta = 0;
  if ( x > y ) da = x - y; else da = y - x;
    1d64:	4288      	cmp	r0, r1
bool XPT2046_Touchscreen::bufferEmpty()
{
	return ((millis() - msraw) < MSEC_THRESHOLD);
}

static int16_t besttwoavg( int16_t x , int16_t y , int16_t z ) {
    1d66:	b470      	push	{r4, r5, r6}
  int16_t da, db, dc;
  int16_t reta = 0;
  if ( x > y ) da = x - y; else da = y - x;
    1d68:	dd1b      	ble.n	1da2 <besttwoavg(short, short, short)+0x3e>
    1d6a:	b283      	uxth	r3, r0
    1d6c:	b28c      	uxth	r4, r1
    1d6e:	1b1d      	subs	r5, r3, r4
    1d70:	b22d      	sxth	r5, r5
  if ( x > z ) db = x - z; else db = z - x;
    1d72:	b296      	uxth	r6, r2
    1d74:	4290      	cmp	r0, r2
    1d76:	bfcc      	ite	gt
    1d78:	1b9b      	subgt	r3, r3, r6
    1d7a:	1af3      	suble	r3, r6, r3
    1d7c:	b21b      	sxth	r3, r3
  if ( z > y ) dc = z - y; else dc = y - z;
    1d7e:	4291      	cmp	r1, r2
    1d80:	bfb4      	ite	lt
    1d82:	1b34      	sublt	r4, r6, r4
    1d84:	1ba4      	subge	r4, r4, r6

  if ( da <= db && da <= dc ) reta = (x + y) >> 1;
    1d86:	429d      	cmp	r5, r3
static int16_t besttwoavg( int16_t x , int16_t y , int16_t z ) {
  int16_t da, db, dc;
  int16_t reta = 0;
  if ( x > y ) da = x - y; else da = y - x;
  if ( x > z ) db = x - z; else db = z - x;
  if ( z > y ) dc = z - y; else dc = y - z;
    1d88:	b224      	sxth	r4, r4

  if ( da <= db && da <= dc ) reta = (x + y) >> 1;
    1d8a:	dd05      	ble.n	1d98 <besttwoavg(short, short, short)+0x34>
  else if ( db <= da && db <= dc ) reta = (x + z) >> 1;
    1d8c:	42a3      	cmp	r3, r4
    1d8e:	dd11      	ble.n	1db4 <besttwoavg(short, short, short)+0x50>
  else reta = (y + z) >> 1;   //    else if ( dc <= da && dc <= db ) reta = (x + y) >> 1;
    1d90:	440a      	add	r2, r1
    1d92:	1050      	asrs	r0, r2, #1

  return (reta);
}
    1d94:	bc70      	pop	{r4, r5, r6}
    1d96:	4770      	bx	lr
  int16_t reta = 0;
  if ( x > y ) da = x - y; else da = y - x;
  if ( x > z ) db = x - z; else db = z - x;
  if ( z > y ) dc = z - y; else dc = y - z;

  if ( da <= db && da <= dc ) reta = (x + y) >> 1;
    1d98:	42a5      	cmp	r5, r4
    1d9a:	dd07      	ble.n	1dac <besttwoavg(short, short, short)+0x48>
  else if ( db <= da && db <= dc ) reta = (x + z) >> 1;
    1d9c:	429d      	cmp	r5, r3
    1d9e:	dbf7      	blt.n	1d90 <besttwoavg(short, short, short)+0x2c>
    1da0:	e7f4      	b.n	1d8c <besttwoavg(short, short, short)+0x28>
}

static int16_t besttwoavg( int16_t x , int16_t y , int16_t z ) {
  int16_t da, db, dc;
  int16_t reta = 0;
  if ( x > y ) da = x - y; else da = y - x;
    1da2:	b28c      	uxth	r4, r1
    1da4:	b283      	uxth	r3, r0
    1da6:	1ae5      	subs	r5, r4, r3
    1da8:	b22d      	sxth	r5, r5
    1daa:	e7e2      	b.n	1d72 <besttwoavg(short, short, short)+0xe>
  if ( x > z ) db = x - z; else db = z - x;
  if ( z > y ) dc = z - y; else dc = y - z;

  if ( da <= db && da <= dc ) reta = (x + y) >> 1;
    1dac:	4408      	add	r0, r1
    1dae:	1040      	asrs	r0, r0, #1
  else if ( db <= da && db <= dc ) reta = (x + z) >> 1;
  else reta = (y + z) >> 1;   //    else if ( dc <= da && dc <= db ) reta = (x + y) >> 1;

  return (reta);
}
    1db0:	bc70      	pop	{r4, r5, r6}
    1db2:	4770      	bx	lr
  if ( x > y ) da = x - y; else da = y - x;
  if ( x > z ) db = x - z; else db = z - x;
  if ( z > y ) dc = z - y; else dc = y - z;

  if ( da <= db && da <= dc ) reta = (x + y) >> 1;
  else if ( db <= da && db <= dc ) reta = (x + z) >> 1;
    1db4:	4410      	add	r0, r2
    1db6:	1040      	asrs	r0, r0, #1
  else reta = (y + z) >> 1;   //    else if ( dc <= da && dc <= db ) reta = (x + y) >> 1;

  return (reta);
}
    1db8:	bc70      	pop	{r4, r5, r6}
    1dba:	4770      	bx	lr

00001dbc <XPT2046_Touchscreen::update()>:

void XPT2046_Touchscreen::update()
{
	int16_t data[6];

	if (!isrWake) return;
    1dbc:	7803      	ldrb	r3, [r0, #0]
    1dbe:	b16b      	cbz	r3, 1ddc <XPT2046_Touchscreen::update()+0x20>

// TODO: perhaps a future version should offer an option for more oversampling,
//       with the RANSAC algorithm https://en.wikipedia.org/wiki/RANSAC

void XPT2046_Touchscreen::update()
{
    1dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    1dc4:	4a8f      	ldr	r2, [pc, #572]	; (2004 <XPT2046_Touchscreen::update()+0x248>)
	int16_t data[6];

	if (!isrWake) return;
	uint32_t now = millis();
	if (now - msraw < MSEC_THRESHOLD) return;
    1dc6:	68c3      	ldr	r3, [r0, #12]
    1dc8:	6812      	ldr	r2, [r2, #0]

// TODO: perhaps a future version should offer an option for more oversampling,
//       with the RANSAC algorithm https://en.wikipedia.org/wiki/RANSAC

void XPT2046_Touchscreen::update()
{
    1dca:	b085      	sub	sp, #20
    1dcc:	9203      	str	r2, [sp, #12]
	return ret;
    1dce:	9e03      	ldr	r6, [sp, #12]
	int16_t data[6];

	if (!isrWake) return;
	uint32_t now = millis();
	if (now - msraw < MSEC_THRESHOLD) return;
    1dd0:	1af3      	subs	r3, r6, r3
    1dd2:	2b02      	cmp	r3, #2
    1dd4:	d803      	bhi.n	1dde <XPT2046_Touchscreen::update()+0x22>
		  default: // 3
			xraw = 4095 - x;
			yraw = 4095 - y;
		}
	}
}
    1dd6:	b005      	add	sp, #20
    1dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ddc:	4770      	bx	lr

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    1dde:	f8df b250 	ldr.w	fp, [pc, #592]	; 2030 <XPT2046_Touchscreen::update()+0x274>
    1de2:	f89b 300b 	ldrb.w	r3, [fp, #11]
    1de6:	b1f3      	cbz	r3, 1e26 <XPT2046_Touchscreen::update()+0x6a>
			__disable_irq();
    1de8:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    1dea:	f89b 300b 	ldrb.w	r3, [fp, #11]
    1dee:	07dd      	lsls	r5, r3, #31
    1df0:	4619      	mov	r1, r3
    1df2:	d508      	bpl.n	1e06 <XPT2046_Touchscreen::update()+0x4a>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    1df4:	4c84      	ldr	r4, [pc, #528]	; (2008 <XPT2046_Touchscreen::update()+0x24c>)
    1df6:	f8db 100c 	ldr.w	r1, [fp, #12]
    1dfa:	6825      	ldr	r5, [r4, #0]
    1dfc:	4029      	ands	r1, r5
    1dfe:	f8cb 1018 	str.w	r1, [fp, #24]
				NVIC_ICER0 = interruptSave[0];
    1e02:	6021      	str	r1, [r4, #0]
    1e04:	4619      	mov	r1, r3
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1e06:	079c      	lsls	r4, r3, #30
    1e08:	d509      	bpl.n	1e1e <XPT2046_Touchscreen::update()+0x62>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    1e0a:	4c80      	ldr	r4, [pc, #512]	; (200c <XPT2046_Touchscreen::update()+0x250>)
    1e0c:	f8db 3010 	ldr.w	r3, [fp, #16]
    1e10:	6825      	ldr	r5, [r4, #0]
    1e12:	f89b 100b 	ldrb.w	r1, [fp, #11]
    1e16:	402b      	ands	r3, r5
    1e18:	f8cb 301c 	str.w	r3, [fp, #28]
				NVIC_ICER1 = interruptSave[1];
    1e1c:	6023      	str	r3, [r4, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1e1e:	0749      	lsls	r1, r1, #29
    1e20:	f100 80d5 	bmi.w	1fce <XPT2046_Touchscreen::update()+0x212>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    1e24:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1e26:	f8db 3000 	ldr.w	r3, [fp]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    1e2a:	4979      	ldr	r1, [pc, #484]	; (2010 <XPT2046_Touchscreen::update()+0x254>)
    1e2c:	68dc      	ldr	r4, [r3, #12]
    1e2e:	428c      	cmp	r4, r1
    1e30:	d006      	beq.n	1e40 <XPT2046_Touchscreen::update()+0x84>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1e32:	4f78      	ldr	r7, [pc, #480]	; (2014 <XPT2046_Touchscreen::update()+0x258>)
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1e34:	4d78      	ldr	r5, [pc, #480]	; (2018 <XPT2046_Touchscreen::update()+0x25c>)
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1e36:	4c79      	ldr	r4, [pc, #484]	; (201c <XPT2046_Touchscreen::update()+0x260>)
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    1e38:	601f      	str	r7, [r3, #0]
			port().CTAR0 = settings.ctar;
    1e3a:	60d9      	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    1e3c:	611d      	str	r5, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    1e3e:	601c      	str	r4, [r3, #0]
	if (!isrWake) return;
	uint32_t now = millis();
	if (now - msraw < MSEC_THRESHOLD) return;
	
	SPI.beginTransaction(SPI_SETTING);
	digitalWrite(csPin, LOW);
    1e40:	2100      	movs	r1, #0
    1e42:	4604      	mov	r4, r0
    1e44:	7840      	ldrb	r0, [r0, #1]
    1e46:	f005 f877 	bl	6f38 <digitalWrite>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    1e4a:	f8db 2000 	ldr.w	r2, [fp]
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1e4e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data;
    1e52:	23b1      	movs	r3, #177	; 0xb1
		}
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
    1e54:	62d1      	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data;
    1e56:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1e58:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	dafc      	bge.n	1e58 <XPT2046_Touchscreen::update()+0x9c>
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1e5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1e62:	4b6f      	ldr	r3, [pc, #444]	; (2020 <XPT2046_Touchscreen::update()+0x264>)
	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    1e64:	6b90      	ldr	r0, [r2, #56]	; 0x38
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1e66:	62d1      	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1e68:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1e6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1e6c:	2b00      	cmp	r3, #0
    1e6e:	dafc      	bge.n	1e6a <XPT2046_Touchscreen::update()+0xae>
		return port().POPR;
    1e70:	6b95      	ldr	r5, [r2, #56]	; 0x38
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1e72:	4b6c      	ldr	r3, [pc, #432]	; (2024 <XPT2046_Touchscreen::update()+0x268>)
	SPI.transfer(0xB1 /* Z1 */);
	int16_t z1 = SPI.transfer16(0xC1 /* Z2 */) >> 3;
	int z = z1 + 4095;
    1e74:	f3c5 05cc 	ubfx	r5, r5, #3, #13
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1e78:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    1e7c:	62d0      	str	r0, [r2, #44]	; 0x2c
    1e7e:	f605 71ff 	addw	r1, r5, #4095	; 0xfff
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1e82:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1e84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1e86:	2b00      	cmp	r3, #0
    1e88:	dafc      	bge.n	1e84 <XPT2046_Touchscreen::update()+0xc8>
		return port().POPR;
    1e8a:	6b95      	ldr	r5, [r2, #56]	; 0x38
	int16_t z2 = SPI.transfer16(0x91 /* X */) >> 3;
	z -= z2;
    1e8c:	f3c5 05cc 	ubfx	r5, r5, #3, #13
    1e90:	1b4d      	subs	r5, r1, r5
	if (z >= Z_THRESHOLD) {
    1e92:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
    1e96:	db77      	blt.n	1f88 <XPT2046_Touchscreen::update()+0x1cc>
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1e98:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1e9c:	4b61      	ldr	r3, [pc, #388]	; (2024 <XPT2046_Touchscreen::update()+0x268>)
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1e9e:	62d1      	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ea0:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1ea2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	dafc      	bge.n	1ea2 <XPT2046_Touchscreen::update()+0xe6>
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1ea8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1eac:	4b5e      	ldr	r3, [pc, #376]	; (2028 <XPT2046_Touchscreen::update()+0x26c>)
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
    1eae:	6b90      	ldr	r0, [r2, #56]	; 0x38
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1eb0:	62d1      	str	r1, [r2, #44]	; 0x2c
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1eb2:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1eb4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	dafc      	bge.n	1eb4 <XPT2046_Touchscreen::update()+0xf8>
		return port().POPR;
    1eba:	6b97      	ldr	r7, [r2, #56]	; 0x38
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ebc:	4b59      	ldr	r3, [pc, #356]	; (2024 <XPT2046_Touchscreen::update()+0x268>)
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1ebe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    1ec2:	62d1      	str	r1, [r2, #44]	; 0x2c
		SPI.transfer16(0x91 /* X */);  // dummy X measure, 1st is always noisy
		data[0] = SPI.transfer16(0xD1 /* Y */) >> 3;
    1ec4:	f3c7 07cc 	ubfx	r7, r7, #3, #13
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ec8:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1eca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ecc:	2b00      	cmp	r3, #0
    1ece:	dafc      	bge.n	1eca <XPT2046_Touchscreen::update()+0x10e>
		return port().POPR;
    1ed0:	6b90      	ldr	r0, [r2, #56]	; 0x38
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ed2:	4b55      	ldr	r3, [pc, #340]	; (2028 <XPT2046_Touchscreen::update()+0x26c>)
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1ed4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    1ed8:	62d1      	str	r1, [r2, #44]	; 0x2c
		data[1] = SPI.transfer16(0x91 /* X */) >> 3; // make 3 x-y measurements
    1eda:	f3c0 08cc 	ubfx	r8, r0, #3, #13
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ede:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1ee0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ee2:	2b00      	cmp	r3, #0
    1ee4:	dafc      	bge.n	1ee0 <XPT2046_Touchscreen::update()+0x124>
		return port().POPR;
    1ee6:	6b90      	ldr	r0, [r2, #56]	; 0x38
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ee8:	4b4e      	ldr	r3, [pc, #312]	; (2024 <XPT2046_Touchscreen::update()+0x268>)
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1eea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    1eee:	62d1      	str	r1, [r2, #44]	; 0x2c
		data[2] = SPI.transfer16(0xD1 /* Y */) >> 3;
    1ef0:	f3c0 09cc 	ubfx	r9, r0, #3, #13
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1ef4:	6353      	str	r3, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1ef6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    1ef8:	2b00      	cmp	r3, #0
    1efa:	dafc      	bge.n	1ef6 <XPT2046_Touchscreen::update()+0x13a>
		return port().POPR;
    1efc:	6b93      	ldr	r3, [r2, #56]	; 0x38
		data[3] = SPI.transfer16(0x91 /* X */) >> 3;
    1efe:	f3c3 0acc 	ubfx	sl, r3, #3, #13
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1f02:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1f06:	4949      	ldr	r1, [pc, #292]	; (202c <XPT2046_Touchscreen::update()+0x270>)
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1f08:	62d0      	str	r0, [r2, #44]	; 0x2c
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1f0a:	6351      	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1f0c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1f0e:	2900      	cmp	r1, #0
    1f10:	dafc      	bge.n	1f0c <XPT2046_Touchscreen::update()+0x150>
		return port().POPR;
    1f12:	6b93      	ldr	r3, [r2, #56]	; 0x38
    1f14:	9301      	str	r3, [sp, #4]
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1f16:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1f1a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
		port().PUSHR = data;
		while (!(port().SR & SPI_SR_TCF)) ; // wait
		return port().POPR;
	}
	uint16_t transfer16(uint16_t data) {
		port().SR = SPI_SR_TCF;
    1f1e:	62d0      	str	r0, [r2, #44]	; 0x2c
		port().PUSHR = data | SPI_PUSHR_CTAS(1);
    1f20:	6351      	str	r1, [r2, #52]	; 0x34
		while (!(port().SR & SPI_SR_TCF)) ; // wait
    1f22:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    1f24:	2900      	cmp	r1, #0
    1f26:	dafc      	bge.n	1f22 <XPT2046_Touchscreen::update()+0x166>
		return port().POPR;
    1f28:	6b93      	ldr	r3, [r2, #56]	; 0x38
	}
	else data[0] = data[1] = data[2] = data[3] = 0;	// Compiler warns these values may be used unset on early exit.
	data[4] = SPI.transfer16(0xD0 /* Y */) >> 3;	// Last Y touch power down
	data[5] = SPI.transfer16(0) >> 3;
	digitalWrite(csPin, HIGH);
    1f2a:	7860      	ldrb	r0, [r4, #1]
    1f2c:	9300      	str	r3, [sp, #0]
    1f2e:	2101      	movs	r1, #1
    1f30:	f005 f802 	bl	6f38 <digitalWrite>
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    1f34:	f89b 100b 	ldrb.w	r1, [fp, #11]
    1f38:	4b3d      	ldr	r3, [pc, #244]	; (2030 <XPT2046_Touchscreen::update()+0x274>)
    1f3a:	4608      	mov	r0, r1
    1f3c:	b199      	cbz	r1, 1f66 <XPT2046_Touchscreen::update()+0x1aa>
			if (interruptMasksUsed & 0x01) {
    1f3e:	07ca      	lsls	r2, r1, #31
    1f40:	d503      	bpl.n	1f4a <XPT2046_Touchscreen::update()+0x18e>
				NVIC_ISER0 = interruptSave[0];
    1f42:	483c      	ldr	r0, [pc, #240]	; (2034 <XPT2046_Touchscreen::update()+0x278>)
    1f44:	699b      	ldr	r3, [r3, #24]
    1f46:	6003      	str	r3, [r0, #0]
    1f48:	4608      	mov	r0, r1
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    1f4a:	078a      	lsls	r2, r1, #30
    1f4c:	d505      	bpl.n	1f5a <XPT2046_Touchscreen::update()+0x19e>
				NVIC_ISER1 = interruptSave[1];
    1f4e:	4b3a      	ldr	r3, [pc, #232]	; (2038 <XPT2046_Touchscreen::update()+0x27c>)
    1f50:	f8db 101c 	ldr.w	r1, [fp, #28]
    1f54:	f89b 000b 	ldrb.w	r0, [fp, #11]
    1f58:	6019      	str	r1, [r3, #0]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    1f5a:	0743      	lsls	r3, r0, #29
    1f5c:	d503      	bpl.n	1f66 <XPT2046_Touchscreen::update()+0x1aa>
				NVIC_ISER2 = interruptSave[2];
    1f5e:	4937      	ldr	r1, [pc, #220]	; (203c <XPT2046_Touchscreen::update()+0x280>)
    1f60:	f8db 2020 	ldr.w	r2, [fp, #32]
    1f64:	600a      	str	r2, [r1, #0]
	SPI.endTransaction();
	//Serial.printf("z=%d  ::  z1=%d,  z2=%d  ", z, z1, z2);
	if (z < 0) z = 0;
    1f66:	2d00      	cmp	r5, #0
    1f68:	db3a      	blt.n	1fe0 <XPT2046_Touchscreen::update()+0x224>
	if (z < Z_THRESHOLD) { //	if ( !touched ) {
    1f6a:	f5b5 7fc8 	cmp.w	r5, #400	; 0x190
    1f6e:	da11      	bge.n	1f94 <XPT2046_Touchscreen::update()+0x1d8>
		// Serial.println();
		zraw = 0;
    1f70:	2300      	movs	r3, #0
		if (z < Z_THRESHOLD_INT) { //	if ( !touched ) {
    1f72:	2d4a      	cmp	r5, #74	; 0x4a
	SPI.endTransaction();
	//Serial.printf("z=%d  ::  z1=%d,  z2=%d  ", z, z1, z2);
	if (z < 0) z = 0;
	if (z < Z_THRESHOLD) { //	if ( !touched ) {
		// Serial.println();
		zraw = 0;
    1f74:	8123      	strh	r3, [r4, #8]
		if (z < Z_THRESHOLD_INT) { //	if ( !touched ) {
    1f76:	f73f af2e 	bgt.w	1dd6 <XPT2046_Touchscreen::update()+0x1a>
			if (255 != tirqPin) isrWake = false;
    1f7a:	78a3      	ldrb	r3, [r4, #2]
    1f7c:	2bff      	cmp	r3, #255	; 0xff
    1f7e:	f43f af2a 	beq.w	1dd6 <XPT2046_Touchscreen::update()+0x1a>
    1f82:	2300      	movs	r3, #0
    1f84:	7023      	strb	r3, [r4, #0]
    1f86:	e726      	b.n	1dd6 <XPT2046_Touchscreen::update()+0x1a>
		data[0] = SPI.transfer16(0xD1 /* Y */) >> 3;
		data[1] = SPI.transfer16(0x91 /* X */) >> 3; // make 3 x-y measurements
		data[2] = SPI.transfer16(0xD1 /* Y */) >> 3;
		data[3] = SPI.transfer16(0x91 /* X */) >> 3;
	}
	else data[0] = data[1] = data[2] = data[3] = 0;	// Compiler warns these values may be used unset on early exit.
    1f88:	f04f 0a00 	mov.w	sl, #0
    1f8c:	46d1      	mov	r9, sl
    1f8e:	46d0      	mov	r8, sl
    1f90:	4657      	mov	r7, sl
    1f92:	e7b6      	b.n	1f02 <XPT2046_Touchscreen::update()+0x146>
	
	// Average pair with least distance between each measured x then y
	//Serial.printf("    z1=%d,z2=%d  ", z1, z2);
	//Serial.printf("p=%d,  %d,%d  %d,%d  %d,%d", zraw,
		//data[0], data[1], data[2], data[3], data[4], data[5]);
	int16_t x = besttwoavg( data[0], data[2], data[4] );
    1f94:	9b01      	ldr	r3, [sp, #4]
		if (z < Z_THRESHOLD_INT) { //	if ( !touched ) {
			if (255 != tirqPin) isrWake = false;
		}
		return;
	}
	zraw = z;
    1f96:	8125      	strh	r5, [r4, #8]
	
	// Average pair with least distance between each measured x then y
	//Serial.printf("    z1=%d,z2=%d  ", z1, z2);
	//Serial.printf("p=%d,  %d,%d  %d,%d  %d,%d", zraw,
		//data[0], data[1], data[2], data[3], data[4], data[5]);
	int16_t x = besttwoavg( data[0], data[2], data[4] );
    1f98:	f3c3 02cc 	ubfx	r2, r3, #3, #13
    1f9c:	4649      	mov	r1, r9
    1f9e:	4638      	mov	r0, r7
    1fa0:	f7ff fee0 	bl	1d64 <besttwoavg(short, short, short)>
	int16_t y = besttwoavg( data[1], data[3], data[5] );
    1fa4:	9b00      	ldr	r3, [sp, #0]
	
	// Average pair with least distance between each measured x then y
	//Serial.printf("    z1=%d,z2=%d  ", z1, z2);
	//Serial.printf("p=%d,  %d,%d  %d,%d  %d,%d", zraw,
		//data[0], data[1], data[2], data[3], data[4], data[5]);
	int16_t x = besttwoavg( data[0], data[2], data[4] );
    1fa6:	4605      	mov	r5, r0
	int16_t y = besttwoavg( data[1], data[3], data[5] );
    1fa8:	f3c3 02cc 	ubfx	r2, r3, #3, #13
    1fac:	4651      	mov	r1, sl
    1fae:	4640      	mov	r0, r8
    1fb0:	f7ff fed8 	bl	1d64 <besttwoavg(short, short, short)>
	
	//Serial.printf("    %d,%d", x, y);
	//Serial.println();
	if (z >= Z_THRESHOLD) {
		msraw = now;	// good read completed, set wait
		switch (rotation) {
    1fb4:	78e3      	ldrb	r3, [r4, #3]
	int16_t y = besttwoavg( data[1], data[3], data[5] );
	
	//Serial.printf("    %d,%d", x, y);
	//Serial.println();
	if (z >= Z_THRESHOLD) {
		msraw = now;	// good read completed, set wait
    1fb6:	60e6      	str	r6, [r4, #12]
		switch (rotation) {
    1fb8:	2b01      	cmp	r3, #1
    1fba:	d01a      	beq.n	1ff2 <XPT2046_Touchscreen::update()+0x236>
    1fbc:	d31c      	bcc.n	1ff8 <XPT2046_Touchscreen::update()+0x23c>
    1fbe:	2b02      	cmp	r3, #2
    1fc0:	d111      	bne.n	1fe6 <XPT2046_Touchscreen::update()+0x22a>
			xraw = x;
			yraw = y;
			break;
		  case 2:
			xraw = y;
			yraw = 4095 - x;
    1fc2:	f5c5 657f 	rsb	r5, r5, #4080	; 0xff0
    1fc6:	350f      	adds	r5, #15
    1fc8:	80e5      	strh	r5, [r4, #6]
		  case 1:
			xraw = x;
			yraw = y;
			break;
		  case 2:
			xraw = y;
    1fca:	80a0      	strh	r0, [r4, #4]
			yraw = 4095 - x;
			break;
    1fcc:	e703      	b.n	1dd6 <XPT2046_Touchscreen::update()+0x1a>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    1fce:	491c      	ldr	r1, [pc, #112]	; (2040 <XPT2046_Touchscreen::update()+0x284>)
    1fd0:	f8db 3014 	ldr.w	r3, [fp, #20]
    1fd4:	680c      	ldr	r4, [r1, #0]
    1fd6:	4023      	ands	r3, r4
    1fd8:	f8cb 3020 	str.w	r3, [fp, #32]
				NVIC_ICER2 = interruptSave[2];
    1fdc:	600b      	str	r3, [r1, #0]
    1fde:	e721      	b.n	1e24 <XPT2046_Touchscreen::update()+0x68>
	SPI.endTransaction();
	//Serial.printf("z=%d  ::  z1=%d,  z2=%d  ", z, z1, z2);
	if (z < 0) z = 0;
	if (z < Z_THRESHOLD) { //	if ( !touched ) {
		// Serial.println();
		zraw = 0;
    1fe0:	2300      	movs	r3, #0
    1fe2:	8123      	strh	r3, [r4, #8]
    1fe4:	e7c9      	b.n	1f7a <XPT2046_Touchscreen::update()+0x1be>
		  case 2:
			xraw = y;
			yraw = 4095 - x;
			break;
		  default: // 3
			xraw = 4095 - x;
    1fe6:	f5c5 657f 	rsb	r5, r5, #4080	; 0xff0
			yraw = 4095 - y;
    1fea:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
		  case 2:
			xraw = y;
			yraw = 4095 - x;
			break;
		  default: // 3
			xraw = 4095 - x;
    1fee:	350f      	adds	r5, #15
			yraw = 4095 - y;
    1ff0:	300f      	adds	r0, #15
		  case 2:
			xraw = y;
			yraw = 4095 - x;
			break;
		  default: // 3
			xraw = 4095 - x;
    1ff2:	80a5      	strh	r5, [r4, #4]
			yraw = 4095 - y;
    1ff4:	80e0      	strh	r0, [r4, #6]
    1ff6:	e6ee      	b.n	1dd6 <XPT2046_Touchscreen::update()+0x1a>
	//Serial.println();
	if (z >= Z_THRESHOLD) {
		msraw = now;	// good read completed, set wait
		switch (rotation) {
		  case 0:
			xraw = 4095 - y;
    1ff8:	f5c0 607f 	rsb	r0, r0, #4080	; 0xff0
    1ffc:	300f      	adds	r0, #15
    1ffe:	80a0      	strh	r0, [r4, #4]
			yraw = x;
    2000:	80e5      	strh	r5, [r4, #6]
			break;
    2002:	e6e8      	b.n	1dd6 <XPT2046_Touchscreen::update()+0x1a>
    2004:	1fff9724 	.word	0x1fff9724
    2008:	e000e180 	.word	0xe000e180
    200c:	e000e184 	.word	0xe000e184
    2010:	38012003 	.word	0x38012003
    2014:	003f4001 	.word	0x003f4001
    2018:	78012003 	.word	0x78012003
    201c:	803f0000 	.word	0x803f0000
    2020:	100000c1 	.word	0x100000c1
    2024:	10000091 	.word	0x10000091
    2028:	100000d1 	.word	0x100000d1
    202c:	100000d0 	.word	0x100000d0
    2030:	1fff8894 	.word	0x1fff8894
    2034:	e000e100 	.word	0xe000e100
    2038:	e000e104 	.word	0xe000e104
    203c:	e000e108 	.word	0xe000e108
    2040:	e000e188 	.word	0xe000e188

00002044 <XPT2046_Touchscreen::getPoint()>:
	XPT2046_Touchscreen *o = isrPinptr;
	o->isrWake = true;
}

TS_Point XPT2046_Touchscreen::getPoint()
{
    2044:	b538      	push	{r3, r4, r5, lr}
    2046:	460d      	mov	r5, r1
    2048:	4604      	mov	r4, r0
	update();
    204a:	4608      	mov	r0, r1
    204c:	f7ff feb6 	bl	1dbc <XPT2046_Touchscreen::update()>
	TS_Point(int16_t x, int16_t y, int16_t z) : x(x), y(y), z(z) {}
    2050:	88a9      	ldrh	r1, [r5, #4]
	return TS_Point(xraw, yraw, zraw);
    2052:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
    2056:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
    205a:	8021      	strh	r1, [r4, #0]
    205c:	8062      	strh	r2, [r4, #2]
    205e:	80a3      	strh	r3, [r4, #4]
}
    2060:	4620      	mov	r0, r4
    2062:	bd38      	pop	{r3, r4, r5, pc}

00002064 <XPT2046_Touchscreen::touched()>:
{
	return (isrWake);
}

bool XPT2046_Touchscreen::touched()
{
    2064:	b510      	push	{r4, lr}
    2066:	4604      	mov	r4, r0
	update();
    2068:	f7ff fea8 	bl	1dbc <XPT2046_Touchscreen::update()>
	return (zraw >= Z_THRESHOLD);
    206c:	f9b4 0008 	ldrsh.w	r0, [r4, #8]
}
    2070:	f5b0 7fc8 	cmp.w	r0, #400	; 0x190
    2074:	bfb4      	ite	lt
    2076:	2000      	movlt	r0, #0
    2078:	2001      	movge	r0, #1
    207a:	bd10      	pop	{r4, pc}

0000207c <EventResponder::triggerEvent(int, void*)>:
	}

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
    207c:	b410      	push	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    207e:	7f04      	ldrb	r4, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2080:	6041      	str	r1, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2082:	2c02      	cmp	r4, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2084:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    2086:	d002      	beq.n	208e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
		}
	}
    2088:	bc10      	pop	{r4}
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    208a:	f006 b86b 	b.w	8164 <EventResponder::triggerEventNotImmediate()>
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    208e:	6883      	ldr	r3, [r0, #8]
		} else {
			triggerEventNotImmediate();
		}
	}
    2090:	bc10      	pop	{r4}
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    2092:	4718      	bx	r3

00002094 <_spi_dma_rxISR0()>:
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2094:	b4f0      	push	{r4, r5, r6, r7}

//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
    2096:	4b46      	ldr	r3, [pc, #280]	; (21b0 <_spi_dma_rxISR0()+0x11c>)
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    2098:	4a46      	ldr	r2, [pc, #280]	; (21b4 <_spi_dma_rxISR0()+0x120>)
    209a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    209c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    209e:	7901      	ldrb	r1, [r0, #4]
    20a0:	7011      	strb	r1, [r2, #0]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    20a2:	4945      	ldr	r1, [pc, #276]	; (21b8 <_spi_dma_rxISR0()+0x124>)
    20a4:	7922      	ldrb	r2, [r4, #4]
    20a6:	700a      	strb	r2, [r1, #0]
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    20a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    20aa:	7900      	ldrb	r0, [r0, #4]
    20ac:	7008      	strb	r0, [r1, #0]
    20ae:	2a00      	cmp	r2, #0
    20b0:	d046      	beq.n	2140 <_spi_dma_rxISR0()+0xac>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    20b2:	6859      	ldr	r1, [r3, #4]
    20b4:	68c9      	ldr	r1, [r1, #12]
    20b6:	428a      	cmp	r2, r1
    20b8:	d83e      	bhi.n	2138 <_spi_dma_rxISR0()+0xa4>
    20ba:	6821      	ldr	r1, [r4, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    20bc:	8bcc      	ldrh	r4, [r1, #30]
    20be:	0424      	lsls	r4, r4, #16
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    20c0:	f102 30ff 	add.w	r0, r2, #4294967295

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    20c4:	d465      	bmi.n	2192 <_spi_dma_rxISR0()+0xfe>
		tcd->BITER = len & 0x7fff;
    20c6:	f3c0 000e 	ubfx	r0, r0, #0, #15
    20ca:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    20cc:	8bc8      	ldrh	r0, [r1, #30]
    20ce:	b280      	uxth	r0, r0
    20d0:	82c8      	strh	r0, [r1, #22]
    20d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
    20d4:	6809      	ldr	r1, [r1, #0]

#ifndef TRANSFER_COUNT_FIXED
inline void DMAChanneltransferCount(DMAChannel * dmac, unsigned int len) {
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    20d6:	8bc8      	ldrh	r0, [r1, #30]
    20d8:	0400      	lsls	r0, r0, #16
    20da:	d452      	bmi.n	2182 <_spi_dma_rxISR0()+0xee>
		tcd->BITER = len & 0x7fff;
    20dc:	f3c2 000e 	ubfx	r0, r2, #0, #15
    20e0:	83c8      	strh	r0, [r1, #30]
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    20e2:	8bc8      	ldrh	r0, [r1, #30]
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    20e4:	2400      	movs	r4, #0
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    20e6:	b280      	uxth	r0, r0
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    20e8:	f112 32ff 	adds.w	r2, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
	}
	tcd->CITER = tcd->BITER; 
    20ec:	82c8      	strh	r0, [r1, #22]
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    20ee:	bf18      	it	ne
    20f0:	2201      	movne	r2, #1
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
    20f2:	629c      	str	r4, [r3, #40]	; 0x28
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    20f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    20f6:	482e      	ldr	r0, [pc, #184]	; (21b0 <_spi_dma_rxISR0()+0x11c>)
    20f8:	6809      	ldr	r1, [r1, #0]
    20fa:	680d      	ldr	r5, [r1, #0]
    20fc:	f100 0424 	add.w	r4, r0, #36	; 0x24
    2100:	42a5      	cmp	r5, r4
    2102:	d036      	beq.n	2172 <_spi_dma_rxISR0()+0xde>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2104:	6800      	ldr	r0, [r0, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2106:	68c4      	ldr	r4, [r0, #12]
    2108:	f014 4f80 	tst.w	r4, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    210c:	680c      	ldr	r4, [r1, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    210e:	680d      	ldr	r5, [r1, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    2110:	bf15      	itete	ne
    2112:	8824      	ldrhne	r4, [r4, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    2114:	7824      	ldrbeq	r4, [r4, #0]
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    2116:	3502      	addne	r5, #2
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    2118:	3501      	addeq	r5, #1
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    211a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    211e:	600d      	str	r5, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2120:	6344      	str	r4, [r0, #52]	; 0x34
    2122:	6b19      	ldr	r1, [r3, #48]	; 0x30
	/***************************************/
	/**    Enable / Disable               **/
	/***************************************/

	void enable(void) {
		DMA_SERQ = channel;
    2124:	4b25      	ldr	r3, [pc, #148]	; (21bc <_spi_dma_rxISR0()+0x128>)
    2126:	7909      	ldrb	r1, [r1, #4]
    2128:	7019      	strb	r1, [r3, #0]
			}
		}
		_dmaRX->enable();
    212a:	4921      	ldr	r1, [pc, #132]	; (21b0 <_spi_dma_rxISR0()+0x11c>)
		if (should_reenable_tx)
    212c:	b112      	cbz	r2, 2134 <_spi_dma_rxISR0()+0xa0>
    212e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
    2130:	7912      	ldrb	r2, [r2, #4]
    2132:	701a      	strb	r2, [r3, #0]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    2134:	bcf0      	pop	{r4, r5, r6, r7}
    2136:	4770      	bx	lr
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
			_dma_count_remaining -= hardware().max_dma_count;
    2138:	1a52      	subs	r2, r2, r1
    213a:	629a      	str	r2, [r3, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    213c:	2201      	movs	r2, #1
    213e:	e7d9      	b.n	20f4 <_spi_dma_rxISR0()+0x60>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    2140:	6b58      	ldr	r0, [r3, #52]	; 0x34
    2142:	6819      	ldr	r1, [r3, #0]
    2144:	6805      	ldr	r5, [r0, #0]
			_dmaTX->enable();
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    2146:	4c1e      	ldr	r4, [pc, #120]	; (21c0 <_spi_dma_rxISR0()+0x12c>)
		_dmaRX->enable();
		if (should_reenable_tx)
			_dmaTX->enable();
	} else {

		port().RSER = 0;
    2148:	630a      	str	r2, [r1, #48]	; 0x30
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
    214a:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    214c:	68cc      	ldr	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    214e:	682d      	ldr	r5, [r5, #0]
    2150:	4e1c      	ldr	r6, [pc, #112]	; (21c4 <_spi_dma_rxISR0()+0x130>)
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    2152:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    2156:	2703      	movs	r7, #3
    2158:	42b5      	cmp	r5, r6
	} else {

		port().RSER = 0;
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    215a:	60cc      	str	r4, [r1, #12]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    215c:	f883 7025 	strb.w	r7, [r3, #37]	; 0x25
    2160:	d11f      	bne.n	21a2 <_spi_dma_rxISR0()+0x10e>
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    2162:	7f03      	ldrb	r3, [r0, #28]

	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
    2164:	6042      	str	r2, [r0, #4]
		_data = data;
		if (_type == EventTypeImmediate) {
    2166:	2b02      	cmp	r3, #2
	// Trigger the event.  An optional status code and data may be provided.
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
    2168:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    216a:	d01e      	beq.n	21aa <_spi_dma_rxISR0()+0x116>
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    216c:	bcf0      	pop	{r4, r5, r6, r7}
			(*_function)(*this);
		} else {
			triggerEventNotImmediate();
    216e:	f005 bff9 	b.w	8164 <EventResponder::triggerEventNotImmediate()>
    2172:	6801      	ldr	r1, [r0, #0]
			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    2174:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    2178:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    217a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    217e:	6348      	str	r0, [r1, #52]	; 0x34
    2180:	e7cf      	b.n	2122 <_spi_dma_rxISR0()+0x8e>
	// note does no validation of length...
	DMABaseClass::TCD_t *tcd = dmac->TCD;
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
		tcd->BITER = len & 0x7fff;
	} else {
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    2182:	8bcc      	ldrh	r4, [r1, #30]
    2184:	f3c2 0008 	ubfx	r0, r2, #0, #9
    2188:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    218c:	4320      	orrs	r0, r4
    218e:	83c8      	strh	r0, [r1, #30]
    2190:	e7a7      	b.n	20e2 <_spi_dma_rxISR0()+0x4e>
    2192:	8bcc      	ldrh	r4, [r1, #30]
    2194:	f3c0 0008 	ubfx	r0, r0, #0, #9
    2198:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    219c:	4320      	orrs	r0, r4
    219e:	83c8      	strh	r0, [r1, #30]
    21a0:	e794      	b.n	20cc <_spi_dma_rxISR0()+0x38>
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    21a2:	462b      	mov	r3, r5
    21a4:	4611      	mov	r1, r2
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    21a6:	bcf0      	pop	{r4, r5, r6, r7}
		//port().MCR = SPI_MCR_MSTR | SPI_MCR_CLR_RXF | SPI_MCR_PCSIS(0x1F);  // clear out the queue
		port().SR = 0xFF0F0000;
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();
    21a8:	4718      	bx	r3
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
			(*_function)(*this);
    21aa:	6883      	ldr	r3, [r0, #8]
#endif


#if defined(__MK20DX128__) || defined(__MK20DX256__)
#ifdef SPI_HAS_TRANSFER_ASYNC
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    21ac:	bcf0      	pop	{r4, r5, r6, r7}
    21ae:	4718      	bx	r3
    21b0:	1fff8894 	.word	0x1fff8894
    21b4:	4000801f 	.word	0x4000801f
    21b8:	4000801c 	.word	0x4000801c
    21bc:	4000801b 	.word	0x4000801b
    21c0:	ff0f0000 	.word	0xff0f0000
    21c4:	0000207d 	.word	0x0000207d

000021c8 <SPIClass::begin()>:
    21c8:	e890 000c 	ldmia.w	r0, {r2, r3}
SPIClass SPI2((uintptr_t)&KINETISK_SPI2, (uintptr_t)&SPIClass::spi2_hardware);
#endif


void SPIClass::begin()
{
    21cc:	b4f0      	push	{r4, r5, r6, r7}
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    21ce:	681c      	ldr	r4, [r3, #0]
    21d0:	6859      	ldr	r1, [r3, #4]
    21d2:	6825      	ldr	r5, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    21d4:	4f16      	ldr	r7, [pc, #88]	; (2230 <SPIClass::begin()+0x68>)
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    21d6:	4e17      	ldr	r6, [pc, #92]	; (2234 <SPIClass::begin()+0x6c>)

void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
    21d8:	4329      	orrs	r1, r5
    21da:	6021      	str	r1, [r4, #0]
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    21dc:	4d16      	ldr	r5, [pc, #88]	; (2238 <SPIClass::begin()+0x70>)
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    21de:	4917      	ldr	r1, [pc, #92]	; (223c <SPIClass::begin()+0x74>)
void SPIClass::begin()
{
	volatile uint32_t *reg;

	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
    21e0:	6017      	str	r7, [r2, #0]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    21e2:	60d6      	str	r6, [r2, #12]
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
    21e4:	6115      	str	r5, [r2, #16]
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
    21e6:	6011      	str	r1, [r2, #0]
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    21e8:	7a41      	ldrb	r1, [r0, #9]
    21ea:	4a15      	ldr	r2, [pc, #84]	; (2240 <SPIClass::begin()+0x78>)
    21ec:	185c      	adds	r4, r3, r1
	*reg = hardware().mosi_mux[mosi_pin_index];
    21ee:	310a      	adds	r1, #10
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    21f0:	f894 4024 	ldrb.w	r4, [r4, #36]	; 0x24
	*reg = hardware().mosi_mux[mosi_pin_index];
    21f4:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
	hardware().clock_gate_register |= hardware().clock_gate_mask;
	port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x1F);
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    21f8:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    21fc:	6849      	ldr	r1, [r1, #4]
	*reg = hardware().mosi_mux[mosi_pin_index];
    21fe:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    2200:	7a01      	ldrb	r1, [r0, #8]
    2202:	185c      	adds	r4, r3, r1
	*reg= hardware().miso_mux[miso_pin_index];
    2204:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    2208:	7e24      	ldrb	r4, [r4, #24]
	*reg= hardware().miso_mux[miso_pin_index];
    220a:	69cd      	ldr	r5, [r1, #28]
	port().CTAR0 = SPI_CTAR_FMSZ(7) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().CTAR1 = SPI_CTAR_FMSZ(15) | SPI_CTAR_PBR(0) | SPI_CTAR_BR(1) | SPI_CTAR_CSSCK(1);
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    220c:	eb02 01c4 	add.w	r1, r2, r4, lsl #3
    2210:	6849      	ldr	r1, [r1, #4]
	*reg= hardware().miso_mux[miso_pin_index];
    2212:	600d      	str	r5, [r1, #0]
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2214:	7a81      	ldrb	r1, [r0, #10]
    2216:	1858      	adds	r0, r3, r1
	*reg = hardware().sck_mux[sck_pin_index];
    2218:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    221c:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
	*reg = hardware().sck_mux[sck_pin_index];
    2220:	6b59      	ldr	r1, [r3, #52]	; 0x34
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2222:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
	*reg = hardware().sck_mux[sck_pin_index];
}
    2226:	bcf0      	pop	{r4, r5, r6, r7}
	port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x1F);
	reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
	*reg = hardware().mosi_mux[mosi_pin_index];
	reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
	*reg= hardware().miso_mux[miso_pin_index];
	reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    2228:	6853      	ldr	r3, [r2, #4]
	*reg = hardware().sck_mux[sck_pin_index];
    222a:	6019      	str	r1, [r3, #0]
}
    222c:	4770      	bx	lr
    222e:	bf00      	nop
    2230:	001f4001 	.word	0x001f4001
    2234:	38001001 	.word	0x38001001
    2238:	78001001 	.word	0x78001001
    223c:	801f0000 	.word	0x801f0000
    2240:	0001b848 	.word	0x0001b848

00002244 <SPIClass::pinIsChipSelect(unsigned char)>:
	ctar |= clk;
	updateCTAR(ctar);
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
    2244:	b410      	push	{r4}
    2246:	6844      	ldr	r4, [r0, #4]
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    2248:	2300      	movs	r3, #0
    224a:	f104 023b 	add.w	r2, r4, #59	; 0x3b
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    224e:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    2252:	4288      	cmp	r0, r1
    2254:	d005      	beq.n	2262 <SPIClass::pinIsChipSelect(unsigned char)+0x1e>
	updateCTAR(ctar);
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    2256:	3301      	adds	r3, #1
    2258:	2b09      	cmp	r3, #9
    225a:	d1f8      	bne.n	224e <SPIClass::pinIsChipSelect(unsigned char)+0xa>
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
	}
	return 0;
    225c:	2000      	movs	r0, #0
}
    225e:	bc10      	pop	{r4}
    2260:	4770      	bx	lr
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    2262:	4423      	add	r3, r4
	}
	return 0;
}
    2264:	bc10      	pop	{r4}
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    2266:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
	}
	return 0;
}
    226a:	4770      	bx	lr

0000226c <SPIClass::pinIsChipSelect(unsigned char, unsigned char)>:

bool SPIClass::pinIsChipSelect(uint8_t pin1, uint8_t pin2)
{
    226c:	b470      	push	{r4, r5, r6}
    226e:	6846      	ldr	r6, [r0, #4]
    2270:	f106 053b 	add.w	r5, r6, #59	; 0x3b
    2274:	4628      	mov	r0, r5
	updateCTAR(ctar);
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    2276:	2300      	movs	r3, #0
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    2278:	f810 4f01 	ldrb.w	r4, [r0, #1]!
    227c:	428c      	cmp	r4, r1
    227e:	d005      	beq.n	228c <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x20>
	updateCTAR(ctar);
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    2280:	3301      	adds	r3, #1
    2282:	2b09      	cmp	r3, #9
    2284:	d1f8      	bne.n	2278 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0xc>
}

bool SPIClass::pinIsChipSelect(uint8_t pin1, uint8_t pin2)
{
	uint8_t pin1_mask, pin2_mask;
	if ((pin1_mask = (uint8_t)pinIsChipSelect(pin1)) == 0) return false;
    2286:	2000      	movs	r0, #0
	if ((pin2_mask = (uint8_t)pinIsChipSelect(pin2)) == 0) return false;
	//Serial.printf("pinIsChipSelect %d %d %x %x\n\r", pin1, pin2, pin1_mask, pin2_mask);
	if ((pin1_mask & pin2_mask) != 0) return false;
	return true;
}
    2288:	bc70      	pop	{r4, r5, r6}
    228a:	4770      	bx	lr
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    228c:	4433      	add	r3, r6
    228e:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}

bool SPIClass::pinIsChipSelect(uint8_t pin1, uint8_t pin2)
{
	uint8_t pin1_mask, pin2_mask;
	if ((pin1_mask = (uint8_t)pinIsChipSelect(pin1)) == 0) return false;
    2292:	2800      	cmp	r0, #0
    2294:	d0f8      	beq.n	2288 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x1c>
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    2296:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    229a:	4291      	cmp	r1, r2
    229c:	f04f 0300 	mov.w	r3, #0
    22a0:	d006      	beq.n	22b0 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x44>
	updateCTAR(ctar);
}

uint8_t SPIClass::pinIsChipSelect(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    22a2:	3301      	adds	r3, #1
    22a4:	2b09      	cmp	r3, #9
    22a6:	d0ee      	beq.n	2286 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x1a>
		if (pin == hardware().cs_pin[i]) return hardware().cs_mask[i];
    22a8:	f815 1f01 	ldrb.w	r1, [r5, #1]!
    22ac:	4291      	cmp	r1, r2
    22ae:	d1f8      	bne.n	22a2 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x36>
    22b0:	4433      	add	r3, r6
    22b2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c

bool SPIClass::pinIsChipSelect(uint8_t pin1, uint8_t pin2)
{
	uint8_t pin1_mask, pin2_mask;
	if ((pin1_mask = (uint8_t)pinIsChipSelect(pin1)) == 0) return false;
	if ((pin2_mask = (uint8_t)pinIsChipSelect(pin2)) == 0) return false;
    22b6:	b12b      	cbz	r3, 22c4 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x58>
	//Serial.printf("pinIsChipSelect %d %d %x %x\n\r", pin1, pin2, pin1_mask, pin2_mask);
	if ((pin1_mask & pin2_mask) != 0) return false;
    22b8:	4218      	tst	r0, r3
    22ba:	bf0c      	ite	eq
    22bc:	2001      	moveq	r0, #1
    22be:	2000      	movne	r0, #0
	return true;
}
    22c0:	bc70      	pop	{r4, r5, r6}
    22c2:	4770      	bx	lr
}

bool SPIClass::pinIsChipSelect(uint8_t pin1, uint8_t pin2)
{
	uint8_t pin1_mask, pin2_mask;
	if ((pin1_mask = (uint8_t)pinIsChipSelect(pin1)) == 0) return false;
    22c4:	4618      	mov	r0, r3
    22c6:	e7df      	b.n	2288 <SPIClass::pinIsChipSelect(unsigned char, unsigned char)+0x1c>

000022c8 <SPIClass::pinIsMOSI(unsigned char)>:
	const SPI_Hardware_t & hardware() { return *(const SPI_Hardware_t *)hardware_addr; }
    22c8:	6843      	ldr	r3, [r0, #4]
}

bool SPIClass::pinIsMOSI(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
		if (pin == hardware().mosi_pin[i]) return true;
    22ca:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    22ce:	428a      	cmp	r2, r1
    22d0:	d006      	beq.n	22e0 <SPIClass::pinIsMOSI(unsigned char)+0x18>
    22d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    22d6:	1a58      	subs	r0, r3, r1
    22d8:	fab0 f080 	clz	r0, r0
    22dc:	0940      	lsrs	r0, r0, #5
    22de:	4770      	bx	lr
    22e0:	2001      	movs	r0, #1
	}
	return false;
}
    22e2:	4770      	bx	lr

000022e4 <SPIClass::pinIsMISO(unsigned char)>:
    22e4:	6843      	ldr	r3, [r0, #4]

bool SPIClass::pinIsMISO(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
		if (pin == hardware().miso_pin[i]) return true;
    22e6:	7e1a      	ldrb	r2, [r3, #24]
    22e8:	428a      	cmp	r2, r1
    22ea:	d005      	beq.n	22f8 <SPIClass::pinIsMISO(unsigned char)+0x14>
    22ec:	7e5b      	ldrb	r3, [r3, #25]
    22ee:	1a58      	subs	r0, r3, r1
    22f0:	fab0 f080 	clz	r0, r0
    22f4:	0940      	lsrs	r0, r0, #5
    22f6:	4770      	bx	lr
    22f8:	2001      	movs	r0, #1
	}
	return false;
}
    22fa:	4770      	bx	lr

000022fc <SPIClass::pinIsSCK(unsigned char)>:
    22fc:	6843      	ldr	r3, [r0, #4]

bool SPIClass::pinIsSCK(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
		if (pin == hardware().sck_pin[i]) return true;
    22fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    2302:	428a      	cmp	r2, r1
    2304:	d006      	beq.n	2314 <SPIClass::pinIsSCK(unsigned char)+0x18>
    2306:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
    230a:	1a58      	subs	r0, r3, r1
    230c:	fab0 f080 	clz	r0, r0
    2310:	0940      	lsrs	r0, r0, #5
    2312:	4770      	bx	lr
    2314:	2001      	movs	r0, #1
	}
	return false;
}
    2316:	4770      	bx	lr

00002318 <SPIClass::setCS(unsigned char)>:

// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
    2318:	b410      	push	{r4}
    231a:	6844      	ldr	r4, [r0, #4]
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    231c:	2300      	movs	r3, #0
    231e:	f104 023b 	add.w	r2, r4, #59	; 0x3b
		if (pin == hardware().cs_pin[i]) {
    2322:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    2326:	4288      	cmp	r0, r1
    2328:	d005      	beq.n	2336 <SPIClass::setCS(unsigned char)+0x1e>
}

// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
    232a:	3301      	adds	r3, #1
    232c:	2b09      	cmp	r3, #9
    232e:	d1f8      	bne.n	2322 <SPIClass::setCS(unsigned char)+0xa>
			volatile uint32_t *reg = portConfigRegister(pin);
			*reg = hardware().cs_mux[i];
			return hardware().cs_mask[i];
		}
	}
	return 0;
    2330:	2000      	movs	r0, #0
}
    2332:	bc10      	pop	{r4}
    2334:	4770      	bx	lr
// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) {
			volatile uint32_t *reg = portConfigRegister(pin);
    2336:	4a07      	ldr	r2, [pc, #28]	; (2354 <SPIClass::setCS(unsigned char)+0x3c>)
    2338:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
			*reg = hardware().cs_mux[i];
    233c:	f103 0012 	add.w	r0, r3, #18
// setCS() is not intended for use from normal Arduino programs/sketches.
uint8_t SPIClass::setCS(uint8_t pin)
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) {
			volatile uint32_t *reg = portConfigRegister(pin);
    2340:	684a      	ldr	r2, [r1, #4]
			*reg = hardware().cs_mux[i];
    2342:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
    2346:	6011      	str	r1, [r2, #0]
			return hardware().cs_mask[i];
    2348:	4423      	add	r3, r4
		}
	}
	return 0;
}
    234a:	bc10      	pop	{r4}
{
	for (unsigned int i = 0; i < sizeof(hardware().cs_pin); i++) {
		if (pin == hardware().cs_pin[i]) {
			volatile uint32_t *reg = portConfigRegister(pin);
			*reg = hardware().cs_mux[i];
			return hardware().cs_mask[i];
    234c:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
		}
	}
	return 0;
}
    2350:	4770      	bx	lr
    2352:	bf00      	nop
    2354:	0001b848 	.word	0x0001b848

00002358 <SPIClass::setMOSI(unsigned char)>:

void SPIClass::setMOSI(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    2358:	4a20      	ldr	r2, [pc, #128]	; (23dc <SPIClass::setMOSI(unsigned char)+0x84>)
    235a:	6843      	ldr	r3, [r0, #4]
    235c:	429a      	cmp	r2, r3
	}
	return 0;
}

void SPIClass::setMOSI(uint8_t pin)
{
    235e:	b4f0      	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    2360:	d00f      	beq.n	2382 <SPIClass::setMOSI(unsigned char)+0x2a>
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
    2362:	7a42      	ldrb	r2, [r0, #9]
    2364:	441a      	add	r2, r3
    2366:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    236a:	4291      	cmp	r1, r2
    236c:	d007      	beq.n	237e <SPIClass::setMOSI(unsigned char)+0x26>
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    236e:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    2372:	428c      	cmp	r4, r1
    2374:	d015      	beq.n	23a2 <SPIClass::setMOSI(unsigned char)+0x4a>
    2376:	f893 4025 	ldrb.w	r4, [r3, #37]	; 0x25
    237a:	428c      	cmp	r4, r1
    237c:	d02a      	beq.n	23d4 <SPIClass::setMOSI(unsigned char)+0x7c>
				mosi_pin_index = i;
				return;
			}
		}
	}
}
    237e:	bcf0      	pop	{r4, r5, r6, r7}
    2380:	4770      	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
#else
		if (pin == 11) pinout &= ~1;
    2382:	290b      	cmp	r1, #11
    2384:	d007      	beq.n	2396 <SPIClass::setMOSI(unsigned char)+0x3e>
		if (pin == 7)  pinout |= 1;
    2386:	2907      	cmp	r1, #7
    2388:	d1eb      	bne.n	2362 <SPIClass::setMOSI(unsigned char)+0xa>
    238a:	4c15      	ldr	r4, [pc, #84]	; (23e0 <SPIClass::setMOSI(unsigned char)+0x88>)
    238c:	7822      	ldrb	r2, [r4, #0]
    238e:	f042 0201 	orr.w	r2, r2, #1
    2392:	7022      	strb	r2, [r4, #0]
    2394:	e7e5      	b.n	2362 <SPIClass::setMOSI(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 11) pinout &= ~3;
		if (pin == 7)  pinout = (pinout & ~0x3) | 1;
		if (pin == 28) pinout = (pinout & ~0x3) | 2;
#else
		if (pin == 11) pinout &= ~1;
    2396:	4c12      	ldr	r4, [pc, #72]	; (23e0 <SPIClass::setMOSI(unsigned char)+0x88>)
    2398:	7822      	ldrb	r2, [r4, #0]
    239a:	f022 0201 	bic.w	r2, r2, #1
    239e:	7022      	strb	r2, [r4, #0]
    23a0:	e7df      	b.n	2362 <SPIClass::setMOSI(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    23a2:	2400      	movs	r4, #0
    23a4:	4621      	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    23a6:	681e      	ldr	r6, [r3, #0]
    23a8:	685d      	ldr	r5, [r3, #4]
    23aa:	6836      	ldr	r6, [r6, #0]
    23ac:	422e      	tst	r6, r5
    23ae:	d00f      	beq.n	23d0 <SPIClass::setMOSI(unsigned char)+0x78>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    23b0:	4d0c      	ldr	r5, [pc, #48]	; (23e4 <SPIClass::setMOSI(unsigned char)+0x8c>)
    23b2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    23b6:	2700      	movs	r7, #0
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
    23b8:	6856      	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    23ba:	185a      	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
    23bc:	6037      	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().mosi_pin[i]);
    23be:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
    23c2:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					*reg = hardware().mosi_mux[i];
    23c6:	310a      	adds	r1, #10
			if  (pin == hardware().mosi_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().mosi_pin[mosi_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().mosi_pin[i]);
    23c8:	686a      	ldr	r2, [r5, #4]
					*reg = hardware().mosi_mux[i];
    23ca:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    23ce:	6013      	str	r3, [r2, #0]
				}	
				mosi_pin_index = i;
    23d0:	7244      	strb	r4, [r0, #9]
				return;
    23d2:	e7d4      	b.n	237e <SPIClass::setMOSI(unsigned char)+0x26>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
			if  (pin == hardware().mosi_pin[i]) {
    23d4:	2401      	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMOSI_soft(pin);
	}
	if (pin != hardware().mosi_pin[mosi_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().mosi_pin); i++) {
    23d6:	4621      	mov	r1, r4
    23d8:	e7e5      	b.n	23a6 <SPIClass::setMOSI(unsigned char)+0x4e>
    23da:	bf00      	nop
    23dc:	0000df34 	.word	0x0000df34
    23e0:	1fff9821 	.word	0x1fff9821
    23e4:	0001b848 	.word	0x0001b848

000023e8 <SPIClass::setMISO(unsigned char)>:
	}
}

void SPIClass::setMISO(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    23e8:	4a1e      	ldr	r2, [pc, #120]	; (2464 <SPIClass::setMISO(unsigned char)+0x7c>)
    23ea:	6843      	ldr	r3, [r0, #4]
    23ec:	429a      	cmp	r2, r3
		}
	}
}

void SPIClass::setMISO(uint8_t pin)
{
    23ee:	b4f0      	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    23f0:	d00c      	beq.n	240c <SPIClass::setMISO(unsigned char)+0x24>
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
    23f2:	7a02      	ldrb	r2, [r0, #8]
    23f4:	441a      	add	r2, r3
    23f6:	7e12      	ldrb	r2, [r2, #24]
    23f8:	4291      	cmp	r1, r2
    23fa:	d005      	beq.n	2408 <SPIClass::setMISO(unsigned char)+0x20>
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    23fc:	7e1c      	ldrb	r4, [r3, #24]
    23fe:	428c      	cmp	r4, r1
    2400:	d014      	beq.n	242c <SPIClass::setMISO(unsigned char)+0x44>
    2402:	7e5c      	ldrb	r4, [r3, #25]
    2404:	428c      	cmp	r4, r1
    2406:	d02a      	beq.n	245e <SPIClass::setMISO(unsigned char)+0x76>
				miso_pin_index = i;
				return;
			}
		}
	}
}
    2408:	bcf0      	pop	{r4, r5, r6, r7}
    240a:	4770      	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
#else
		if (pin == 12) pinout &= ~2;
    240c:	290c      	cmp	r1, #12
    240e:	d007      	beq.n	2420 <SPIClass::setMISO(unsigned char)+0x38>
		if (pin == 8)  pinout |= 2;
    2410:	2908      	cmp	r1, #8
    2412:	d1ee      	bne.n	23f2 <SPIClass::setMISO(unsigned char)+0xa>
    2414:	4c14      	ldr	r4, [pc, #80]	; (2468 <SPIClass::setMISO(unsigned char)+0x80>)
    2416:	7822      	ldrb	r2, [r4, #0]
    2418:	f042 0202 	orr.w	r2, r2, #2
    241c:	7022      	strb	r2, [r4, #0]
    241e:	e7e8      	b.n	23f2 <SPIClass::setMISO(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 12) pinout &= ~0xc;
		if (pin == 8)  pinout = (pinout & ~0xc) | 4;
		if (pin == 39) pinout = (pinout & ~0xc) | 8;
#else
		if (pin == 12) pinout &= ~2;
    2420:	4c11      	ldr	r4, [pc, #68]	; (2468 <SPIClass::setMISO(unsigned char)+0x80>)
    2422:	7822      	ldrb	r2, [r4, #0]
    2424:	f022 0202 	bic.w	r2, r2, #2
    2428:	7022      	strb	r2, [r4, #0]
    242a:	e7e2      	b.n	23f2 <SPIClass::setMISO(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    242c:	2400      	movs	r4, #0
    242e:	4621      	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    2430:	681e      	ldr	r6, [r3, #0]
    2432:	685d      	ldr	r5, [r3, #4]
    2434:	6836      	ldr	r6, [r6, #0]
    2436:	422e      	tst	r6, r5
    2438:	d00f      	beq.n	245a <SPIClass::setMISO(unsigned char)+0x72>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    243a:	4d0c      	ldr	r5, [pc, #48]	; (246c <SPIClass::setMISO(unsigned char)+0x84>)
    243c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    2440:	2700      	movs	r7, #0
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
    2442:	6856      	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    2444:	185a      	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
    2446:	6037      	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().miso_pin[i]);
    2448:	7e12      	ldrb	r2, [r2, #24]
					*reg = hardware().miso_mux[i];
    244a:	3106      	adds	r1, #6
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    244c:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					*reg = hardware().miso_mux[i];
    2450:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().miso_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().miso_pin[miso_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().miso_pin[i]);
    2454:	686a      	ldr	r2, [r5, #4]
					*reg = hardware().miso_mux[i];
    2456:	685b      	ldr	r3, [r3, #4]
    2458:	6013      	str	r3, [r2, #0]
				}	
				miso_pin_index = i;
    245a:	7204      	strb	r4, [r0, #8]
				return;
    245c:	e7d4      	b.n	2408 <SPIClass::setMISO(unsigned char)+0x20>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
			if  (pin == hardware().miso_pin[i]) {
    245e:	2401      	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setMISO_soft(pin);
	}
	if (pin != hardware().miso_pin[miso_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().miso_pin); i++) {
    2460:	4621      	mov	r1, r4
    2462:	e7e5      	b.n	2430 <SPIClass::setMISO(unsigned char)+0x48>
    2464:	0000df34 	.word	0x0000df34
    2468:	1fff9821 	.word	0x1fff9821
    246c:	0001b848 	.word	0x0001b848

00002470 <SPIClass::setSCK(unsigned char)>:
	}
}

void SPIClass::setSCK(uint8_t pin)
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    2470:	4a20      	ldr	r2, [pc, #128]	; (24f4 <SPIClass::setSCK(unsigned char)+0x84>)
    2472:	6843      	ldr	r3, [r0, #4]
    2474:	429a      	cmp	r2, r3
		}
	}
}

void SPIClass::setSCK(uint8_t pin)
{
    2476:	b4f0      	push	{r4, r5, r6, r7}
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
    2478:	d00f      	beq.n	249a <SPIClass::setSCK(unsigned char)+0x2a>
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
    247a:	7a82      	ldrb	r2, [r0, #10]
    247c:	441a      	add	r2, r3
    247e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    2482:	4291      	cmp	r1, r2
    2484:	d007      	beq.n	2496 <SPIClass::setSCK(unsigned char)+0x26>
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    2486:	f893 4030 	ldrb.w	r4, [r3, #48]	; 0x30
    248a:	428c      	cmp	r4, r1
    248c:	d015      	beq.n	24ba <SPIClass::setSCK(unsigned char)+0x4a>
    248e:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
    2492:	428c      	cmp	r4, r1
    2494:	d02b      	beq.n	24ee <SPIClass::setSCK(unsigned char)+0x7e>
				sck_pin_index = i;
				return;
			}
		}
	}
}
    2496:	bcf0      	pop	{r4, r5, r6, r7}
    2498:	4770      	bx	lr
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
#else
		if (pin == 13) pinout &= ~4;
    249a:	290d      	cmp	r1, #13
    249c:	d007      	beq.n	24ae <SPIClass::setSCK(unsigned char)+0x3e>
		if (pin == 14) pinout |= 4;
    249e:	290e      	cmp	r1, #14
    24a0:	d1eb      	bne.n	247a <SPIClass::setSCK(unsigned char)+0xa>
    24a2:	4c15      	ldr	r4, [pc, #84]	; (24f8 <SPIClass::setSCK(unsigned char)+0x88>)
    24a4:	7822      	ldrb	r2, [r4, #0]
    24a6:	f042 0204 	orr.w	r2, r2, #4
    24aa:	7022      	strb	r2, [r4, #0]
    24ac:	e7e5      	b.n	247a <SPIClass::setSCK(unsigned char)+0xa>
#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
		if (pin == 13) pinout &= ~0x30;
		if (pin == 14) pinout = (pinout & ~0x30) | 0x10;
		if (pin == 27) pinout = (pinout & ~0x30) | 0x20;
#else
		if (pin == 13) pinout &= ~4;
    24ae:	4c12      	ldr	r4, [pc, #72]	; (24f8 <SPIClass::setSCK(unsigned char)+0x88>)
    24b0:	7822      	ldrb	r2, [r4, #0]
    24b2:	f022 0204 	bic.w	r2, r2, #4
    24b6:	7022      	strb	r2, [r4, #0]
    24b8:	e7df      	b.n	247a <SPIClass::setSCK(unsigned char)+0xa>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    24ba:	2400      	movs	r4, #0
    24bc:	4621      	mov	r1, r4
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
    24be:	681e      	ldr	r6, [r3, #0]
    24c0:	685d      	ldr	r5, [r3, #4]
    24c2:	6836      	ldr	r6, [r6, #0]
    24c4:	422e      	tst	r6, r5
    24c6:	d010      	beq.n	24ea <SPIClass::setSCK(unsigned char)+0x7a>
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    24c8:	4d0c      	ldr	r5, [pc, #48]	; (24fc <SPIClass::setSCK(unsigned char)+0x8c>)
    24ca:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
					*reg = 0;
    24ce:	2700      	movs	r7, #0
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
    24d0:	6856      	ldr	r6, [r2, #4]
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    24d2:	185a      	adds	r2, r3, r1
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
    24d4:	6037      	str	r7, [r6, #0]
					reg = portConfigRegister(hardware().sck_pin[i]);
    24d6:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
					*reg = hardware().sck_mux[i];
    24da:	310c      	adds	r1, #12
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    24dc:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
					*reg = hardware().sck_mux[i];
    24e0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
			if  (pin == hardware().sck_pin[i]) {
				if (hardware().clock_gate_register & hardware().clock_gate_mask) {
					volatile uint32_t *reg;
					reg = portConfigRegister(hardware().sck_pin[sck_pin_index]);
					*reg = 0;
					reg = portConfigRegister(hardware().sck_pin[i]);
    24e4:	686a      	ldr	r2, [r5, #4]
					*reg = hardware().sck_mux[i];
    24e6:	685b      	ldr	r3, [r3, #4]
    24e8:	6013      	str	r3, [r2, #0]
				}	
				sck_pin_index = i;
    24ea:	7284      	strb	r4, [r0, #10]
				return;
    24ec:	e7d3      	b.n	2496 <SPIClass::setSCK(unsigned char)+0x26>
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
			if  (pin == hardware().sck_pin[i]) {
    24ee:	2401      	movs	r4, #1
{
	if (hardware_addr == (uintptr_t)&spi0_hardware) {
		SPCR.setSCK_soft(pin);
	}
	if (pin != hardware().sck_pin[sck_pin_index]) {
		for (unsigned int i = 0; i < sizeof(hardware().sck_pin); i++) {
    24f0:	4621      	mov	r1, r4
    24f2:	e7e4      	b.n	24be <SPIClass::setSCK(unsigned char)+0x4e>
    24f4:	0000df34 	.word	0x0000df34
    24f8:	1fff9821 	.word	0x1fff9821
    24fc:	0001b848 	.word	0x0001b848

00002500 <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
    2500:	2000      	movs	r0, #0
    2502:	4770      	bx	lr

00002504 <Print::flush()>:
	virtual void flush()				{ }
    2504:	4770      	bx	lr
    2506:	bf00      	nop

00002508 <ILI9341_t3n::write(unsigned char)>:
  }
}

// overwrite functions from class Print:

size_t ILI9341_t3n::write(uint8_t c) { return write(&c, 1); }
    2508:	b510      	push	{r4, lr}
    250a:	b082      	sub	sp, #8
    250c:	ab02      	add	r3, sp, #8
    250e:	6802      	ldr	r2, [r0, #0]
    2510:	f803 1d01 	strb.w	r1, [r3, #-1]!
    2514:	6854      	ldr	r4, [r2, #4]
    2516:	4619      	mov	r1, r3
    2518:	2201      	movs	r2, #1
    251a:	47a0      	blx	r4
    251c:	b002      	add	sp, #8
    251e:	bd10      	pop	{r4, pc}

00002520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>:
    return 1;
  return 0;
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
    2520:	b5f0      	push	{r4, r5, r6, r7, lr}
    2522:	4607      	mov	r7, r0
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    2524:	f04f 0e01 	mov.w	lr, #1
  return 0;
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
    2528:	2000      	movs	r0, #0
    252a:	e003      	b.n	2534 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x14>
  do {
    252c:	1ad2      	subs	r2, r2, r3
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    252e:	ea44 0006 	orr.w	r0, r4, r6
}

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    2532:	d01b      	beq.n	256c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0x4c>
    uint8_t b = p[index >> 3];
    2534:	08cd      	lsrs	r5, r1, #3
    uint32_t avail = 8 - (index & 7);
    2536:	f001 0307 	and.w	r3, r1, #7
    253a:	f1c3 0308 	rsb	r3, r3, #8
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    253e:	fa0e f403 	lsl.w	r4, lr, r3

static uint32_t fetchbits_unsigned(const uint8_t *p, uint32_t index,
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    2542:	5d7d      	ldrb	r5, [r7, r5]
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
      val <<= avail;
      val |= b & ((1 << avail) - 1);
    2544:	3c01      	subs	r4, #1
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
    2546:	429a      	cmp	r2, r3
      val <<= avail;
    2548:	fa00 f603 	lsl.w	r6, r0, r3
      val |= b & ((1 << avail) - 1);
    254c:	ea04 0405 	and.w	r4, r4, r5
      index += avail;
    2550:	4419      	add	r1, r3
                                   uint32_t required) {
  uint32_t val = 0;
  do {
    uint8_t b = p[index >> 3];
    uint32_t avail = 8 - (index & 7);
    if (avail <= required) {
    2552:	d2eb      	bcs.n	252c <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)+0xc>
      index += avail;
      required -= avail;
    } else {
      b >>= avail - required;
      val <<= required;
      val |= b & ((1 << required) - 1);
    2554:	2101      	movs	r1, #1
    2556:	4091      	lsls	r1, r2
    2558:	1a9b      	subs	r3, r3, r2
    255a:	fa45 f303 	asr.w	r3, r5, r3
    255e:	1e4d      	subs	r5, r1, #1
      val |= b & ((1 << avail) - 1);
      index += avail;
      required -= avail;
    } else {
      b >>= avail - required;
      val <<= required;
    2560:	fa00 f202 	lsl.w	r2, r0, r2
      val |= b & ((1 << required) - 1);
    2564:	402b      	ands	r3, r5
    2566:	ea43 0002 	orr.w	r0, r3, r2
      break;
    }
  } while (required);
  return val;
}
    256a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    256c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    256e:	bf00      	nop

00002570 <SPIClass::endTransaction() [clone .part.3]>:
		if (interruptMasksUsed) {
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2570:	7ac3      	ldrb	r3, [r0, #11]
    2572:	079a      	lsls	r2, r3, #30
    2574:	d503      	bpl.n	257e <SPIClass::endTransaction() [clone .part.3]+0xe>
				NVIC_ISER1 = interruptSave[1];
    2576:	4b05      	ldr	r3, [pc, #20]	; (258c <SPIClass::endTransaction() [clone .part.3]+0x1c>)
    2578:	69c2      	ldr	r2, [r0, #28]
    257a:	601a      	str	r2, [r3, #0]
    257c:	7ac3      	ldrb	r3, [r0, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    257e:	075b      	lsls	r3, r3, #29
    2580:	d502      	bpl.n	2588 <SPIClass::endTransaction() [clone .part.3]+0x18>
				NVIC_ISER2 = interruptSave[2];
    2582:	4b03      	ldr	r3, [pc, #12]	; (2590 <SPIClass::endTransaction() [clone .part.3]+0x20>)
    2584:	6a02      	ldr	r2, [r0, #32]
    2586:	601a      	str	r2, [r3, #0]
    2588:	4770      	bx	lr
    258a:	bf00      	nop
    258c:	e000e104 	.word	0xe000e104
    2590:	e000e108 	.word	0xe000e108

00002594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>:
		init_AlwaysInline(clock, bitOrder, dataMode);
	}
	void init_AlwaysInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
		uint32_t t, c = SPI_CTAR_FMSZ(7);
		if (bitOrder == LSBFIRST) c |= SPI_CTAR_LSBFE;
    2594:	2a00      	cmp	r2, #0
#define SPI_HAS_NOTUSINGINTERRUPT 1
#define SPI_ATOMIC_VERSION 1

class SPISettings {
public:
	SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode) {
    2596:	b5f0      	push	{r4, r5, r6, r7, lr}
    2598:	4f14      	ldr	r7, [pc, #80]	; (25ec <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x58>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    259a:	f8df e058 	ldr.w	lr, [pc, #88]	; 25f4 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x60>
		init_AlwaysInline(clock, bitOrder, dataMode);
	}
	void init_AlwaysInline(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
		uint32_t t, c = SPI_CTAR_FMSZ(7);
		if (bitOrder == LSBFIRST) c |= SPI_CTAR_LSBFE;
    259e:	bf14      	ite	ne
    25a0:	f04f 5560 	movne.w	r5, #939524096	; 0x38000000
    25a4:	f04f 5564 	moveq.w	r5, #956301312	; 0x39000000
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    25a8:	2600      	movs	r6, #0
    25aa:	e002      	b.n	25b2 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x1e>
    25ac:	2c17      	cmp	r4, #23
    25ae:	d008      	beq.n	25c2 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x2e>
    25b0:	4626      	mov	r6, r4
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    25b2:	f837 2f02 	ldrh.w	r2, [r7, #2]!
    25b6:	fb9e f2f2 	sdiv	r2, lr, r2
    25ba:	4291      	cmp	r1, r2
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    25bc:	f106 0401 	add.w	r4, r6, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    25c0:	d3f4      	bcc.n	25ac <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x18>
			}
		}
		if (dataMode & 0x08) {
    25c2:	071a      	lsls	r2, r3, #28
    25c4:	d501      	bpl.n	25ca <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x36>
			c |= SPI_CTAR_CPOL;
    25c6:	f045 6580 	orr.w	r5, r5, #67108864	; 0x4000000
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    25ca:	4a09      	ldr	r2, [pc, #36]	; (25f0 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x5c>)
			}
		}
		if (dataMode & 0x08) {
			c |= SPI_CTAR_CPOL;
		}
		if (dataMode & 0x04) {
    25cc:	075b      	lsls	r3, r3, #29
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    25ce:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
			}
		}
		if (dataMode & 0x08) {
			c |= SPI_CTAR_CPOL;
		}
		if (dataMode & 0x04) {
    25d2:	d507      	bpl.n	25e4 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)+0x50>
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
    25d4:	0913      	lsrs	r3, r2, #4
    25d6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    25da:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
		}
		if (dataMode & 0x08) {
			c |= SPI_CTAR_CPOL;
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
    25de:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
    25e2:	431a      	orrs	r2, r3
		}
		ctar = c | t;
    25e4:	4315      	orrs	r5, r2
    25e6:	6005      	str	r5, [r0, #0]
		if (__builtin_constant_p(clock)) {
			init_AlwaysInline(clock, bitOrder, dataMode);
		} else {
			init_MightInline(clock, bitOrder, dataMode);
		}
	}
    25e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    25ea:	bf00      	nop
    25ec:	0000dea6 	.word	0x0000dea6
    25f0:	0000ded8 	.word	0x0000ded8
    25f4:	02dc6c00 	.word	0x02dc6c00

000025f8 <SPIClass::beginTransaction(SPISettings)>:
	void notUsingInterrupt(IRQ_NUMBER_t interruptName);

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
    25f8:	b410      	push	{r4}
		if (interruptMasksUsed) {
    25fa:	7ac3      	ldrb	r3, [r0, #11]
    25fc:	b1b3      	cbz	r3, 262c <SPIClass::beginTransaction(SPISettings)+0x34>
			__disable_irq();
    25fe:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2600:	7ac3      	ldrb	r3, [r0, #11]
    2602:	07dc      	lsls	r4, r3, #31
    2604:	d506      	bpl.n	2614 <SPIClass::beginTransaction(SPISettings)+0x1c>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2606:	4a14      	ldr	r2, [pc, #80]	; (2658 <SPIClass::beginTransaction(SPISettings)+0x60>)
    2608:	68c3      	ldr	r3, [r0, #12]
    260a:	6814      	ldr	r4, [r2, #0]
    260c:	4023      	ands	r3, r4
    260e:	6183      	str	r3, [r0, #24]
				NVIC_ICER0 = interruptSave[0];
    2610:	6013      	str	r3, [r2, #0]
    2612:	7ac3      	ldrb	r3, [r0, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2614:	079a      	lsls	r2, r3, #30
    2616:	d506      	bpl.n	2626 <SPIClass::beginTransaction(SPISettings)+0x2e>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2618:	4a10      	ldr	r2, [pc, #64]	; (265c <SPIClass::beginTransaction(SPISettings)+0x64>)
    261a:	6903      	ldr	r3, [r0, #16]
    261c:	6814      	ldr	r4, [r2, #0]
    261e:	4023      	ands	r3, r4
    2620:	61c3      	str	r3, [r0, #28]
				NVIC_ICER1 = interruptSave[1];
    2622:	6013      	str	r3, [r2, #0]
    2624:	7ac3      	ldrb	r3, [r0, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2626:	075b      	lsls	r3, r3, #29
    2628:	d40e      	bmi.n	2648 <SPIClass::beginTransaction(SPISettings)+0x50>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    262a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    262c:	6803      	ldr	r3, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    262e:	68da      	ldr	r2, [r3, #12]
    2630:	428a      	cmp	r2, r1
    2632:	d007      	beq.n	2644 <SPIClass::beginTransaction(SPISettings)+0x4c>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2634:	480a      	ldr	r0, [pc, #40]	; (2660 <SPIClass::beginTransaction(SPISettings)+0x68>)
    2636:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2638:	4a0a      	ldr	r2, [pc, #40]	; (2664 <SPIClass::beginTransaction(SPISettings)+0x6c>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    263a:	60d9      	str	r1, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    263c:	f041 4080 	orr.w	r0, r1, #1073741824	; 0x40000000
    2640:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2642:	601a      	str	r2, [r3, #0]
		}
	}
    2644:	bc10      	pop	{r4}
    2646:	4770      	bx	lr
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2648:	4a07      	ldr	r2, [pc, #28]	; (2668 <SPIClass::beginTransaction(SPISettings)+0x70>)
    264a:	6943      	ldr	r3, [r0, #20]
    264c:	6814      	ldr	r4, [r2, #0]
    264e:	4023      	ands	r3, r4
    2650:	6203      	str	r3, [r0, #32]
				NVIC_ICER2 = interruptSave[2];
    2652:	6013      	str	r3, [r2, #0]
    2654:	e7e9      	b.n	262a <SPIClass::beginTransaction(SPISettings)+0x32>
    2656:	bf00      	nop
    2658:	e000e180 	.word	0xe000e180
    265c:	e000e184 	.word	0xe000e184
    2660:	003f4001 	.word	0x003f4001
    2664:	803f0000 	.word	0x803f0000
    2668:	e000e188 	.word	0xe000e188

0000266c <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
                         uint8_t sclk, uint8_t miso) {
  _cs = cs;
    266e:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    2672:	f89d 6018 	ldrb.w	r6, [sp, #24]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2676:	4c37      	ldr	r4, [pc, #220]	; (2754 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xe8>)
    2678:	f89d e014 	ldrb.w	lr, [sp, #20]
                         uint8_t sclk, uint8_t miso) {
  _cs = cs;
  _dc = dc;
    267c:	f880 208c 	strb.w	r2, [r0, #140]	; 0x8c

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
    2680:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
    2684:	2108      	movs	r1, #8
    2686:	2201      	movs	r2, #1
  _cs = cs;
  _dc = dc;
  _rst = rst;
    2688:	f880 308a 	strb.w	r3, [r0, #138]	; 0x8a
#define HEIGHT ILI9341_TFTHEIGHT

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
    268c:	f89d 701c 	ldrb.w	r7, [sp, #28]
                         uint8_t sclk, uint8_t miso) {
    2690:	f880 1067 	strb.w	r1, [r0, #103]	; 0x67
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2694:	2300      	movs	r3, #0
    2696:	66c5      	str	r5, [r0, #108]	; 0x6c
  _rst = rst;
  _mosi = mosi;
  _sclk = sclk;
  _miso = miso;
  _width = WIDTH;
  _height = HEIGHT;
    2698:	f44f 71a0 	mov.w	r1, #320	; 0x140
  _dc = dc;
  _rst = rst;
  _mosi = mosi;
  _sclk = sclk;
  _miso = miso;
  _width = WIDTH;
    269c:	25f0      	movs	r5, #240	; 0xf0
                         uint8_t sclk, uint8_t miso) {
  _cs = cs;
  _dc = dc;
  _rst = rst;
  _mosi = mosi;
  _sclk = sclk;
    269e:	f880 6091 	strb.w	r6, [r0, #145]	; 0x91

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
    26a2:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 2764 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf8>
    26a6:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
  _height = HEIGHT;

  rotation = 0;
  cursor_y = cursor_x = 0;
  textsize_x = textsize_y = 1;
  textcolor = textbgcolor = 0xFFFF;
    26aa:	f64f 76ff 	movw	r6, #65535	; 0xffff

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
    26ae:	f880 2066 	strb.w	r2, [r0, #102]	; 0x66
  _width = WIDTH;
  _height = HEIGHT;

  rotation = 0;
  cursor_y = cursor_x = 0;
  textsize_x = textsize_y = 1;
    26b2:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
    26b6:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  textcolor = textbgcolor = 0xFFFF;
  wrap = true;
    26ba:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
    26be:	f8c0 c000 	str.w	ip, [r0]
  _cs = cs;
  _dc = dc;
  _rst = rst;
  _mosi = mosi;
    26c2:	f880 e090 	strb.w	lr, [r0, #144]	; 0x90
  _sclk = sclk;
  _miso = miso;
    26c6:	f880 708f 	strb.w	r7, [r0, #143]	; 0x8f
    26ca:	7103      	strb	r3, [r0, #4]

// Constructor when using hardware ILI9241_KINETISK__pspi->  Faster, but must
// use SPI pins
// specific to each board type (e.g. 11,13 for Uno, 51,52 for Mega, etc.)
ILI9341_t3n::ILI9341_t3n(uint8_t cs, uint8_t dc, uint8_t rst, uint8_t mosi,
                         uint8_t sclk, uint8_t miso) {
    26cc:	6083      	str	r3, [r0, #8]
    26ce:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    26d2:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    26d6:	f880 3065 	strb.w	r3, [r0, #101]	; 0x65
    26da:	6743      	str	r3, [r0, #116]	; 0x74
    26dc:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    26e0:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
  _sclk = sclk;
  _miso = miso;
  _width = WIDTH;
  _height = HEIGHT;

  rotation = 0;
    26e4:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
  cursor_y = cursor_x = 0;
    26e8:	8483      	strh	r3, [r0, #36]	; 0x24
    26ea:	84c3      	strh	r3, [r0, #38]	; 0x26
  _dc = dc;
  _rst = rst;
  _mosi = mosi;
  _sclk = sclk;
  _miso = miso;
  _width = WIDTH;
    26ec:	8405      	strh	r5, [r0, #32]
  _height = HEIGHT;
    26ee:	8441      	strh	r1, [r0, #34]	; 0x22

  rotation = 0;
  cursor_y = cursor_x = 0;
  textsize_x = textsize_y = 1;
  textcolor = textbgcolor = 0xFFFF;
    26f0:	f8a0 604c 	strh.w	r6, [r0, #76]	; 0x4c
    26f4:	f8a0 604a 	strh.w	r6, [r0, #74]	; 0x4a
    26f8:	7822      	ldrb	r2, [r4, #0]
  wrap = true;
  font = NULL;
    26fa:	6603      	str	r3, [r0, #96]	; 0x60
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    26fc:	85c5      	strh	r5, [r0, #46]	; 0x2e
    _clipy2 = y1 + h;
    // if (Serial) Serial.printf("Set clip Rect %d %d %d %d\n", x1, y1, w, h);
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    26fe:	8543      	strh	r3, [r0, #42]	; 0x2a
    _clipy1 = 0;
    2700:	8583      	strh	r3, [r0, #44]	; 0x2c
    _clipx2 = _width;
    _clipy2 = _height;
    2702:	8601      	strh	r1, [r0, #48]	; 0x30
    2704:	b13a      	cbz	r2, 2716 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xaa>
    2706:	4b14      	ldr	r3, [pc, #80]	; (2758 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>)
    2708:	781b      	ldrb	r3, [r3, #0]
    270a:	07da      	lsls	r2, r3, #31
    270c:	d503      	bpl.n	2716 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xaa>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    270e:	4a13      	ldr	r2, [pc, #76]	; (275c <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>)
    2710:	4b13      	ldr	r3, [pc, #76]	; (2760 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>)
    2712:	6812      	ldr	r2, [r2, #0]
    2714:	681b      	ldr	r3, [r3, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    2716:	7822      	ldrb	r2, [r4, #0]
  // setOrigin sets an offset in display pixels where drawing to (0,0) will
  // appear
  // for example: setOrigin(10,10); drawPixel(5,5); will cause a pixel to be
  // drawn at hardware pixel (15,15)
  void setOrigin(int16_t x = 0, int16_t y = 0) {
    _originx = x;
    2718:	2300      	movs	r3, #0
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    271a:	25f0      	movs	r5, #240	; 0xf0

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    271c:	f44f 74a0 	mov.w	r4, #320	; 0x140
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    2720:	2101      	movs	r1, #1
  // setOrigin sets an offset in display pixels where drawing to (0,0) will
  // appear
  // for example: setOrigin(10,10); drawPixel(5,5); will cause a pixel to be
  // drawn at hardware pixel (15,15)
  void setOrigin(int16_t x = 0, int16_t y = 0) {
    _originx = x;
    2722:	8643      	strh	r3, [r0, #50]	; 0x32
    _originy = y;
    2724:	8683      	strh	r3, [r0, #52]	; 0x34
  int16_t _displayclipx1, _displayclipy1, _displayclipx2, _displayclipy2;
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    2726:	86c3      	strh	r3, [r0, #54]	; 0x36
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    2728:	8703      	strh	r3, [r0, #56]	; 0x38
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    272a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    272e:	8745      	strh	r5, [r0, #58]	; 0x3a

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    2730:	8784      	strh	r4, [r0, #60]	; 0x3c
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    2732:	f880 103f 	strb.w	r1, [r0, #63]	; 0x3f
    2736:	b13a      	cbz	r2, 2748 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xdc>
    2738:	4b07      	ldr	r3, [pc, #28]	; (2758 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xec>)
    273a:	781b      	ldrb	r3, [r3, #0]
    273c:	07db      	lsls	r3, r3, #31
    273e:	d503      	bpl.n	2748 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xdc>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    2740:	4a06      	ldr	r2, [pc, #24]	; (275c <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf0>)
    2742:	4b07      	ldr	r3, [pc, #28]	; (2760 <ILI9341_t3n::ILI9341_t3n(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)+0xf4>)
    2744:	6812      	ldr	r2, [r2, #0]
    2746:	681b      	ldr	r3, [r3, #0]
  gfxFont = NULL;
  setClipRect();
  setOrigin();

  // Added to see how much impact actually using non hardware CS pin might be
  _cspinmask = 0;
    2748:	2300      	movs	r3, #0
    274a:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  _csport = NULL;
    274e:	f8c0 309c 	str.w	r3, [r0, #156]	; 0x9c
#ifdef ENABLE_ILI9341_FRAMEBUFFER
  _pfbtft = NULL;
  _use_fbtft = 0; // Are we in frame buffer mode?
  _we_allocated_buffer = NULL;
#endif
}
    2752:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2754:	1fff9808 	.word	0x1fff9808
    2758:	1fff9820 	.word	0x1fff9820
    275c:	1fff9724 	.word	0x1fff9724
    2760:	1fff988c 	.word	0x1fff988c
    2764:	0001b2cc 	.word	0x0001b2cc

00002768 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)>:
}

void ILI9341_t3n::setFont(const ILI9341_t3_font_t &f) {
  font = &f;
  _gfx_last_char_x_write = 0; // Don't use cached data here
  if (gfxFont) {
    2768:	6f43      	ldr	r3, [r0, #116]	; 0x74
    }
  }
}

void ILI9341_t3n::setFont(const ILI9341_t3_font_t &f) {
  font = &f;
    276a:	6601      	str	r1, [r0, #96]	; 0x60
  _gfx_last_char_x_write = 0; // Don't use cached data here
    276c:	2200      	movs	r2, #0
    276e:	f8a0 2084 	strh.w	r2, [r0, #132]	; 0x84
  if (gfxFont) {
    2772:	b11b      	cbz	r3, 277c <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)+0x14>
    cursor_y -= 6;
    2774:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    gfxFont = NULL;
    2776:	6742      	str	r2, [r0, #116]	; 0x74

void ILI9341_t3n::setFont(const ILI9341_t3_font_t &f) {
  font = &f;
  _gfx_last_char_x_write = 0; // Don't use cached data here
  if (gfxFont) {
    cursor_y -= 6;
    2778:	3b06      	subs	r3, #6
    277a:	84c3      	strh	r3, [r0, #38]	; 0x26
    gfxFont = NULL;
  }
  fontbpp = 1;
    277c:	2301      	movs	r3, #1
    277e:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  // Calculate additional metrics for Anti-Aliased font support (BDF extn v2.3)
  if (font && font->version == 23) {
    2782:	b111      	cbz	r1, 278a <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)+0x22>
    2784:	7b0a      	ldrb	r2, [r1, #12]
    2786:	2a17      	cmp	r2, #23
    2788:	d000      	beq.n	278c <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)+0x24>
    278a:	4770      	bx	lr
      endSPITransaction();
    }
  }
}

void ILI9341_t3n::setFont(const ILI9341_t3_font_t &f) {
    278c:	b510      	push	{r4, lr}
    gfxFont = NULL;
  }
  fontbpp = 1;
  // Calculate additional metrics for Anti-Aliased font support (BDF extn v2.3)
  if (font && font->version == 23) {
    fontbpp = (font->reserved & 0b000011) + 1;
    278e:	7b4a      	ldrb	r2, [r1, #13]
    2790:	f002 0203 	and.w	r2, r2, #3
    2794:	441a      	add	r2, r3
    2796:	4604      	mov	r4, r0
    fontbppindex = (fontbpp >> 2) + 1;
    2798:	1090      	asrs	r0, r2, #2
    279a:	4418      	add	r0, r3
    fontbppmask = (1 << (fontbppindex + 1)) - 1;
    279c:	18c1      	adds	r1, r0, r3
    279e:	fa03 f101 	lsl.w	r1, r3, r1
    27a2:	3901      	subs	r1, #1
    fontppb = 8 / fontbpp;
    fontalphamx = 31 / ((1 << fontbpp) - 1);
    27a4:	4093      	lsls	r3, r2
    27a6:	3b01      	subs	r3, #1
    gfxFont = NULL;
  }
  fontbpp = 1;
  // Calculate additional metrics for Anti-Aliased font support (BDF extn v2.3)
  if (font && font->version == 23) {
    fontbpp = (font->reserved & 0b000011) + 1;
    27a8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
    fontbppindex = (fontbpp >> 2) + 1;
    27ac:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
    fontbppmask = (1 << (fontbppindex + 1)) - 1;
    27b0:	f884 1066 	strb.w	r1, [r4, #102]	; 0x66
    fontppb = 8 / fontbpp;
    fontalphamx = 31 / ((1 << fontbpp) - 1);
    27b4:	201f      	movs	r0, #31
  // Calculate additional metrics for Anti-Aliased font support (BDF extn v2.3)
  if (font && font->version == 23) {
    fontbpp = (font->reserved & 0b000011) + 1;
    fontbppindex = (fontbpp >> 2) + 1;
    fontbppmask = (1 << (fontbppindex + 1)) - 1;
    fontppb = 8 / fontbpp;
    27b6:	2108      	movs	r1, #8
    fontalphamx = 31 / ((1 << fontbpp) - 1);
    27b8:	fb90 f0f3 	sdiv	r0, r0, r3
  // Calculate additional metrics for Anti-Aliased font support (BDF extn v2.3)
  if (font && font->version == 23) {
    fontbpp = (font->reserved & 0b000011) + 1;
    fontbppindex = (fontbpp >> 2) + 1;
    fontbppmask = (1 << (fontbppindex + 1)) - 1;
    fontppb = 8 / fontbpp;
    27bc:	fb91 f2f2 	sdiv	r2, r1, r2
    27c0:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67
    fontalphamx = 31 / ((1 << fontbpp) - 1);
    27c4:	f006 fcaa 	bl	911c <__aeabi_i2f>
    // Ensure text and bg color are different. Note: use setTextColor to set
    // actual bg color
    if (textcolor == textbgcolor)
    27c8:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
    27cc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
  if (font && font->version == 23) {
    fontbpp = (font->reserved & 0b000011) + 1;
    fontbppindex = (fontbpp >> 2) + 1;
    fontbppmask = (1 << (fontbppindex + 1)) - 1;
    fontppb = 8 / fontbpp;
    fontalphamx = 31 / ((1 << fontbpp) - 1);
    27d0:	66e0      	str	r0, [r4, #108]	; 0x6c
    // Ensure text and bg color are different. Note: use setTextColor to set
    // actual bg color
    if (textcolor == textbgcolor)
    27d2:	4293      	cmp	r3, r2
    27d4:	d105      	bne.n	27e2 <ILI9341_t3n::setFont(ILI9341_t3_font_t const&)+0x7a>
      textbgcolor = (textcolor == 0x0000) ? 0xFFFF : 0x0000;
    27d6:	fab3 f383 	clz	r3, r3
    27da:	095b      	lsrs	r3, r3, #5
    27dc:	425b      	negs	r3, r3
    27de:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
    27e2:	bd10      	pop	{r4, pc}

000027e4 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)>:
  //	//Serial.printf("Return  maxlen =  %d\n", maxlen);
  return (maxlen);
}

void ILI9341_t3n::charBounds(char c, int16_t *x, int16_t *y, int16_t *minx,
                             int16_t *miny, int16_t *maxx, int16_t *maxy) {
    27e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  // BUGBUG:: Not handling offset/clip
  if (font) {
    27e8:	6e04      	ldr	r4, [r0, #96]	; 0x60
  //	//Serial.printf("Return  maxlen =  %d\n", maxlen);
  return (maxlen);
}

void ILI9341_t3n::charBounds(char c, int16_t *x, int16_t *y, int16_t *minx,
                             int16_t *miny, int16_t *maxx, int16_t *maxy) {
    27ea:	b085      	sub	sp, #20

  // BUGBUG:: Not handling offset/clip
  if (font) {
    27ec:	2c00      	cmp	r4, #0
    27ee:	f000 80e1 	beq.w	29b4 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1d0>
    if (c == '\n') { // Newline?
    27f2:	290a      	cmp	r1, #10
    27f4:	f000 80d5 	beq.w	29a2 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1be>
      *x = 0;        // Reset x to zero, advance y by one line
      *y += font->line_space;
    } else if (c != '\r') { // Not a carriage return; is normal char
    27f8:	290d      	cmp	r1, #13
    27fa:	f000 80c5 	beq.w	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
      uint32_t bitoffset;
      const uint8_t *data;
      if (c >= font->index1_first && c <= font->index1_last) {
    27fe:	7ba5      	ldrb	r5, [r4, #14]
    2800:	42a9      	cmp	r1, r5
    2802:	f080 80c4 	bcs.w	298e <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1aa>
        bitoffset = c - font->index1_first;
        bitoffset *= font->bits_index;
      } else if (c >= font->index2_first && c <= font->index2_last) {
    2806:	f894 c010 	ldrb.w	ip, [r4, #16]
    280a:	4561      	cmp	r1, ip
    280c:	f0c0 80bc 	bcc.w	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
    2810:	7c66      	ldrb	r6, [r4, #17]
    2812:	428e      	cmp	r6, r1
    2814:	f0c0 80b8 	bcc.w	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
        bitoffset =
            c - font->index2_first + font->index1_last - font->index1_first + 1;
    2818:	f894 e00f 	ldrb.w	lr, [r4, #15]
    281c:	ebcc 0101 	rsb	r1, ip, r1
    2820:	4471      	add	r1, lr
        bitoffset *= font->bits_index;
    2822:	f894 e012 	ldrb.w	lr, [r4, #18]
      if (c >= font->index1_first && c <= font->index1_last) {
        bitoffset = c - font->index1_first;
        bitoffset *= font->bits_index;
      } else if (c >= font->index2_first && c <= font->index2_last) {
        bitoffset =
            c - font->index2_first + font->index1_last - font->index1_first + 1;
    2826:	1b49      	subs	r1, r1, r5
        bitoffset *= font->bits_index;
    2828:	fb01 e10e 	mla	r1, r1, lr, lr
    282c:	4616      	mov	r6, r2
    282e:	4605      	mov	r5, r0
        return;
      }
      // Serial.printf("  char = %c index =  %d\n", c, fetchbits_unsigned(font->index,
      // bitoffset, font->bits_index));
      data = font->data +
             fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    2830:	4672      	mov	r2, lr
    2832:	6820      	ldr	r0, [r4, #0]
    2834:	461f      	mov	r7, r3
    2836:	f7ff fe73 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
    283a:	68a3      	ldr	r3, [r4, #8]
    283c:	eb03 0800 	add.w	r8, r3, r0

      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    2840:	4640      	mov	r0, r8
    2842:	2203      	movs	r2, #3
    2844:	2100      	movs	r1, #0
    2846:	f7ff fe6b 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      if (encoding != 0)
    284a:	2800      	cmp	r0, #0
    284c:	f040 809c 	bne.w	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    2850:	f894 9013 	ldrb.w	r9, [r4, #19]
    2854:	2103      	movs	r1, #3
    2856:	464a      	mov	r2, r9
    2858:	4640      	mov	r0, r8
    285a:	f7ff fe61 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    285e:	f894 b014 	ldrb.w	fp, [r4, #20]
             fetchbits_unsigned(font->index, bitoffset, font->bits_index);

      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    2862:	9001      	str	r0, [sp, #4]
      bitoffset = font->bits_width + 3;
    2864:	f109 0903 	add.w	r9, r9, #3
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    2868:	4649      	mov	r1, r9
    286a:	465a      	mov	r2, fp
    286c:	4640      	mov	r0, r8
    286e:	f7ff fe57 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      bitoffset += font->bits_height;
      // Serial.printf("  size =   %d,%d\n", width, height);
      // Serial.printf("  line space = %d\n", font->line_space);
      // Serial.printf("  cap height = %d\n", font->cap_height);

      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
    2872:	7d63      	ldrb	r3, [r4, #21]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    2874:	9302      	str	r3, [sp, #8]
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
      bitoffset += font->bits_height;
    2876:	44d9      	add	r9, fp
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    2878:	4649      	mov	r1, r9
    287a:	461a      	mov	r2, r3
      uint32_t encoding = fetchbits_unsigned(data, 0, 3);
      if (encoding != 0)
        return;
      uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
      bitoffset = font->bits_width + 3;
      uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    287c:	4682      	mov	sl, r0
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    287e:	4640      	mov	r0, r8
    2880:	f7ff fe4e 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    2884:	9b02      	ldr	r3, [sp, #8]
      // Serial.printf("  line space = %d\n", font->line_space);
      // Serial.printf("  cap height = %d\n", font->cap_height);

      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
      bitoffset += font->bits_xoffset;
      int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
    2886:	f894 b016 	ldrb.w	fp, [r4, #22]
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
  if (val & (1 << (required - 1))) {
    288a:	1e5a      	subs	r2, r3, #1
    288c:	2101      	movs	r1, #1
    288e:	fa01 f202 	lsl.w	r2, r1, r2
    2892:	4202      	tst	r2, r0
    return (int32_t)val - (1 << required);
    2894:	bf18      	it	ne
    2896:	4099      	lslne	r1, r3
      // Serial.printf("  size =   %d,%d\n", width, height);
      // Serial.printf("  line space = %d\n", font->line_space);
      // Serial.printf("  cap height = %d\n", font->cap_height);

      int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
      bitoffset += font->bits_xoffset;
    2898:	4499      	add	r9, r3

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
  if (val & (1 << (required - 1))) {
    return (int32_t)val - (1 << required);
    289a:	bf1a      	itte	ne
    289c:	1a42      	subne	r2, r0, r1
    289e:	9202      	strne	r2, [sp, #8]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    28a0:	9002      	streq	r0, [sp, #8]
    28a2:	4649      	mov	r1, r9
    28a4:	465a      	mov	r2, fp
    28a6:	4640      	mov	r0, r8
    28a8:	f7ff fe3a 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    28ac:	2101      	movs	r1, #1
    28ae:	f10b 32ff 	add.w	r2, fp, #4294967295
    28b2:	fa01 f202 	lsl.w	r2, r1, r2
    28b6:	4202      	tst	r2, r0
    return (int32_t)val - (1 << required);
    28b8:	bf1a      	itte	ne
    28ba:	fa01 f30b 	lslne.w	r3, r1, fp
    28be:	1ac3      	subne	r3, r0, r3
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    28c0:	4603      	moveq	r3, r0
      bitoffset += font->bits_xoffset;
      int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
      bitoffset += font->bits_yoffset;
      // Serial.printf("  offsets  = x:%d y:%d\n",  xoffset,  yoffset);
       
      uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    28c2:	eb09 010b 	add.w	r1, r9, fp
    28c6:	4640      	mov	r0, r8
    28c8:	7de2      	ldrb	r2, [r4, #23]
    28ca:	9303      	str	r3, [sp, #12]
    28cc:	f7ff fe28 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
      int16_t y1 = *y + font->cap_height - height - yoffset;
    28d0:	f894 e019 	ldrb.w	lr, [r4, #25]
    28d4:	883a      	ldrh	r2, [r7, #0]
    28d6:	9b03      	ldr	r3, [sp, #12]
    
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
    28d8:	8831      	ldrh	r1, [r6, #0]
    28da:	f8bd 9008 	ldrh.w	r9, [sp, #8]
      int16_t y1 = *y + font->cap_height - height - yoffset;
      int16_t x2 = x1 + width;
    28de:	f8bd b004 	ldrh.w	fp, [sp, #4]
      int16_t y2 = y1 + height;

      if (wrap && (x2 > _width)) {
    28e2:	f895 805c 	ldrb.w	r8, [r5, #92]	; 0x5c
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
      int16_t y1 = *y + font->cap_height - height - yoffset;
    28e6:	fa1f fa8a 	uxth.w	sl, sl
    28ea:	4472      	add	r2, lr
    28ec:	b29b      	uxth	r3, r3
    28ee:	ebca 0202 	rsb	r2, sl, r2
    28f2:	1ad2      	subs	r2, r2, r3
    
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
    28f4:	4449      	add	r1, r9
      int16_t y1 = *y + font->cap_height - height - yoffset;
    28f6:	b292      	uxth	r2, r2
    
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
    28f8:	b289      	uxth	r1, r1
      int16_t y1 = *y + font->cap_height - height - yoffset;
      int16_t x2 = x1 + width;
      int16_t y2 = y1 + height;
    28fa:	eb0a 0c02 	add.w	ip, sl, r2
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
      int16_t y1 = *y + font->cap_height - height - yoffset;
      int16_t x2 = x1 + width;
    28fe:	eb01 0e0b 	add.w	lr, r1, fp
      int16_t y2 = y1 + height;
    2902:	fa0f fc8c 	sxth.w	ip, ip
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
      int16_t y1 = *y + font->cap_height - height - yoffset;
    2906:	b212      	sxth	r2, r2
      int16_t x2 = x1 + width;
    2908:	fa0f fe8e 	sxth.w	lr, lr
    
      // Compute ys using drawFontChar stuff?
      //int32_t drawfontchar_y = *y + font->cap_height - height - yoffset;
      //Serial.printf("  DFCY: %u %u\n", drawfontchar_y, drawfontchar_y+height);

      int16_t x1 = *x + xoffset;
    290c:	b209      	sxth	r1, r1
      int16_t y1 = *y + font->cap_height - height - yoffset;
      int16_t x2 = x1 + width;
      int16_t y2 = y1 + height;

      if (wrap && (x2 > _width)) {
    290e:	f1b8 0f00 	cmp.w	r8, #0
    2912:	d018      	beq.n	2946 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x162>
    2914:	f9b5 5020 	ldrsh.w	r5, [r5, #32]
    2918:	4575      	cmp	r5, lr
    291a:	da14      	bge.n	2946 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x162>
        *x = 0; // Reset x to zero, advance y by one line
    291c:	2200      	movs	r2, #0
    291e:	8032      	strh	r2, [r6, #0]
        *y += font->line_space;
    2920:	7e21      	ldrb	r1, [r4, #24]
    2922:	883a      	ldrh	r2, [r7, #0]
    2924:	440a      	add	r2, r1
    2926:	b292      	uxth	r2, r2
    2928:	803a      	strh	r2, [r7, #0]
        x1 = *x + xoffset, y1 = *y + yoffset, x2 = x1 + width, y2 = y1 + height;
    292a:	8831      	ldrh	r1, [r6, #0]
    292c:	441a      	add	r2, r3
    292e:	4449      	add	r1, r9
    2930:	b292      	uxth	r2, r2
    2932:	b289      	uxth	r1, r1
    2934:	4492      	add	sl, r2
    2936:	eb0b 0e01 	add.w	lr, fp, r1
    293a:	fa0f fc8a 	sxth.w	ip, sl
    293e:	b212      	sxth	r2, r2
    2940:	fa0f fe8e 	sxth.w	lr, lr
    2944:	b209      	sxth	r1, r1
      }
      if (x1 < *minx)
    2946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2948:	f9b3 3000 	ldrsh.w	r3, [r3]
    294c:	428b      	cmp	r3, r1
        *minx = x1;
    294e:	bfc4      	itt	gt
    2950:	9b0e      	ldrgt	r3, [sp, #56]	; 0x38
    2952:	8019      	strhgt	r1, [r3, #0]
      if (y1 < *miny)
    2954:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    2956:	f9b3 3000 	ldrsh.w	r3, [r3]
    295a:	4293      	cmp	r3, r2
        *miny = y1;
    295c:	bfc4      	itt	gt
    295e:	9b0f      	ldrgt	r3, [sp, #60]	; 0x3c
    2960:	801a      	strhgt	r2, [r3, #0]
      if (x2 > *maxx)
    2962:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2964:	f9b3 3000 	ldrsh.w	r3, [r3]
    2968:	4573      	cmp	r3, lr
        *maxx = x2;
    296a:	bfbc      	itt	lt
    296c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
    296e:	f8a3 e000 	strhlt.w	lr, [r3]
      if (y2 > *maxy)
    2972:	9b11      	ldr	r3, [sp, #68]	; 0x44
    2974:	f9b3 3000 	ldrsh.w	r3, [r3]
    2978:	4563      	cmp	r3, ip
        *maxy = y2;
    297a:	bfbc      	itt	lt
    297c:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
    297e:	f8a3 c000 	strhlt.w	ip, [r3]
      *x += delta; // ? guessing here...
    2982:	8833      	ldrh	r3, [r6, #0]
    2984:	4418      	add	r0, r3
    2986:	8030      	strh	r0, [r6, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
    2988:	b005      	add	sp, #20
    298a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      *x = 0;        // Reset x to zero, advance y by one line
      *y += font->line_space;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint32_t bitoffset;
      const uint8_t *data;
      if (c >= font->index1_first && c <= font->index1_last) {
    298e:	7be6      	ldrb	r6, [r4, #15]
    2990:	428e      	cmp	r6, r1
    2992:	f4ff af38 	bcc.w	2806 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x22>
        bitoffset = c - font->index1_first;
        bitoffset *= font->bits_index;
    2996:	f894 e012 	ldrb.w	lr, [r4, #18]
      *y += font->line_space;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint32_t bitoffset;
      const uint8_t *data;
      if (c >= font->index1_first && c <= font->index1_last) {
        bitoffset = c - font->index1_first;
    299a:	1b49      	subs	r1, r1, r5
        bitoffset *= font->bits_index;
    299c:	fb0e f101 	mul.w	r1, lr, r1
    29a0:	e744      	b.n	282c <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x48>
                             int16_t *miny, int16_t *maxx, int16_t *maxy) {

  // BUGBUG:: Not handling offset/clip
  if (font) {
    if (c == '\n') { // Newline?
      *x = 0;        // Reset x to zero, advance y by one line
    29a2:	2100      	movs	r1, #0
    29a4:	8011      	strh	r1, [r2, #0]
      *y += font->line_space;
    29a6:	7e21      	ldrb	r1, [r4, #24]
    29a8:	881a      	ldrh	r2, [r3, #0]
    29aa:	440a      	add	r2, r1
    29ac:	801a      	strh	r2, [r3, #0]
      if (*y < *miny)
        *miny = *y;
      *x += textsize_x * 6; // Advance x one char
    }
  }
}
    29ae:	b005      	add	sp, #20
    29b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *maxy = y2;
      *x += delta; // ? guessing here...
    }
  }

  else if (gfxFont) {
    29b4:	6f45      	ldr	r5, [r0, #116]	; 0x74
    29b6:	2d00      	cmp	r5, #0
    29b8:	d065      	beq.n	2a86 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2a2>

    if (c == '\n') { // Newline?
    29ba:	290a      	cmp	r1, #10
    29bc:	d05a      	beq.n	2a74 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x290>
      *x = 0;        // Reset x to zero, advance y by one line
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
    29be:	290d      	cmp	r1, #13
    29c0:	d0e2      	beq.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
      uint8_t first = gfxFont->first, last = gfxFont->last;
    29c2:	7a2e      	ldrb	r6, [r5, #8]
      if ((c >= first) && (c <= last)) { // Char present in this font?
    29c4:	42b1      	cmp	r1, r6
    29c6:	d3df      	bcc.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
    29c8:	7a6f      	ldrb	r7, [r5, #9]
    29ca:	428f      	cmp	r7, r1
    29cc:	d3dc      	bcc.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
        GFXglyph *glyph = gfxFont->glyph + (c - first);
    29ce:	686f      	ldr	r7, [r5, #4]
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    29d0:	f895 800a 	ldrb.w	r8, [r5, #10]
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
    29d4:	f890 c05c 	ldrb.w	ip, [r0, #92]	; 0x5c
      *x = 0;        // Reset x to zero, advance y by one line
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
    29d8:	1b89      	subs	r1, r1, r6
    29da:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    29de:	f891 9006 	ldrb.w	r9, [r1, #6]
      *y += textsize_y * gfxFont->yAdvance;
    } else if (c != '\r') { // Not a carriage return; is normal char
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
    29e2:	788f      	ldrb	r7, [r1, #2]
    29e4:	f891 e003 	ldrb.w	lr, [r1, #3]
    29e8:	790e      	ldrb	r6, [r1, #4]
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
    29ea:	f991 1005 	ldrsb.w	r1, [r1, #5]
    29ee:	eb09 0858 	add.w	r8, r9, r8, lsr #1
    29f2:	fa4f f888 	sxtb.w	r8, r8
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
    29f6:	f1bc 0f00 	cmp.w	ip, #0
    29fa:	f040 8085 	bne.w	2b08 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x324>
    29fe:	f9b3 a000 	ldrsh.w	sl, [r3]
    2a02:	f890 9058 	ldrb.w	r9, [r0, #88]	; 0x58
    2a06:	f9b2 c000 	ldrsh.w	ip, [r2]
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    2a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a0c:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    2a10:	f9b3 5000 	ldrsh.w	r5, [r3]
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a14:	fa1f f489 	uxth.w	r4, r9
    2a18:	fb01 c104 	mla	r1, r1, r4, ip
    2a1c:	b289      	uxth	r1, r1
    2a1e:	fb07 1704 	mla	r7, r7, r4, r1
    2a22:	b209      	sxth	r1, r1
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
    2a24:	428d      	cmp	r5, r1
          *minx = x1;
    2a26:	bfc4      	itt	gt
    2a28:	9d0e      	ldrgt	r5, [sp, #56]	; 0x38
    2a2a:	8029      	strhgt	r1, [r5, #0]
        if (y1 < *miny)
    2a2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a2e:	fb08 a300 	mla	r3, r8, r0, sl
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
          *minx = x1;
        if (y1 < *miny)
    2a32:	f9b1 1000 	ldrsh.w	r1, [r1]
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a36:	b29b      	uxth	r3, r3
                y2 = y1 + gh * tsy - 1;
    2a38:	fb0e 3000 	mla	r0, lr, r0, r3
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a3c:	b21b      	sxth	r3, r3
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
          *minx = x1;
        if (y1 < *miny)
    2a3e:	4299      	cmp	r1, r3
          *miny = y1;
    2a40:	bfc4      	itt	gt
    2a42:	990f      	ldrgt	r1, [sp, #60]	; 0x3c
    2a44:	800b      	strhgt	r3, [r1, #0]
        if (x2 > *maxx)
    2a46:	9b10      	ldr	r3, [sp, #64]	; 0x40
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a48:	3f01      	subs	r7, #1
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
          *minx = x1;
        if (y1 < *miny)
          *miny = y1;
        if (x2 > *maxx)
    2a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
    2a4e:	b23f      	sxth	r7, r7
                y2 = y1 + gh * tsy - 1;
        if (x1 < *minx)
          *minx = x1;
        if (y1 < *miny)
          *miny = y1;
        if (x2 > *maxx)
    2a50:	42bb      	cmp	r3, r7
          *maxx = x2;
    2a52:	bfbc      	itt	lt
    2a54:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
    2a56:	801f      	strhlt	r7, [r3, #0]
        if (y2 > *maxy)
    2a58:	9b11      	ldr	r3, [sp, #68]	; 0x44
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
                y2 = y1 + gh * tsy - 1;
    2a5a:	3801      	subs	r0, #1
          *minx = x1;
        if (y1 < *miny)
          *miny = y1;
        if (x2 > *maxx)
          *maxx = x2;
        if (y2 > *maxy)
    2a5c:	f9b3 3000 	ldrsh.w	r3, [r3]
          *x = 0; // Reset x to zero, advance y by one line
          *y += textsize_y * gfxFont->yAdvance;
        }
        int16_t tsx = (int16_t)textsize_x, tsy = (int16_t)textsize_y,
                x1 = *x + xo * tsx, y1 = *y + yo * tsy, x2 = x1 + gw * tsx - 1,
                y2 = y1 + gh * tsy - 1;
    2a60:	b200      	sxth	r0, r0
          *minx = x1;
        if (y1 < *miny)
          *miny = y1;
        if (x2 > *maxx)
          *maxx = x2;
        if (y2 > *maxy)
    2a62:	4283      	cmp	r3, r0
          *maxy = y2;
    2a64:	bfbc      	itt	lt
    2a66:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
    2a68:	8018      	strhlt	r0, [r3, #0]
        *x += xa * tsx;
    2a6a:	8813      	ldrh	r3, [r2, #0]
    2a6c:	fb06 3604 	mla	r6, r6, r4, r3
    2a70:	8016      	strh	r6, [r2, #0]
    2a72:	e789      	b.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
  }

  else if (gfxFont) {

    if (c == '\n') { // Newline?
      *x = 0;        // Reset x to zero, advance y by one line
    2a74:	8014      	strh	r4, [r2, #0]
      *y += textsize_y * gfxFont->yAdvance;
    2a76:	f890 0059 	ldrb.w	r0, [r0, #89]	; 0x59
    2a7a:	7aa9      	ldrb	r1, [r5, #10]
    2a7c:	881a      	ldrh	r2, [r3, #0]
    2a7e:	fb00 2201 	mla	r2, r0, r1, r2
    2a82:	801a      	strh	r2, [r3, #0]
    2a84:	e780      	b.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
      }
    }

  } else { // Default font

    if (c == '\n') {        // Newline?
    2a86:	290a      	cmp	r1, #10
    2a88:	d06b      	beq.n	2b62 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x37e>
      *x = 0;               // Reset x to zero,
      *y += textsize_y * 8; // advance y one line
      // min/max x/y unchaged -- that waits for next 'normal' character
    } else if (c != '\r') { // Normal char; ignore carriage returns
    2a8a:	290d      	cmp	r1, #13
    2a8c:	f43f af7c 	beq.w	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
    2a90:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    2a94:	2900      	cmp	r1, #0
    2a96:	d156      	bne.n	2b46 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x362>
    2a98:	f9b2 1000 	ldrsh.w	r1, [r2]
    2a9c:	f890 6058 	ldrb.w	r6, [r0, #88]	; 0x58
    2aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
    2aa4:	2406      	movs	r4, #6
    2aa6:	fb14 1106 	smlabb	r1, r4, r6, r1
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
      if (x2 > *maxx)
    2aaa:	9e10      	ldr	r6, [sp, #64]	; 0x40
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
    2aac:	f890 4059 	ldrb.w	r4, [r0, #89]	; 0x59
      if (x2 > *maxx)
    2ab0:	f9b6 6000 	ldrsh.w	r6, [r6]
    } else if (c != '\r') { // Normal char; ignore carriage returns
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
    2ab4:	3901      	subs	r1, #1
          y2 = *y + textsize_y * 8 - 1;
      if (x2 > *maxx)
    2ab6:	42b1      	cmp	r1, r6
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
    2ab8:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
      if (x2 > *maxx)
        *maxx = x2; // Track max x, y
    2abc:	bfc4      	itt	gt
    2abe:	9d10      	ldrgt	r5, [sp, #64]	; 0x40
    2ac0:	8029      	strhgt	r1, [r5, #0]
      if (y2 > *maxy)
    2ac2:	9911      	ldr	r1, [sp, #68]	; 0x44
    2ac4:	f9b1 1000 	ldrsh.w	r1, [r1]
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
        *y += textsize_y * 8;                         // advance y one line
      }
      int x2 = *x + textsize_x * 6 - 1, // Lower-right pixel of char
          y2 = *y + textsize_y * 8 - 1;
    2ac8:	3c01      	subs	r4, #1
      if (x2 > *maxx)
        *maxx = x2; // Track max x, y
      if (y2 > *maxy)
    2aca:	428c      	cmp	r4, r1
        *maxy = y2;
    2acc:	bfc4      	itt	gt
    2ace:	9911      	ldrgt	r1, [sp, #68]	; 0x44
    2ad0:	800c      	strhgt	r4, [r1, #0]
      if (*x < *minx)
    2ad2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    2ad4:	f9b2 1000 	ldrsh.w	r1, [r2]
    2ad8:	f9b4 4000 	ldrsh.w	r4, [r4]
    2adc:	428c      	cmp	r4, r1
        *minx = *x; // Track min x, y
    2ade:	bfc4      	itt	gt
    2ae0:	9c0e      	ldrgt	r4, [sp, #56]	; 0x38
    2ae2:	8021      	strhgt	r1, [r4, #0]
      if (*y < *miny)
    2ae4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    2ae6:	f9b3 3000 	ldrsh.w	r3, [r3]
    2aea:	f9b1 1000 	ldrsh.w	r1, [r1]
    2aee:	4299      	cmp	r1, r3
        *miny = *y;
    2af0:	bfc4      	itt	gt
    2af2:	990f      	ldrgt	r1, [sp, #60]	; 0x3c
    2af4:	800b      	strhgt	r3, [r1, #0]
      *x += textsize_x * 6; // Advance x one char
    2af6:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
    2afa:	8811      	ldrh	r1, [r2, #0]
    2afc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2b00:	eb01 0343 	add.w	r3, r1, r3, lsl #1
    2b04:	8013      	strh	r3, [r2, #0]
    2b06:	e73f      	b.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
      uint8_t first = gfxFont->first, last = gfxFont->last;
      if ((c >= first) && (c <= last)) { // Char present in this font?
        GFXglyph *glyph = gfxFont->glyph + (c - first);
        uint8_t gw = glyph->width, gh = glyph->height, xa = glyph->xAdvance;
        int8_t xo = glyph->xOffset, yo = glyph->yOffset + gfxFont->yAdvance / 2;
        if (wrap && ((*x + (((int16_t)xo + gw) * textsize_x)) > _width)) {
    2b08:	f9b2 c000 	ldrsh.w	ip, [r2]
    2b0c:	f890 9058 	ldrb.w	r9, [r0, #88]	; 0x58
    2b10:	f9b0 b020 	ldrsh.w	fp, [r0, #32]
    2b14:	eb01 0a07 	add.w	sl, r1, r7
    2b18:	fb09 ca0a 	mla	sl, r9, sl, ip
    2b1c:	45da      	cmp	sl, fp
    2b1e:	dc02      	bgt.n	2b26 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x342>
    2b20:	f9b3 a000 	ldrsh.w	sl, [r3]
    2b24:	e771      	b.n	2a0a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x226>
          *x = 0; // Reset x to zero, advance y by one line
    2b26:	8014      	strh	r4, [r2, #0]
          *y += textsize_y * gfxFont->yAdvance;
    2b28:	7aac      	ldrb	r4, [r5, #10]
    2b2a:	f890 a059 	ldrb.w	sl, [r0, #89]	; 0x59
    2b2e:	881d      	ldrh	r5, [r3, #0]
    2b30:	fb0a 5a04 	mla	sl, sl, r4, r5
    2b34:	fa0f fa8a 	sxth.w	sl, sl
    2b38:	f8a3 a000 	strh.w	sl, [r3]
    2b3c:	f890 9058 	ldrb.w	r9, [r0, #88]	; 0x58
    2b40:	f9b2 c000 	ldrsh.w	ip, [r2]
    2b44:	e761      	b.n	2a0a <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x226>
    if (c == '\n') {        // Newline?
      *x = 0;               // Reset x to zero,
      *y += textsize_y * 8; // advance y one line
      // min/max x/y unchaged -- that waits for next 'normal' character
    } else if (c != '\r') { // Normal char; ignore carriage returns
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
    2b46:	f9b2 7000 	ldrsh.w	r7, [r2]
    2b4a:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    2b4e:	f9b0 6020 	ldrsh.w	r6, [r0, #32]
    2b52:	2406      	movs	r4, #6
    2b54:	fb14 7101 	smlabb	r1, r4, r1, r7
    2b58:	42b1      	cmp	r1, r6
    2b5a:	dc0a      	bgt.n	2b72 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x38e>
    2b5c:	f9b3 5000 	ldrsh.w	r5, [r3]
    2b60:	e7a3      	b.n	2aaa <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2c6>
    }

  } else { // Default font

    if (c == '\n') {        // Newline?
      *x = 0;               // Reset x to zero,
    2b62:	8015      	strh	r5, [r2, #0]
      *y += textsize_y * 8; // advance y one line
    2b64:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    2b68:	881a      	ldrh	r2, [r3, #0]
    2b6a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    2b6e:	801a      	strh	r2, [r3, #0]
    2b70:	e70a      	b.n	2988 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x1a4>
      // min/max x/y unchaged -- that waits for next 'normal' character
    } else if (c != '\r') { // Normal char; ignore carriage returns
      if (wrap && ((*x + textsize_x * 6) > _width)) { // Off right?
        *x = 0;                                       // Reset x to zero,
    2b72:	8015      	strh	r5, [r2, #0]
        *y += textsize_y * 8;                         // advance y one line
    2b74:	8819      	ldrh	r1, [r3, #0]
    2b76:	f890 5059 	ldrb.w	r5, [r0, #89]	; 0x59
    2b7a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
    2b7e:	b22d      	sxth	r5, r5
    2b80:	801d      	strh	r5, [r3, #0]
    2b82:	f9b2 6000 	ldrsh.w	r6, [r2]
    2b86:	f890 1058 	ldrb.w	r1, [r0, #88]	; 0x58
    2b8a:	fb14 6101 	smlabb	r1, r4, r1, r6
    2b8e:	e78c      	b.n	2aaa <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)+0x2c6>

00002b90 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>:
}

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
    2b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b94:	b089      	sub	sp, #36	; 0x24
  *x1 = x;
  *y1 = y;
  *w = *h = 0;
    2b96:	2400      	movs	r4, #0
}

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
    2b98:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
  *x1 = x;
    2b9c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
  *y1 = y;
    2b9e:	f8bd 5048 	ldrh.w	r5, [sp, #72]	; 0x48

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
  *x1 = x;
    2ba2:	8033      	strh	r3, [r6, #0]
  *y1 = y;
    2ba4:	f8ab 5000 	strh.w	r5, [fp]
  *w = *h = 0;
    2ba8:	9d16      	ldr	r5, [sp, #88]	; 0x58
}

// Add in Adafruit versions of text bounds calculations.
void ILI9341_t3n::getTextBounds(const uint8_t *buffer, uint16_t len, int16_t x,
                                int16_t y, int16_t *x1, int16_t *y1,
                                uint16_t *w, uint16_t *h) {
    2baa:	f8ad 3016 	strh.w	r3, [sp, #22]
  *x1 = x;
  *y1 = y;
  *w = *h = 0;
    2bae:	802c      	strh	r4, [r5, #0]
    2bb0:	9d15      	ldr	r5, [sp, #84]	; 0x54
    2bb2:	802c      	strh	r4, [r5, #0]

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;
    2bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bb8:	f9b0 e020 	ldrsh.w	lr, [r0, #32]
    2bbc:	f9b0 7022 	ldrsh.w	r7, [r0, #34]	; 0x22
    2bc0:	f8ad e018 	strh.w	lr, [sp, #24]
    2bc4:	f8ad 701a 	strh.w	r7, [sp, #26]
    2bc8:	f8ad 301c 	strh.w	r3, [sp, #28]
    2bcc:	f8ad 301e 	strh.w	r3, [sp, #30]

  while (len--) {
    2bd0:	b3a2      	cbz	r2, 2c3c <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xac>
    2bd2:	1e55      	subs	r5, r2, #1
    2bd4:	b2ad      	uxth	r5, r5
    2bd6:	4606      	mov	r6, r0
    2bd8:	440d      	add	r5, r1
    2bda:	1e4c      	subs	r4, r1, #1
    2bdc:	f10d 0a1e 	add.w	sl, sp, #30
    2be0:	f10d 091c 	add.w	r9, sp, #28
    2be4:	f10d 081a 	add.w	r8, sp, #26
    2be8:	af06      	add	r7, sp, #24
    uint8_t c = *buffer++;
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
    2bea:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    2bee:	ab12      	add	r3, sp, #72	; 0x48
    2bf0:	e88d 0780 	stmia.w	sp, {r7, r8, r9, sl}
    2bf4:	f10d 0216 	add.w	r2, sp, #22
    2bf8:	4630      	mov	r0, r6
    2bfa:	f7ff fdf3 	bl	27e4 <ILI9341_t3n::charBounds(char, short*, short*, short*, short*, short*, short*)>
  *y1 = y;
  *w = *h = 0;

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

  while (len--) {
    2bfe:	42ac      	cmp	r4, r5
    2c00:	d1f3      	bne.n	2bea <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x5a>
    2c02:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
    2c06:	f9bd e018 	ldrsh.w	lr, [sp, #24]
    2c0a:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
    2c0e:	f9bd 701a 	ldrsh.w	r7, [sp, #26]
    uint8_t c = *buffer++;
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
    //Serial.printf("%c in(%d %d) out(%d %d) - min(%d %d) max(%d %d)\n", c, *x1, *y1, x, y, minx, miny, maxx, maxy);
  }

  if (maxx >= minx) {
    2c12:	4572      	cmp	r2, lr
    2c14:	db07      	blt.n	2c26 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x96>
    *x1 = minx;
    2c16:	9913      	ldr	r1, [sp, #76]	; 0x4c
    *w = maxx - minx + 1;
    2c18:	3201      	adds	r2, #1
    charBounds(c, &x, &y, &minx, &miny, &maxx, &maxy);
    //Serial.printf("%c in(%d %d) out(%d %d) - min(%d %d) max(%d %d)\n", c, *x1, *y1, x, y, minx, miny, maxx, maxy);
  }

  if (maxx >= minx) {
    *x1 = minx;
    2c1a:	f8a1 e000 	strh.w	lr, [r1]
    *w = maxx - minx + 1;
    2c1e:	9915      	ldr	r1, [sp, #84]	; 0x54
    2c20:	ebce 0202 	rsb	r2, lr, r2
    2c24:	800a      	strh	r2, [r1, #0]
  }
  if (maxy >= miny) {
    2c26:	429f      	cmp	r7, r3
    2c28:	dc05      	bgt.n	2c36 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0xa6>
    *y1 = miny;
    *h = maxy - miny + 1;
    2c2a:	3301      	adds	r3, #1
    2c2c:	9a16      	ldr	r2, [sp, #88]	; 0x58
  if (maxx >= minx) {
    *x1 = minx;
    *w = maxx - minx + 1;
  }
  if (maxy >= miny) {
    *y1 = miny;
    2c2e:	f8ab 7000 	strh.w	r7, [fp]
    *h = maxy - miny + 1;
    2c32:	1bdb      	subs	r3, r3, r7
    2c34:	8013      	strh	r3, [r2, #0]
  }
  //Serial.printf("GTB %d %d %d %d\n", *x1, *y1, *w, *h);
}
    2c36:	b009      	add	sp, #36	; 0x24
    2c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *y1 = y;
  *w = *h = 0;

  int16_t minx = _width, miny = _height, maxx = -1, maxy = -1;

  while (len--) {
    2c3c:	f04f 33ff 	mov.w	r3, #4294967295
    2c40:	461a      	mov	r2, r3
    2c42:	e7e6      	b.n	2c12 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)+0x82>

00002c44 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>:

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    2c44:	f9b0 3084 	ldrsh.w	r3, [r0, #132]	; 0x84
    2c48:	428b      	cmp	r3, r1
    2c4a:	dd4f      	ble.n	2cec <ILI9341_t3n::gfxFontLastCharPosFG(short, short)+0xa8>
// Opaque font chracter overlap?
//	unsigned int _gfx_c_last;
//	int16_t   _gfx_last_cursor_x, _gfx_last_cursor_y;
//	int16_t	 _gfx_last_x_overlap = 0;

bool ILI9341_t3n::gfxFontLastCharPosFG(int16_t x, int16_t y) {
    2c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);
    2c50:	f8d0 b074 	ldr.w	fp, [r0, #116]	; 0x74
    2c54:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
    2c56:	f89b 7008 	ldrb.w	r7, [fp, #8]
    2c5a:	f8db 8004 	ldr.w	r8, [fp, #4]

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    2c5e:	f89b 400a 	ldrb.w	r4, [fp, #10]
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
  if (y < (_gfx_last_cursor_y + (yo * textsize_y)))
    2c62:	f9b0 3082 	ldrsh.w	r3, [r0, #130]	; 0x82
    2c66:	f890 6059 	ldrb.w	r6, [r0, #89]	; 0x59
//	unsigned int _gfx_c_last;
//	int16_t   _gfx_last_cursor_x, _gfx_last_cursor_y;
//	int16_t	 _gfx_last_x_overlap = 0;

bool ILI9341_t3n::gfxFontLastCharPosFG(int16_t x, int16_t y) {
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);
    2c6a:	1bef      	subs	r7, r5, r7
    2c6c:	eb08 0ec7 	add.w	lr, r8, r7, lsl #3

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    2c70:	f99e 5006 	ldrsb.w	r5, [lr, #6]
    2c74:	eb05 0454 	add.w	r4, r5, r4, lsr #1
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
  if (y < (_gfx_last_cursor_y + (yo * textsize_y)))
    2c78:	fb14 3c06 	smlabb	ip, r4, r6, r3
    2c7c:	4562      	cmp	r2, ip
    2c7e:	db32      	blt.n	2ce6 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)+0xa2>
    return false; // above
  if (y >= (_gfx_last_cursor_y + (yo + h) * textsize_y))
    2c80:	f89e 5003 	ldrb.w	r5, [lr, #3]
    2c84:	442c      	add	r4, r5
    2c86:	fb06 3404 	mla	r4, r6, r4, r3
    2c8a:	42a2      	cmp	r2, r4
    2c8c:	da2b      	bge.n	2ce6 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)+0xa2>
  // Lets compute which Row this y is in the bitmap
  int16_t y_bitmap =
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
    2c8e:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
bool ILI9341_t3n::gfxFontLastCharPosFG(int16_t x, int16_t y) {
  GFXglyph *glyph = gfxFont->glyph + (_gfx_c_last - gfxFont->first);

  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
    2c92:	f99e 9005 	ldrsb.w	r9, [lr, #5]
  // Lets compute which Row this y is in the bitmap
  int16_t y_bitmap =
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
    2c96:	f9b0 a080 	ldrsh.w	sl, [r0, #128]	; 0x80
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;
    2c9a:	f89e e002 	ldrb.w	lr, [lr, #2]

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
    2c9e:	f8db 5000 	ldr.w	r5, [fp]
    2ca2:	f838 4037 	ldrh.w	r4, [r8, r7, lsl #3]
      (y - ((_gfx_last_cursor_y + (yo * textsize_y))) + textsize_y - 1) /
      textsize_y;
  int16_t x_bitmap =
      (x - ((_gfx_last_cursor_x + (xo * textsize_x))) + textsize_x - 1) /
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;
    2ca6:	ebcc 0002 	rsb	r0, ip, r2
    2caa:	fb19 a903 	smlabb	r9, r9, r3, sl
    2cae:	4430      	add	r0, r6
    2cb0:	ebc9 0101 	rsb	r1, r9, r1
    2cb4:	3801      	subs	r0, #1
    2cb6:	4419      	add	r1, r3
    2cb8:	fb90 f2f6 	sdiv	r2, r0, r6
    2cbc:	fb1e f202 	smulbb	r2, lr, r2
    2cc0:	3901      	subs	r1, #1
    2cc2:	fb91 f3f3 	sdiv	r3, r1, r3
    2cc6:	4413      	add	r3, r2
    2cc8:	b29b      	uxth	r3, r3

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
    2cca:	eb05 05d3 	add.w	r5, r5, r3, lsr #3
          (0x80 >> (pixel_bit_offset & 0x7)));
    2cce:	2280      	movs	r2, #128	; 0x80
    2cd0:	5d29      	ldrb	r1, [r5, r4]
    2cd2:	f003 0307 	and.w	r3, r3, #7
    2cd6:	fa42 f303 	asr.w	r3, r2, r3
    2cda:	4219      	tst	r1, r3
    2cdc:	bf14      	ite	ne
    2cde:	2001      	movne	r0, #1
    2ce0:	2000      	moveq	r0, #0
    2ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
    2ce6:	2000      	movs	r0, #0
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
          (0x80 >> (pixel_bit_offset & 0x7)));
}
    2ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint8_t w = glyph->width, h = glyph->height;

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
  if (x >= _gfx_last_char_x_write)
    return false; // we did not update here...
    2cec:	2000      	movs	r0, #0
      textsize_x;
  uint16_t pixel_bit_offset = y_bitmap * w + x_bitmap;

  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
          (0x80 >> (pixel_bit_offset & 0x7)));
}
    2cee:	4770      	bx	lr

00002cf0 <ILI9341_t3n::setCursor(short, short, bool)>:

void ILI9341_t3n::setCursor(int16_t x, int16_t y, bool autoCenter) {
    2cf0:	b410      	push	{r4}
  _center_x_text = autoCenter; // remember the state.
  _center_y_text = autoCenter; // remember the state.
  if (x == ILI9341_t3n::CENTER) {
    2cf2:	f242 740e 	movw	r4, #9998	; 0x270e
    2cf6:	42a1      	cmp	r1, r4
  return ((gfxFont->bitmap[glyph->bitmapOffset + (pixel_bit_offset >> 3)]) &
          (0x80 >> (pixel_bit_offset & 0x7)));
}

void ILI9341_t3n::setCursor(int16_t x, int16_t y, bool autoCenter) {
  _center_x_text = autoCenter; // remember the state.
    2cf8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
  _center_y_text = autoCenter; // remember the state.
    2cfc:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
  if (x == ILI9341_t3n::CENTER) {
    2d00:	d039      	beq.n	2d76 <ILI9341_t3n::setCursor(short, short, bool)+0x86>
    _center_x_text = true;
    x = _width / 2;
  }
  if (y == ILI9341_t3n::CENTER) {
    2d02:	f242 730e 	movw	r3, #9998	; 0x270e
    2d06:	429a      	cmp	r2, r3
    2d08:	d041      	beq.n	2d8e <ILI9341_t3n::setCursor(short, short, bool)+0x9e>
    _center_y_text = true;
    y = _height / 2;
  }
  if (x < 0)
    2d0a:	2900      	cmp	r1, #0
    2d0c:	db4a      	blt.n	2da4 <ILI9341_t3n::setCursor(short, short, bool)+0xb4>
    x = 0;
  else if (x >= _width)
    2d0e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
    2d12:	4299      	cmp	r1, r3
    2d14:	da1b      	bge.n	2d4e <ILI9341_t3n::setCursor(short, short, bool)+0x5e>
    x = _width - 1;
  cursor_x = x;
  if (y < 0)
    2d16:	2a00      	cmp	r2, #0
  }
  if (x < 0)
    x = 0;
  else if (x >= _width)
    x = _width - 1;
  cursor_x = x;
    2d18:	8481      	strh	r1, [r0, #36]	; 0x24
  if (y < 0)
    2d1a:	db1d      	blt.n	2d58 <ILI9341_t3n::setCursor(short, short, bool)+0x68>
    y = 0;
  else if (y >= _height)
    2d1c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
    2d20:	429a      	cmp	r2, r3
    2d22:	da11      	bge.n	2d48 <ILI9341_t3n::setCursor(short, short, bool)+0x58>
    y = _height - 1;
  cursor_y = y;

  if (x >= scroll_x && x <= (scroll_x + scroll_width) && y >= scroll_y &&
    2d24:	f9b0 3040 	ldrsh.w	r3, [r0, #64]	; 0x40
  cursor_x = x;
  if (y < 0)
    y = 0;
  else if (y >= _height)
    y = _height - 1;
  cursor_y = y;
    2d28:	84c2      	strh	r2, [r0, #38]	; 0x26

  if (x >= scroll_x && x <= (scroll_x + scroll_width) && y >= scroll_y &&
    2d2a:	4299      	cmp	r1, r3
    2d2c:	db04      	blt.n	2d38 <ILI9341_t3n::setCursor(short, short, bool)+0x48>
    2d2e:	f9b0 4044 	ldrsh.w	r4, [r0, #68]	; 0x44
    2d32:	4423      	add	r3, r4
    2d34:	4299      	cmp	r1, r3
    2d36:	dd11      	ble.n	2d5c <ILI9341_t3n::setCursor(short, short, bool)+0x6c>
      y <= (scroll_y + scroll_height)) {
    isWritingScrollArea = true;
  } else {
    isWritingScrollArea = false;
    2d38:	2300      	movs	r3, #0
    2d3a:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
  }
  _gfx_last_char_x_write = 0; // Don't use cached data here
    2d3e:	2300      	movs	r3, #0
    2d40:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
}
    2d44:	bc10      	pop	{r4}
    2d46:	4770      	bx	lr
    x = _width - 1;
  cursor_x = x;
  if (y < 0)
    y = 0;
  else if (y >= _height)
    y = _height - 1;
    2d48:	1e5a      	subs	r2, r3, #1
    2d4a:	b212      	sxth	r2, r2
    2d4c:	e7ea      	b.n	2d24 <ILI9341_t3n::setCursor(short, short, bool)+0x34>
    y = _height / 2;
  }
  if (x < 0)
    x = 0;
  else if (x >= _width)
    x = _width - 1;
    2d4e:	1e59      	subs	r1, r3, #1
    2d50:	b209      	sxth	r1, r1
  cursor_x = x;
  if (y < 0)
    2d52:	2a00      	cmp	r2, #0
  }
  if (x < 0)
    x = 0;
  else if (x >= _width)
    x = _width - 1;
  cursor_x = x;
    2d54:	8481      	strh	r1, [r0, #36]	; 0x24
  if (y < 0)
    2d56:	dae1      	bge.n	2d1c <ILI9341_t3n::setCursor(short, short, bool)+0x2c>
    y = 0;
    2d58:	2200      	movs	r2, #0
    2d5a:	e7e3      	b.n	2d24 <ILI9341_t3n::setCursor(short, short, bool)+0x34>
  else if (y >= _height)
    y = _height - 1;
  cursor_y = y;

  if (x >= scroll_x && x <= (scroll_x + scroll_width) && y >= scroll_y &&
    2d5c:	f9b0 3042 	ldrsh.w	r3, [r0, #66]	; 0x42
    2d60:	429a      	cmp	r2, r3
    2d62:	dbe9      	blt.n	2d38 <ILI9341_t3n::setCursor(short, short, bool)+0x48>
    2d64:	f9b0 1046 	ldrsh.w	r1, [r0, #70]	; 0x46
    2d68:	440b      	add	r3, r1
    2d6a:	429a      	cmp	r2, r3
    2d6c:	dce4      	bgt.n	2d38 <ILI9341_t3n::setCursor(short, short, bool)+0x48>
      y <= (scroll_y + scroll_height)) {
    isWritingScrollArea = true;
    2d6e:	2301      	movs	r3, #1
    2d70:	f880 3049 	strb.w	r3, [r0, #73]	; 0x49
    2d74:	e7e3      	b.n	2d3e <ILI9341_t3n::setCursor(short, short, bool)+0x4e>
void ILI9341_t3n::setCursor(int16_t x, int16_t y, bool autoCenter) {
  _center_x_text = autoCenter; // remember the state.
  _center_y_text = autoCenter; // remember the state.
  if (x == ILI9341_t3n::CENTER) {
    _center_x_text = true;
    x = _width / 2;
    2d76:	f9b0 1020 	ldrsh.w	r1, [r0, #32]

void ILI9341_t3n::setCursor(int16_t x, int16_t y, bool autoCenter) {
  _center_x_text = autoCenter; // remember the state.
  _center_y_text = autoCenter; // remember the state.
  if (x == ILI9341_t3n::CENTER) {
    _center_x_text = true;
    2d7a:	2301      	movs	r3, #1
    x = _width / 2;
    2d7c:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    2d80:	4119      	asrs	r1, r3

void ILI9341_t3n::setCursor(int16_t x, int16_t y, bool autoCenter) {
  _center_x_text = autoCenter; // remember the state.
  _center_y_text = autoCenter; // remember the state.
  if (x == ILI9341_t3n::CENTER) {
    _center_x_text = true;
    2d82:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    x = _width / 2;
  }
  if (y == ILI9341_t3n::CENTER) {
    2d86:	f242 730e 	movw	r3, #9998	; 0x270e
    2d8a:	429a      	cmp	r2, r3
    2d8c:	d1bd      	bne.n	2d0a <ILI9341_t3n::setCursor(short, short, bool)+0x1a>
    _center_y_text = true;
    y = _height / 2;
    2d8e:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
  if (x == ILI9341_t3n::CENTER) {
    _center_x_text = true;
    x = _width / 2;
  }
  if (y == ILI9341_t3n::CENTER) {
    _center_y_text = true;
    2d92:	2301      	movs	r3, #1
    y = _height / 2;
    2d94:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
  }
  if (x < 0)
    2d98:	2900      	cmp	r1, #0
    _center_x_text = true;
    x = _width / 2;
  }
  if (y == ILI9341_t3n::CENTER) {
    _center_y_text = true;
    y = _height / 2;
    2d9a:	fa42 f203 	asr.w	r2, r2, r3
  if (x == ILI9341_t3n::CENTER) {
    _center_x_text = true;
    x = _width / 2;
  }
  if (y == ILI9341_t3n::CENTER) {
    _center_y_text = true;
    2d9e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    y = _height / 2;
  }
  if (x < 0)
    2da2:	dab4      	bge.n	2d0e <ILI9341_t3n::setCursor(short, short, bool)+0x1e>
    x = 0;
    2da4:	2100      	movs	r1, #0
    2da6:	e7b6      	b.n	2d16 <ILI9341_t3n::setCursor(short, short, bool)+0x26>

00002da8 <ILI9341_t3n::setTextSize(unsigned char, unsigned char)>:
  *x = cursor_x;
  *y = cursor_y;
}

void ILI9341_t3n::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    2da8:	2900      	cmp	r1, #0
    2daa:	bf08      	it	eq
    2dac:	2101      	moveq	r1, #1
  textsize_y = (s_y > 0) ? s_y : 1;
    2dae:	2a00      	cmp	r2, #0
    2db0:	bf08      	it	eq
    2db2:	2201      	moveq	r2, #1
  _gfx_last_char_x_write = 0; // Don't use cached data here
    2db4:	2300      	movs	r3, #0
  *x = cursor_x;
  *y = cursor_y;
}

void ILI9341_t3n::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    2db6:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
  textsize_y = (s_y > 0) ? s_y : 1;
    2dba:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
  _gfx_last_char_x_write = 0; // Don't use cached data here
    2dbe:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
    2dc2:	4770      	bx	lr

00002dc4 <ILI9341_t3n::setTextColor(unsigned short)>:
}

void ILI9341_t3n::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
    2dc4:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    2dc8:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
    2dcc:	4770      	bx	lr
    2dce:	bf00      	nop

00002dd0 <ILI9341_t3n::waitFifoNotFull()>:
}

//////////////////////////////////////////////////////
// From Spin:
#if defined(KINETISK)
void ILI9341_t3n::waitFifoNotFull(void) {
    2dd0:	69c1      	ldr	r1, [r0, #28]
    2dd2:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
  uint32_t sr;
  uint32_t tmp __attribute__((unused));
  do {
    sr = _pkinetisk_spi->SR;
    2dd6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    if (sr & 0xF0)
      tmp = _pkinetisk_spi->POPR; // drain RX FIFO
  } while ((uint32_t)(sr & (15 << 12)) > _fifo_full_test);
    2dd8:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
void ILI9341_t3n::waitFifoNotFull(void) {
  uint32_t sr;
  uint32_t tmp __attribute__((unused));
  do {
    sr = _pkinetisk_spi->SR;
    if (sr & 0xF0)
    2ddc:	f013 0ff0 	tst.w	r3, #240	; 0xf0
      tmp = _pkinetisk_spi->POPR; // drain RX FIFO
    2de0:	bf18      	it	ne
    2de2:	6b8b      	ldrne	r3, [r1, #56]	; 0x38
  } while ((uint32_t)(sr & (15 << 12)) > _fifo_full_test);
    2de4:	4282      	cmp	r2, r0
    2de6:	d8f6      	bhi.n	2dd6 <ILI9341_t3n::waitFifoNotFull()+0x6>
}
    2de8:	4770      	bx	lr
    2dea:	bf00      	nop

00002dec <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)>:
}

// Now lets see if we can read in multiple pixels
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    2dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    }
    return;
  }
#endif

  if (_miso == 0xff)
    2df0:	f890 408f 	ldrb.w	r4, [r0, #143]	; 0x8f
}

// Now lets see if we can read in multiple pixels
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    2df4:	b083      	sub	sp, #12
    }
    return;
  }
#endif

  if (_miso == 0xff)
    2df6:	2cff      	cmp	r4, #255	; 0xff
}

// Now lets see if we can read in multiple pixels
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
    2df8:	f9bd 5030 	ldrsh.w	r5, [sp, #48]	; 0x30
    }
    return;
  }
#endif

  if (_miso == 0xff)
    2dfc:	f000 8128 	beq.w	3050 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x264>
    return; // bail if not valid miso

  uint8_t rgb[3]; // RGB bytes received from the display
  uint8_t rgbIdx = 0;
  uint32_t txCount =
      w * h * 3; // number of bytes we will transmit to the display
    2e00:	fb03 f405 	mul.w	r4, r3, r5
    2e04:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display

  beginSPITransaction(_SPI_CLOCK_READ);
    2e08:	f8d0 b018 	ldr.w	fp, [r0, #24]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    2e0c:	f8d0 e008 	ldr.w	lr, [r0, #8]
    2e10:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 30bc <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2d0>
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2e14:	4ea3      	ldr	r6, [pc, #652]	; (30a4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2b8>)
    2e16:	f04f 0c00 	mov.w	ip, #0
    2e1a:	e003      	b.n	2e24 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x38>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    2e1c:	f1b8 0f17 	cmp.w	r8, #23
    2e20:	d008      	beq.n	2e34 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x48>
    2e22:	46c4      	mov	ip, r8
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2e24:	f839 7f02 	ldrh.w	r7, [r9, #2]!
    2e28:	fb96 f7f7 	sdiv	r7, r6, r7
    2e2c:	45bb      	cmp	fp, r7
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    2e2e:	f10c 0801 	add.w	r8, ip, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    2e32:	d3f3      	bcc.n	2e1c <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x30>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    2e34:	4e9c      	ldr	r6, [pc, #624]	; (30a8 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2bc>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2e36:	f89e 700b 	ldrb.w	r7, [lr, #11]
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    2e3a:	f856 b02c 	ldr.w	fp, [r6, ip, lsl #2]
// Now lets see if we can read in multiple pixels
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
    2e3e:	f9b0 9032 	ldrsh.w	r9, [r0, #50]	; 0x32
  y += _originy;
    2e42:	f9b0 a034 	ldrsh.w	sl, [r0, #52]	; 0x34
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    2e46:	f04b 5860 	orr.w	r8, fp, #939524096	; 0x38000000

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    2e4a:	b377      	cbz	r7, 2eaa <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xbe>
			__disable_irq();
    2e4c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    2e4e:	f89e 700b 	ldrb.w	r7, [lr, #11]
    2e52:	07fe      	lsls	r6, r7, #31
    2e54:	d50c      	bpl.n	2e70 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x84>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    2e56:	f8df c268 	ldr.w	ip, [pc, #616]	; 30c0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2d4>
    2e5a:	f8de 600c 	ldr.w	r6, [lr, #12]
    2e5e:	f8dc 7000 	ldr.w	r7, [ip]
    2e62:	4037      	ands	r7, r6
    2e64:	f8ce 7018 	str.w	r7, [lr, #24]
				NVIC_ICER0 = interruptSave[0];
    2e68:	f8cc 7000 	str.w	r7, [ip]
    2e6c:	f89e 700b 	ldrb.w	r7, [lr, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    2e70:	07be      	lsls	r6, r7, #30
    2e72:	d50c      	bpl.n	2e8e <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xa2>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    2e74:	f8df c24c 	ldr.w	ip, [pc, #588]	; 30c4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2d8>
    2e78:	f8de 6010 	ldr.w	r6, [lr, #16]
    2e7c:	f8dc 7000 	ldr.w	r7, [ip]
    2e80:	4037      	ands	r7, r6
    2e82:	f8ce 701c 	str.w	r7, [lr, #28]
				NVIC_ICER1 = interruptSave[1];
    2e86:	f8cc 7000 	str.w	r7, [ip]
    2e8a:	f89e 700b 	ldrb.w	r7, [lr, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    2e8e:	077e      	lsls	r6, r7, #29
    2e90:	d50a      	bpl.n	2ea8 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xbc>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    2e92:	f8df c234 	ldr.w	ip, [pc, #564]	; 30c8 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2dc>
    2e96:	f8de 6014 	ldr.w	r6, [lr, #20]
    2e9a:	f8dc 7000 	ldr.w	r7, [ip]
    2e9e:	4037      	ands	r7, r6
    2ea0:	f8ce 7020 	str.w	r7, [lr, #32]
				NVIC_ICER2 = interruptSave[2];
    2ea4:	f8cc 7000 	str.w	r7, [ip]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    2ea8:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    2eaa:	f8de 7000 	ldr.w	r7, [lr]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    2eae:	f8d7 e00c 	ldr.w	lr, [r7, #12]
    2eb2:	45c6      	cmp	lr, r8
    2eb4:	d00b      	beq.n	2ece <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xe2>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    2eb6:	f04b 4cf0 	orr.w	ip, fp, #2013265920	; 0x78000000
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2eba:	4e7c      	ldr	r6, [pc, #496]	; (30ac <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2c0>)
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    2ebc:	f8df b20c 	ldr.w	fp, [pc, #524]	; 30cc <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2e0>
    2ec0:	f8c7 b000 	str.w	fp, [r7]
			port().CTAR0 = settings.ctar;
    2ec4:	f8c7 800c 	str.w	r8, [r7, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    2ec8:	f8c7 c010 	str.w	ip, [r7, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    2ecc:	603e      	str	r6, [r7, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    2ece:	f8d0 709c 	ldr.w	r7, [r0, #156]	; 0x9c
    2ed2:	b13f      	cbz	r7, 2ee4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0xf8>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    2ed4:	f897 e000 	ldrb.w	lr, [r7]
    2ed8:	f890 c098 	ldrb.w	ip, [r0, #152]	; 0x98
    2edc:	ea2e 0e0c 	bic.w	lr, lr, ip
    2ee0:	f887 e000 	strb.w	lr, [r7]
    2ee4:	4607      	mov	r7, r0
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2ee6:	f890 008e 	ldrb.w	r0, [r0, #142]	; 0x8e
    2eea:	0400      	lsls	r0, r0, #16
    2eec:	4492      	add	sl, r2
    2eee:	f040 4200 	orr.w	r2, r0, #2147483648	; 0x80000000
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2ef2:	69f8      	ldr	r0, [r7, #28]
// Now lets see if we can read in multiple pixels
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
    2ef4:	4489      	add	r9, r1
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2ef6:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display

  beginSPITransaction(_SPI_CLOCK_READ);

  setAddr(x, y, x + w - 1, y + h - 1);
    2efa:	3b01      	subs	r3, #1
    2efc:	6342      	str	r2, [r0, #52]	; 0x34
// Now lets see if we can read in multiple pixels
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
    2efe:	fa1f f989 	uxth.w	r9, r9
    waitFifoNotFull();
    2f02:	4638      	mov	r0, r7
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display

  beginSPITransaction(_SPI_CLOCK_READ);

  setAddr(x, y, x + w - 1, y + h - 1);
    2f04:	eb09 0803 	add.w	r8, r9, r3
    2f08:	f7ff ff62 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f0c:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2f10:	69fb      	ldr	r3, [r7, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f12:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
    2f16:	f049 4210 	orr.w	r2, r9, #2415919104	; 0x90000000
    2f1a:	635a      	str	r2, [r3, #52]	; 0x34
    waitFifoNotFull();
    2f1c:	4638      	mov	r0, r7
    2f1e:	f7ff ff57 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f22:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2f26:	69fa      	ldr	r2, [r7, #28]
    2f28:	fa1f f888 	uxth.w	r8, r8
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f2c:	ea48 4803 	orr.w	r8, r8, r3, lsl #16
    2f30:	f048 4310 	orr.w	r3, r8, #2415919104	; 0x90000000
    2f34:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    2f36:	4638      	mov	r0, r7
    2f38:	f7ff ff4a 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2f3c:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2f40:	69fa      	ldr	r2, [r7, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2f42:	041b      	lsls	r3, r3, #16
    2f44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2f48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    2f4c:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    2f4e:	4638      	mov	r0, r7
    2f50:	f7ff ff3e 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f54:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2f58:	69fa      	ldr	r2, [r7, #28]
#ifdef KINETISK
void ILI9341_t3n::readRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t *pcolors) {
  // Use our Origin.
  x += _originx;
  y += _originy;
    2f5a:	fa1f fa8a 	uxth.w	sl, sl
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display

  beginSPITransaction(_SPI_CLOCK_READ);

  setAddr(x, y, x + w - 1, y + h - 1);
    2f5e:	3d01      	subs	r5, #1
    2f60:	4455      	add	r5, sl
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f62:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    2f66:	f04a 4310 	orr.w	r3, sl, #2415919104	; 0x90000000
    2f6a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    2f6c:	4638      	mov	r0, r7
    2f6e:	f7ff ff2f 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f72:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2f76:	69fb      	ldr	r3, [r7, #28]
    2f78:	b2ad      	uxth	r5, r5
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    2f7a:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
    2f7e:	f045 4510 	orr.w	r5, r5, #2415919104	; 0x90000000
    2f82:	635d      	str	r5, [r3, #52]	; 0x34
    waitFifoNotFull();
    2f84:	4638      	mov	r0, r7
    2f86:	f7ff ff23 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2f8a:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    2f8e:	69fa      	ldr	r2, [r7, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2f90:	041b      	lsls	r3, r3, #16
    2f92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    2f96:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
    2f9a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    2f9c:	4638      	mov	r0, r7
    2f9e:	f7ff ff17 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
  writecommand_cont(ILI9341_RAMRD); // read from RAM

  // transmit a DUMMY byte before the color bytes
  _pkinetisk_spi->PUSHR =
      0 | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2fa2:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d

  setAddr(x, y, x + w - 1, y + h - 1);
  writecommand_cont(ILI9341_RAMRD); // read from RAM

  // transmit a DUMMY byte before the color bytes
  _pkinetisk_spi->PUSHR =
    2fa6:	69fb      	ldr	r3, [r7, #28]
      0 | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2fa8:	0412      	lsls	r2, r2, #16
    2faa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    2fae:	635a      	str	r2, [r3, #52]	; 0x34

  // skip values returned by the queued up transfers and the current in-flight
  // transfer
  uint32_t sr = _pkinetisk_spi->SR;
    2fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  uint8_t skipCount = ((sr >> 4) & 0xF) + ((sr >> 12) & 0xF) + 1;
    2fb2:	f3c2 1103 	ubfx	r1, r2, #4, #4
    2fb6:	f3c2 3203 	ubfx	r2, r2, #12, #4
    2fba:	4411      	add	r1, r2
    2fbc:	3101      	adds	r1, #1
  uint8_t rgb[3]; // RGB bytes received from the display
  uint8_t rgbIdx = 0;
  uint32_t txCount =
      w * h * 3; // number of bytes we will transmit to the display
  uint32_t rxCount =
      txCount; // number of bytes we will receive back from the display
    2fbe:	4626      	mov	r6, r4

  if (_miso == 0xff)
    return; // bail if not valid miso

  uint8_t rgb[3]; // RGB bytes received from the display
  uint8_t rgbIdx = 0;
    2fc0:	2500      	movs	r5, #0
  // skip values returned by the queued up transfers and the current in-flight
  // transfer
  uint32_t sr = _pkinetisk_spi->SR;
  uint8_t skipCount = ((sr >> 4) & 0xF) + ((sr >> 12) & 0xF) + 1;

  while (txCount || rxCount) {
    2fc2:	b97c      	cbnz	r4, 2fe4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1f8>
    2fc4:	b316      	cbz	r6, 300c <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x220>
                                SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && (_pkinetisk_spi->SR & 0xF0)) {
    2fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2fc8:	f012 0ff0 	tst.w	r2, #240	; 0xf0
    2fcc:	d0f9      	beq.n	2fc2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
      rgb[rgbIdx] = _pkinetisk_spi->POPR;
    2fce:	aa02      	add	r2, sp, #8
    2fd0:	442a      	add	r2, r5
    2fd2:	6b98      	ldr	r0, [r3, #56]	; 0x38
    2fd4:	f802 0c04 	strb.w	r0, [r2, #-4]

      if (skipCount) {
    2fd8:	2900      	cmp	r1, #0
    2fda:	d03c      	beq.n	3056 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x26a>
        skipCount--;
    2fdc:	3901      	subs	r1, #1
    2fde:	b2c9      	uxtb	r1, r1
  // skip values returned by the queued up transfers and the current in-flight
  // transfer
  uint32_t sr = _pkinetisk_spi->SR;
  uint8_t skipCount = ((sr >> 4) & 0xF) + ((sr >> 12) & 0xF) + 1;

  while (txCount || rxCount) {
    2fe0:	2c00      	cmp	r4, #0
    2fe2:	d0ef      	beq.n	2fc4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d8>
    // transmit another byte if possible
    if (txCount && (_pkinetisk_spi->SR & 0xF000) <= _fifo_full_test) {
    2fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2fe6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
    2fea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
    2fee:	4282      	cmp	r2, r0
    2ff0:	d809      	bhi.n	3006 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x21a>
      txCount--;
      if (txCount) {
    2ff2:	3c01      	subs	r4, #1
    2ff4:	d04b      	beq.n	308e <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2a2>
        _pkinetisk_spi->PUSHR = READ_PIXEL_PUSH_BYTE | (pcs_data << 16) |
                                SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    2ff6:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
    2ffa:	0412      	lsls	r2, r2, #16
    2ffc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    3000:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
    3004:	635a      	str	r2, [r3, #52]	; 0x34
                                SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && (_pkinetisk_spi->SR & 0xF0)) {
    3006:	2e00      	cmp	r6, #0
    3008:	d0db      	beq.n	2fc2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
    300a:	e7dc      	b.n	2fc6 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1da>
      }
    }
  }

  // wait for End of Queue
  while ((_pkinetisk_spi->SR & SPI_SR_EOQF) == 0)
    300c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    300e:	00d4      	lsls	r4, r2, #3
    3010:	d5fc      	bpl.n	300c <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x220>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    3012:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
    ;
  _pkinetisk_spi->SR = SPI_SR_EOQF; // make sure it is clear
    3016:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    301a:	62d9      	str	r1, [r3, #44]	; 0x2c
    301c:	b122      	cbz	r2, 3028 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x23c>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    301e:	7811      	ldrb	r1, [r2, #0]
    3020:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
    3024:	430b      	orrs	r3, r1
    3026:	7013      	strb	r3, [r2, #0]
#endif
    }
    _pspi->endTransaction();
    3028:	68ba      	ldr	r2, [r7, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    302a:	7ad3      	ldrb	r3, [r2, #11]
    302c:	b183      	cbz	r3, 3050 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x264>
			if (interruptMasksUsed & 0x01) {
    302e:	07d8      	lsls	r0, r3, #31
    3030:	d503      	bpl.n	303a <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x24e>
				NVIC_ISER0 = interruptSave[0];
    3032:	4b1f      	ldr	r3, [pc, #124]	; (30b0 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2c4>)
    3034:	6991      	ldr	r1, [r2, #24]
    3036:	6019      	str	r1, [r3, #0]
    3038:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    303a:	0799      	lsls	r1, r3, #30
    303c:	d503      	bpl.n	3046 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x25a>
				NVIC_ISER1 = interruptSave[1];
    303e:	4b1d      	ldr	r3, [pc, #116]	; (30b4 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2c8>)
    3040:	69d1      	ldr	r1, [r2, #28]
    3042:	6019      	str	r1, [r3, #0]
    3044:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3046:	075b      	lsls	r3, r3, #29
    3048:	d502      	bpl.n	3050 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x264>
				NVIC_ISER2 = interruptSave[2];
    304a:	4b1b      	ldr	r3, [pc, #108]	; (30b8 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x2cc>)
    304c:	6a12      	ldr	r2, [r2, #32]
    304e:	601a      	str	r2, [r3, #0]
  endSPITransaction();
}
    3050:	b003      	add	sp, #12
    3052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

      if (skipCount) {
        skipCount--;
      } else {
        rxCount--;
        rgbIdx++;
    3056:	3501      	adds	r5, #1
    3058:	b2ed      	uxtb	r5, r5
        if (rgbIdx == 3) {
    305a:	2d03      	cmp	r5, #3
      rgb[rgbIdx] = _pkinetisk_spi->POPR;

      if (skipCount) {
        skipCount--;
      } else {
        rxCount--;
    305c:	f106 36ff 	add.w	r6, r6, #4294967295
        rgbIdx++;
        if (rgbIdx == 3) {
    3060:	d1af      	bne.n	2fc2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
          rgbIdx = 0;
          *pcolors++ = color565(rgb[0], rgb[1], rgb[2]);
    3062:	f89d 2004 	ldrb.w	r2, [sp, #4]
    3066:	f89d 0005 	ldrb.w	r0, [sp, #5]
    306a:	f89d 5006 	ldrb.w	r5, [sp, #6]
    306e:	0212      	lsls	r2, r2, #8
    3070:	00c0      	lsls	r0, r0, #3
    3072:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
    3076:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
    307a:	4302      	orrs	r2, r0
    307c:	980d      	ldr	r0, [sp, #52]	; 0x34
    307e:	ea42 02d5 	orr.w	r2, r2, r5, lsr #3
    3082:	8002      	strh	r2, [r0, #0]
    3084:	4602      	mov	r2, r0
    3086:	3202      	adds	r2, #2
        skipCount--;
      } else {
        rxCount--;
        rgbIdx++;
        if (rgbIdx == 3) {
          rgbIdx = 0;
    3088:	460d      	mov	r5, r1
          *pcolors++ = color565(rgb[0], rgb[1], rgb[2]);
    308a:	920d      	str	r2, [sp, #52]	; 0x34
    308c:	e799      	b.n	2fc2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
      if (txCount) {
        _pkinetisk_spi->PUSHR = READ_PIXEL_PUSH_BYTE | (pcs_data << 16) |
                                SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
      } else {
        _pkinetisk_spi->PUSHR = READ_PIXEL_PUSH_BYTE | (pcs_data << 16) |
                                SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    308e:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
    3092:	0412      	lsls	r2, r2, #16
    3094:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    3098:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
    309c:	635a      	str	r2, [r3, #52]	; 0x34
      }
    }

    // receive another byte if possible, and either skip it or store the color
    if (rxCount && (_pkinetisk_spi->SR & 0xF0)) {
    309e:	2e00      	cmp	r6, #0
    30a0:	d08f      	beq.n	2fc2 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1d6>
    30a2:	e790      	b.n	2fc6 <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)+0x1da>
    30a4:	02dc6c00 	.word	0x02dc6c00
    30a8:	0000ded8 	.word	0x0000ded8
    30ac:	803f0000 	.word	0x803f0000
    30b0:	e000e100 	.word	0xe000e100
    30b4:	e000e104 	.word	0xe000e104
    30b8:	e000e108 	.word	0xe000e108
    30bc:	0000dea6 	.word	0x0000dea6
    30c0:	e000e180 	.word	0xe000e180
    30c4:	e000e184 	.word	0xe000e184
    30c8:	e000e188 	.word	0xe000e188
    30cc:	003f4001 	.word	0x003f4001

000030d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>:
  uint32_t tmp __attribute__((unused));
  while (!(_pkinetisk_spi->SR & SPI_SR_TCF))
    ;                         // wait until final output done
  tmp = _pkinetisk_spi->POPR; // drain the final RX FIFO word
}
void ILI9341_t3n::waitTransmitComplete(uint32_t mcr) {
    30d0:	69c2      	ldr	r2, [r0, #28]
    30d2:	e002      	b.n	30da <ILI9341_t3n::waitTransmitComplete(unsigned long)+0xa>
  uint32_t tmp __attribute__((unused));
  while (1) {
    uint32_t sr = _pkinetisk_spi->SR;
    if (sr & SPI_SR_EOQF)
      break; // wait for last transmit
    if (sr & 0xF0)
    30d4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    30d8:	d110      	bne.n	30fc <ILI9341_t3n::waitTransmitComplete(unsigned long)+0x2c>
  tmp = _pkinetisk_spi->POPR; // drain the final RX FIFO word
}
void ILI9341_t3n::waitTransmitComplete(uint32_t mcr) {
  uint32_t tmp __attribute__((unused));
  while (1) {
    uint32_t sr = _pkinetisk_spi->SR;
    30da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    if (sr & SPI_SR_EOQF)
    30dc:	00d8      	lsls	r0, r3, #3
    30de:	d5f9      	bpl.n	30d4 <ILI9341_t3n::waitTransmitComplete(unsigned long)+0x4>
      break; // wait for last transmit
    if (sr & 0xF0)
      tmp = _pkinetisk_spi->POPR;
  }
  _pkinetisk_spi->SR = SPI_SR_EOQF;
    30e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    30e4:	62d3      	str	r3, [r2, #44]	; 0x2c
  _pkinetisk_spi->MCR = mcr;
    30e6:	6011      	str	r1, [r2, #0]
  while (_pkinetisk_spi->SR & 0xF0) {
    30e8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    30ea:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    30ee:	d004      	beq.n	30fa <ILI9341_t3n::waitTransmitComplete(unsigned long)+0x2a>
    tmp = _pkinetisk_spi->POPR;
    30f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
    if (sr & 0xF0)
      tmp = _pkinetisk_spi->POPR;
  }
  _pkinetisk_spi->SR = SPI_SR_EOQF;
  _pkinetisk_spi->MCR = mcr;
  while (_pkinetisk_spi->SR & 0xF0) {
    30f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    30f4:	f013 0ff0 	tst.w	r3, #240	; 0xf0
    30f8:	d1fa      	bne.n	30f0 <ILI9341_t3n::waitTransmitComplete(unsigned long)+0x20>
    30fa:	4770      	bx	lr
  while (1) {
    uint32_t sr = _pkinetisk_spi->SR;
    if (sr & SPI_SR_EOQF)
      break; // wait for last transmit
    if (sr & 0xF0)
      tmp = _pkinetisk_spi->POPR;
    30fc:	6b93      	ldr	r3, [r2, #56]	; 0x38
    30fe:	e7ec      	b.n	30da <ILI9341_t3n::waitTransmitComplete(unsigned long)+0xa>

00003100 <ILI9341_t3n::drawPixel(short, short, unsigned short)>:
  beginSPITransaction(_SPI_CLOCK);
  writedata16_last(color);
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
    3100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  x += _originx;
    3104:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  y += _originy;
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    3106:	f9b0 5036 	ldrsh.w	r5, [r0, #54]	; 0x36
  writedata16_last(color);
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
  x += _originx;
    310a:	4421      	add	r1, r4
    310c:	b28c      	uxth	r4, r1
    310e:	b221      	sxth	r1, r4
  y += _originy;
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    3110:	428d      	cmp	r5, r1
  beginSPITransaction(_SPI_CLOCK);
  writedata16_last(color);
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
    3112:	b082      	sub	sp, #8
  x += _originx;
  y += _originy;
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    3114:	dc0f      	bgt.n	3136 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x36>
    3116:	f9b0 503a 	ldrsh.w	r5, [r0, #58]	; 0x3a
    311a:	428d      	cmp	r5, r1
    311c:	dd0b      	ble.n	3136 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x36>
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
  x += _originx;
  y += _originy;
    311e:	8e81      	ldrh	r1, [r0, #52]	; 0x34
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    3120:	f9b0 5038 	ldrsh.w	r5, [r0, #56]	; 0x38
  endSPITransaction();
}

void ILI9341_t3n::drawPixel(int16_t x, int16_t y, uint16_t color) {
  x += _originx;
  y += _originy;
    3124:	1856      	adds	r6, r2, r1
    3126:	b2b6      	uxth	r6, r6
    3128:	b232      	sxth	r2, r6
  if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    312a:	4295      	cmp	r5, r2
    312c:	dc03      	bgt.n	3136 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x36>
    312e:	f9b0 103c 	ldrsh.w	r1, [r0, #60]	; 0x3c
    3132:	4291      	cmp	r1, r2
    3134:	dc02      	bgt.n	313c <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x3c>
    setAddr(x, y, x, y);
    writecommand_cont(ILI9341_RAMWR);
    writedata16_last(color);
    endSPITransaction();
  }
}
    3136:	b002      	add	sp, #8
    3138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    313c:	f8d0 8008 	ldr.w	r8, [r0, #8]
    3140:	6941      	ldr	r1, [r0, #20]
    3142:	2201      	movs	r2, #1
    3144:	461f      	mov	r7, r3
    3146:	4605      	mov	r5, r0
    3148:	2300      	movs	r3, #0
    314a:	a801      	add	r0, sp, #4
    314c:	f7ff fa22 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3150:	f898 300b 	ldrb.w	r3, [r8, #11]
    3154:	9a01      	ldr	r2, [sp, #4]
    3156:	2b00      	cmp	r3, #0
    3158:	f040 8092 	bne.w	3280 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x180>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    315c:	f8d8 3000 	ldr.w	r3, [r8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    3160:	68d9      	ldr	r1, [r3, #12]
    3162:	4291      	cmp	r1, r2
    3164:	d007      	beq.n	3176 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x76>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    3166:	485a      	ldr	r0, [pc, #360]	; (32d0 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1d0>)
    3168:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    316a:	495a      	ldr	r1, [pc, #360]	; (32d4 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1d4>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    316c:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    316e:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    3172:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3174:	6019      	str	r1, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    3176:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    317a:	b12b      	cbz	r3, 3188 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x88>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    317c:	781a      	ldrb	r2, [r3, #0]
    317e:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
    3182:	ea22 0201 	bic.w	r2, r2, r1
    3186:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3188:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    318c:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    318e:	041b      	lsls	r3, r3, #16
    3190:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3194:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
    3198:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    319a:	4628      	mov	r0, r5
    319c:	f7ff fe18 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31a0:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    31a4:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31a6:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    31aa:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    31ae:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    31b0:	4628      	mov	r0, r5
    31b2:	f7ff fe0d 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31b6:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    31ba:	69eb      	ldr	r3, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
    31c0:	f041 4110 	orr.w	r1, r1, #2415919104	; 0x90000000
    31c4:	6359      	str	r1, [r3, #52]	; 0x34
    waitFifoNotFull();
    31c6:	4628      	mov	r0, r5
    31c8:	f7ff fe02 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    31cc:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    31d0:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    31d2:	041b      	lsls	r3, r3, #16
    31d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    31d8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    31dc:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    31de:	4628      	mov	r0, r5
    31e0:	f7ff fdf6 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31e4:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    31e8:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31ea:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
    31ee:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    31f2:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    31f4:	4628      	mov	r0, r5
    31f6:	f7ff fdeb 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    31fa:	f895 208d 	ldrb.w	r2, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    31fe:	69eb      	ldr	r3, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3200:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
    3204:	f046 4610 	orr.w	r6, r6, #2415919104	; 0x90000000
    3208:	635e      	str	r6, [r3, #52]	; 0x34
    waitFifoNotFull();
    320a:	4628      	mov	r0, r5
    320c:	f7ff fde0 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3210:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3214:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3216:	041b      	lsls	r3, r3, #16
    3218:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    321c:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    3220:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3222:	4628      	mov	r0, r5
    3224:	f7ff fdd4 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3228:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    322c:	69ea      	ldr	r2, [r5, #28]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    322e:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
    3232:	f047 57c0 	orr.w	r7, r7, #402653184	; 0x18000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3236:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3238:	6357      	str	r7, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    323a:	4628      	mov	r0, r5
    323c:	f7ff ff48 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    3240:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    3244:	b123      	cbz	r3, 3250 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x150>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    3246:	7819      	ldrb	r1, [r3, #0]
    3248:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
    324c:	430a      	orrs	r2, r1
    324e:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    3250:	68aa      	ldr	r2, [r5, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3252:	7ad3      	ldrb	r3, [r2, #11]
    3254:	2b00      	cmp	r3, #0
    3256:	f43f af6e 	beq.w	3136 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x36>
			if (interruptMasksUsed & 0x01) {
    325a:	07d8      	lsls	r0, r3, #31
    325c:	d503      	bpl.n	3266 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x166>
				NVIC_ISER0 = interruptSave[0];
    325e:	4b1e      	ldr	r3, [pc, #120]	; (32d8 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1d8>)
    3260:	6991      	ldr	r1, [r2, #24]
    3262:	6019      	str	r1, [r3, #0]
    3264:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3266:	0799      	lsls	r1, r3, #30
    3268:	d503      	bpl.n	3272 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x172>
				NVIC_ISER1 = interruptSave[1];
    326a:	4b1c      	ldr	r3, [pc, #112]	; (32dc <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1dc>)
    326c:	69d1      	ldr	r1, [r2, #28]
    326e:	6019      	str	r1, [r3, #0]
    3270:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3272:	075b      	lsls	r3, r3, #29
    3274:	f57f af5f 	bpl.w	3136 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x36>
				NVIC_ISER2 = interruptSave[2];
    3278:	4b19      	ldr	r3, [pc, #100]	; (32e0 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1e0>)
    327a:	6a12      	ldr	r2, [r2, #32]
    327c:	601a      	str	r2, [r3, #0]
    327e:	e75a      	b.n	3136 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x36>
	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
			__disable_irq();
    3280:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3282:	f898 300b 	ldrb.w	r3, [r8, #11]
    3286:	07d8      	lsls	r0, r3, #31
    3288:	d509      	bpl.n	329e <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x19e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    328a:	4916      	ldr	r1, [pc, #88]	; (32e4 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1e4>)
    328c:	f8d8 300c 	ldr.w	r3, [r8, #12]
    3290:	6808      	ldr	r0, [r1, #0]
    3292:	4003      	ands	r3, r0
    3294:	f8c8 3018 	str.w	r3, [r8, #24]
				NVIC_ICER0 = interruptSave[0];
    3298:	600b      	str	r3, [r1, #0]
    329a:	f898 300b 	ldrb.w	r3, [r8, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    329e:	0799      	lsls	r1, r3, #30
    32a0:	d509      	bpl.n	32b6 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1b6>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    32a2:	4911      	ldr	r1, [pc, #68]	; (32e8 <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1e8>)
    32a4:	f8d8 3010 	ldr.w	r3, [r8, #16]
    32a8:	6808      	ldr	r0, [r1, #0]
    32aa:	4003      	ands	r3, r0
    32ac:	f8c8 301c 	str.w	r3, [r8, #28]
				NVIC_ICER1 = interruptSave[1];
    32b0:	600b      	str	r3, [r1, #0]
    32b2:	f898 300b 	ldrb.w	r3, [r8, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    32b6:	075b      	lsls	r3, r3, #29
    32b8:	d507      	bpl.n	32ca <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1ca>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    32ba:	490c      	ldr	r1, [pc, #48]	; (32ec <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x1ec>)
    32bc:	f8d8 3014 	ldr.w	r3, [r8, #20]
    32c0:	6808      	ldr	r0, [r1, #0]
    32c2:	4003      	ands	r3, r0
    32c4:	f8c8 3020 	str.w	r3, [r8, #32]
				NVIC_ICER2 = interruptSave[2];
    32c8:	600b      	str	r3, [r1, #0]
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    32ca:	b662      	cpsie	i
    32cc:	e746      	b.n	315c <ILI9341_t3n::drawPixel(short, short, unsigned short)+0x5c>
    32ce:	bf00      	nop
    32d0:	003f4001 	.word	0x003f4001
    32d4:	803f0000 	.word	0x803f0000
    32d8:	e000e100 	.word	0xe000e100
    32dc:	e000e104 	.word	0xe000e104
    32e0:	e000e108 	.word	0xe000e108
    32e4:	e000e180 	.word	0xe000e180
    32e8:	e000e184 	.word	0xe000e184
    32ec:	e000e188 	.word	0xe000e188

000032f0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>:
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    32f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  x += _originx;
  y += _originy;
    32f4:	8e87      	ldrh	r7, [r0, #52]	; 0x34
    32f6:	443a      	add	r2, r7
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    32f8:	4604      	mov	r4, r0
  x += _originx;
  y += _originy;
    32fa:	b297      	uxth	r7, r2

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    32fc:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	; 0x38
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    3300:	b082      	sub	sp, #8
  x += _originx;
  y += _originy;
    3302:	b23a      	sxth	r2, r7

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    3304:	4290      	cmp	r0, r2
    endSPITransaction();
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
    3306:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
  x += _originx;
  y += _originy;

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    330a:	f300 80f5 	bgt.w	34f8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x208>
    330e:	4698      	mov	r8, r3
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
  x += _originx;
    3310:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  y += _originy;

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    3312:	f9b4 003a 	ldrsh.w	r0, [r4, #58]	; 0x3a
  }
}

void ILI9341_t3n::drawFastHLine(int16_t x, int16_t y, int16_t w,
                                uint16_t color) {
  x += _originx;
    3316:	4419      	add	r1, r3
    3318:	b289      	uxth	r1, r1
    331a:	b20d      	sxth	r5, r1
  y += _originy;

  // Rectangular clipping
  if ((y < _displayclipy1) || (x >= _displayclipx2) || (y >= _displayclipy2))
    331c:	4285      	cmp	r5, r0
    331e:	f280 80eb 	bge.w	34f8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x208>
    3322:	f9b4 303c 	ldrsh.w	r3, [r4, #60]	; 0x3c
    3326:	4293      	cmp	r3, r2
    3328:	f340 80e6 	ble.w	34f8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x208>
    return;
  if (x < _displayclipx1) {
    332c:	f9b4 3036 	ldrsh.w	r3, [r4, #54]	; 0x36
    3330:	429d      	cmp	r5, r3
    3332:	da05      	bge.n	3340 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x50>
    w = w - (_displayclipx1 - x);
    3334:	ebc3 0808 	rsb	r8, r3, r8
    3338:	4441      	add	r1, r8
    333a:	fa0f f881 	sxth.w	r8, r1
    333e:	461d      	mov	r5, r3
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2)
    3340:	eb05 0308 	add.w	r3, r5, r8
    3344:	4283      	cmp	r3, r0
    w = _displayclipx2 - x;
    3346:	bfc4      	itt	gt
    3348:	ebc5 0800 	rsbgt	r8, r5, r0
    334c:	fa0f f888 	sxthgt.w	r8, r8
  if (w < 1)
    3350:	f1b8 0f00 	cmp.w	r8, #0
    3354:	f340 80d0 	ble.w	34f8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x208>
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    3358:	f8d4 9008 	ldr.w	r9, [r4, #8]
    335c:	6961      	ldr	r1, [r4, #20]
    335e:	2300      	movs	r3, #0
    3360:	2201      	movs	r2, #1
    3362:	a801      	add	r0, sp, #4
    3364:	f7ff f916 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3368:	f899 300b 	ldrb.w	r3, [r9, #11]
    336c:	9a01      	ldr	r2, [sp, #4]
    336e:	b1f3      	cbz	r3, 33ae <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbe>
			__disable_irq();
    3370:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3372:	f899 300b 	ldrb.w	r3, [r9, #11]
    3376:	07d8      	lsls	r0, r3, #31
    3378:	d509      	bpl.n	338e <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x9e>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    337a:	4968      	ldr	r1, [pc, #416]	; (351c <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x22c>)
    337c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    3380:	6808      	ldr	r0, [r1, #0]
    3382:	4003      	ands	r3, r0
    3384:	f8c9 3018 	str.w	r3, [r9, #24]
				NVIC_ICER0 = interruptSave[0];
    3388:	600b      	str	r3, [r1, #0]
    338a:	f899 300b 	ldrb.w	r3, [r9, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    338e:	0799      	lsls	r1, r3, #30
    3390:	d509      	bpl.n	33a6 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xb6>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3392:	4963      	ldr	r1, [pc, #396]	; (3520 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x230>)
    3394:	f8d9 3010 	ldr.w	r3, [r9, #16]
    3398:	6808      	ldr	r0, [r1, #0]
    339a:	4003      	ands	r3, r0
    339c:	f8c9 301c 	str.w	r3, [r9, #28]
				NVIC_ICER1 = interruptSave[1];
    33a0:	600b      	str	r3, [r1, #0]
    33a2:	f899 300b 	ldrb.w	r3, [r9, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    33a6:	075b      	lsls	r3, r3, #29
    33a8:	f100 80ae 	bmi.w	3508 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x218>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    33ac:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    33ae:	f8d9 3000 	ldr.w	r3, [r9]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    33b2:	68d9      	ldr	r1, [r3, #12]
    33b4:	4291      	cmp	r1, r2
    33b6:	d007      	beq.n	33c8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xd8>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    33b8:	485a      	ldr	r0, [pc, #360]	; (3524 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x234>)
    33ba:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    33bc:	495a      	ldr	r1, [pc, #360]	; (3528 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x238>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    33be:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    33c0:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    33c4:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    33c6:	6019      	str	r1, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    33c8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    33cc:	b12b      	cbz	r3, 33da <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xea>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    33ce:	781a      	ldrb	r2, [r3, #0]
    33d0:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    33d4:	ea22 0201 	bic.w	r2, r2, r1
    33d8:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    33da:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    33de:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    33e0:	041b      	lsls	r3, r3, #16
    33e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    33e6:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
    33ea:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    33ec:	4620      	mov	r0, r4
    33ee:	f7ff fcef 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    33f2:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    33f6:	69e2      	ldr	r2, [r4, #28]
    }
  } else
#endif
  {
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y);
    33f8:	fa1f fa85 	uxth.w	sl, r5
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    33fc:	ea4a 4303 	orr.w	r3, sl, r3, lsl #16
    3400:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3404:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3406:	4620      	mov	r0, r4
    3408:	f10a 39ff 	add.w	r9, sl, #4294967295
    340c:	fa1f f588 	uxth.w	r5, r8
    3410:	f7ff fcde 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    3414:	44a9      	add	r9, r5
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3416:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    341a:	69e2      	ldr	r2, [r4, #28]
    341c:	fa1f f989 	uxth.w	r9, r9
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3420:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3424:	f049 4310 	orr.w	r3, r9, #2415919104	; 0x90000000
    3428:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    342a:	4620      	mov	r0, r4
    342c:	f7ff fcd0 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3430:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3434:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3436:	041b      	lsls	r3, r3, #16
    3438:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    343c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    3440:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3442:	4620      	mov	r0, r4
    3444:	f7ff fcc4 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3448:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    344c:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    344e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    3452:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3456:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3458:	4620      	mov	r0, r4
    345a:	f7ff fcb9 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    345e:	f894 208d 	ldrb.w	r2, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3462:	69e3      	ldr	r3, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3464:	ea47 4702 	orr.w	r7, r7, r2, lsl #16
    3468:	f047 4710 	orr.w	r7, r7, #2415919104	; 0x90000000
    346c:	635f      	str	r7, [r3, #52]	; 0x34
    waitFifoNotFull();
    346e:	4620      	mov	r0, r4
    3470:	f7ff fcae 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3474:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3478:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    347a:	041b      	lsls	r3, r3, #16
    347c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3480:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    3484:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3486:	4620      	mov	r0, r4
    3488:	f7ff fca2 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    writecommand_cont(ILI9341_RAMWR);
    while (w-- > 1) {
    348c:	f1b8 0f01 	cmp.w	r8, #1
    3490:	d00e      	beq.n	34b0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x1c0>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3492:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3496:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3498:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
    349c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    34a0:	3d01      	subs	r5, #1
    34a2:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    34a4:	4620      	mov	r0, r4
    34a6:	b2ad      	uxth	r5, r5
    34a8:	f7ff fc92 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    34ac:	2d01      	cmp	r5, #1
    34ae:	d8f0      	bhi.n	3492 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x1a2>
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    34b0:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    34b4:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    34b6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    34ba:	f046 56c0 	orr.w	r6, r6, #402653184	; 0x18000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    34be:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    34c0:	6356      	str	r6, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    34c2:	4620      	mov	r0, r4
    34c4:	f7ff fe04 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    34c8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    34cc:	b123      	cbz	r3, 34d8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x1e8>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    34ce:	7819      	ldrb	r1, [r3, #0]
    34d0:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
    34d4:	430a      	orrs	r2, r1
    34d6:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    34d8:	68a2      	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    34da:	7ad3      	ldrb	r3, [r2, #11]
    34dc:	b163      	cbz	r3, 34f8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x208>
			if (interruptMasksUsed & 0x01) {
    34de:	07d8      	lsls	r0, r3, #31
    34e0:	d503      	bpl.n	34ea <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x1fa>
				NVIC_ISER0 = interruptSave[0];
    34e2:	4b12      	ldr	r3, [pc, #72]	; (352c <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x23c>)
    34e4:	6991      	ldr	r1, [r2, #24]
    34e6:	6019      	str	r1, [r3, #0]
    34e8:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    34ea:	0799      	lsls	r1, r3, #30
    34ec:	d407      	bmi.n	34fe <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x20e>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    34ee:	075b      	lsls	r3, r3, #29
    34f0:	d502      	bpl.n	34f8 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x208>
				NVIC_ISER2 = interruptSave[2];
    34f2:	4b0f      	ldr	r3, [pc, #60]	; (3530 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x240>)
    34f4:	6a12      	ldr	r2, [r2, #32]
    34f6:	601a      	str	r2, [r3, #0]
      writedata16_cont(color);
    }
    writedata16_last(color);
    endSPITransaction();
  }
}
    34f8:	b002      	add	sp, #8
    34fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    34fe:	4b0d      	ldr	r3, [pc, #52]	; (3534 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x244>)
    3500:	69d1      	ldr	r1, [r2, #28]
    3502:	6019      	str	r1, [r3, #0]
    3504:	7ad3      	ldrb	r3, [r2, #11]
    3506:	e7f2      	b.n	34ee <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x1fe>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3508:	490b      	ldr	r1, [pc, #44]	; (3538 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0x248>)
    350a:	f8d9 3014 	ldr.w	r3, [r9, #20]
    350e:	6808      	ldr	r0, [r1, #0]
    3510:	4003      	ands	r3, r0
    3512:	f8c9 3020 	str.w	r3, [r9, #32]
				NVIC_ICER2 = interruptSave[2];
    3516:	600b      	str	r3, [r1, #0]
    3518:	e748      	b.n	33ac <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)+0xbc>
    351a:	bf00      	nop
    351c:	e000e180 	.word	0xe000e180
    3520:	e000e184 	.word	0xe000e184
    3524:	003f4001 	.word	0x003f4001
    3528:	803f0000 	.word	0x803f0000
    352c:	e000e100 	.word	0xe000e100
    3530:	e000e108 	.word	0xe000e108
    3534:	e000e104 	.word	0xe000e104
    3538:	e000e188 	.word	0xe000e188

0000353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>:
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3540:	4604      	mov	r4, r0
  x += _originx;
    3542:	8e40      	ldrh	r0, [r0, #50]	; 0x32
  y += _originy;

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3544:	f9b4 e03a 	ldrsh.w	lr, [r4, #58]	; 0x3a
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
  x += _originx;
    3548:	4401      	add	r1, r0
    354a:	b289      	uxth	r1, r1
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    354c:	b085      	sub	sp, #20
  x += _originx;
    354e:	b208      	sxth	r0, r1
  y += _originy;

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3550:	4570      	cmp	r0, lr
  }
}

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
    3552:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    3556:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
  x += _originx;
  y += _originy;

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    355a:	f280 810c 	bge.w	3776 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x23a>
    355e:	461f      	mov	r7, r3

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
  x += _originx;
  y += _originy;
    3560:	8ea3      	ldrh	r3, [r4, #52]	; 0x34

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3562:	f9b4 c03c 	ldrsh.w	ip, [r4, #60]	; 0x3c

// fill a rectangle
void ILI9341_t3n::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
                           uint16_t color) {
  x += _originx;
  y += _originy;
    3566:	4413      	add	r3, r2
    3568:	b29b      	uxth	r3, r3
    356a:	b21a      	sxth	r2, r3

  // Rectangular clipping (drawChar w/big text requires this)
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    356c:	4562      	cmp	r2, ip
    356e:	f280 8102 	bge.w	3776 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x23a>
    return;
  if (((x + w) <= _displayclipx1) || ((y + h) <= _displayclipy1))
    3572:	f9b4 8036 	ldrsh.w	r8, [r4, #54]	; 0x36
    3576:	eb00 0907 	add.w	r9, r0, r7
    357a:	45c1      	cmp	r9, r8
    357c:	f340 80fb 	ble.w	3776 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x23a>
    3580:	f9b4 a038 	ldrsh.w	sl, [r4, #56]	; 0x38
    3584:	eb02 0b06 	add.w	fp, r2, r6
    3588:	45d3      	cmp	fp, sl
    358a:	f340 80f4 	ble.w	3776 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x23a>
    return;
  if (x < _displayclipx1) {
    358e:	4540      	cmp	r0, r8
    3590:	f2c0 80fd 	blt.w	378e <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x252>
    3594:	9101      	str	r1, [sp, #4]
    w -= (_displayclipx1 - x);
    x = _displayclipx1;
  }
  if (y < _displayclipy1) {
    3596:	4552      	cmp	r2, sl
    3598:	f2c0 80f0 	blt.w	377c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x240>
    359c:	4698      	mov	r8, r3
    h -= (_displayclipy1 - y);
    y = _displayclipy1;
  }
  if ((x + w - 1) >= _displayclipx2)
    359e:	45ce      	cmp	lr, r9
    35a0:	da03      	bge.n	35aa <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x6e>
    w = _displayclipx2 - x;
    35a2:	9b01      	ldr	r3, [sp, #4]
    35a4:	ebc3 070e 	rsb	r7, r3, lr
    35a8:	b23f      	sxth	r7, r7
  if ((y + h - 1) >= _displayclipy2)
    35aa:	45dc      	cmp	ip, fp
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    35ac:	f8d4 9008 	ldr.w	r9, [r4, #8]
    35b0:	6961      	ldr	r1, [r4, #20]
    h = _displayclipy2 - y;
    35b2:	bfb8      	it	lt
    35b4:	ebc8 060c 	rsblt	r6, r8, ip
    35b8:	f04f 0300 	mov.w	r3, #0
    35bc:	f04f 0201 	mov.w	r2, #1
    35c0:	a803      	add	r0, sp, #12
    35c2:	bfb8      	it	lt
    35c4:	b236      	sxthlt	r6, r6
    35c6:	f7fe ffe5 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    35ca:	f899 300b 	ldrb.w	r3, [r9, #11]
    35ce:	9a03      	ldr	r2, [sp, #12]
    35d0:	b1f3      	cbz	r3, 3610 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xd4>
			__disable_irq();
    35d2:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    35d4:	f899 300b 	ldrb.w	r3, [r9, #11]
    35d8:	07d8      	lsls	r0, r3, #31
    35da:	d509      	bpl.n	35f0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xb4>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    35dc:	4977      	ldr	r1, [pc, #476]	; (37bc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x280>)
    35de:	f8d9 300c 	ldr.w	r3, [r9, #12]
    35e2:	6808      	ldr	r0, [r1, #0]
    35e4:	4003      	ands	r3, r0
    35e6:	f8c9 3018 	str.w	r3, [r9, #24]
				NVIC_ICER0 = interruptSave[0];
    35ea:	600b      	str	r3, [r1, #0]
    35ec:	f899 300b 	ldrb.w	r3, [r9, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    35f0:	0799      	lsls	r1, r3, #30
    35f2:	d509      	bpl.n	3608 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xcc>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    35f4:	4972      	ldr	r1, [pc, #456]	; (37c0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x284>)
    35f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
    35fa:	6808      	ldr	r0, [r1, #0]
    35fc:	4003      	ands	r3, r0
    35fe:	f8c9 301c 	str.w	r3, [r9, #28]
				NVIC_ICER1 = interruptSave[1];
    3602:	600b      	str	r3, [r1, #0]
    3604:	f899 300b 	ldrb.w	r3, [r9, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3608:	075b      	lsls	r3, r3, #29
    360a:	f100 80ce 	bmi.w	37aa <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x26e>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    360e:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    3610:	f8d9 3000 	ldr.w	r3, [r9]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    3614:	68d9      	ldr	r1, [r3, #12]
    3616:	4291      	cmp	r1, r2
    3618:	d007      	beq.n	362a <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xee>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    361a:	486a      	ldr	r0, [pc, #424]	; (37c4 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x288>)
    361c:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    361e:	496a      	ldr	r1, [pc, #424]	; (37c8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x28c>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    3620:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3622:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    3626:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3628:	6019      	str	r1, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    362a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    362e:	b12b      	cbz	r3, 363c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x100>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    3630:	781a      	ldrb	r2, [r3, #0]
    3632:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    3636:	ea22 0201 	bic.w	r2, r2, r1
    363a:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    363c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3640:	69e2      	ldr	r2, [r4, #28]

    // TODO: this can result in a very long transaction time
    // should break this into multiple transactions, even though
    // it'll cost more overhead, so we don't stall other SPI libs
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y + h - 1);
    3642:	9901      	ldr	r1, [sp, #4]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3644:	041b      	lsls	r3, r3, #16
    3646:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    364a:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
    364e:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3650:	4620      	mov	r0, r4
    3652:	f101 3aff 	add.w	sl, r1, #4294967295
    3656:	f7ff fbbb 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    365a:	9901      	ldr	r1, [sp, #4]
    365c:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3660:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3662:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    3666:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    366a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    366c:	4620      	mov	r0, r4
    366e:	f7ff fbaf 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    3672:	44ba      	add	sl, r7
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3674:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3678:	69e2      	ldr	r2, [r4, #28]
    367a:	fa1f fa8a 	uxth.w	sl, sl
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    367e:	ea4a 4303 	orr.w	r3, sl, r3, lsl #16
    3682:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3686:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3688:	4620      	mov	r0, r4
    368a:	f7ff fba1 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    368e:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3692:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3694:	041b      	lsls	r3, r3, #16
    3696:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    369a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    369e:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    36a0:	4620      	mov	r0, r4
    36a2:	f7ff fb95 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    36a6:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    36aa:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    36ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    36b0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    36b4:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    36b6:	4620      	mov	r0, r4
    36b8:	f108 39ff 	add.w	r9, r8, #4294967295
    36bc:	f7ff fb88 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    36c0:	44b1      	add	r9, r6
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    36c2:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    36c6:	69e2      	ldr	r2, [r4, #28]
    36c8:	fa1f f989 	uxth.w	r9, r9
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    36cc:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    36d0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    36d4:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    36d6:	4620      	mov	r0, r4
    36d8:	f7ff fb7a 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    36dc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    36e0:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    36e2:	041b      	lsls	r3, r3, #16
    36e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    36e8:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    36ec:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    36ee:	4620      	mov	r0, r4
    36f0:	f7ff fb6e 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    writecommand_cont(ILI9341_RAMWR);
    for (y = h; y > 0; y--) {
    36f4:	2e00      	cmp	r6, #0
    36f6:	dd26      	ble.n	3746 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x20a>
      for (x = w; x > 1; x--) {
    36f8:	2f01      	cmp	r7, #1
    36fa:	bfc8      	it	gt
    36fc:	46b8      	movgt	r8, r7
    36fe:	dd11      	ble.n	3724 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x1e8>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3700:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3704:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3706:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    370a:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    370e:	f108 38ff 	add.w	r8, r8, #4294967295
    3712:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3714:	4620      	mov	r0, r4
    3716:	fa0f f888 	sxth.w	r8, r8
    371a:	f7ff fb59 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    371e:	f1b8 0f01 	cmp.w	r8, #1
    3722:	d1ed      	bne.n	3700 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x1c4>
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3724:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3728:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    372a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
    372e:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3732:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3734:	6353      	str	r3, [r2, #52]	; 0x34
    3736:	3e01      	subs	r6, #1
    waitTransmitComplete(mcr);
    3738:	4620      	mov	r0, r4
    373a:	f7ff fcc9 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
    373e:	b2b3      	uxth	r3, r6
    3740:	b21e      	sxth	r6, r3
    // should break this into multiple transactions, even though
    // it'll cost more overhead, so we don't stall other SPI libs
    beginSPITransaction(_SPI_CLOCK);
    setAddr(x, y, x + w - 1, y + h - 1);
    writecommand_cont(ILI9341_RAMWR);
    for (y = h; y > 0; y--) {
    3742:	2b00      	cmp	r3, #0
    3744:	d1d8      	bne.n	36f8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x1bc>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    3746:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    374a:	b123      	cbz	r3, 3756 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x21a>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    374c:	7819      	ldrb	r1, [r3, #0]
    374e:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
    3752:	430a      	orrs	r2, r1
    3754:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    3756:	68a2      	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3758:	7ad3      	ldrb	r3, [r2, #11]
    375a:	b163      	cbz	r3, 3776 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x23a>
			if (interruptMasksUsed & 0x01) {
    375c:	07d8      	lsls	r0, r3, #31
    375e:	d503      	bpl.n	3768 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x22c>
				NVIC_ISER0 = interruptSave[0];
    3760:	4b1a      	ldr	r3, [pc, #104]	; (37cc <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x290>)
    3762:	6991      	ldr	r1, [r2, #24]
    3764:	6019      	str	r1, [r3, #0]
    3766:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3768:	0799      	lsls	r1, r3, #30
    376a:	d419      	bmi.n	37a0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x264>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    376c:	075b      	lsls	r3, r3, #29
    376e:	d502      	bpl.n	3776 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x23a>
				NVIC_ISER2 = interruptSave[2];
    3770:	4b17      	ldr	r3, [pc, #92]	; (37d0 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x294>)
    3772:	6a12      	ldr	r2, [r2, #32]
    3774:	601a      	str	r2, [r3, #0]
			}
#endif
    }
    endSPITransaction();
  }
}
    3776:	b005      	add	sp, #20
    3778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (x < _displayclipx1) {
    w -= (_displayclipx1 - x);
    x = _displayclipx1;
  }
  if (y < _displayclipy1) {
    h -= (_displayclipy1 - y);
    377c:	fa1f f88a 	uxth.w	r8, sl
    3780:	ebc8 0606 	rsb	r6, r8, r6
    3784:	4433      	add	r3, r6
    3786:	b21e      	sxth	r6, r3
    3788:	eb06 0b0a 	add.w	fp, r6, sl
    378c:	e707      	b.n	359e <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x62>
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    return;
  if (((x + w) <= _displayclipx1) || ((y + h) <= _displayclipy1))
    return;
  if (x < _displayclipx1) {
    w -= (_displayclipx1 - x);
    378e:	fa1f f088 	uxth.w	r0, r8
    3792:	1a3f      	subs	r7, r7, r0
    3794:	4439      	add	r1, r7
    3796:	b20f      	sxth	r7, r1
    3798:	9001      	str	r0, [sp, #4]
    379a:	eb07 0908 	add.w	r9, r7, r8
    379e:	e6fa      	b.n	3596 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x5a>
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    37a0:	4b0c      	ldr	r3, [pc, #48]	; (37d4 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x298>)
    37a2:	69d1      	ldr	r1, [r2, #28]
    37a4:	6019      	str	r1, [r3, #0]
    37a6:	7ad3      	ldrb	r3, [r2, #11]
    37a8:	e7e0      	b.n	376c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x230>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    37aa:	490b      	ldr	r1, [pc, #44]	; (37d8 <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0x29c>)
    37ac:	f8d9 3014 	ldr.w	r3, [r9, #20]
    37b0:	6808      	ldr	r0, [r1, #0]
    37b2:	4003      	ands	r3, r0
    37b4:	f8c9 3020 	str.w	r3, [r9, #32]
				NVIC_ICER2 = interruptSave[2];
    37b8:	600b      	str	r3, [r1, #0]
    37ba:	e728      	b.n	360e <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)+0xd2>
    37bc:	e000e180 	.word	0xe000e180
    37c0:	e000e184 	.word	0xe000e184
    37c4:	003f4001 	.word	0x003f4001
    37c8:	803f0000 	.word	0x803f0000
    37cc:	e000e100 	.word	0xe000e100
    37d0:	e000e108 	.word	0xe000e108
    37d4:	e000e104 	.word	0xe000e104
    37d8:	e000e188 	.word	0xe000e188

000037dc <ILI9341_t3n::fillScreen(unsigned short)>:
    writedata16_last(color);
    endSPITransaction();
  }
}

void ILI9341_t3n::fillScreen(uint16_t color) {
    37dc:	b510      	push	{r4, lr}
    37de:	b082      	sub	sp, #8
    }

  } else
#endif
  {
    fillRect(0, 0, _width, _height, color);
    37e0:	2200      	movs	r2, #0
    37e2:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	; 0x22
    37e6:	9101      	str	r1, [sp, #4]
    37e8:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
    37ec:	9400      	str	r4, [sp, #0]
    37ee:	4611      	mov	r1, r2
    37f0:	f7ff fea4 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
  }
}
    37f4:	b002      	add	sp, #8
    37f6:	bd10      	pop	{r4, pc}

000037f8 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)>:
      0b00000111111000001111100000011111;
  Pixel(x, y, (uint16_t)((result >> 16) | result));
}

void ILI9341_t3n::drawFontBits(bool opaque, uint32_t bits, uint32_t numbits,
                               int32_t x, int32_t y, uint32_t repeat) {
    37f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    37fc:	b087      	sub	sp, #28
    37fe:	4680      	mov	r8, r0
    3800:	9d11      	ldr	r5, [sp, #68]	; 0x44
    3802:	9504      	str	r5, [sp, #16]
    3804:	9d12      	ldr	r5, [sp, #72]	; 0x48
    3806:	9c10      	ldr	r4, [sp, #64]	; 0x40
    3808:	9505      	str	r5, [sp, #20]
  if (bits == 0) {
    380a:	b922      	cbnz	r2, 3816 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x1e>
    if (opaque) {
    380c:	2900      	cmp	r1, #0
    380e:	d167      	bne.n	38e0 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xe8>
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
      }
    }
  }
}
    3810:	b007      	add	sp, #28
    3812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3816:	4617      	mov	r7, r2
    3818:	2600      	movs	r6, #0
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    381a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
    381e:	9102      	str	r1, [sp, #8]
    3820:	eb03 0904 	add.w	r9, r3, r4
    w = 0;
    bgw = 0;

    do {
      n--;
      if (bits & (1 << n)) {
    3824:	f04f 0a01 	mov.w	sl, #1
    3828:	4634      	mov	r4, r6
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    382a:	f9bd b010 	ldrsh.w	fp, [sp, #16]
    382e:	9203      	str	r2, [sp, #12]
    3830:	e007      	b.n	3842 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x4a>
    bgw = 0;

    do {
      n--;
      if (bits & (1 << n)) {
        if (bgw > 0) {
    3832:	b116      	cbz	r6, 383a <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x42>
          if (opaque) {
    3834:	9a02      	ldr	r2, [sp, #8]
    3836:	2a00      	cmp	r2, #0
    3838:	d143      	bne.n	38c2 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0xca>
            fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
          }
          bgw = 0;
        }
        w++;
    383a:	3401      	adds	r4, #1
    383c:	2600      	movs	r6, #0
    383e:	462b      	mov	r3, r5
          w = 0;
        }
        bgw++;
      }
      x1++;
    } while (n > 0);
    3840:	b1c5      	cbz	r5, 3874 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x7c>
    w = 0;
    bgw = 0;

    do {
      n--;
      if (bits & (1 << n)) {
    3842:	1e5d      	subs	r5, r3, #1
    3844:	fa0a f205 	lsl.w	r2, sl, r5
    3848:	423a      	tst	r2, r7
    384a:	d1f2      	bne.n	3832 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x3a>
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
          fillRect(x1 - w, y, w, repeat, textcolor);
    384c:	ebc3 0109 	rsb	r1, r3, r9
    3850:	1b09      	subs	r1, r1, r4
    3852:	b223      	sxth	r3, r4
    3854:	465a      	mov	r2, fp
    3856:	b209      	sxth	r1, r1
    3858:	4640      	mov	r0, r8
          }
          bgw = 0;
        }
        w++;
      } else {
        if (w > 0) {
    385a:	b134      	cbz	r4, 386a <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x72>
          fillRect(x1 - w, y, w, repeat, textcolor);
    385c:	f8b8 e04a 	ldrh.w	lr, [r8, #74]	; 0x4a
    3860:	9c03      	ldr	r4, [sp, #12]
    3862:	e88d 4010 	stmia.w	sp, {r4, lr}
    3866:	f7ff fe69 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
          w = 0;
        }
        bgw++;
    386a:	3601      	adds	r6, #1
    386c:	2400      	movs	r4, #0
    386e:	462b      	mov	r3, r5
      }
      x1++;
    } while (n > 0);
    3870:	2d00      	cmp	r5, #0
    3872:	d1e6      	bne.n	3842 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x4a>

    if (w > 0) {
    3874:	b174      	cbz	r4, 3894 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x9c>
      fillRect(x1 - w, y, w, repeat, textcolor);
    3876:	f8b8 304a 	ldrh.w	r3, [r8, #74]	; 0x4a
    387a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
    387e:	9301      	str	r3, [sp, #4]
    3880:	ebc4 0109 	rsb	r1, r4, r9
    3884:	9200      	str	r2, [sp, #0]
    3886:	b209      	sxth	r1, r1
    3888:	b223      	sxth	r3, r4
    388a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    388e:	4640      	mov	r0, r8
    3890:	f7ff fe54 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    }

    if (bgw > 0) {
    3894:	2e00      	cmp	r6, #0
    3896:	d0bb      	beq.n	3810 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x18>
      if (opaque) {
    3898:	9b02      	ldr	r3, [sp, #8]
    389a:	2b00      	cmp	r3, #0
    389c:	d0b8      	beq.n	3810 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x18>
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    389e:	f8b8 004c 	ldrh.w	r0, [r8, #76]	; 0x4c
    38a2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
    38a6:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    38aa:	9310      	str	r3, [sp, #64]	; 0x40
    38ac:	ebc6 0109 	rsb	r1, r6, r9
    38b0:	9011      	str	r0, [sp, #68]	; 0x44
    38b2:	b209      	sxth	r1, r1
    38b4:	b233      	sxth	r3, r6
    38b6:	4640      	mov	r0, r8
      }
    }
  }
}
    38b8:	b007      	add	sp, #28
    38ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      fillRect(x1 - w, y, w, repeat, textcolor);
    }

    if (bgw > 0) {
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    38be:	f7ff be3d 	b.w	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    do {
      n--;
      if (bits & (1 << n)) {
        if (bgw > 0) {
          if (opaque) {
            fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    38c2:	ebc3 0109 	rsb	r1, r3, r9
    38c6:	f8b8 204c 	ldrh.w	r2, [r8, #76]	; 0x4c
    38ca:	9b03      	ldr	r3, [sp, #12]
    38cc:	9300      	str	r3, [sp, #0]
    38ce:	1b89      	subs	r1, r1, r6
    38d0:	9201      	str	r2, [sp, #4]
    38d2:	b209      	sxth	r1, r1
    38d4:	b233      	sxth	r3, r6
    38d6:	465a      	mov	r2, fp
    38d8:	4640      	mov	r0, r8
    38da:	f7ff fe2f 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    38de:	e7ac      	b.n	383a <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)+0x42>

void ILI9341_t3n::drawFontBits(bool opaque, uint32_t bits, uint32_t numbits,
                               int32_t x, int32_t y, uint32_t repeat) {
  if (bits == 0) {
    if (opaque) {
      fillRect(x, y, numbits, repeat, textbgcolor);
    38e0:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
    38e4:	9211      	str	r2, [sp, #68]	; 0x44
    38e6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
    38ea:	9210      	str	r2, [sp, #64]	; 0x40
    38ec:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
    38f0:	b21b      	sxth	r3, r3
    38f2:	b221      	sxth	r1, r4
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
      }
    }
  }
}
    38f4:	b007      	add	sp, #28
    38f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      fillRect(x1 - w, y, w, repeat, textcolor);
    }

    if (bgw > 0) {
      if (opaque) {
        fillRect(x1 - bgw, y, bgw, repeat, textbgcolor);
    38fa:	f7ff be1f 	b.w	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    38fe:	bf00      	nop

00003900 <ILI9341_t3n::setRotation(unsigned char)>:
#define MADCTL_RGB 0x00
#define MADCTL_BGR 0x08
#define MADCTL_MH 0x04

void ILI9341_t3n::setRotation(uint8_t m) {
  rotation = m % 4; // can't be higher than 3
    3900:	f001 0103 	and.w	r1, r1, #3
#define MADCTL_ML 0x10
#define MADCTL_RGB 0x00
#define MADCTL_BGR 0x08
#define MADCTL_MH 0x04

void ILI9341_t3n::setRotation(uint8_t m) {
    3904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    3906:	6882      	ldr	r2, [r0, #8]
  rotation = m % 4; // can't be higher than 3
    3908:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
#define MADCTL_ML 0x10
#define MADCTL_RGB 0x00
#define MADCTL_BGR 0x08
#define MADCTL_MH 0x04

void ILI9341_t3n::setRotation(uint8_t m) {
    390c:	4604      	mov	r4, r0
  rotation = m % 4; // can't be higher than 3
  beginSPITransaction(_SPI_CLOCK);
    390e:	6947      	ldr	r7, [r0, #20]
    3910:	4d96      	ldr	r5, [pc, #600]	; (3b6c <ILI9341_t3n::setRotation(unsigned char)+0x26c>)
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    3912:	4e97      	ldr	r6, [pc, #604]	; (3b70 <ILI9341_t3n::setRotation(unsigned char)+0x270>)
    3914:	2100      	movs	r1, #0
    3916:	e002      	b.n	391e <ILI9341_t3n::setRotation(unsigned char)+0x1e>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    3918:	2817      	cmp	r0, #23
    391a:	d008      	beq.n	392e <ILI9341_t3n::setRotation(unsigned char)+0x2e>
    391c:	4601      	mov	r1, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    391e:	f835 3f02 	ldrh.w	r3, [r5, #2]!
    3922:	fb96 f3f3 	sdiv	r3, r6, r3
    3926:	429f      	cmp	r7, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    3928:	f101 0001 	add.w	r0, r1, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    392c:	d3f4      	bcc.n	3918 <ILI9341_t3n::setRotation(unsigned char)+0x18>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    392e:	4891      	ldr	r0, [pc, #580]	; (3b74 <ILI9341_t3n::setRotation(unsigned char)+0x274>)

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3930:	7ad3      	ldrb	r3, [r2, #11]
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    3932:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    3936:	f041 5060 	orr.w	r0, r1, #939524096	; 0x38000000

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    393a:	b1bb      	cbz	r3, 396c <ILI9341_t3n::setRotation(unsigned char)+0x6c>
			__disable_irq();
    393c:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    393e:	7ad3      	ldrb	r3, [r2, #11]
    3940:	07dd      	lsls	r5, r3, #31
    3942:	d506      	bpl.n	3952 <ILI9341_t3n::setRotation(unsigned char)+0x52>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3944:	4d8c      	ldr	r5, [pc, #560]	; (3b78 <ILI9341_t3n::setRotation(unsigned char)+0x278>)
    3946:	68d3      	ldr	r3, [r2, #12]
    3948:	682e      	ldr	r6, [r5, #0]
    394a:	4033      	ands	r3, r6
    394c:	6193      	str	r3, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    394e:	602b      	str	r3, [r5, #0]
    3950:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3952:	079f      	lsls	r7, r3, #30
    3954:	d506      	bpl.n	3964 <ILI9341_t3n::setRotation(unsigned char)+0x64>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3956:	4d89      	ldr	r5, [pc, #548]	; (3b7c <ILI9341_t3n::setRotation(unsigned char)+0x27c>)
    3958:	6913      	ldr	r3, [r2, #16]
    395a:	682e      	ldr	r6, [r5, #0]
    395c:	4033      	ands	r3, r6
    395e:	61d3      	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    3960:	602b      	str	r3, [r5, #0]
    3962:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3964:	075e      	lsls	r6, r3, #29
    3966:	f100 80c8 	bmi.w	3afa <ILI9341_t3n::setRotation(unsigned char)+0x1fa>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    396a:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    396c:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    396e:	68da      	ldr	r2, [r3, #12]
    3970:	4282      	cmp	r2, r0
    3972:	d007      	beq.n	3984 <ILI9341_t3n::setRotation(unsigned char)+0x84>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3974:	f041 41f0 	orr.w	r1, r1, #2013265920	; 0x78000000
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    3978:	4d81      	ldr	r5, [pc, #516]	; (3b80 <ILI9341_t3n::setRotation(unsigned char)+0x280>)
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    397a:	4a82      	ldr	r2, [pc, #520]	; (3b84 <ILI9341_t3n::setRotation(unsigned char)+0x284>)
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    397c:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
    397e:	60d8      	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3980:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3982:	601a      	str	r2, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    3984:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    3988:	b12b      	cbz	r3, 3996 <ILI9341_t3n::setRotation(unsigned char)+0x96>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    398a:	781a      	ldrb	r2, [r3, #0]
    398c:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    3990:	ea22 0201 	bic.w	r2, r2, r1
    3994:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3996:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    399a:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    399c:	041b      	lsls	r3, r3, #16
    399e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    39a2:	f043 0336 	orr.w	r3, r3, #54	; 0x36
    39a6:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    39a8:	4620      	mov	r0, r4
    39aa:	f7ff fa11 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
  writecommand_cont(ILI9341_MADCTL);
  switch (rotation) {
    39ae:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
    39b2:	2b03      	cmp	r3, #3
    39b4:	d817      	bhi.n	39e6 <ILI9341_t3n::setRotation(unsigned char)+0xe6>
    39b6:	e8df f013 	tbh	[pc, r3, lsl #1]
    39ba:	00a7      	.short	0x00a7
    39bc:	00ba00c4 	.word	0x00ba00c4
    39c0:	0004      	.short	0x0004
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    39c2:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    39c6:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    39c8:	041b      	lsls	r3, r3, #16
    39ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    39ce:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    39d0:	f043 03e8 	orr.w	r3, r3, #232	; 0xe8
    39d4:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    39d6:	4620      	mov	r0, r4
    39d8:	f7ff fb7a 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
    _width = ILI9341_TFTWIDTH;
    _height = ILI9341_TFTHEIGHT;
    break;
  case 3:
    writedata8_last(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    _width = ILI9341_TFTHEIGHT;
    39dc:	f44f 72a0 	mov.w	r2, #320	; 0x140
    _height = ILI9341_TFTWIDTH;
    39e0:	23f0      	movs	r3, #240	; 0xf0
    _width = ILI9341_TFTWIDTH;
    _height = ILI9341_TFTHEIGHT;
    break;
  case 3:
    writedata8_last(MADCTL_MX | MADCTL_MY | MADCTL_MV | MADCTL_BGR);
    _width = ILI9341_TFTHEIGHT;
    39e2:	8422      	strh	r2, [r4, #32]
    _height = ILI9341_TFTWIDTH;
    39e4:	8463      	strh	r3, [r4, #34]	; 0x22
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    39e6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    39ea:	b123      	cbz	r3, 39f6 <ILI9341_t3n::setRotation(unsigned char)+0xf6>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    39ec:	7819      	ldrb	r1, [r3, #0]
    39ee:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
    39f2:	430a      	orrs	r2, r1
    39f4:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    39f6:	68a2      	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    39f8:	7ad3      	ldrb	r3, [r2, #11]
    39fa:	b183      	cbz	r3, 3a1e <ILI9341_t3n::setRotation(unsigned char)+0x11e>
			if (interruptMasksUsed & 0x01) {
    39fc:	07dd      	lsls	r5, r3, #31
    39fe:	d503      	bpl.n	3a08 <ILI9341_t3n::setRotation(unsigned char)+0x108>
				NVIC_ISER0 = interruptSave[0];
    3a00:	4b61      	ldr	r3, [pc, #388]	; (3b88 <ILI9341_t3n::setRotation(unsigned char)+0x288>)
    3a02:	6991      	ldr	r1, [r2, #24]
    3a04:	6019      	str	r1, [r3, #0]
    3a06:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3a08:	0798      	lsls	r0, r3, #30
    3a0a:	d503      	bpl.n	3a14 <ILI9341_t3n::setRotation(unsigned char)+0x114>
				NVIC_ISER1 = interruptSave[1];
    3a0c:	4b5f      	ldr	r3, [pc, #380]	; (3b8c <ILI9341_t3n::setRotation(unsigned char)+0x28c>)
    3a0e:	69d1      	ldr	r1, [r2, #28]
    3a10:	6019      	str	r1, [r3, #0]
    3a12:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3a14:	0759      	lsls	r1, r3, #29
    3a16:	d502      	bpl.n	3a1e <ILI9341_t3n::setRotation(unsigned char)+0x11e>
				NVIC_ISER2 = interruptSave[2];
    3a18:	4b5d      	ldr	r3, [pc, #372]	; (3b90 <ILI9341_t3n::setRotation(unsigned char)+0x290>)
    3a1a:	6a12      	ldr	r2, [r2, #32]
    3a1c:	601a      	str	r2, [r3, #0]
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    _clipy2 = _height;
    3a1e:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    3a22:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    3a26:	f9b4 5020 	ldrsh.w	r5, [r4, #32]
  int16_t _displayclipx1, _displayclipy1, _displayclipx2, _displayclipy2;
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    3a2a:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    _clipy2 = _height;
    3a2e:	8620      	strh	r0, [r4, #48]	; 0x30
  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3a30:	1832      	adds	r2, r6, r0
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    3a32:	1959      	adds	r1, r3, r5

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3a34:	4282      	cmp	r2, r0
    3a36:	bfa8      	it	ge
    3a38:	4602      	movge	r2, r0
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    3a3a:	42a9      	cmp	r1, r5
    3a3c:	bfa8      	it	ge
    3a3e:	4629      	movge	r1, r5
    3a40:	42ab      	cmp	r3, r5
    3a42:	bfa8      	it	ge
    3a44:	462b      	movge	r3, r5
    3a46:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    3a4a:	4286      	cmp	r6, r0
    3a4c:	bfa8      	it	ge
    3a4e:	4606      	movge	r6, r0

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3a50:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    3a54:	b209      	sxth	r1, r1
    3a56:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    _clipy2 = y1 + h;
    // if (Serial) Serial.printf("Set clip Rect %d %d %d %d\n", x1, y1, w, h);
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    3a5a:	2700      	movs	r7, #0
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3a5c:	428b      	cmp	r3, r1
  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3a5e:	b212      	sxth	r2, r2
    3a60:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    _clipy2 = y1 + h;
    // if (Serial) Serial.printf("Set clip Rect %d %d %d %d\n", x1, y1, w, h);
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    3a64:	8567      	strh	r7, [r4, #42]	; 0x2a
    _clipy1 = 0;
    3a66:	85a7      	strh	r7, [r4, #44]	; 0x2c
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3a68:	bf1d      	ittte	ne
    3a6a:	1ab7      	subne	r7, r6, r2
    3a6c:	fab7 f787 	clzne	r7, r7
    3a70:	097f      	lsrne	r7, r7, #5
    3a72:	2701      	moveq	r7, #1
  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3a74:	87a2      	strh	r2, [r4, #60]	; 0x3c
    updateDisplayClip();
  }
  void setClipRect() {
    _clipx1 = 0;
    _clipy1 = 0;
    _clipx2 = _width;
    3a76:	85e5      	strh	r5, [r4, #46]	; 0x2e
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3a78:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    3a7c:	2b00      	cmp	r3, #0
    3a7e:	d13a      	bne.n	3af6 <ILI9341_t3n::setRotation(unsigned char)+0x1f6>

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
    3a80:	428d      	cmp	r5, r1
    3a82:	d06c      	beq.n	3b5e <ILI9341_t3n::setRotation(unsigned char)+0x25e>
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    3a84:	4e43      	ldr	r6, [pc, #268]	; (3b94 <ILI9341_t3n::setRotation(unsigned char)+0x294>)
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    3a86:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    3a8a:	7833      	ldrb	r3, [r6, #0]
    3a8c:	b13b      	cbz	r3, 3a9e <ILI9341_t3n::setRotation(unsigned char)+0x19e>
    3a8e:	4b42      	ldr	r3, [pc, #264]	; (3b98 <ILI9341_t3n::setRotation(unsigned char)+0x298>)
    3a90:	781b      	ldrb	r3, [r3, #0]
    3a92:	07da      	lsls	r2, r3, #31
    3a94:	d503      	bpl.n	3a9e <ILI9341_t3n::setRotation(unsigned char)+0x19e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    3a96:	4a41      	ldr	r2, [pc, #260]	; (3b9c <ILI9341_t3n::setRotation(unsigned char)+0x29c>)
    3a98:	4b41      	ldr	r3, [pc, #260]	; (3ba0 <ILI9341_t3n::setRotation(unsigned char)+0x2a0>)
    3a9a:	6812      	ldr	r2, [r2, #0]
    3a9c:	681b      	ldr	r3, [r3, #0]
  // setOrigin sets an offset in display pixels where drawing to (0,0) will
  // appear
  // for example: setOrigin(10,10); drawPixel(5,5); will cause a pixel to be
  // drawn at hardware pixel (15,15)
  void setOrigin(int16_t x = 0, int16_t y = 0) {
    _originx = x;
    3a9e:	2300      	movs	r3, #0
    3aa0:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));
    3aa4:	b211      	sxth	r1, r2
constexpr auto min(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
    3aa6:	4298      	cmp	r0, r3
    3aa8:	8761      	strh	r1, [r4, #58]	; 0x3a
  // setOrigin sets an offset in display pixels where drawing to (0,0) will
  // appear
  // for example: setOrigin(10,10); drawPixel(5,5); will cause a pixel to be
  // drawn at hardware pixel (15,15)
  void setOrigin(int16_t x = 0, int16_t y = 0) {
    _originx = x;
    3aaa:	8663      	strh	r3, [r4, #50]	; 0x32
    _originy = y;
    3aac:	86a3      	strh	r3, [r4, #52]	; 0x34
  int16_t _displayclipx1, _displayclipy1, _displayclipx2, _displayclipy2;
  bool _invisible = false;
  bool _standard = true; // no bounding rectangle or origin set.

  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    3aae:	86e3      	strh	r3, [r4, #54]	; 0x36
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    3ab0:	8723      	strh	r3, [r4, #56]	; 0x38
    3ab2:	dd50      	ble.n	3b56 <ILI9341_t3n::setRotation(unsigned char)+0x256>
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3ab4:	429a      	cmp	r2, r3
    3ab6:	bf0c      	ite	eq
    3ab8:	4607      	moveq	r7, r0
    3aba:	4607      	movne	r7, r0
  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3abc:	87a0      	strh	r0, [r4, #60]	; 0x3c
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3abe:	bf08      	it	eq
    3ac0:	2301      	moveq	r3, #1
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
    3ac2:	428d      	cmp	r5, r1
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    3ac4:	bf04      	itt	eq
    3ac6:	1bc0      	subeq	r0, r0, r7
    3ac8:	fab0 f080 	clzeq	r0, r0
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3acc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    3ad0:	7833      	ldrb	r3, [r6, #0]
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    3ad2:	bf0c      	ite	eq
    3ad4:	0940      	lsreq	r0, r0, #5
    3ad6:	2000      	movne	r0, #0
    3ad8:	f884 003f 	strb.w	r0, [r4, #63]	; 0x3f
    3adc:	b13b      	cbz	r3, 3aee <ILI9341_t3n::setRotation(unsigned char)+0x1ee>
    3ade:	4b2e      	ldr	r3, [pc, #184]	; (3b98 <ILI9341_t3n::setRotation(unsigned char)+0x298>)
    3ae0:	781b      	ldrb	r3, [r3, #0]
    3ae2:	07db      	lsls	r3, r3, #31
    3ae4:	d503      	bpl.n	3aee <ILI9341_t3n::setRotation(unsigned char)+0x1ee>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    3ae6:	4a2d      	ldr	r2, [pc, #180]	; (3b9c <ILI9341_t3n::setRotation(unsigned char)+0x29c>)
    3ae8:	4b2d      	ldr	r3, [pc, #180]	; (3ba0 <ILI9341_t3n::setRotation(unsigned char)+0x2a0>)
    3aea:	6812      	ldr	r2, [r2, #0]
    3aec:	681b      	ldr	r3, [r3, #0]
  }
  endSPITransaction();
  setClipRect();
  setOrigin();

  cursor_x = 0;
    3aee:	2300      	movs	r3, #0
    3af0:	84a3      	strh	r3, [r4, #36]	; 0x24
  cursor_y = 0;
    3af2:	84e3      	strh	r3, [r4, #38]	; 0x26
}
    3af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3af6:	2300      	movs	r3, #0
    3af8:	e7c4      	b.n	3a84 <ILI9341_t3n::setRotation(unsigned char)+0x184>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3afa:	4d2a      	ldr	r5, [pc, #168]	; (3ba4 <ILI9341_t3n::setRotation(unsigned char)+0x2a4>)
    3afc:	6953      	ldr	r3, [r2, #20]
    3afe:	682e      	ldr	r6, [r5, #0]
    3b00:	4033      	ands	r3, r6
    3b02:	6213      	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    3b04:	602b      	str	r3, [r5, #0]
    3b06:	e730      	b.n	396a <ILI9341_t3n::setRotation(unsigned char)+0x6a>
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b08:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3b0c:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b0e:	041b      	lsls	r3, r3, #16
    3b10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3b14:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b16:	f043 0348 	orr.w	r3, r3, #72	; 0x48
    3b1a:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    3b1c:	4620      	mov	r0, r4
    3b1e:	f7ff fad7 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
    _width = ILI9341_TFTHEIGHT;
    _height = ILI9341_TFTWIDTH;
    break;
  case 2:
    writedata8_last(MADCTL_MY | MADCTL_BGR);
    _width = ILI9341_TFTWIDTH;
    3b22:	22f0      	movs	r2, #240	; 0xf0
    _height = ILI9341_TFTHEIGHT;
    3b24:	f44f 73a0 	mov.w	r3, #320	; 0x140
    _width = ILI9341_TFTHEIGHT;
    _height = ILI9341_TFTWIDTH;
    break;
  case 2:
    writedata8_last(MADCTL_MY | MADCTL_BGR);
    _width = ILI9341_TFTWIDTH;
    3b28:	8422      	strh	r2, [r4, #32]
    _height = ILI9341_TFTHEIGHT;
    3b2a:	8463      	strh	r3, [r4, #34]	; 0x22
    break;
    3b2c:	e75b      	b.n	39e6 <ILI9341_t3n::setRotation(unsigned char)+0xe6>
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b2e:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3b32:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b34:	041b      	lsls	r3, r3, #16
    3b36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3b3a:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b3c:	f043 0388 	orr.w	r3, r3, #136	; 0x88
    3b40:	e7eb      	b.n	3b1a <ILI9341_t3n::setRotation(unsigned char)+0x21a>
    3b42:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3b46:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b48:	041b      	lsls	r3, r3, #16
    3b4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata8_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3b4e:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    3b50:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    3b54:	e73e      	b.n	39d4 <ILI9341_t3n::setRotation(unsigned char)+0xd4>
  inline void updateDisplayClip() {
    _displayclipx1 = max(0, min(_clipx1 + _originx, width()));
    _displayclipx2 = max(0, min(_clipx2 + _originx, width()));

    _displayclipy1 = max(0, min(_clipy1 + _originy, height()));
    _displayclipy2 = max(0, min(_clipy2 + _originy, height()));
    3b56:	87a3      	strh	r3, [r4, #60]	; 0x3c
    _invisible =
        (_displayclipx1 == _displayclipx2 || _displayclipy1 == _displayclipy2);
    3b58:	2700      	movs	r7, #0
    3b5a:	2301      	movs	r3, #1
    3b5c:	e7b1      	b.n	3ac2 <ILI9341_t3n::setRotation(unsigned char)+0x1c2>
    _standard = (_displayclipx1 == 0) && (_displayclipx2 == _width) &&
    3b5e:	2e00      	cmp	r6, #0
    3b60:	d190      	bne.n	3a84 <ILI9341_t3n::setRotation(unsigned char)+0x184>
                (_displayclipy1 == 0) && (_displayclipy2 == _height);
    3b62:	1a83      	subs	r3, r0, r2
    3b64:	fab3 f383 	clz	r3, r3
    3b68:	095b      	lsrs	r3, r3, #5
    3b6a:	e78b      	b.n	3a84 <ILI9341_t3n::setRotation(unsigned char)+0x184>
    3b6c:	0000dea6 	.word	0x0000dea6
    3b70:	02dc6c00 	.word	0x02dc6c00
    3b74:	0000ded8 	.word	0x0000ded8
    3b78:	e000e180 	.word	0xe000e180
    3b7c:	e000e184 	.word	0xe000e184
    3b80:	003f4001 	.word	0x003f4001
    3b84:	803f0000 	.word	0x803f0000
    3b88:	e000e100 	.word	0xe000e100
    3b8c:	e000e104 	.word	0xe000e104
    3b90:	e000e108 	.word	0xe000e108
    3b94:	1fff9808 	.word	0x1fff9808
    3b98:	1fff9820 	.word	0x1fff9820
    3b9c:	1fff9724 	.word	0x1fff9724
    3ba0:	1fff988c 	.word	0x1fff988c
    3ba4:	e000e188 	.word	0xe000e188

00003ba8 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)>:
}
#endif

// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {
    3ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  if (x == CENTER)
    3bac:	f242 770e 	movw	r7, #9998	; 0x270e
}
#endif

// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {
    3bb0:	b085      	sub	sp, #20

  if (x == CENTER)
    3bb2:	42b9      	cmp	r1, r7
}
#endif

// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {
    3bb4:	4604      	mov	r4, r0
    3bb6:	4699      	mov	r9, r3
    3bb8:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
    3bbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c

  if (x == CENTER)
    3bbe:	f000 813e 	beq.w	3e3e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x296>
    x = (_width - w) / 2;
  if (y == CENTER)
    3bc2:	f242 730e 	movw	r3, #9998	; 0x270e
    3bc6:	429a      	cmp	r2, r3
    3bc8:	f000 8131 	beq.w	3e2e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x286>
    y = (_height - h) / 2;
  x += _originx;
    3bcc:	8e67      	ldrh	r7, [r4, #50]	; 0x32
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3bce:	f9b4 303a 	ldrsh.w	r3, [r4, #58]	; 0x3a

  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
    3bd2:	4439      	add	r1, r7
    3bd4:	b28f      	uxth	r7, r1
    3bd6:	b239      	sxth	r1, r7
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3bd8:	4299      	cmp	r1, r3
    3bda:	f280 8125 	bge.w	3e28 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x280>
  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
  y += _originy;
    3bde:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3be2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
  y += _originy;
    3be6:	4490      	add	r8, r2
    3be8:	fa0f f888 	sxth.w	r8, r8
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
  // Rectangular clipping

  // See if the whole thing out of bounds...
  if ((x >= _displayclipx2) || (y >= _displayclipy2))
    3bec:	4580      	cmp	r8, r0
    3bee:	f280 811b 	bge.w	3e28 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x280>
    return;
  if (((x + w) <= _displayclipx1) || ((y + h) <= _displayclipy1))
    3bf2:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	; 0x36
    3bf6:	eb01 0e09 	add.w	lr, r1, r9
    3bfa:	4596      	cmp	lr, r2
    3bfc:	f340 8114 	ble.w	3e28 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x280>
    3c00:	f9b4 c038 	ldrsh.w	ip, [r4, #56]	; 0x38
    3c04:	eb06 0a08 	add.w	sl, r6, r8
    3c08:	45e2      	cmp	sl, ip
    3c0a:	f340 810d 	ble.w	3e28 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x280>
  // In these cases you can not do simple clipping, as we need to synchronize
  // the colors array with the
  // We can clip the height as when we get to the last visible we don't have to
  // go any farther.
  // also maybe starting y as we will advance the color array.
  if (y < _displayclipy1) {
    3c0e:	45e0      	cmp	r8, ip
    3c10:	da0b      	bge.n	3c2a <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x82>
    int dy = (_displayclipy1 - y);
    3c12:	ebc8 080c 	rsb	r8, r8, ip
    h -= dy;
    3c16:	ebc8 0606 	rsb	r6, r8, r6
    3c1a:	b236      	sxth	r6, r6
    pcolors += (dy * w); // Advance color array to
    3c1c:	fb08 f809 	mul.w	r8, r8, r9
    3c20:	eb05 0548 	add.w	r5, r5, r8, lsl #1
    3c24:	eb06 0a0c 	add.w	sl, r6, ip
    3c28:	46e0      	mov	r8, ip
    y = _displayclipy1;
  }

  if ((y + h - 1) >= _displayclipy2)
    3c2a:	4550      	cmp	r0, sl
    h = _displayclipy2 - y;
    3c2c:	fa1f f888 	uxth.w	r8, r8
    3c30:	bfbc      	itt	lt
    3c32:	ebc8 0000 	rsblt	r0, r8, r0
    3c36:	b206      	sxthlt	r6, r0

  // For X see how many items in color array to skip at start of row and
  // likewise end of row
  if (x < _displayclipx1) {
    3c38:	4291      	cmp	r1, r2
    3c3a:	f2c0 810b 	blt.w	3e54 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2ac>
  if (y == CENTER)
    y = (_height - h) / 2;
  x += _originx;
  y += _originy;
  uint16_t x_clip_left =
      0; // How many entries at start of colors to skip at start of row
    3c3e:	f04f 0a00 	mov.w	sl, #0
  if (x < _displayclipx1) {
    x_clip_left = _displayclipx1 - x;
    w -= x_clip_left;
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2) {
    3c42:	4573      	cmp	r3, lr
    3c44:	f280 8103 	bge.w	3e4e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2a6>
    x_clip_right = w;
    w = _displayclipx2 - x;
    3c48:	1bdb      	subs	r3, r3, r7
    3c4a:	b29b      	uxth	r3, r3
    x_clip_left = _displayclipx1 - x;
    w -= x_clip_left;
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2) {
    x_clip_right = w;
    3c4c:	fa1f f289 	uxth.w	r2, r9
    w = _displayclipx2 - x;
    x_clip_right -= w;
    3c50:	1ad2      	subs	r2, r2, r3
    3c52:	b292      	uxth	r2, r2
    3c54:	9200      	str	r2, [sp, #0]
    w -= x_clip_left;
    x = _displayclipx1;
  }
  if ((x + w - 1) >= _displayclipx2) {
    x_clip_right = w;
    w = _displayclipx2 - x;
    3c56:	fa0f f983 	sxth.w	r9, r3
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    3c5a:	f8d4 b008 	ldr.w	fp, [r4, #8]
    3c5e:	6961      	ldr	r1, [r4, #20]
    3c60:	2300      	movs	r3, #0
    3c62:	2201      	movs	r2, #1
    3c64:	a803      	add	r0, sp, #12
    3c66:	f7fe fc95 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    3c6a:	f89b 300b 	ldrb.w	r3, [fp, #11]
    3c6e:	9a03      	ldr	r2, [sp, #12]
    3c70:	b1f3      	cbz	r3, 3cb0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x108>
			__disable_irq();
    3c72:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    3c74:	f89b 300b 	ldrb.w	r3, [fp, #11]
    3c78:	07d8      	lsls	r0, r3, #31
    3c7a:	d509      	bpl.n	3c90 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0xe8>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    3c7c:	4982      	ldr	r1, [pc, #520]	; (3e88 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2e0>)
    3c7e:	f8db 300c 	ldr.w	r3, [fp, #12]
    3c82:	6808      	ldr	r0, [r1, #0]
    3c84:	4003      	ands	r3, r0
    3c86:	f8cb 3018 	str.w	r3, [fp, #24]
				NVIC_ICER0 = interruptSave[0];
    3c8a:	600b      	str	r3, [r1, #0]
    3c8c:	f89b 300b 	ldrb.w	r3, [fp, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3c90:	0799      	lsls	r1, r3, #30
    3c92:	d509      	bpl.n	3ca8 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x100>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    3c94:	497d      	ldr	r1, [pc, #500]	; (3e8c <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2e4>)
    3c96:	f8db 3010 	ldr.w	r3, [fp, #16]
    3c9a:	6808      	ldr	r0, [r1, #0]
    3c9c:	4003      	ands	r3, r0
    3c9e:	f8cb 301c 	str.w	r3, [fp, #28]
				NVIC_ICER1 = interruptSave[1];
    3ca2:	600b      	str	r3, [r1, #0]
    3ca4:	f89b 300b 	ldrb.w	r3, [fp, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3ca8:	075b      	lsls	r3, r3, #29
    3caa:	f100 80e4 	bmi.w	3e76 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2ce>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    3cae:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    3cb0:	f8db 3000 	ldr.w	r3, [fp]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    3cb4:	68d9      	ldr	r1, [r3, #12]
    3cb6:	4291      	cmp	r1, r2
    3cb8:	d007      	beq.n	3cca <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x122>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    3cba:	4875      	ldr	r0, [pc, #468]	; (3e90 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2e8>)
    3cbc:	6018      	str	r0, [r3, #0]
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3cbe:	4975      	ldr	r1, [pc, #468]	; (3e94 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2ec>)
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
    3cc0:	60da      	str	r2, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    3cc2:	f042 4080 	orr.w	r0, r2, #1073741824	; 0x40000000
    3cc6:	6118      	str	r0, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    3cc8:	6019      	str	r1, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    3cca:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    3cce:	b12b      	cbz	r3, 3cdc <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x134>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    3cd0:	781a      	ldrb	r2, [r3, #0]
    3cd2:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    3cd6:	ea22 0201 	bic.w	r2, r2, r1
    3cda:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3cdc:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3ce0:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3ce2:	041b      	lsls	r3, r3, #16
    3ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3ce8:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
    return;
  }
#endif

  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
    3cec:	1e79      	subs	r1, r7, #1
    3cee:	6353      	str	r3, [r2, #52]	; 0x34
    3cf0:	eb01 0209 	add.w	r2, r1, r9
    3cf4:	b292      	uxth	r2, r2
    waitFifoNotFull();
    3cf6:	4620      	mov	r0, r4
    3cf8:	9201      	str	r2, [sp, #4]
    3cfa:	f7ff f869 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3cfe:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3d02:	69e1      	ldr	r1, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d04:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    3d08:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3d0c:	634b      	str	r3, [r1, #52]	; 0x34
    waitFifoNotFull();
    3d0e:	4620      	mov	r0, r4
    3d10:	f7ff f85e 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d14:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    3d18:	9a01      	ldr	r2, [sp, #4]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3d1a:	69e1      	ldr	r1, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d1c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    3d20:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3d24:	634b      	str	r3, [r1, #52]	; 0x34
    waitFifoNotFull();
    3d26:	4620      	mov	r0, r4
    3d28:	f7ff f852 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3d2c:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3d30:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3d32:	041b      	lsls	r3, r3, #16
    3d34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3d38:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    3d3c:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3d3e:	4620      	mov	r0, r4
    3d40:	f7ff f846 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d44:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3d48:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    3d4e:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3d52:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3d54:	4620      	mov	r0, r4
    3d56:	f108 3bff 	add.w	fp, r8, #4294967295
    3d5a:	f7ff f839 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    3d5e:	44b3      	add	fp, r6
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d60:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3d64:	69e2      	ldr	r2, [r4, #28]
    3d66:	fa1f fb8b 	uxth.w	fp, fp
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3d6a:	ea4b 4303 	orr.w	r3, fp, r3, lsl #16
    3d6e:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3d72:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3d74:	4620      	mov	r0, r4
    3d76:	f7ff f82b 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3d7a:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3d7e:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    3d80:	041b      	lsls	r3, r3, #16
    3d82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    3d86:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    3d8a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3d8c:	4620      	mov	r0, r4
    3d8e:	f7ff f81f 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    3d92:	2e00      	cmp	r6, #0
    3d94:	dd30      	ble.n	3df8 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x250>
    3d96:	9b00      	ldr	r3, [sp, #0]
    3d98:	005f      	lsls	r7, r3, #1
    3d9a:	3702      	adds	r7, #2
    3d9c:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
    pcolors += x_clip_left;
    for (x = w; x > 1; x--) {
    3da0:	f1b9 0f01 	cmp.w	r9, #1

  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    pcolors += x_clip_left;
    3da4:	4455      	add	r5, sl
    for (x = w; x > 1; x--) {
    3da6:	dd14      	ble.n	3dd2 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x22a>
    3da8:	46c8      	mov	r8, r9
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3daa:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
    3dae:	f835 3b02 	ldrh.w	r3, [r5], #2
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    3db2:	69e2      	ldr	r2, [r4, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    3db4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3db8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    3dbc:	f108 38ff 	add.w	r8, r8, #4294967295
    3dc0:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    3dc2:	4620      	mov	r0, r4
    3dc4:	fa0f f888 	sxth.w	r8, r8
    3dc8:	f7ff f802 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    3dcc:	f1b8 0f01 	cmp.w	r8, #1
    3dd0:	d1eb      	bne.n	3daa <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x202>
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3dd2:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
    3dd6:	882b      	ldrh	r3, [r5, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3dd8:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3dda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3dde:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    3de2:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    3de4:	6353      	str	r3, [r2, #52]	; 0x34
    3de6:	3e01      	subs	r6, #1
    waitTransmitComplete(mcr);
    3de8:	4620      	mov	r0, r4
    3dea:	f7ff f971 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
    3dee:	b2b3      	uxth	r3, r6
      writedata16_cont(*pcolors++);
    }
    writedata16_last(*pcolors++);
    pcolors += x_clip_right;
    3df0:	443d      	add	r5, r7
    3df2:	b21e      	sxth	r6, r3
#endif

  beginSPITransaction(_SPI_CLOCK);
  setAddr(x, y, x + w - 1, y + h - 1);
  writecommand_cont(ILI9341_RAMWR);
  for (y = h; y > 0; y--) {
    3df4:	2b00      	cmp	r3, #0
    3df6:	d1d3      	bne.n	3da0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x1f8>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    3df8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    3dfc:	b123      	cbz	r3, 3e08 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x260>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    3dfe:	7819      	ldrb	r1, [r3, #0]
    3e00:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
    3e04:	430a      	orrs	r2, r1
    3e06:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    3e08:	68a2      	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    3e0a:	7ad3      	ldrb	r3, [r2, #11]
    3e0c:	b163      	cbz	r3, 3e28 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x280>
			if (interruptMasksUsed & 0x01) {
    3e0e:	07d8      	lsls	r0, r3, #31
    3e10:	d503      	bpl.n	3e1a <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x272>
				NVIC_ISER0 = interruptSave[0];
    3e12:	4b21      	ldr	r3, [pc, #132]	; (3e98 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2f0>)
    3e14:	6991      	ldr	r1, [r2, #24]
    3e16:	6019      	str	r1, [r3, #0]
    3e18:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    3e1a:	0799      	lsls	r1, r3, #30
    3e1c:	d426      	bmi.n	3e6c <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2c4>
				NVIC_ISER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    3e1e:	075b      	lsls	r3, r3, #29
    3e20:	d502      	bpl.n	3e28 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x280>
				NVIC_ISER2 = interruptSave[2];
    3e22:	4b1e      	ldr	r3, [pc, #120]	; (3e9c <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2f4>)
    3e24:	6a12      	ldr	r2, [r2, #32]
    3e26:	601a      	str	r2, [r3, #0]
    }
    writedata16_last(*pcolors++);
    pcolors += x_clip_right;
  }
  endSPITransaction();
}
    3e28:	b005      	add	sp, #20
    3e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            const uint16_t *pcolors) {

  if (x == CENTER)
    x = (_width - w) / 2;
  if (y == CENTER)
    y = (_height - h) / 2;
    3e2e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
    3e32:	1b92      	subs	r2, r2, r6
    3e34:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
    3e38:	f342 024f 	sbfx	r2, r2, #1, #16
    3e3c:	e6c6      	b.n	3bcc <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x24>
// Now lets see if we can writemultiple pixels
void ILI9341_t3n::writeRect(int16_t x, int16_t y, int16_t w, int16_t h,
                            const uint16_t *pcolors) {

  if (x == CENTER)
    x = (_width - w) / 2;
    3e3e:	f9b0 1020 	ldrsh.w	r1, [r0, #32]
    3e42:	1ac9      	subs	r1, r1, r3
    3e44:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
    3e48:	f341 014f 	sbfx	r1, r1, #1, #16
    3e4c:	e6b9      	b.n	3bc2 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x1a>
  x += _originx;
  y += _originy;
  uint16_t x_clip_left =
      0; // How many entries at start of colors to skip at start of row
  uint16_t x_clip_right =
      0; // how many color entries to skip at end of row for clipping
    3e4e:	2300      	movs	r3, #0
    3e50:	9300      	str	r3, [sp, #0]
    3e52:	e702      	b.n	3c5a <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0xb2>
    h = _displayclipy2 - y;

  // For X see how many items in color array to skip at start of row and
  // likewise end of row
  if (x < _displayclipx1) {
    x_clip_left = _displayclipx1 - x;
    3e54:	b291      	uxth	r1, r2
    3e56:	1bcf      	subs	r7, r1, r7
    3e58:	fa1f fa87 	uxth.w	sl, r7
    w -= x_clip_left;
    3e5c:	ebca 0909 	rsb	r9, sl, r9
    3e60:	fa0f f989 	sxth.w	r9, r9
    3e64:	eb09 0e02 	add.w	lr, r9, r2
    3e68:	460f      	mov	r7, r1
    3e6a:	e6ea      	b.n	3c42 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x9a>
			if (interruptMasksUsed & 0x01) {
				NVIC_ISER0 = interruptSave[0];
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
				NVIC_ISER1 = interruptSave[1];
    3e6c:	4b0c      	ldr	r3, [pc, #48]	; (3ea0 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2f8>)
    3e6e:	69d1      	ldr	r1, [r2, #28]
    3e70:	6019      	str	r1, [r3, #0]
    3e72:	7ad3      	ldrb	r3, [r2, #11]
    3e74:	e7d3      	b.n	3e1e <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x276>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    3e76:	490b      	ldr	r1, [pc, #44]	; (3ea4 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x2fc>)
    3e78:	f8db 3014 	ldr.w	r3, [fp, #20]
    3e7c:	6808      	ldr	r0, [r1, #0]
    3e7e:	4003      	ands	r3, r0
    3e80:	f8cb 3020 	str.w	r3, [fp, #32]
				NVIC_ICER2 = interruptSave[2];
    3e84:	600b      	str	r3, [r1, #0]
    3e86:	e712      	b.n	3cae <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)+0x106>
    3e88:	e000e180 	.word	0xe000e180
    3e8c:	e000e184 	.word	0xe000e184
    3e90:	003f4001 	.word	0x003f4001
    3e94:	803f0000 	.word	0x803f0000
    3e98:	e000e100 	.word	0xe000e100
    3e9c:	e000e108 	.word	0xe000e108
    3ea0:	e000e104 	.word	0xe000e104
    3ea4:	e000e188 	.word	0xe000e188

00003ea8 <ILI9341_t3n::scrollTextArea(unsigned char)>:
    }
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
    3ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3eac:	b082      	sub	sp, #8
  uint16_t awColors[scroll_width];
    3eae:	f9b0 3044 	ldrsh.w	r3, [r0, #68]	; 0x44
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    3eb2:	f9b0 2046 	ldrsh.w	r2, [r0, #70]	; 0x46
    }
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
    3eb6:	468a      	mov	sl, r1
  uint16_t awColors[scroll_width];
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    3eb8:	f9b0 1042 	ldrsh.w	r1, [r0, #66]	; 0x42
    }
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
    3ebc:	4604      	mov	r4, r0
  uint16_t awColors[scroll_width];
    3ebe:	0058      	lsls	r0, r3, #1
    3ec0:	3008      	adds	r0, #8
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    3ec2:	eb0a 0501 	add.w	r5, sl, r1
    3ec6:	440a      	add	r2, r1
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
  uint16_t awColors[scroll_width];
    3ec8:	f020 0007 	bic.w	r0, r0, #7
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    3ecc:	4295      	cmp	r5, r2
    }
  }
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
    3ece:	af02      	add	r7, sp, #8
    3ed0:	bfa8      	it	ge
    3ed2:	fa1f f98a 	uxthge.w	r9, sl
  uint16_t awColors[scroll_width];
    3ed6:	ebad 0d00 	sub.w	sp, sp, r0
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    3eda:	da24      	bge.n	3f26 <ILI9341_t3n::scrollTextArea(unsigned char)+0x7e>
    3edc:	ae02      	add	r6, sp, #8
    3ede:	fa1f f98a 	uxth.w	r9, sl
    readRect(scroll_x, y, scroll_width, 1, awColors);
    3ee2:	f04f 0801 	mov.w	r8, #1
    3ee6:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    3eea:	9601      	str	r6, [sp, #4]
    3eec:	b22a      	sxth	r2, r5
    3eee:	4620      	mov	r0, r4
    3ef0:	f8cd 8000 	str.w	r8, [sp]
    3ef4:	f7fe ff7a 	bl	2dec <ILI9341_t3n::readRect(short, short, short, short, unsigned short*)>
    writeRect(scroll_x, y - scrollSize, scroll_width, 1, awColors);
    3ef8:	ebc9 0205 	rsb	r2, r9, r5
    3efc:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    3f00:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    3f04:	9601      	str	r6, [sp, #4]
    3f06:	b212      	sxth	r2, r2
    3f08:	f8cd 8000 	str.w	r8, [sp]
    3f0c:	4620      	mov	r0, r4
    3f0e:	f7ff fe4b 	bl	3ba8 <ILI9341_t3n::writeRect(short, short, short, short, unsigned short const*)>
  return sumX;
}

void ILI9341_t3n::scrollTextArea(uint8_t scrollSize) {
  uint16_t awColors[scroll_width];
  for (int y = scroll_y + scrollSize; y < (scroll_y + scroll_height); y++) {
    3f12:	f9b4 1042 	ldrsh.w	r1, [r4, #66]	; 0x42
    3f16:	f9b4 2046 	ldrsh.w	r2, [r4, #70]	; 0x46
    3f1a:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	; 0x44
    3f1e:	3501      	adds	r5, #1
    3f20:	440a      	add	r2, r1
    3f22:	42aa      	cmp	r2, r5
    3f24:	dcdf      	bgt.n	3ee6 <ILI9341_t3n::scrollTextArea(unsigned char)+0x3e>
    readRect(scroll_x, y, scroll_width, 1, awColors);
    writeRect(scroll_x, y - scrollSize, scroll_width, 1, awColors);
  }
  fillRect(scroll_x, (scroll_y + scroll_height) - scrollSize, scroll_width,
           scrollSize, scrollbgcolor);
    3f26:	f8b4 004e 	ldrh.w	r0, [r4, #78]	; 0x4e
    3f2a:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    3f2e:	9001      	str	r0, [sp, #4]
    3f30:	ebc9 0202 	rsb	r2, r9, r2
    3f34:	f8cd a000 	str.w	sl, [sp]
    3f38:	b212      	sxth	r2, r2
    3f3a:	4620      	mov	r0, r4
    3f3c:	f7ff fafe 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
}
    3f40:	46bd      	mov	sp, r7
    3f42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f46:	bf00      	nop

00003f48 <ILI9341_t3n::begin(unsigned long, unsigned long)>:
                                        16, ILI9341_GMCTRN1, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31,
                                            0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F, // Set Gamma
                                        3, 0xb1, 0x00, 0x10, // FrameRate Control 119Hz
                                        0};

FLASHMEM void ILI9341_t3n::begin(uint32_t spi_clock, uint32_t spi_clock_read) {
    3f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3f4c:	4604      	mov	r4, r0
    3f4e:	b084      	sub	sp, #16
  // verify SPI pins are valid;
  // allow user to say use current ones...
  _SPI_CLOCK = spi_clock;           // #define ILI9341_SPICLOCK 30000000
    3f50:	6161      	str	r1, [r4, #20]

  // Serial.printf("_t3n::begin mosi:%d miso:%d SCLK:%d CS:%d DC:%d SPI clocks:
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
    3f52:	4890      	ldr	r0, [pc, #576]	; (4194 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x24c>)

FLASHMEM void ILI9341_t3n::begin(uint32_t spi_clock, uint32_t spi_clock_read) {
  // verify SPI pins are valid;
  // allow user to say use current ones...
  _SPI_CLOCK = spi_clock;           // #define ILI9341_SPICLOCK 30000000
  _SPI_CLOCK_READ = spi_clock_read; //#define ILI9341_SPICLOCK_READ 2000000
    3f54:	61a2      	str	r2, [r4, #24]

  // Serial.printf("_t3n::begin mosi:%d miso:%d SCLK:%d CS:%d DC:%d SPI clocks:
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
    3f56:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
    3f5a:	f7fe f9b5 	bl	22c8 <SPIClass::pinIsMOSI(unsigned char)>
    3f5e:	2800      	cmp	r0, #0
    3f60:	f000 819c 	beq.w	429c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x354>
    3f64:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
    3f68:	29ff      	cmp	r1, #255	; 0xff
    3f6a:	d005      	beq.n	3f78 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x30>
    3f6c:	4889      	ldr	r0, [pc, #548]	; (4194 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x24c>)
    3f6e:	f7fe f9b9 	bl	22e4 <SPIClass::pinIsMISO(unsigned char)>
    3f72:	2800      	cmp	r0, #0
    3f74:	f000 8192 	beq.w	429c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x354>
      SPI.pinIsSCK(_sclk)) {
    3f78:	4d86      	ldr	r5, [pc, #536]	; (4194 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x24c>)
    3f7a:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
    3f7e:	4628      	mov	r0, r5
    3f80:	f7fe f9bc 	bl	22fc <SPIClass::pinIsSCK(unsigned char)>

  // Serial.printf("_t3n::begin mosi:%d miso:%d SCLK:%d CS:%d DC:%d SPI clocks:
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
    3f84:	2800      	cmp	r0, #0
    3f86:	f000 8189 	beq.w	429c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x354>
      SPI.pinIsSCK(_sclk)) {
    _pspi = &SPI;
    _spi_num = 0; // Which buss is this spi on?
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI0; // Could hack our way to grab this from SPI
    3f8a:	4a83      	ldr	r2, [pc, #524]	; (4198 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x250>)
    3f8c:	61e2      	str	r2, [r4, #28]
                                     // object, but...
    _fifo_full_test = (3 << 12);
    3f8e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
      SPI.pinIsSCK(_sclk)) {
    _pspi = &SPI;
    _spi_num = 0; // Which buss is this spi on?
    3f92:	2100      	movs	r1, #0
                  _sclk, _cs, _dc);
    Serial.flush();
    return; // most likely will go bomb
  }
  // Make sure we have all of the proper SPI pins selected.
  _pspi->setMOSI(_mosi);
    3f94:	4628      	mov	r0, r5
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
      SPI.pinIsSCK(_sclk)) {
    _pspi = &SPI;
    _spi_num = 0; // Which buss is this spi on?
    3f96:	7421      	strb	r1, [r4, #16]
#ifdef KINETISK
    _pkinetisk_spi = &KINETISK_SPI0; // Could hack our way to grab this from SPI
                                     // object, but...
    _fifo_full_test = (3 << 12);
    3f98:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
                  _sclk, _cs, _dc);
    Serial.flush();
    return; // most likely will go bomb
  }
  // Make sure we have all of the proper SPI pins selected.
  _pspi->setMOSI(_mosi);
    3f9c:	f894 1090 	ldrb.w	r1, [r4, #144]	; 0x90
  // %lu %lu\n", _mosi, _miso, _sclk, _cs, _dc, _SPI_CLOCK, _SPI_CLOCK_READ);
  // Serial.flush();

  if (SPI.pinIsMOSI(_mosi) && ((_miso == 0xff) || SPI.pinIsMISO(_miso)) &&
      SPI.pinIsSCK(_sclk)) {
    _pspi = &SPI;
    3fa0:	60a5      	str	r5, [r4, #8]
                  _sclk, _cs, _dc);
    Serial.flush();
    return; // most likely will go bomb
  }
  // Make sure we have all of the proper SPI pins selected.
  _pspi->setMOSI(_mosi);
    3fa2:	f7fe f9d9 	bl	2358 <SPIClass::setMOSI(unsigned char)>
  _pspi->setSCK(_sclk);
    3fa6:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
    3faa:	68a0      	ldr	r0, [r4, #8]
    3fac:	f7fe fa60 	bl	2470 <SPIClass::setSCK(unsigned char)>
  if (_miso != 0xff)
    3fb0:	f894 108f 	ldrb.w	r1, [r4, #143]	; 0x8f
    3fb4:	29ff      	cmp	r1, #255	; 0xff
    3fb6:	d002      	beq.n	3fbe <ILI9341_t3n::begin(unsigned long, unsigned long)+0x76>
    _pspi->setMISO(_miso);
    3fb8:	68a0      	ldr	r0, [r4, #8]
    3fba:	f7fe fa15 	bl	23e8 <SPIClass::setMISO(unsigned char)>

  // Hack to get hold of the SPI Hardware information...
  uint32_t *pa = (uint32_t *)((void *)_pspi);
    3fbe:	68a0      	ldr	r0, [r4, #8]
  _spi_hardware = (SPIClass::SPI_Hardware_t *)(void *)pa[1];
    3fc0:	6843      	ldr	r3, [r0, #4]
    3fc2:	60e3      	str	r3, [r4, #12]

  _pspi->begin();
    3fc4:	f7fe f900 	bl	21c8 <SPIClass::begin()>
#ifdef KINETISK
  if (_pspi->pinIsChipSelect(_cs, _dc)) {
    3fc8:	f894 208c 	ldrb.w	r2, [r4, #140]	; 0x8c
    3fcc:	f894 108b 	ldrb.w	r1, [r4, #139]	; 0x8b
    3fd0:	68a0      	ldr	r0, [r4, #8]
    3fd2:	f7fe f94b 	bl	226c <SPIClass::pinIsChipSelect(unsigned char, unsigned char)>
    3fd6:	4605      	mov	r5, r0
    3fd8:	2800      	cmp	r0, #0
    3fda:	f000 817e 	beq.w	42da <ILI9341_t3n::begin(unsigned long, unsigned long)+0x392>
    pcs_data = _pspi->setCS(_cs);
    3fde:	f894 108b 	ldrb.w	r1, [r4, #139]	; 0x8b
    3fe2:	68a0      	ldr	r0, [r4, #8]
    3fe4:	f7fe f998 	bl	2318 <SPIClass::setCS(unsigned char)>
    pcs_command = pcs_data | _pspi->setCS(_dc);
    3fe8:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
  _spi_hardware = (SPIClass::SPI_Hardware_t *)(void *)pa[1];

  _pspi->begin();
#ifdef KINETISK
  if (_pspi->pinIsChipSelect(_cs, _dc)) {
    pcs_data = _pspi->setCS(_cs);
    3fec:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
    3ff0:	4605      	mov	r5, r0
    pcs_command = pcs_data | _pspi->setCS(_dc);
    3ff2:	68a0      	ldr	r0, [r4, #8]
    3ff4:	f7fe f990 	bl	2318 <SPIClass::setCS(unsigned char)>
    3ff8:	4328      	orrs	r0, r5
    3ffa:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
  *_dcport |= _dcpinmask;
  _dcpinAsserted = 0;
#endif

  // toggle RST low to reset
  if (_rst < 255) {
    3ffe:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    4002:	28ff      	cmp	r0, #255	; 0xff
    4004:	d01a      	beq.n	403c <ILI9341_t3n::begin(unsigned long, unsigned long)+0xf4>
    pinMode(_rst, OUTPUT);
    4006:	2101      	movs	r1, #1
    4008:	f002 ff9c 	bl	6f44 <pinMode>
    digitalWrite(_rst, HIGH);
    400c:	2101      	movs	r1, #1
    400e:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    4012:	f002 ff91 	bl	6f38 <digitalWrite>
    delay(5);
    4016:	2005      	movs	r0, #5
    4018:	f002 ff9a 	bl	6f50 <delay>
    digitalWrite(_rst, LOW);
    401c:	2100      	movs	r1, #0
    401e:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    4022:	f002 ff89 	bl	6f38 <digitalWrite>
    delay(20);
    4026:	2014      	movs	r0, #20
    4028:	f002 ff92 	bl	6f50 <delay>
    digitalWrite(_rst, HIGH);
    402c:	f894 008a 	ldrb.w	r0, [r4, #138]	; 0x8a
    4030:	2101      	movs	r1, #1
    4032:	f002 ff81 	bl	6f38 <digitalWrite>
    delay(150);
    4036:	2096      	movs	r0, #150	; 0x96
    4038:	f002 ff8a 	bl	6f50 <delay>
          x = readcommand8(ILI9341_RDIMGFMT);
          Serial.print("\nImage Format: 0x"); Serial.println(x, HEX);
          x = readcommand8(ILI9341_RDSELFDIAG);
          Serial.print("\nSelf Diagnostic: 0x"); Serial.println(x, HEX);
  */
  beginSPITransaction(_SPI_CLOCK/4);
    403c:	6965      	ldr	r5, [r4, #20]
    403e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 41c0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x278>
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    4042:	68a2      	ldr	r2, [r4, #8]
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    4044:	4f55      	ldr	r7, [pc, #340]	; (419c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x254>)
    4046:	08ad      	lsrs	r5, r5, #2
                                        16, ILI9341_GMCTRN1, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31,
                                            0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F, // Set Gamma
                                        3, 0xb1, 0x00, 0x10, // FrameRate Control 119Hz
                                        0};

FLASHMEM void ILI9341_t3n::begin(uint32_t spi_clock, uint32_t spi_clock_read) {
    4048:	4646      	mov	r6, r8
    404a:	2100      	movs	r1, #0
    404c:	e002      	b.n	4054 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x10c>
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    404e:	2817      	cmp	r0, #23
    4050:	d008      	beq.n	4064 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x11c>
    4052:	4601      	mov	r1, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    4054:	f836 3f02 	ldrh.w	r3, [r6, #2]!
    4058:	fb97 f3f3 	sdiv	r3, r7, r3
    405c:	42ab      	cmp	r3, r5
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    405e:	f101 0001 	add.w	r0, r1, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    4062:	d8f4      	bhi.n	404e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x106>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    4064:	f8df 915c 	ldr.w	r9, [pc, #348]	; 41c4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x27c>

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    4068:	7ad3      	ldrb	r3, [r2, #11]
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    406a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    406e:	f041 5060 	orr.w	r0, r1, #939524096	; 0x38000000

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    4072:	b1bb      	cbz	r3, 40a4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x15c>
			__disable_irq();
    4074:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    4076:	7ad3      	ldrb	r3, [r2, #11]
    4078:	07df      	lsls	r7, r3, #31
    407a:	d506      	bpl.n	408a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x142>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    407c:	4d48      	ldr	r5, [pc, #288]	; (41a0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x258>)
    407e:	68d3      	ldr	r3, [r2, #12]
    4080:	682e      	ldr	r6, [r5, #0]
    4082:	4033      	ands	r3, r6
    4084:	6193      	str	r3, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    4086:	602b      	str	r3, [r5, #0]
    4088:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    408a:	079e      	lsls	r6, r3, #30
    408c:	d506      	bpl.n	409c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x154>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    408e:	4d45      	ldr	r5, [pc, #276]	; (41a4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x25c>)
    4090:	6913      	ldr	r3, [r2, #16]
    4092:	682e      	ldr	r6, [r5, #0]
    4094:	4033      	ands	r3, r6
    4096:	61d3      	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    4098:	602b      	str	r3, [r5, #0]
    409a:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    409c:	075d      	lsls	r5, r3, #29
    409e:	f100 8146 	bmi.w	432e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3e6>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    40a2:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    40a4:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    40a6:	68da      	ldr	r2, [r3, #12]
    40a8:	4282      	cmp	r2, r0
    40aa:	d007      	beq.n	40bc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x174>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    40ac:	f041 41f0 	orr.w	r1, r1, #2013265920	; 0x78000000
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    40b0:	4d3d      	ldr	r5, [pc, #244]	; (41a8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x260>)
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    40b2:	4a3e      	ldr	r2, [pc, #248]	; (41ac <ILI9341_t3n::begin(unsigned long, unsigned long)+0x264>)
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    40b4:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
    40b6:	60d8      	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    40b8:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    40ba:	601a      	str	r2, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    40bc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    40c0:	b12b      	cbz	r3, 40ce <ILI9341_t3n::begin(unsigned long, unsigned long)+0x186>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    40c2:	781a      	ldrb	r2, [r3, #0]
    40c4:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    40c8:	ea22 0201 	bic.w	r2, r2, r1
    40cc:	701a      	strb	r2, [r3, #0]
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    40ce:	4d38      	ldr	r5, [pc, #224]	; (41b0 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x268>)
    40d0:	f04f 0a04 	mov.w	sl, #4
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    40d4:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
    40d8:	786b      	ldrb	r3, [r5, #1]
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    40da:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    40dc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    40e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    40e4:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    40e6:	4620      	mov	r0, r4
    40e8:	f7fe fe72 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
      break;
    writecommand_cont(*addr++);
    while (count-- > 0) {
    40ec:	f1aa 0602 	sub.w	r6, sl, #2
    40f0:	f1ba 0f01 	cmp.w	sl, #1
    40f4:	b2f6      	uxtb	r6, r6
  const uint8_t *addr = init_commands;
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
      break;
    writecommand_cont(*addr++);
    40f6:	f105 0702 	add.w	r7, r5, #2
    while (count-- > 0) {
    40fa:	f000 80ec 	beq.w	42d6 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x38e>
    40fe:	1cf3      	adds	r3, r6, #3
    4100:	441d      	add	r5, r3
    4102:	46ba      	mov	sl, r7
  }
  void writedata8_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4104:	f81a 3b01 	ldrb.w	r3, [sl], #1
    4108:	f894 108d 	ldrb.w	r1, [r4, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata8_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    410c:	69e2      	ldr	r2, [r4, #28]
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    410e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4116:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4118:	4620      	mov	r0, r4
    411a:	f7fe fe59 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    411e:	45aa      	cmp	sl, r5
    4120:	d1f0      	bne.n	4104 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x1bc>
    4122:	1c75      	adds	r5, r6, #1
    4124:	443d      	add	r5, r7
    4126:	f895 a000 	ldrb.w	sl, [r5]
  */
  beginSPITransaction(_SPI_CLOCK/4);
  const uint8_t *addr = init_commands;
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
    412a:	f1ba 0f00 	cmp.w	sl, #0
    412e:	d1d1      	bne.n	40d4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x18c>
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4130:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    4134:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4136:	041b      	lsls	r3, r3, #16
    4138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    413c:	f043 0311 	orr.w	r3, r3, #17
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    4140:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4142:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    4144:	4620      	mov	r0, r4
    4146:	f7fe ffc3 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    414a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    414e:	b123      	cbz	r3, 415a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x212>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    4150:	7819      	ldrb	r1, [r3, #0]
    4152:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
    4156:	430a      	orrs	r2, r1
    4158:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    415a:	68a2      	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    415c:	7ad3      	ldrb	r3, [r2, #11]
    415e:	b183      	cbz	r3, 4182 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x23a>
			if (interruptMasksUsed & 0x01) {
    4160:	07d8      	lsls	r0, r3, #31
    4162:	d503      	bpl.n	416c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x224>
				NVIC_ISER0 = interruptSave[0];
    4164:	4b13      	ldr	r3, [pc, #76]	; (41b4 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x26c>)
    4166:	6991      	ldr	r1, [r2, #24]
    4168:	6019      	str	r1, [r3, #0]
    416a:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    416c:	0799      	lsls	r1, r3, #30
    416e:	d503      	bpl.n	4178 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x230>
				NVIC_ISER1 = interruptSave[1];
    4170:	4b11      	ldr	r3, [pc, #68]	; (41b8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x270>)
    4172:	69d1      	ldr	r1, [r2, #28]
    4174:	6019      	str	r1, [r3, #0]
    4176:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    4178:	075b      	lsls	r3, r3, #29
    417a:	d502      	bpl.n	4182 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x23a>
				NVIC_ISER2 = interruptSave[2];
    417c:	4b0f      	ldr	r3, [pc, #60]	; (41bc <ILI9341_t3n::begin(unsigned long, unsigned long)+0x274>)
    417e:	6a12      	ldr	r2, [r2, #32]
    4180:	601a      	str	r2, [r3, #0]
      writedata8_cont(*addr++);
    }
  }
  writecommand_last(ILI9341_SLPOUT); // Exit Sleep
  endSPITransaction();
  delay(120);
    4182:	2078      	movs	r0, #120	; 0x78
    4184:	f002 fee4 	bl	6f50 <delay>
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    4188:	4e04      	ldr	r6, [pc, #16]	; (419c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x254>)
  beginSPITransaction(_SPI_CLOCK);
    418a:	6965      	ldr	r5, [r4, #20]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    418c:	68a2      	ldr	r2, [r4, #8]
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
      break;
    writecommand_cont(*addr++);
    while (count-- > 0) {
    418e:	2100      	movs	r1, #0
    4190:	e01d      	b.n	41ce <ILI9341_t3n::begin(unsigned long, unsigned long)+0x286>
    4192:	bf00      	nop
    4194:	1fff8894 	.word	0x1fff8894
    4198:	4002c000 	.word	0x4002c000
    419c:	02dc6c00 	.word	0x02dc6c00
    41a0:	e000e180 	.word	0xe000e180
    41a4:	e000e184 	.word	0xe000e184
    41a8:	003f4001 	.word	0x003f4001
    41ac:	803f0000 	.word	0x803f0000
    41b0:	0001b1b0 	.word	0x0001b1b0
    41b4:	e000e100 	.word	0xe000e100
    41b8:	e000e104 	.word	0xe000e104
    41bc:	e000e108 	.word	0xe000e108
    41c0:	0000dea6 	.word	0x0000dea6
    41c4:	0000ded8 	.word	0x0000ded8
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    41c8:	2817      	cmp	r0, #23
    41ca:	d008      	beq.n	41de <ILI9341_t3n::begin(unsigned long, unsigned long)+0x296>
    41cc:	4601      	mov	r1, r0
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    41ce:	f838 3f02 	ldrh.w	r3, [r8, #2]!
    41d2:	fb96 f3f3 	sdiv	r3, r6, r3
    41d6:	429d      	cmp	r5, r3
				t = SPI_CTAR_PBR(2) | SPI_CTAR_BR(7) | SPI_CTAR_CSSCK(6);
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
    41d8:	f101 0001 	add.w	r0, r1, #1
				t = ctar_clock_table[i];
				if (clock >= F_BUS / ctar_div_table[i]) break;
    41dc:	d3f4      	bcc.n	41c8 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x280>
			} else {	 /* F_BUS / 768 */
				t = SPI_CTAR_PBR(1) | SPI_CTAR_BR(8) | SPI_CTAR_CSSCK(7);
			}
		} else {
			for (uint32_t i=0; i<23; i++) {
				t = ctar_clock_table[i];
    41de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    41e2:	7ad3      	ldrb	r3, [r2, #11]
		}
		if (dataMode & 0x04) {
			c |= SPI_CTAR_CPHA;
			t = (t & 0xFFFF0FFF) | ((t & 0xF000) >> 4);
		}
		ctar = c | t;
    41e4:	f041 5060 	orr.w	r0, r1, #939524096	; 0x38000000

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    41e8:	b1bb      	cbz	r3, 421a <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2d2>
			__disable_irq();
    41ea:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    41ec:	7ad3      	ldrb	r3, [r2, #11]
    41ee:	07df      	lsls	r7, r3, #31
    41f0:	d506      	bpl.n	4200 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2b8>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    41f2:	4d59      	ldr	r5, [pc, #356]	; (4358 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x410>)
    41f4:	68d3      	ldr	r3, [r2, #12]
    41f6:	682e      	ldr	r6, [r5, #0]
    41f8:	4033      	ands	r3, r6
    41fa:	6193      	str	r3, [r2, #24]
				NVIC_ICER0 = interruptSave[0];
    41fc:	602b      	str	r3, [r5, #0]
    41fe:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    4200:	079e      	lsls	r6, r3, #30
    4202:	d506      	bpl.n	4212 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2ca>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    4204:	4d55      	ldr	r5, [pc, #340]	; (435c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x414>)
    4206:	6913      	ldr	r3, [r2, #16]
    4208:	682e      	ldr	r6, [r5, #0]
    420a:	4033      	ands	r3, r6
    420c:	61d3      	str	r3, [r2, #28]
				NVIC_ICER1 = interruptSave[1];
    420e:	602b      	str	r3, [r5, #0]
    4210:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    4212:	075d      	lsls	r5, r3, #29
    4214:	f100 8084 	bmi.w	4320 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3d8>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			#endif
			__enable_irq();
    4218:	b662      	cpsie	i
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    421a:	6813      	ldr	r3, [r2, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
    421c:	68da      	ldr	r2, [r3, #12]
    421e:	4282      	cmp	r2, r0
    4220:	d007      	beq.n	4232 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2ea>
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    4222:	f041 41f0 	orr.w	r1, r1, #2013265920	; 0x78000000
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    4226:	4d4e      	ldr	r5, [pc, #312]	; (4360 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x418>)
			port().CTAR0 = settings.ctar;
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    4228:	4a4e      	ldr	r2, [pc, #312]	; (4364 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x41c>)
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 1;
		#endif
		if (port().CTAR0 != settings.ctar) {
			port().MCR = SPI_MCR_MDIS | SPI_MCR_HALT | SPI_MCR_PCSIS(0x3F);
    422a:	601d      	str	r5, [r3, #0]
			port().CTAR0 = settings.ctar;
    422c:	60d8      	str	r0, [r3, #12]
			port().CTAR1 = settings.ctar| SPI_CTAR_FMSZ(8);
    422e:	6119      	str	r1, [r3, #16]
			port().MCR = SPI_MCR_MSTR | SPI_MCR_PCSIS(0x3F);
    4230:	601a      	str	r2, [r3, #0]
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    4232:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    4236:	b12b      	cbz	r3, 4244 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2fc>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    4238:	781a      	ldrb	r2, [r3, #0]
    423a:	f894 1098 	ldrb.w	r1, [r4, #152]	; 0x98
    423e:	ea22 0201 	bic.w	r2, r2, r1
    4242:	701a      	strb	r2, [r3, #0]
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4244:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    4248:	69e2      	ldr	r2, [r4, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    424a:	041b      	lsls	r3, r3, #16
    424c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    4250:	f043 0329 	orr.w	r3, r3, #41	; 0x29
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    4254:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4256:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    4258:	4620      	mov	r0, r4
    425a:	f7fe ff39 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    425e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    4262:	b123      	cbz	r3, 426e <ILI9341_t3n::begin(unsigned long, unsigned long)+0x326>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    4264:	7819      	ldrb	r1, [r3, #0]
    4266:	f894 2098 	ldrb.w	r2, [r4, #152]	; 0x98
    426a:	430a      	orrs	r2, r1
    426c:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    426e:	68a2      	ldr	r2, [r4, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    4270:	7ad3      	ldrb	r3, [r2, #11]
    4272:	b183      	cbz	r3, 4296 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x34e>
			if (interruptMasksUsed & 0x01) {
    4274:	07d8      	lsls	r0, r3, #31
    4276:	d503      	bpl.n	4280 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x338>
				NVIC_ISER0 = interruptSave[0];
    4278:	4b3b      	ldr	r3, [pc, #236]	; (4368 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x420>)
    427a:	6991      	ldr	r1, [r2, #24]
    427c:	6019      	str	r1, [r3, #0]
    427e:	7ad3      	ldrb	r3, [r2, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    4280:	0799      	lsls	r1, r3, #30
    4282:	d503      	bpl.n	428c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x344>
				NVIC_ISER1 = interruptSave[1];
    4284:	4b39      	ldr	r3, [pc, #228]	; (436c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x424>)
    4286:	69d1      	ldr	r1, [r2, #28]
    4288:	6019      	str	r1, [r3, #0]
    428a:	7ad3      	ldrb	r3, [r2, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    428c:	075b      	lsls	r3, r3, #29
    428e:	d502      	bpl.n	4296 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x34e>
				NVIC_ISER2 = interruptSave[2];
    4290:	4b37      	ldr	r3, [pc, #220]	; (4370 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x428>)
    4292:	6a12      	ldr	r2, [r2, #32]
    4294:	601a      	str	r2, [r3, #0]
  pinMode(DEBUG_PIN_2, OUTPUT);
  pinMode(DEBUG_PIN_3, OUTPUT);
  pinMode(DEBUG_PIN_4, OUTPUT);
#endif
  // Serial.println("_t3n::begin - completed"); Serial.flush();
}
    4296:	b004      	add	sp, #16
    4298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    429c:	2142      	movs	r1, #66	; 0x42
    429e:	4835      	ldr	r0, [pc, #212]	; (4374 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x42c>)
    42a0:	f003 fe5c 	bl	7f5c <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
    42a4:	4834      	ldr	r0, [pc, #208]	; (4378 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x430>)
    42a6:	f003 fff7 	bl	8298 <Print::println()>
  } else {
    Serial.println(
        "ILI9341_t3n: The IO pins on the constructor are not valid SPI pins");

    Serial.printf("    mosi:%d miso:%d SCLK:%d CS:%d DC:%d\n", _mosi, _miso,
                  _sclk, _cs, _dc);
    42aa:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
    42ae:	f894 1091 	ldrb.w	r1, [r4, #145]	; 0x91
    42b2:	f894 508c 	ldrb.w	r5, [r4, #140]	; 0x8c
    42b6:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
    42ba:	f894 2090 	ldrb.w	r2, [r4, #144]	; 0x90
    42be:	9001      	str	r0, [sp, #4]
    42c0:	9100      	str	r1, [sp, #0]
    42c2:	9502      	str	r5, [sp, #8]
    42c4:	492d      	ldr	r1, [pc, #180]	; (437c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x434>)
    42c6:	482c      	ldr	r0, [pc, #176]	; (4378 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x430>)
    42c8:	f003 fffe 	bl	82c8 <Print::printf(char const*, ...)>
  pinMode(DEBUG_PIN_2, OUTPUT);
  pinMode(DEBUG_PIN_3, OUTPUT);
  pinMode(DEBUG_PIN_4, OUTPUT);
#endif
  // Serial.println("_t3n::begin - completed"); Serial.flush();
}
    42cc:	b004      	add	sp, #16
    42ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    42d2:	f003 bef7 	b.w	80c4 <usb_serial_flush_output>
  const uint8_t *addr = init_commands;
  while (1) {
    uint8_t count = *addr++;
    if (count-- == 0)
      break;
    writecommand_cont(*addr++);
    42d6:	463d      	mov	r5, r7
    42d8:	e725      	b.n	4126 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x1de>
  if (_pspi->pinIsChipSelect(_cs, _dc)) {
    pcs_data = _pspi->setCS(_cs);
    pcs_command = pcs_data | _pspi->setCS(_dc);
  } else {
    // See if at least DC is on chipselect pin, if so try to limp along...
    if (_pspi->pinIsChipSelect(_dc)) {
    42da:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    42de:	68a0      	ldr	r0, [r4, #8]
    42e0:	f7fd ffb0 	bl	2244 <SPIClass::pinIsChipSelect(unsigned char)>
    42e4:	b350      	cbz	r0, 433c <ILI9341_t3n::begin(unsigned long, unsigned long)+0x3f4>
      pcs_data = 0;
      pcs_command = pcs_data | _pspi->setCS(_dc);
    42e6:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
    pcs_data = _pspi->setCS(_cs);
    pcs_command = pcs_data | _pspi->setCS(_dc);
  } else {
    // See if at least DC is on chipselect pin, if so try to limp along...
    if (_pspi->pinIsChipSelect(_dc)) {
      pcs_data = 0;
    42ea:	f884 508d 	strb.w	r5, [r4, #141]	; 0x8d
      pcs_command = pcs_data | _pspi->setCS(_dc);
    42ee:	68a0      	ldr	r0, [r4, #8]
    42f0:	f7fe f812 	bl	2318 <SPIClass::setCS(unsigned char)>
      pinMode(_cs, OUTPUT);
    42f4:	2101      	movs	r1, #1
    pcs_command = pcs_data | _pspi->setCS(_dc);
  } else {
    // See if at least DC is on chipselect pin, if so try to limp along...
    if (_pspi->pinIsChipSelect(_dc)) {
      pcs_data = 0;
      pcs_command = pcs_data | _pspi->setCS(_dc);
    42f6:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
      pinMode(_cs, OUTPUT);
    42fa:	f894 008b 	ldrb.w	r0, [r4, #139]	; 0x8b
    42fe:	f002 fe21 	bl	6f44 <pinMode>
      _csport = portOutputRegister(digitalPinToPort(_cs));
    4302:	f894 108b 	ldrb.w	r1, [r4, #139]	; 0x8b
    4306:	4b1e      	ldr	r3, [pc, #120]	; (4380 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x438>)
      _cspinmask = digitalPinToBitMask(_cs);
    4308:	2201      	movs	r2, #1
    // See if at least DC is on chipselect pin, if so try to limp along...
    if (_pspi->pinIsChipSelect(_dc)) {
      pcs_data = 0;
      pcs_command = pcs_data | _pspi->setCS(_dc);
      pinMode(_cs, OUTPUT);
      _csport = portOutputRegister(digitalPinToPort(_cs));
    430a:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    430e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
      _cspinmask = digitalPinToBitMask(_cs);
    4312:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
      *_csport |= _cspinmask;
    4316:	781a      	ldrb	r2, [r3, #0]
    4318:	f042 0201 	orr.w	r2, r2, #1
    431c:	701a      	strb	r2, [r3, #0]
    431e:	e66e      	b.n	3ffe <ILI9341_t3n::begin(unsigned long, unsigned long)+0xb6>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    4320:	4d18      	ldr	r5, [pc, #96]	; (4384 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x43c>)
    4322:	6953      	ldr	r3, [r2, #20]
    4324:	682e      	ldr	r6, [r5, #0]
    4326:	4033      	ands	r3, r6
    4328:	6213      	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    432a:	602b      	str	r3, [r5, #0]
    432c:	e774      	b.n	4218 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x2d0>
				NVIC_ICER1 = interruptSave[1];
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    432e:	4d15      	ldr	r5, [pc, #84]	; (4384 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x43c>)
    4330:	6953      	ldr	r3, [r2, #20]
    4332:	682e      	ldr	r6, [r5, #0]
    4334:	4033      	ands	r3, r6
    4336:	6213      	str	r3, [r2, #32]
				NVIC_ICER2 = interruptSave[2];
    4338:	602b      	str	r3, [r5, #0]
    433a:	e6b2      	b.n	40a2 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x15a>
    } else {
      pcs_data = 0;
    433c:	f884 008d 	strb.w	r0, [r4, #141]	; 0x8d
      pcs_command = 0;
    4340:	f884 008e 	strb.w	r0, [r4, #142]	; 0x8e
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4344:	2136      	movs	r1, #54	; 0x36
    4346:	4810      	ldr	r0, [pc, #64]	; (4388 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x440>)
    4348:	f003 fe08 	bl	7f5c <usb_serial_write>
    434c:	480a      	ldr	r0, [pc, #40]	; (4378 <ILI9341_t3n::begin(unsigned long, unsigned long)+0x430>)
  pinMode(DEBUG_PIN_2, OUTPUT);
  pinMode(DEBUG_PIN_3, OUTPUT);
  pinMode(DEBUG_PIN_4, OUTPUT);
#endif
  // Serial.println("_t3n::begin - completed"); Serial.flush();
}
    434e:	b004      	add	sp, #16
    4350:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4354:	f003 bfa0 	b.w	8298 <Print::println()>
    4358:	e000e180 	.word	0xe000e180
    435c:	e000e184 	.word	0xe000e184
    4360:	003f4001 	.word	0x003f4001
    4364:	803f0000 	.word	0x803f0000
    4368:	e000e100 	.word	0xe000e100
    436c:	e000e104 	.word	0xe000e104
    4370:	e000e108 	.word	0xe000e108
    4374:	0001b254 	.word	0x0001b254
    4378:	1fff8a8c 	.word	0x1fff8a8c
    437c:	0001b298 	.word	0x0001b298
    4380:	0001b848 	.word	0x0001b848
    4384:	e000e188 	.word	0xe000e188
    4388:	0001b21c 	.word	0x0001b21c

0000438c <ILI9341_t3n::drawGFXFontChar(unsigned int)>:
  }
}

void ILI9341_t3n::drawGFXFontChar(unsigned int c) {
  // Lets do Adafruit GFX character output here as well
  if (c == '\r')
    438c:	290d      	cmp	r1, #13
    438e:	f000 8188 	beq.w	46a2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x316>
      }
    }
  }
}

void ILI9341_t3n::drawGFXFontChar(unsigned int c) {
    4392:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // Lets do Adafruit GFX character output here as well
  if (c == '\r')
    return;

  // Some quick and dirty tests to see if we can
  uint8_t first = gfxFont->first;
    4396:	6f43      	ldr	r3, [r0, #116]	; 0x74
  if ((c < first) || (c > gfxFont->last))
    4398:	7a1c      	ldrb	r4, [r3, #8]
    439a:	42a1      	cmp	r1, r4
      }
    }
  }
}

void ILI9341_t3n::drawGFXFontChar(unsigned int c) {
    439c:	b097      	sub	sp, #92	; 0x5c
  if (c == '\r')
    return;

  // Some quick and dirty tests to see if we can
  uint8_t first = gfxFont->first;
  if ((c < first) || (c > gfxFont->last))
    439e:	f0c0 8177 	bcc.w	4690 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x304>
    43a2:	7a5a      	ldrb	r2, [r3, #9]
    43a4:	4291      	cmp	r1, r2
    43a6:	f200 8173 	bhi.w	4690 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x304>
    return;

  GFXglyph *glyph = gfxFont->glyph + (c - first);
    43aa:	685e      	ldr	r6, [r3, #4]
    43ac:	1b0c      	subs	r4, r1, r4
    43ae:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
    43b2:	4615      	mov	r5, r2
    43b4:	9210      	str	r2, [sp, #64]	; 0x40
  uint8_t w = glyph->width, h = glyph->height;
    43b6:	7892      	ldrb	r2, [r2, #2]
    43b8:	920d      	str	r2, [sp, #52]	; 0x34
    43ba:	4617      	mov	r7, r2
    43bc:	78ea      	ldrb	r2, [r5, #3]
    43be:	920e      	str	r2, [sp, #56]	; 0x38
    43c0:	4615      	mov	r5, r2
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    43c2:	2f00      	cmp	r7, #0
    43c4:	f000 8167 	beq.w	4696 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x30a>
    43c8:	2d00      	cmp	r5, #0
    43ca:	f000 8164 	beq.w	4696 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x30a>
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    43ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
    43d0:	7a9f      	ldrb	r7, [r3, #10]
    43d2:	f995 e006 	ldrsb.w	lr, [r5, #6]

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    43d6:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
  uint8_t w = glyph->width, h = glyph->height;
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    return; // Is there an associated bitmap?

  int16_t xo = glyph->xOffset; // sic
    43da:	f995 b005 	ldrsb.w	fp, [r5, #5]
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;
    43de:	eb0e 0557 	add.w	r5, lr, r7, lsr #1
    43e2:	9503      	str	r5, [sp, #12]

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    43e4:	f9b0 e024 	ldrsh.w	lr, [r0, #36]	; 0x24
    43e8:	b152      	cbz	r2, 4400 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x74>
    43ea:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    43ec:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
    43f0:	f9b0 5020 	ldrsh.w	r5, [r0, #32]
    43f4:	445f      	add	r7, fp
    43f6:	fb07 e202 	mla	r2, r7, r2, lr
    43fa:	42aa      	cmp	r2, r5
    43fc:	f300 823e 	bgt.w	487c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x4f0>
    4400:	fa1f f28e 	uxth.w	r2, lr
    4404:	4605      	mov	r5, r0
    4406:	9113      	str	r1, [sp, #76]	; 0x4c
  // Serial.printf("DGFX_char: %c (%d,%d) : %u %u %u %u %d %d %x %x %d\n", c,
  // cursor_x, cursor_y, w, h,
  //			glyph->xAdvance, gfxFont->yAdvance, xo, yo, textcolor,
  //textbgcolor, _use_fbtft);Serial.flush();

  if (textcolor == textbgcolor) {
    4408:	f8b0 004a 	ldrh.w	r0, [r0, #74]	; 0x4a
    440c:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
  }

  // Lets do the work to output the font character
  uint8_t *bitmap = gfxFont->bitmap;

  uint16_t bo = glyph->bitmapOffset;
    4410:	f836 4034 	ldrh.w	r4, [r6, r4, lsl #3]
    4414:	9407      	str	r4, [sp, #28]
  // Serial.printf("DGFX_char: %c (%d,%d) : %u %u %u %u %d %d %x %x %d\n", c,
  // cursor_x, cursor_y, w, h,
  //			glyph->xAdvance, gfxFont->yAdvance, xo, yo, textcolor,
  //textbgcolor, _use_fbtft);Serial.flush();

  if (textcolor == textbgcolor) {
    4416:	4288      	cmp	r0, r1
    cursor_x = 0;
    cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
  }

  // Lets do the work to output the font character
  uint8_t *bitmap = gfxFont->bitmap;
    4418:	681c      	ldr	r4, [r3, #0]
    441a:	9404      	str	r4, [sp, #16]
  // Serial.printf("DGFX_char: %c (%d,%d) : %u %u %u %u %d %d %x %x %d\n", c,
  // cursor_x, cursor_y, w, h,
  //			glyph->xAdvance, gfxFont->yAdvance, xo, yo, textcolor,
  //textbgcolor, _use_fbtft);Serial.flush();

  if (textcolor == textbgcolor) {
    441c:	f000 8147 	beq.w	46ae <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x322>

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    4420:	9910      	ldr	r1, [sp, #64]	; 0x40
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    4422:	8e68      	ldrh	r0, [r5, #50]	; 0x32
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    4424:	790e      	ldrb	r6, [r1, #4]
    if (glyph->xAdvance < (xo + w))
    4426:	990d      	ldr	r1, [sp, #52]	; 0x34

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    4428:	f895 4058 	ldrb.w	r4, [r5, #88]	; 0x58
    if (glyph->xAdvance < (xo + w))
    442c:	4459      	add	r1, fp
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    442e:	4410      	add	r0, r2
    4430:	b280      	uxth	r0, r0
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
    4432:	428e      	cmp	r6, r1

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    4434:	fb06 fe04 	mul.w	lr, r6, r4
    4438:	bfac      	ite	ge
    443a:	eb00 010e 	addge.w	r1, r0, lr
    if (glyph->xAdvance < (xo + w))
      x_end =
          x_offset_cursor +
          ((xo + w) * textsize_x); // BUGBUG Overlflows into next char position.
    443e:	fb01 0104 	mlalt	r1, r1, r4, r0
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    4442:	b207      	sxth	r7, r0
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
      x_end =
          x_offset_cursor +
          ((xo + w) * textsize_x); // BUGBUG Overlflows into next char position.
    int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
    4444:	fb0b 0004 	mla	r0, fp, r4, r0
    4448:	b200      	sxth	r0, r0
    int16_t x;

    if (xo < 0) {
    444a:	f1bb 0f00 	cmp.w	fp, #0
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    444e:	9702      	str	r7, [sp, #8]
    int16_t x_start = x_offset_cursor; // I am assuming no negative x offsets.
    int16_t x_end = x_offset_cursor + (glyph->xAdvance * textsize_x);
    if (glyph->xAdvance < (xo + w))
      x_end =
          x_offset_cursor +
          ((xo + w) * textsize_x); // BUGBUG Overlflows into next char position.
    4450:	b209      	sxth	r1, r1
    int16_t x_left_fill = x_offset_cursor + xo * textsize_x;
    4452:	9008      	str	r0, [sp, #32]
    int16_t x;

    if (xo < 0) {
    4454:	f2c0 83a6 	blt.w	4ba4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x818>
    // Lets calculate bounding rectangle that we will update
    // We need to offset by the origin.

    // We are going direct so do some offsets and clipping
    int16_t x_offset_cursor =
        cursor_x + _originx;           // This is where the offseted cursor is.
    4458:	9802      	ldr	r0, [sp, #8]
    445a:	9005      	str	r0, [sp, #20]
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
    445c:	f9b5 903a 	ldrsh.w	r9, [r5, #58]	; 0x3a
    4460:	9805      	ldr	r0, [sp, #20]
    4462:	4548      	cmp	r0, r9
    4464:	f280 811e 	bge.w	46a4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x318>
      x_start += xo * textsize_x;
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
    4468:	f9b5 0034 	ldrsh.w	r0, [r5, #52]	; 0x34
    446c:	f895 8059 	ldrb.w	r8, [r5, #89]	; 0x59
    4470:	f9b5 4026 	ldrsh.w	r4, [r5, #38]	; 0x26
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    4474:	7a9f      	ldrb	r7, [r3, #10]
      x_start += xo * textsize_x;
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
    4476:	f995 a078 	ldrsb.w	sl, [r5, #120]	; 0x78
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
        (y_start >= _displayclipy2) || // Clip bottom
    447a:	f9b5 c03c 	ldrsh.w	ip, [r5, #60]	; 0x3c
      x_left_fill = 0; // Don't need to fill anything here...
    }

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    447e:	4404      	add	r4, r0
    4480:	fa1f f388 	uxth.w	r3, r8
    4484:	fb17 f608 	smulbb	r6, r7, r8
    4488:	fb0a 4003 	mla	r0, sl, r3, r4
    448c:	eb00 0056 	add.w	r0, r0, r6, lsr #1
    4490:	b286      	uxth	r6, r0
    4492:	fa0f fb86 	sxth.w	fp, r6
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
    4496:	45e3      	cmp	fp, ip
    4498:	f280 8104 	bge.w	46a4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x318>
        (y_start >= _displayclipy2) || // Clip bottom
    449c:	f9b5 0036 	ldrsh.w	r0, [r5, #54]	; 0x36
    44a0:	4288      	cmp	r0, r1
    44a2:	f300 80ff 	bgt.w	46a4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x318>

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    int16_t y_end =
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    44a6:	fb07 6303 	mla	r3, r7, r3, r6
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
        (y_start >= _displayclipy2) || // Clip bottom
        (x_end < _displayclipx1) ||    // Clip left
    44aa:	f9b5 0038 	ldrsh.w	r0, [r5, #56]	; 0x38

    int16_t y_start =
        cursor_y + _originy + (_gfxFont_min_yOffset * textsize_y) +
        gfxFont->yAdvance * textsize_y / 2; // UP to most negative value.
    int16_t y_end =
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    44ae:	b21b      	sxth	r3, r3
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;

    // See if anything is within clip rectangle, if not bail
    if ((x_start >= _displayclipx2) || // Clip right
        (y_start >= _displayclipy2) || // Clip bottom
        (x_end < _displayclipx1) ||    // Clip left
    44b0:	4298      	cmp	r0, r3
    44b2:	f300 80f7 	bgt.w	46a4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x318>
    44b6:	4563      	cmp	r3, ip
      y_end = _displayclipy2;
    if (x_end > _displayclipx2)
      x_end = _displayclipx2;

    // If we get here and
    if (_gfx_last_cursor_y != (cursor_y + _originy))
    44b8:	f9b5 2082 	ldrsh.w	r2, [r5, #130]	; 0x82
    44bc:	bfa8      	it	ge
    44be:	4663      	movge	r3, ip
    44c0:	4549      	cmp	r1, r9
    44c2:	9311      	str	r3, [sp, #68]	; 0x44
    44c4:	460b      	mov	r3, r1
    44c6:	bfa8      	it	ge
    44c8:	464b      	movge	r3, r9
    44ca:	42a2      	cmp	r2, r4
    44cc:	9306      	str	r3, [sp, #24]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    44ce:	68ac      	ldr	r4, [r5, #8]
    44d0:	6969      	ldr	r1, [r5, #20]
      _gfx_last_char_x_write = 0;
    44d2:	bf1c      	itt	ne
    44d4:	2300      	movne	r3, #0
    44d6:	f8a5 3084 	strhne.w	r3, [r5, #132]	; 0x84
    44da:	2201      	movs	r2, #1
    44dc:	2300      	movs	r3, #0
    44de:	a815      	add	r0, sp, #84	; 0x54
    44e0:	f7fe f858 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>
    44e4:	4620      	mov	r0, r4
    44e6:	9915      	ldr	r1, [sp, #84]	; 0x54
    44e8:	f7fe f886 	bl	25f8 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    44ec:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    44f0:	b12b      	cbz	r3, 44fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x172>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    44f2:	781a      	ldrb	r2, [r3, #0]
    44f4:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
    44f8:	ea22 0201 	bic.w	r2, r2, r1
    44fc:	701a      	strb	r2, [r3, #0]
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    44fe:	f9b5 9036 	ldrsh.w	r9, [r5, #54]	; 0x36
    4502:	9b05      	ldr	r3, [sp, #20]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4504:	f895 208e 	ldrb.w	r2, [r5, #142]	; 0x8e
              (y_start >= _displayclipy1) ? y_start : _displayclipy1, x_end - 1,
    4508:	f9b5 4038 	ldrsh.w	r4, [r5, #56]	; 0x38
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    450c:	69e9      	ldr	r1, [r5, #28]
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    450e:	454b      	cmp	r3, r9
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    int16_t y = y_start;
    // int8_t y_top_fill = (yo - _gfxFont_min_yOffset) * textsize_y;	 // both
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;
    4510:	9b03      	ldr	r3, [sp, #12]
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    4512:	bfa8      	it	ge
    4514:	f8bd 9014 	ldrhge.w	r9, [sp, #20]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4518:	ea4f 4202 	mov.w	r2, r2, lsl #16
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    int16_t y = y_start;
    // int8_t y_top_fill = (yo - _gfxFont_min_yOffset) * textsize_y;	 // both
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;
    451c:	eba3 0757 	sub.w	r7, r3, r7, lsr #1
    4520:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    4524:	f042 022a 	orr.w	r2, r2, #42	; 0x2a
    4528:	ebca 0307 	rsb	r3, sl, r7
    452c:	634a      	str	r2, [r1, #52]	; 0x34
    452e:	fb13 f308 	smulbb	r3, r3, r8
      // Serial.printf("    SPI (%d %d) (%d %d)\n", x_start, y_start, x_end,
      // y_end);Serial.flush();
      // compute the actual region we will output given
      beginSPITransaction(_SPI_CLOCK);

      setAddr((x_start >= _displayclipx1) ? x_start : _displayclipx1,
    4532:	bfb8      	it	lt
    4534:	fa1f f989 	uxthlt.w	r9, r9
    waitFifoNotFull();
    4538:	4628      	mov	r0, r5
    453a:	45a3      	cmp	fp, r4
    453c:	bfb4      	ite	lt
    453e:	b2a4      	uxthlt	r4, r4
    4540:	4634      	movge	r4, r6
        y_start + gfxFont->yAdvance * textsize_y; // how far we will update
    int16_t y = y_start;
    // int8_t y_top_fill = (yo - _gfxFont_min_yOffset) * textsize_y;	 // both
    // negative like -10 - -16 = 6...
    int8_t y_top_fill =
        (yo - gfxFont->yAdvance / 2 - _gfxFont_min_yOffset) * textsize_y;
    4542:	b2df      	uxtb	r7, r3
    4544:	f7fe fc44 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4548:	f895 208d 	ldrb.w	r2, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    454c:	69eb      	ldr	r3, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    454e:	ea49 4202 	orr.w	r2, r9, r2, lsl #16
    4552:	f042 4210 	orr.w	r2, r2, #2415919104	; 0x90000000
    4556:	635a      	str	r2, [r3, #52]	; 0x34
    waitFifoNotFull();
    4558:	4628      	mov	r0, r5
    455a:	f7fe fc39 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    455e:	9b06      	ldr	r3, [sp, #24]
    4560:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4564:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4566:	3b01      	subs	r3, #1
    4568:	b29b      	uxth	r3, r3
    456a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    456e:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4572:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4574:	4628      	mov	r0, r5
    4576:	f7fe fc2b 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    457a:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    457e:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4580:	041b      	lsls	r3, r3, #16
    4582:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4586:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    458a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    458c:	4628      	mov	r0, r5
    458e:	f7fe fc1f 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4592:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4596:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4598:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    459c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    45a0:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    45a2:	4628      	mov	r0, r5
    45a4:	f7fe fc14 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    45a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
    45aa:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    45ae:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    45b0:	3b01      	subs	r3, #1
    45b2:	b29b      	uxth	r3, r3
    45b4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    45b8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    45bc:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    45be:	4628      	mov	r0, r5
    45c0:	f7fe fc06 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    45c4:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    45c8:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    45ca:	041b      	lsls	r3, r3, #16
    45cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    45d0:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    45d4:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    45d6:	4628      	mov	r0, r5
      //		(y_start >= _displayclipy1) ? y_start : _displayclipy1,
      //		x_end  - 1,  y_end - 1);
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
    45d8:	1e7c      	subs	r4, r7, #1
    45da:	f7fe fbf9 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    45de:	b2e4      	uxtb	r4, r4
    45e0:	2f00      	cmp	r7, #0
    45e2:	f000 8161 	beq.w	48a8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x51c>
    45e6:	b2a4      	uxth	r4, r4
    45e8:	1c77      	adds	r7, r6, #1
    45ea:	4427      	add	r7, r4
    45ec:	f8dd a014 	ldr.w	sl, [sp, #20]
    45f0:	f8dd 9018 	ldr.w	r9, [sp, #24]
    45f4:	b23f      	sxth	r7, r7
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
    45f6:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
    45fa:	455b      	cmp	r3, fp
    45fc:	f300 8149 	bgt.w	4892 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x506>
    4600:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
    4604:	455b      	cmp	r3, fp
    4606:	f340 8144 	ble.w	4892 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x506>
          for (int16_t xx = x_start; xx < x_end; xx++) {
    460a:	45ca      	cmp	sl, r9
    460c:	f280 8141 	bge.w	4892 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x506>
    4610:	46d0      	mov	r8, sl
    4612:	e013      	b.n	463c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2b0>
            if (xx >= _displayclipx1) {
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    4614:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4618:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    461c:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    461e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4622:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4626:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4628:	4628      	mov	r0, r5
    462a:	f7fe fbd1 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    462e:	f108 0801 	add.w	r8, r8, #1
    4632:	fa0f f888 	sxth.w	r8, r8
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
    4636:	45c8      	cmp	r8, r9
    4638:	f280 812b 	bge.w	4892 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x506>
            if (xx >= _displayclipx1) {
    463c:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
    4640:	4543      	cmp	r3, r8
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    4642:	4641      	mov	r1, r8
    4644:	465a      	mov	r2, fp
    4646:	4628      	mov	r0, r5
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
        if ((y >= _displayclipy1) && (y < _displayclipy2)) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
            if (xx >= _displayclipx1) {
    4648:	dcf1      	bgt.n	462e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2a2>
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    464a:	f7fe fafb 	bl	2c44 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    464e:	2800      	cmp	r0, #0
    4650:	d1e0      	bne.n	4614 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x288>
    4652:	9b02      	ldr	r3, [sp, #8]
    4654:	4543      	cmp	r3, r8
    4656:	bfcc      	ite	gt
    4658:	f8b5 3088 	ldrhgt.w	r3, [r5, #136]	; 0x88
    465c:	f8b5 304c 	ldrhle.w	r3, [r5, #76]	; 0x4c
    4660:	e7da      	b.n	4618 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x28c>
    4662:	9b02      	ldr	r3, [sp, #8]
    // So the below is not perfect as we may overwrite a small portion
    // of a letter with the next one, when we blank out...
    // But: I prefer to let each of us decide if the limitations are
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
    4664:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4666:	3301      	adds	r3, #1
    4668:	9302      	str	r3, [sp, #8]
    466a:	b2db      	uxtb	r3, r3
    466c:	f10a 0a01 	add.w	sl, sl, #1
    4670:	429a      	cmp	r2, r3
    4672:	fa1f fa8a 	uxth.w	sl, sl
    4676:	d827      	bhi.n	46c8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x33c>
    4678:	fa1f f28e 	uxth.w	r2, lr
        w_left -= xCount;
        bit += xCount;
        bits <<= xCount;
      }
    }
    _gfx_last_char_x_write = 0;
    467c:	2300      	movs	r3, #0
    467e:	f8a5 3084 	strh.w	r3, [r5, #132]	; 0x84
    _gfx_last_char_x_write = x_end;
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
  }

  cursor_x += glyph->xAdvance * (int16_t)textsize_x;
    4682:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4684:	7919      	ldrb	r1, [r3, #4]
    4686:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
    468a:	fb01 2203 	mla	r2, r1, r3, r2
    468e:	84aa      	strh	r2, [r5, #36]	; 0x24
}
    4690:	b017      	add	sp, #92	; 0x5c
    4692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return;

  GFXglyph *glyph = gfxFont->glyph + (c - first);
  uint8_t w = glyph->width, h = glyph->height;
  // wonder if we should look at xo, yo instead?
  if ((w == 0 || h == 0) && (c != 32))
    4696:	2920      	cmp	r1, #32
    4698:	f43f ae99 	beq.w	43ce <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x42>
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
  }

  cursor_x += glyph->xAdvance * (int16_t)textsize_x;
}
    469c:	b017      	add	sp, #92	; 0x5c
    469e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    46a2:	4770      	bx	lr
        (y_start >= _displayclipy2) || // Clip bottom
        (x_end < _displayclipx1) ||    // Clip left
        (y_end < _displayclipy1))      // Clip top
    {
      // But remember to first update the cursor position
      cursor_x += glyph->xAdvance * (int16_t)textsize_x;
    46a4:	4472      	add	r2, lr
    46a6:	84aa      	strh	r2, [r5, #36]	; 0x24
    _gfx_last_char_textcolor = textcolor;
    _gfx_last_char_textbgcolor = textbgcolor;
  }

  cursor_x += glyph->xAdvance * (int16_t)textsize_x;
}
    46a8:	b017      	add	sp, #92	; 0x5c
    46aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    // So the below is not perfect as we may overwrite a small portion
    // of a letter with the next one, when we blank out...
    // But: I prefer to let each of us decide if the limitations are
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
    46ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    46b0:	2b00      	cmp	r3, #0
    46b2:	d0e3      	beq.n	467c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2f0>
    46b4:	f04f 0900 	mov.w	r9, #0
    46b8:	464f      	mov	r7, r9
    46ba:	464e      	mov	r6, r9
    46bc:	f8cd 9008 	str.w	r9, [sp, #8]
    46c0:	f8bd a00c 	ldrh.w	sl, [sp, #12]
    46c4:	f8dd 901c 	ldr.w	r9, [sp, #28]
      uint8_t w_left = w;
      xx = 0;
      while (w_left) {
    46c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    46ca:	2b00      	cmp	r3, #0
    46cc:	d0c9      	beq.n	4662 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2d6>
    46ce:	461c      	mov	r4, r3
    46d0:	f04f 0800 	mov.w	r8, #0
    46d4:	e01e      	b.n	4714 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x388>
        if (!(bit & 7)) {
          bits = bitmap[bo++];
        }
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
    46d6:	2eff      	cmp	r6, #255	; 0xff
    46d8:	d06a      	beq.n	47b0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x424>
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
    46da:	f006 03f0 	and.w	r3, r6, #240	; 0xf0
    46de:	2bf0      	cmp	r3, #240	; 0xf0
    46e0:	f000 8081 	beq.w	47e6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x45a>
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
    46e4:	f006 03e0 	and.w	r3, r6, #224	; 0xe0
    46e8:	2be0      	cmp	r3, #224	; 0xe0
    46ea:	f000 8097 	beq.w	481c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x490>
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
    46ee:	f006 03c0 	and.w	r3, r6, #192	; 0xc0
    46f2:	2bc0      	cmp	r3, #192	; 0xc0
    46f4:	d041      	beq.n	477a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3ee>
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
          if (bits & 0x80) {
    46f6:	0631      	lsls	r1, r6, #24
    46f8:	d41e      	bmi.n	4738 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x3ac>
    46fa:	2201      	movs	r2, #1
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
    46fc:	4613      	mov	r3, r2
                       textsize_y, textcolor);
            }
          }
        }
        xx += xCount;
        w_left -= xCount;
    46fe:	1ae4      	subs	r4, r4, r3
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
                       textsize_y, textcolor);
            }
          }
        }
        xx += xCount;
    4700:	4498      	add	r8, r3
        w_left -= xCount;
        bit += xCount;
    4702:	441f      	add	r7, r3
        bits <<= xCount;
    4704:	4096      	lsls	r6, r2
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
      uint8_t w_left = w;
      xx = 0;
      while (w_left) {
    4706:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
                       textsize_y, textcolor);
            }
          }
        }
        xx += xCount;
    470a:	fa5f f888 	uxtb.w	r8, r8
        w_left -= xCount;
        bit += xCount;
    470e:	b2ff      	uxtb	r7, r7
        bits <<= xCount;
    4710:	b2f6      	uxtb	r6, r6
    // worth it or not.  If Not you still have the option to not
    // Do transparent mode and instead blank out and blink...
    for (yy = 0; yy < h; yy++) {
      uint8_t w_left = w;
      xx = 0;
      while (w_left) {
    4712:	d0a6      	beq.n	4662 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2d6>
        if (!(bit & 7)) {
    4714:	0778      	lsls	r0, r7, #29
    4716:	d106      	bne.n	4726 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x39a>
          bits = bitmap[bo++];
    4718:	9a04      	ldr	r2, [sp, #16]
    471a:	f109 0301 	add.w	r3, r9, #1
    471e:	f812 6009 	ldrb.w	r6, [r2, r9]
    4722:	fa1f f983 	uxth.w	r9, r3
        }
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
    4726:	2c07      	cmp	r4, #7
    4728:	d8d5      	bhi.n	46d6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x34a>
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
    472a:	2c03      	cmp	r4, #3
    472c:	d8d5      	bhi.n	46da <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x34e>
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
    472e:	d0d9      	beq.n	46e4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x358>
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
    4730:	2c02      	cmp	r4, #2
    4732:	d0dc      	beq.n	46ee <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x362>
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
          if (bits & 0x80) {
    4734:	0631      	lsls	r1, r6, #24
    4736:	d5e0      	bpl.n	46fa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x36e>
            if ((textsize_x == 1) && (textsize_y == 1)) {
    4738:	f8b5 3058 	ldrh.w	r3, [r5, #88]	; 0x58
    473c:	f240 1201 	movw	r2, #257	; 0x101
    4740:	4293      	cmp	r3, r2
    4742:	f000 8087 	beq.w	4854 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x4c8>
              drawPixel(cursor_x + xo + xx, cursor_y + yo + yy, textcolor);
            } else {
              fillRect(cursor_x + (xo + xx) * textsize_x,
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
    4746:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
                       textsize_y, textcolor);
    474a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
          xCount = 1;
          if (bits & 0x80) {
            if ((textsize_x == 1) && (textsize_y == 1)) {
              drawPixel(cursor_x + xo + xx, cursor_y + yo + yy, textcolor);
            } else {
              fillRect(cursor_x + (xo + xx) * textsize_x,
    474c:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
                       cursor_y + (yo + yy) * textsize_y, textsize_x,
                       textsize_y, textcolor);
    4750:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    4754:	9200      	str	r2, [sp, #0]
    4756:	fb12 f20a 	smulbb	r2, r2, sl
    475a:	440a      	add	r2, r1
    475c:	eb0b 0108 	add.w	r1, fp, r8
    4760:	fb01 e103 	mla	r1, r1, r3, lr
    4764:	b212      	sxth	r2, r2
    4766:	9001      	str	r0, [sp, #4]
    4768:	b209      	sxth	r1, r1
    476a:	4628      	mov	r0, r5
    476c:	f7fe fee6 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    4770:	2201      	movs	r2, #1
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
    4772:	4613      	mov	r3, r2
    4774:	f9b5 e024 	ldrsh.w	lr, [r5, #36]	; 0x24
    4778:	e7c1      	b.n	46fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x372>
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
          // Serial.print("2");
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    477a:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
                   textsize_y, textcolor);
    477e:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
          // Serial.print("2");
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
    4780:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    4784:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    4788:	9200      	str	r2, [sp, #0]
    478a:	fb12 f20a 	smulbb	r2, r2, sl
    478e:	440a      	add	r2, r1
    4790:	eb0b 0108 	add.w	r1, fp, r8
    4794:	fb01 e103 	mla	r1, r1, r3, lr
    4798:	b212      	sxth	r2, r2
    479a:	005b      	lsls	r3, r3, #1
    479c:	9001      	str	r0, [sp, #4]
    479e:	b209      	sxth	r1, r1
    47a0:	4628      	mov	r0, r5
    47a2:	f7fe fecb 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    47a6:	2202      	movs	r2, #2
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 2) && ((bits & 0xc0) == 0xc0)) {
          // Serial.print("2");
          xCount = 2;
    47a8:	4613      	mov	r3, r2
    47aa:	f9b5 e024 	ldrsh.w	lr, [r5, #36]	; 0x24
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    47ae:	e7a6      	b.n	46fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x372>
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    47b0:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
                   textsize_y, textcolor);
    47b4:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
          xCount = 8;
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
    47b6:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    47ba:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    47be:	9200      	str	r2, [sp, #0]
    47c0:	fb12 f20a 	smulbb	r2, r2, sl
    47c4:	440a      	add	r2, r1
    47c6:	eb0b 0108 	add.w	r1, fp, r8
    47ca:	fb01 e103 	mla	r1, r1, r3, lr
    47ce:	b212      	sxth	r2, r2
    47d0:	00db      	lsls	r3, r3, #3
    47d2:	9001      	str	r0, [sp, #4]
    47d4:	b209      	sxth	r1, r1
    47d6:	4628      	mov	r0, r5
    47d8:	f7fe feb0 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    47dc:	2208      	movs	r2, #8
          bits = bitmap[bo++];
        }
        // Could try up to 8 bits at time, but start off trying up to 4
        uint8_t xCount;
        if ((w_left >= 8) && ((bits & 0xff) == 0xff)) {
          xCount = 8;
    47de:	4613      	mov	r3, r2
    47e0:	f9b5 e024 	ldrsh.w	lr, [r5, #36]	; 0x24
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    47e4:	e78b      	b.n	46fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x372>
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    47e6:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
                   textsize_y, textcolor);
    47ea:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
          xCount = 4;
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
    47ec:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    47f0:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    47f4:	9200      	str	r2, [sp, #0]
    47f6:	fb12 f20a 	smulbb	r2, r2, sl
    47fa:	440a      	add	r2, r1
    47fc:	eb0b 0108 	add.w	r1, fp, r8
    4800:	fb01 e103 	mla	r1, r1, r3, lr
    4804:	b212      	sxth	r2, r2
    4806:	009b      	lsls	r3, r3, #2
    4808:	9001      	str	r0, [sp, #4]
    480a:	b209      	sxth	r1, r1
    480c:	4628      	mov	r0, r5
    480e:	f7fe fe95 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    4812:	2204      	movs	r2, #4
          // Serial.print("8");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 4) && ((bits & 0xf0) == 0xf0)) {
          xCount = 4;
    4814:	4613      	mov	r3, r2
    4816:	f9b5 e024 	ldrsh.w	lr, [r5, #36]	; 0x24
          // Serial.print("4");
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    481a:	e770      	b.n	46fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x372>
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
    481c:	f895 2059 	ldrb.w	r2, [r5, #89]	; 0x59
                   textsize_y, textcolor);
    4820:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
          // Serial.print("3");
          xCount = 3;
          fillRect(cursor_x + (xo + xx) * textsize_x,
    4822:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    4826:	f8b5 004a 	ldrh.w	r0, [r5, #74]	; 0x4a
    482a:	9200      	str	r2, [sp, #0]
    482c:	fb12 f20a 	smulbb	r2, r2, sl
    4830:	440a      	add	r2, r1
    4832:	eb0b 0108 	add.w	r1, fp, r8
    4836:	fb01 e103 	mla	r1, r1, r3, lr
    483a:	b212      	sxth	r2, r2
    483c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4840:	9001      	str	r0, [sp, #4]
    4842:	b209      	sxth	r1, r1
    4844:	4628      	mov	r0, r5
    4846:	f7fe fe79 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    484a:	2203      	movs	r2, #3
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else if ((w_left >= 3) && ((bits & 0xe0) == 0xe0)) {
          // Serial.print("3");
          xCount = 3;
    484c:	4613      	mov	r3, r2
    484e:	f9b5 e024 	ldrsh.w	lr, [r5, #36]	; 0x24
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
    4852:	e754      	b.n	46fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x372>
                   textsize_y, textcolor);
        } else {
          xCount = 1;
          if (bits & 0x80) {
            if ((textsize_x == 1) && (textsize_y == 1)) {
              drawPixel(cursor_x + xo + xx, cursor_y + yo + yy, textcolor);
    4854:	9803      	ldr	r0, [sp, #12]
    4856:	8cea      	ldrh	r2, [r5, #38]	; 0x26
    4858:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
    485c:	4402      	add	r2, r0
    485e:	9802      	ldr	r0, [sp, #8]
    4860:	eb0e 0108 	add.w	r1, lr, r8
    4864:	4402      	add	r2, r0
    4866:	4459      	add	r1, fp
    4868:	b212      	sxth	r2, r2
    486a:	b209      	sxth	r1, r1
    486c:	4628      	mov	r0, r5
    486e:	f7fe fc47 	bl	3100 <ILI9341_t3n::drawPixel(short, short, unsigned short)>
    4872:	2201      	movs	r2, #1
          xCount = 2;
          fillRect(cursor_x + (xo + xx) * textsize_x,
                   cursor_y + (yo + yy) * textsize_y, xCount * textsize_x,
                   textsize_y, textcolor);
        } else {
          xCount = 1;
    4874:	4613      	mov	r3, r2
    4876:	f9b5 e024 	ldrsh.w	lr, [r5, #36]	; 0x24
    487a:	e740      	b.n	46fe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x372>

  int16_t xo = glyph->xOffset; // sic
  int16_t yo = glyph->yOffset + gfxFont->yAdvance / 2;

  if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    cursor_x = 0;
    487c:	2200      	movs	r2, #0
    487e:	8482      	strh	r2, [r0, #36]	; 0x24
    cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    4880:	7a9f      	ldrb	r7, [r3, #10]
    4882:	f890 e059 	ldrb.w	lr, [r0, #89]	; 0x59
    4886:	8cc5      	ldrh	r5, [r0, #38]	; 0x26
    4888:	fb0e 5507 	mla	r5, lr, r7, r5
    488c:	84c5      	strh	r5, [r0, #38]	; 0x26
    488e:	4696      	mov	lr, r2
    4890:	e5b8      	b.n	4404 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x78>
    4892:	f10b 0b01 	add.w	fp, fp, #1
    4896:	fa0f fb8b 	sxth.w	fp, fp
      //		(y_start >= _displayclipy1) ? y_start : _displayclipy1,
      //		x_end  - 1,  y_end - 1);
      // First lets fill in the top parts above the actual rectangle...
      // Serial.printf("    y_top_fill %d x_left_fill %d\n", y_top_fill,
      // x_left_fill);
      while (y_top_fill--) {
    489a:	455f      	cmp	r7, fp
    489c:	f47f aeab 	bne.w	45f6 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x26a>
    48a0:	1933      	adds	r3, r6, r4
    48a2:	3301      	adds	r3, #1
    48a4:	fa0f fb83 	sxth.w	fp, r3
        }
        y++;
      }
      // Serial.println("    After top fill"); Serial.flush();
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    48a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    48aa:	2b00      	cmp	r3, #0
    48ac:	f000 80e8 	beq.w	4a80 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6f4>
    48b0:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
    48b4:	455b      	cmp	r3, fp
    48b6:	f340 80e3 	ble.w	4a80 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6f4>
    48ba:	9a05      	ldr	r2, [sp, #20]
    48bc:	9908      	ldr	r1, [sp, #32]
    48be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    48c2:	428a      	cmp	r2, r1
    48c4:	bfb8      	it	lt
    48c6:	460a      	movlt	r2, r1
    48c8:	2100      	movs	r1, #0
    48ca:	4608      	mov	r0, r1
    48cc:	9112      	str	r1, [sp, #72]	; 0x48
    48ce:	b212      	sxth	r2, r2
    48d0:	f895 1059 	ldrb.w	r1, [r5, #89]	; 0x59
    48d4:	920f      	str	r2, [sp, #60]	; 0x3c
    48d6:	9009      	str	r0, [sp, #36]	; 0x24
    48d8:	900a      	str	r0, [sp, #40]	; 0x28
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    48da:	2900      	cmp	r1, #0
    48dc:	f000 814c 	beq.w	4b78 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x7ec>
    48e0:	455b      	cmp	r3, fp
    48e2:	f340 80cd 	ble.w	4a80 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6f4>
    48e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    48e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
    48ea:	4413      	add	r3, r2
    48ec:	b2db      	uxtb	r3, r3
    48ee:	9303      	str	r3, [sp, #12]
          // need to repeat the stuff for each row...
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
    48f0:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
    48f4:	455b      	cmp	r3, fp
    48f6:	f300 80f5 	bgt.w	4ae4 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x758>
            while (x < x_left_fill) {
    48fa:	9b05      	ldr	r3, [sp, #20]
    48fc:	9a08      	ldr	r2, [sp, #32]
    48fe:	4293      	cmp	r3, r2
    4900:	da25      	bge.n	494e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5c2>
    4902:	9c05      	ldr	r4, [sp, #20]
    4904:	9e08      	ldr	r6, [sp, #32]
    4906:	e010      	b.n	492a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x59e>
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                // Don't need to check if we are in previous char as in this
                // case x_left_fill is set to 0...
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    4908:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    490c:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4910:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4912:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4916:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    491a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    491c:	4628      	mov	r0, r5
    491e:	f7fe fa57 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    4922:	3401      	adds	r4, #1
    4924:	b224      	sxth	r4, r4
          bo = bo_save;
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
            while (x < x_left_fill) {
    4926:	42a6      	cmp	r6, r4
    4928:	dd11      	ble.n	494e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5c2>
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    492a:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
    492e:	42a3      	cmp	r3, r4
    4930:	dcf7      	bgt.n	4922 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x596>
    4932:	f9b5 303a 	ldrsh.w	r3, [r5, #58]	; 0x3a
    4936:	42a3      	cmp	r3, r4
                // Don't need to check if we are in previous char as in this
                // case x_left_fill is set to 0...
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    4938:	4621      	mov	r1, r4
    493a:	465a      	mov	r2, fp
    493c:	4628      	mov	r0, r5
          bit = bit_save;
          bits = bits_save;
          x = x_start;
          if (y >= _displayclipy1) {
            while (x < x_left_fill) {
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    493e:	ddf0      	ble.n	4922 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x596>
                // Don't need to check if we are in previous char as in this
                // case x_left_fill is set to 0...
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    4940:	f7fe f980 	bl	2c44 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    4944:	2800      	cmp	r0, #0
    4946:	d1df      	bne.n	4908 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x57c>
    4948:	f8b5 304c 	ldrh.w	r3, [r5, #76]	; 0x4c
    494c:	e7de      	b.n	490c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x580>
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    494e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4950:	2b00      	cmp	r3, #0
    4952:	f000 811f 	beq.w	4b94 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x808>
    4956:	9b03      	ldr	r3, [sp, #12]
    4958:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
    495c:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    4960:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4962:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4964:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4968:	930c      	str	r3, [sp, #48]	; 0x30
              if (!(bit++ & 7)) {
    496a:	1c57      	adds	r7, r2, #1
    496c:	0752      	lsls	r2, r2, #29
    496e:	b2ff      	uxtb	r7, r7
    4970:	d106      	bne.n	4980 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5f4>
                bits = bitmap[bo++];
    4972:	9b04      	ldr	r3, [sp, #16]
    4974:	f109 0201 	add.w	r2, r9, #1
    4978:	f813 6009 	ldrb.w	r6, [r3, r9]
    497c:	fa1f f982 	uxth.w	r9, r2
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
    4980:	b3a9      	cbz	r1, 49ee <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x662>
    4982:	4654      	mov	r4, sl
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
                  if (bits & 0x80)
    4984:	fa4f f886 	sxtb.w	r8, r6
    4988:	e016      	b.n	49b8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x62c>
                    writedata16_cont(textcolor);
                  else
                    writedata16_cont(gfxFontLastCharPosFG(x, y)
    498a:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    498e:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4992:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4994:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4998:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    499c:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    499e:	4628      	mov	r0, r5
    49a0:	f7fe fa16 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    49a4:	f895 1058 	ldrb.w	r1, [r5, #88]	; 0x58
    49a8:	3401      	adds	r4, #1
    49aa:	b2a4      	uxth	r4, r4
            }
            for (xx = 0; xx < w; xx++) {
              if (!(bit++ & 7)) {
                bits = bitmap[bo++];
              }
              for (uint8_t xts = 0; xts < textsize_x; xts++) {
    49ac:	ebca 0304 	rsb	r3, sl, r4
    49b0:	b2db      	uxtb	r3, r3
    49b2:	4299      	cmp	r1, r3
    49b4:	b224      	sxth	r4, r4
    49b6:	d919      	bls.n	49ec <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x660>
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    49b8:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
    49bc:	42a3      	cmp	r3, r4
    49be:	dcf3      	bgt.n	49a8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x61c>
    49c0:	f9b5 303a 	ldrsh.w	r3, [r5, #58]	; 0x3a
    49c4:	42a3      	cmp	r3, r4
    49c6:	ddef      	ble.n	49a8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x61c>
                  if (bits & 0x80)
    49c8:	f1b8 0f00 	cmp.w	r8, #0
    49cc:	db40      	blt.n	4a50 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6c4>
                    writedata16_cont(textcolor);
                  else
                    writedata16_cont(gfxFontLastCharPosFG(x, y)
    49ce:	465a      	mov	r2, fp
    49d0:	4621      	mov	r1, r4
    49d2:	4628      	mov	r0, r5
    49d4:	f7fe f936 	bl	2c44 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    49d8:	2800      	cmp	r0, #0
    49da:	d1d6      	bne.n	498a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5fe>
    49dc:	9b02      	ldr	r3, [sp, #8]
    49de:	42a3      	cmp	r3, r4
    49e0:	bfcc      	ite	gt
    49e2:	f8b5 3088 	ldrhgt.w	r3, [r5, #136]	; 0x88
    49e6:	f8b5 304c 	ldrhle.w	r3, [r5, #76]	; 0x4c
    49ea:	e7d0      	b.n	498e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x602>
    49ec:	46a2      	mov	sl, r4
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    49ee:	9b03      	ldr	r3, [sp, #12]
                                               ? _gfx_last_char_textbgcolor
                                               : textbgcolor);
                }
                x++; // remember our logical position...
              }
              bits <<= 1;
    49f0:	0076      	lsls	r6, r6, #1
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    49f2:	429f      	cmp	r7, r3
    49f4:	463a      	mov	r2, r7
                                               ? _gfx_last_char_textbgcolor
                                               : textbgcolor);
                }
                x++; // remember our logical position...
              }
              bits <<= 1;
    49f6:	b2f6      	uxtb	r6, r6
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    49f8:	d1b7      	bne.n	496a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x5de>
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x < x_end) {
    49fa:	9b06      	ldr	r3, [sp, #24]
    49fc:	459a      	cmp	sl, r3
    49fe:	da2c      	bge.n	4a5a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6ce>
    4a00:	9f02      	ldr	r7, [sp, #8]
    4a02:	9c06      	ldr	r4, [sp, #24]
    4a04:	e012      	b.n	4a2c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6a0>
              if (x >= _displayclipx1) {
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    4a06:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4a0a:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4a0e:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4a10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4a14:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4a18:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4a1a:	4628      	mov	r0, r5
    4a1c:	f7fe f9d8 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    4a20:	f10a 0a01 	add.w	sl, sl, #1
    4a24:	fa0f fa8a 	sxth.w	sl, sl
                x++; // remember our logical position...
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x < x_end) {
    4a28:	45a2      	cmp	sl, r4
    4a2a:	da16      	bge.n	4a5a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6ce>
              if (x >= _displayclipx1) {
    4a2c:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
    4a30:	4553      	cmp	r3, sl
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    4a32:	4651      	mov	r1, sl
    4a34:	465a      	mov	r2, fp
    4a36:	4628      	mov	r0, r5
              }
              bits <<= 1;
            }
            // Fill in any additional bg colors to right of our output
            while (x < x_end) {
              if (x >= _displayclipx1) {
    4a38:	dcf2      	bgt.n	4a20 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x694>
                writedata16_cont(gfxFontLastCharPosFG(x, y)
    4a3a:	f7fe f903 	bl	2c44 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    4a3e:	2800      	cmp	r0, #0
    4a40:	d1e1      	bne.n	4a06 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x67a>
    4a42:	4557      	cmp	r7, sl
    4a44:	bfcc      	ite	gt
    4a46:	f8b5 3088 	ldrhgt.w	r3, [r5, #136]	; 0x88
    4a4a:	f8b5 304c 	ldrhle.w	r3, [r5, #76]	; 0x4c
    4a4e:	e7dc      	b.n	4a0a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x67e>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4a50:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    4a54:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
    4a58:	e79b      	b.n	4992 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x606>
    4a5a:	f895 1059 	ldrb.w	r1, [r5, #89]	; 0x59
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
        uint16_t bo_save = bo;
        uint8_t bit_save = bit;
        uint8_t bits_save = bits;
        for (uint8_t yts = 0; (yts < textsize_y) && (y < _displayclipy2);
    4a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    4a60:	f10b 0b01 	add.w	fp, fp, #1
    4a64:	fa1f fb8b 	uxth.w	fp, fp
    4a68:	ebc3 030b 	rsb	r3, r3, fp
    4a6c:	b2db      	uxtb	r3, r3
    4a6e:	4299      	cmp	r1, r3
    4a70:	fa0f fb8b 	sxth.w	fp, fp
    4a74:	d979      	bls.n	4b6a <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x7de>
    4a76:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
    4a7a:	455b      	cmp	r3, fp
    4a7c:	f73f af38 	bgt.w	48f0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x564>
          y++; // remember which row we just output
        }
      }
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
    4a80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4a82:	455b      	cmp	r3, fp
    4a84:	dd3b      	ble.n	4afe <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x772>
    4a86:	9f05      	ldr	r7, [sp, #20]
    4a88:	f8dd 8008 	ldr.w	r8, [sp, #8]
    4a8c:	9e06      	ldr	r6, [sp, #24]
        if (y >= _displayclipy1) {
    4a8e:	f9b5 3038 	ldrsh.w	r3, [r5, #56]	; 0x38
    4a92:	455b      	cmp	r3, fp
    4a94:	dc2c      	bgt.n	4af0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x764>
          for (int16_t xx = x_start; xx < x_end; xx++) {
    4a96:	42b7      	cmp	r7, r6
    4a98:	da2a      	bge.n	4af0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x764>
    4a9a:	463c      	mov	r4, r7
    4a9c:	e010      	b.n	4ac0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x734>
            if (xx >= _displayclipx1) {
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    4a9e:	f8b5 3086 	ldrh.w	r3, [r5, #134]	; 0x86
    4aa2:	f895 108d 	ldrb.w	r1, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4aa6:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4aa8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4aac:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4ab0:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4ab2:	4628      	mov	r0, r5
    4ab4:	f7fe f98c 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    4ab8:	3401      	adds	r4, #1
    4aba:	b224      	sxth	r4, r4
      }
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
        if (y >= _displayclipy1) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
    4abc:	42b4      	cmp	r4, r6
    4abe:	da17      	bge.n	4af0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x764>
            if (xx >= _displayclipx1) {
    4ac0:	f9b5 3036 	ldrsh.w	r3, [r5, #54]	; 0x36
    4ac4:	42a3      	cmp	r3, r4
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    4ac6:	4621      	mov	r1, r4
    4ac8:	465a      	mov	r2, fp
    4aca:	4628      	mov	r0, r5
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
        if (y >= _displayclipy1) {
          for (int16_t xx = x_start; xx < x_end; xx++) {
            if (xx >= _displayclipx1) {
    4acc:	dcf4      	bgt.n	4ab8 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x72c>
              writedata16_cont(gfxFontLastCharPosFG(xx, y)
    4ace:	f7fe f8b9 	bl	2c44 <ILI9341_t3n::gfxFontLastCharPosFG(short, short)>
    4ad2:	2800      	cmp	r0, #0
    4ad4:	d1e3      	bne.n	4a9e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x712>
    4ad6:	45a0      	cmp	r8, r4
    4ad8:	bfcc      	ite	gt
    4ada:	f8b5 3088 	ldrhgt.w	r3, [r5, #136]	; 0x88
    4ade:	f8b5 304c 	ldrhle.w	r3, [r5, #76]	; 0x4c
    4ae2:	e7de      	b.n	4aa2 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x716>
    4ae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4ae6:	930c      	str	r3, [sp, #48]	; 0x30
    4ae8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4aea:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4aee:	e7b6      	b.n	4a5e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6d2>
    4af0:	f10b 0b01 	add.w	fp, fp, #1
          y++; // remember which row we just output
        }
      }
      // And output any more rows below us...
      // Serial.println("    Bottom fill"); Serial.flush();
      while (y < y_end) {
    4af4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    4af6:	fa0f fb8b 	sxth.w	fp, fp
    4afa:	455b      	cmp	r3, fp
    4afc:	dcc7      	bgt.n	4a8e <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x702>
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4afe:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    4b02:	69ea      	ldr	r2, [r5, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4b04:	041b      	lsls	r3, r3, #16
    4b06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    4b0a:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    4b0c:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    4b0e:	4628      	mov	r0, r5
    4b10:	f7fe fade 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    4b14:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    4b18:	b123      	cbz	r3, 4b24 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x798>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    4b1a:	7819      	ldrb	r1, [r3, #0]
    4b1c:	f895 2098 	ldrb.w	r2, [r5, #152]	; 0x98
    4b20:	430a      	orrs	r2, r1
    4b22:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    4b24:	68a8      	ldr	r0, [r5, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    4b26:	7ac3      	ldrb	r3, [r0, #11]
    4b28:	b133      	cbz	r3, 4b38 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x7ac>
			if (interruptMasksUsed & 0x01) {
    4b2a:	07db      	lsls	r3, r3, #31
    4b2c:	d502      	bpl.n	4b34 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x7a8>
				NVIC_ISER0 = interruptSave[0];
    4b2e:	4b20      	ldr	r3, [pc, #128]	; (4bb0 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x824>)
    4b30:	6982      	ldr	r2, [r0, #24]
    4b32:	601a      	str	r2, [r3, #0]
    4b34:	f7fd fd1c 	bl	2570 <SPIClass::endTransaction() [clone .part.3]>
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    _gfx_last_cursor_y = cursor_y + _originy;
    4b38:	8ce8      	ldrh	r0, [r5, #38]	; 0x26
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    4b3a:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    4b3c:	8e69      	ldrh	r1, [r5, #50]	; 0x32
    _gfx_last_cursor_y = cursor_y + _originy;
    4b3e:	8eab      	ldrh	r3, [r5, #52]	; 0x34
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    4b40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    4b42:	67ec      	str	r4, [r5, #124]	; 0x7c
    _gfx_last_cursor_x = cursor_x + _originx;
    _gfx_last_cursor_y = cursor_y + _originy;
    4b44:	4403      	add	r3, r0
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    4b46:	4411      	add	r1, r2
    _gfx_last_cursor_y = cursor_y + _originy;
    _gfx_last_char_x_write = x_end;
    _gfx_last_char_textcolor = textcolor;
    4b48:	f8b5 404a 	ldrh.w	r4, [r5, #74]	; 0x4a
    _gfx_last_char_textbgcolor = textbgcolor;
    4b4c:	f8b5 004c 	ldrh.w	r0, [r5, #76]	; 0x4c
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    _gfx_last_cursor_y = cursor_y + _originy;
    _gfx_last_char_x_write = x_end;
    4b50:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    4b54:	f8a5 6084 	strh.w	r6, [r5, #132]	; 0x84
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
    // Save away info about this last char
    _gfx_c_last = c;
    _gfx_last_cursor_x = cursor_x + _originx;
    4b58:	f8a5 1080 	strh.w	r1, [r5, #128]	; 0x80
    _gfx_last_cursor_y = cursor_y + _originy;
    4b5c:	f8a5 3082 	strh.w	r3, [r5, #130]	; 0x82
    _gfx_last_char_x_write = x_end;
    _gfx_last_char_textcolor = textcolor;
    4b60:	f8a5 4086 	strh.w	r4, [r5, #134]	; 0x86
    _gfx_last_char_textbgcolor = textbgcolor;
    4b64:	f8a5 0088 	strh.w	r0, [r5, #136]	; 0x88
    4b68:	e58b      	b.n	4682 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x2f6>
    4b6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4b6c:	9309      	str	r3, [sp, #36]	; 0x24
    4b6e:	960a      	str	r6, [sp, #40]	; 0x28
    4b70:	f8cd 901c 	str.w	r9, [sp, #28]
    4b74:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
        }
        y++;
      }
      // Serial.println("    After top fill"); Serial.flush();
      // Now lets output all of the pixels for each of the rows..
      for (yy = 0; (yy < h) && (y < _displayclipy2); yy++) {
    4b78:	9b12      	ldr	r3, [sp, #72]	; 0x48
    4b7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    4b7c:	3301      	adds	r3, #1
    4b7e:	b2db      	uxtb	r3, r3
    4b80:	429a      	cmp	r2, r3
    4b82:	9312      	str	r3, [sp, #72]	; 0x48
    4b84:	f43f af7c 	beq.w	4a80 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6f4>
    4b88:	f9b5 303c 	ldrsh.w	r3, [r5, #60]	; 0x3c
    4b8c:	455b      	cmp	r3, fp
    4b8e:	f73f aea4 	bgt.w	48da <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x54e>
    4b92:	e775      	b.n	4a80 <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x6f4>
                                     ? _gfx_last_char_textcolor
                                     : textbgcolor);
              }
              x++;
            }
            for (xx = 0; xx < w; xx++) {
    4b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4b96:	930c      	str	r3, [sp, #48]	; 0x30
    4b98:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    4b9a:	f8dd 901c 	ldr.w	r9, [sp, #28]
    4b9e:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
    4ba2:	e72a      	b.n	49fa <ILI9341_t3n::drawGFXFontChar(unsigned int)+0x66e>

    if (xo < 0) {
      // Unusual character that goes back into previous character
      // Serial.printf("GFX Font char XO < 0: %c %d %d %u %u %u\n", c, xo, yo,
      // w, h, glyph->xAdvance );
      x_start += xo * textsize_x;
    4ba4:	9808      	ldr	r0, [sp, #32]
    4ba6:	9005      	str	r0, [sp, #20]
      x_left_fill = 0; // Don't need to fill anything here...
    4ba8:	2000      	movs	r0, #0
    4baa:	9008      	str	r0, [sp, #32]
    4bac:	e456      	b.n	445c <ILI9341_t3n::drawGFXFontChar(unsigned int)+0xd0>
    4bae:	bf00      	nop
    4bb0:	e000e100 	.word	0xe000e100

00004bb4 <ILI9341_t3n::drawFontChar(unsigned int)>:
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
  // Mask and return
  return (b >> s) & fontbppmask;
}

void ILI9341_t3n::drawFontChar(unsigned int c) {
    4bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t bitoffset;
  const uint8_t *data;

  // Serial.printf("drawFontChar(%c) %d\n", c, c);

  if (c >= font->index1_first && c <= font->index1_last) {
    4bb8:	6e05      	ldr	r5, [r0, #96]	; 0x60
    4bba:	7bac      	ldrb	r4, [r5, #14]
    4bbc:	428c      	cmp	r4, r1
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
  // Mask and return
  return (b >> s) & fontbppmask;
}

void ILI9341_t3n::drawFontChar(unsigned int c) {
    4bbe:	b095      	sub	sp, #84	; 0x54
  uint32_t bitoffset;
  const uint8_t *data;

  // Serial.printf("drawFontChar(%c) %d\n", c, c);

  if (c >= font->index1_first && c <= font->index1_last) {
    4bc0:	d807      	bhi.n	4bd2 <ILI9341_t3n::drawFontChar(unsigned int)+0x1e>
    4bc2:	7beb      	ldrb	r3, [r5, #15]
    4bc4:	4299      	cmp	r1, r3
    4bc6:	d804      	bhi.n	4bd2 <ILI9341_t3n::drawFontChar(unsigned int)+0x1e>
    bitoffset = c - font->index1_first;
    bitoffset *= font->bits_index;
    4bc8:	7caa      	ldrb	r2, [r5, #18]
  const uint8_t *data;

  // Serial.printf("drawFontChar(%c) %d\n", c, c);

  if (c >= font->index1_first && c <= font->index1_last) {
    bitoffset = c - font->index1_first;
    4bca:	1b09      	subs	r1, r1, r4
    bitoffset *= font->bits_index;
    4bcc:	fb02 f101 	mul.w	r1, r2, r1
    4bd0:	e00f      	b.n	4bf2 <ILI9341_t3n::drawFontChar(unsigned int)+0x3e>
  } else if (c >= font->index2_first && c <= font->index2_last) {
    4bd2:	7c2e      	ldrb	r6, [r5, #16]
    4bd4:	42b1      	cmp	r1, r6
    4bd6:	f0c0 825f 	bcc.w	5098 <ILI9341_t3n::drawFontChar(unsigned int)+0x4e4>
    4bda:	7c6b      	ldrb	r3, [r5, #17]
    4bdc:	4299      	cmp	r1, r3
    4bde:	f200 825b 	bhi.w	5098 <ILI9341_t3n::drawFontChar(unsigned int)+0x4e4>
    bitoffset =
        c - font->index2_first + font->index1_last - font->index1_first + 1;
    4be2:	7beb      	ldrb	r3, [r5, #15]
    bitoffset *= font->bits_index;
    4be4:	7caa      	ldrb	r2, [r5, #18]
  if (c >= font->index1_first && c <= font->index1_last) {
    bitoffset = c - font->index1_first;
    bitoffset *= font->bits_index;
  } else if (c >= font->index2_first && c <= font->index2_last) {
    bitoffset =
        c - font->index2_first + font->index1_last - font->index1_first + 1;
    4be6:	3301      	adds	r3, #1
    4be8:	440b      	add	r3, r1
    4bea:	1b9b      	subs	r3, r3, r6
    4bec:	1b19      	subs	r1, r3, r4
    bitoffset *= font->bits_index;
    4bee:	fb02 f101 	mul.w	r1, r2, r1
    4bf2:	4683      	mov	fp, r0
    return;
  }
  // Serial.printf("  index =  %d\n", fetchbits_unsigned(font->index, bitoffset,
  // font->bits_index));
  data =
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);
    4bf4:	6828      	ldr	r0, [r5, #0]
    4bf6:	f7fd fc93 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
    4bfa:	68ab      	ldr	r3, [r5, #8]
    4bfc:	eb03 0a00 	add.w	sl, r3, r0

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
    4c00:	4650      	mov	r0, sl
    4c02:	2203      	movs	r2, #3
    4c04:	2100      	movs	r1, #0
    4c06:	f7fd fc8b 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (encoding != 0)
    4c0a:	2800      	cmp	r0, #0
    4c0c:	f040 8244 	bne.w	5098 <ILI9341_t3n::drawFontChar(unsigned int)+0x4e4>
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    4c10:	7cec      	ldrb	r4, [r5, #19]
    4c12:	2103      	movs	r1, #3
    4c14:	4622      	mov	r2, r4
    4c16:	4650      	mov	r0, sl
    4c18:	f7fd fc82 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    4c1c:	7d2e      	ldrb	r6, [r5, #20]

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
  bitoffset = font->bits_width + 3;
    4c1e:	3403      	adds	r4, #3
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    4c20:	4621      	mov	r1, r4
    4c22:	4632      	mov	r2, r6
      font->data + fetchbits_unsigned(font->index, bitoffset, font->bits_index);

  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
    4c24:	4680      	mov	r8, r0
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    4c26:	4650      	mov	r0, sl
    4c28:	f7fd fc7a 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  bitoffset += font->bits_height;
  // Serial.printf("  size =   %d,%d\n", width, height);
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
    4c2c:	f895 9015 	ldrb.w	r9, [r5, #21]
  uint32_t encoding = fetchbits_unsigned(data, 0, 3);
  if (encoding != 0)
    return;
  uint32_t width = fetchbits_unsigned(data, 3, font->bits_width);
  bitoffset = font->bits_width + 3;
  uint32_t height = fetchbits_unsigned(data, bitoffset, font->bits_height);
    4c30:	9006      	str	r0, [sp, #24]
  bitoffset += font->bits_height;
    4c32:	4434      	add	r4, r6
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    4c34:	4621      	mov	r1, r4
    4c36:	464a      	mov	r2, r9
    4c38:	4650      	mov	r0, sl
    4c3a:	f7fd fc71 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    4c3e:	2201      	movs	r2, #1
    4c40:	f109 33ff 	add.w	r3, r9, #4294967295
    4c44:	fa02 f303 	lsl.w	r3, r2, r3
    4c48:	4203      	tst	r3, r0
  // Serial.printf("  size =   %d,%d\n", width, height);
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
  bitoffset += font->bits_xoffset;
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
    4c4a:	7daf      	ldrb	r7, [r5, #22]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    4c4c:	bf0c      	ite	eq
    4c4e:	9004      	streq	r0, [sp, #16]
  if (val & (1 << (required - 1))) {
    return (int32_t)val - (1 << required);
    4c50:	fa02 f209 	lslne.w	r2, r2, r9
  bitoffset += font->bits_height;
  // Serial.printf("  size =   %d,%d\n", width, height);
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
  bitoffset += font->bits_xoffset;
    4c54:	eb04 0609 	add.w	r6, r4, r9

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
  if (val & (1 << (required - 1))) {
    return (int32_t)val - (1 << required);
    4c58:	bf18      	it	ne
    4c5a:	1a83      	subne	r3, r0, r2
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    4c5c:	4631      	mov	r1, r6
    4c5e:	463a      	mov	r2, r7
    4c60:	4650      	mov	r0, sl
  if (val & (1 << (required - 1))) {
    return (int32_t)val - (1 << required);
    4c62:	bf18      	it	ne
    4c64:	9304      	strne	r3, [sp, #16]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    4c66:	f7fd fc5b 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  if (val & (1 << (required - 1))) {
    4c6a:	1e7b      	subs	r3, r7, #1
    4c6c:	2201      	movs	r2, #1
    4c6e:	fa02 f303 	lsl.w	r3, r2, r3
    4c72:	4203      	tst	r3, r0
    return (int32_t)val - (1 << required);
    4c74:	bf1e      	ittt	ne
    4c76:	40ba      	lslne	r2, r7
    4c78:	1a83      	subne	r3, r0, r2
    4c7a:	9308      	strne	r3, [sp, #32]
  bitoffset += font->bits_xoffset;
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    4c7c:	7deb      	ldrb	r3, [r5, #23]
  return val;
}

static uint32_t fetchbits_signed(const uint8_t *p, uint32_t index,
                                 uint32_t required) {
  uint32_t val = fetchbits_unsigned(p, index, required);
    4c7e:	bf08      	it	eq
    4c80:	9008      	streq	r0, [sp, #32]
  // Serial.printf("  line space = %d\n", font->line_space);

  int32_t xoffset = fetchbits_signed(data, bitoffset, font->bits_xoffset);
  bitoffset += font->bits_xoffset;
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
    4c82:	443e      	add	r6, r7
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    4c84:	461a      	mov	r2, r3
    4c86:	4631      	mov	r1, r6
    4c88:	4650      	mov	r0, sl
    4c8a:	9305      	str	r3, [sp, #20]
    4c8c:	f7fd fc48 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
  // Serial.printf("  delta =  %d\n", delta);

  // Serial.printf("  cursor = %d,%d\n", cursor_x, cursor_y);

  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    4c90:	f9bb 3024 	ldrsh.w	r3, [fp, #36]	; 0x24
    cursor_x = 0;
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    4c94:	9a04      	ldr	r2, [sp, #16]
  bitoffset += font->bits_xoffset;
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
    4c96:	9007      	str	r0, [sp, #28]
  // Serial.printf("  delta =  %d\n", delta);

  // Serial.printf("  cursor = %d,%d\n", cursor_x, cursor_y);

  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    4c98:	2b00      	cmp	r3, #0
    cursor_x = 0;
    4c9a:	bfb7      	itett	lt
    4c9c:	2300      	movlt	r3, #0
    4c9e:	461f      	movge	r7, r3
    4ca0:	461f      	movlt	r7, r3
    4ca2:	f8ab 3024 	strhlt.w	r3, [fp, #36]	; 0x24
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    4ca6:	19d7      	adds	r7, r2, r7
    4ca8:	f100 8202 	bmi.w	50b0 <ILI9341_t3n::drawFontChar(unsigned int)+0x4fc>
    cursor_x -= xoffset;
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    4cac:	f9bb 3020 	ldrsh.w	r3, [fp, #32]
    4cb0:	eb07 0208 	add.w	r2, r7, r8
    4cb4:	429a      	cmp	r2, r3
    if (!wrap)
    4cb6:	f89b 305c 	ldrb.w	r3, [fp, #92]	; 0x5c
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    cursor_x -= xoffset;
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    4cba:	f340 81f0 	ble.w	509e <ILI9341_t3n::drawFontChar(unsigned int)+0x4ea>
    if (!wrap)
    4cbe:	2b00      	cmp	r3, #0
    4cc0:	f000 81ea 	beq.w	5098 <ILI9341_t3n::drawFontChar(unsigned int)+0x4e4>
      return;
    origin_x = 0;
    if (xoffset >= 0) {
    4cc4:	9b04      	ldr	r3, [sp, #16]
    4cc6:	2b00      	cmp	r3, #0
      cursor_x = 0;
    } else {
      cursor_x = -xoffset;
    4cc8:	bfb6      	itet	lt
    4cca:	9b04      	ldrlt	r3, [sp, #16]
  if (origin_x + (int)width > _width) {
    if (!wrap)
      return;
    origin_x = 0;
    if (xoffset >= 0) {
      cursor_x = 0;
    4ccc:	2300      	movge	r3, #0
    } else {
      cursor_x = -xoffset;
    4cce:	425b      	neglt	r3, r3
    4cd0:	f8ab 3024 	strh.w	r3, [fp, #36]	; 0x24
    }
    cursor_y += font->line_space;
    4cd4:	7e2a      	ldrb	r2, [r5, #24]
    4cd6:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    4cda:	4413      	add	r3, r2
    4cdc:	b21b      	sxth	r3, r3
    4cde:	f8ab 3026 	strh.w	r3, [fp, #38]	; 0x26
    origin_x = 0;
  }
  if (origin_x + (int)width > _width) {
    if (!wrap)
      return;
    origin_x = 0;
    4ce2:	2700      	movs	r7, #0
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
    4ce4:	f89b 2048 	ldrb.w	r2, [fp, #72]	; 0x48
    4ce8:	2a00      	cmp	r2, #0
    4cea:	d035      	beq.n	4d58 <ILI9341_t3n::drawFontChar(unsigned int)+0x1a4>
    4cec:	f89b 2049 	ldrb.w	r2, [fp, #73]	; 0x49
    4cf0:	b392      	cbz	r2, 4d58 <ILI9341_t3n::drawFontChar(unsigned int)+0x1a4>
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    4cf2:	f9bb 0040 	ldrsh.w	r0, [fp, #64]	; 0x40
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
    4cf6:	f9bb 2044 	ldrsh.w	r2, [fp, #68]	; 0x44
    4cfa:	eb08 0107 	add.w	r1, r8, r7
    4cfe:	4402      	add	r2, r0
    4d00:	4291      	cmp	r1, r2
    4d02:	dd0f      	ble.n	4d24 <ILI9341_t3n::drawFontChar(unsigned int)+0x170>
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    if (xoffset >= 0) {
    4d04:	9a04      	ldr	r2, [sp, #16]
    4d06:	2a00      	cmp	r2, #0
      cursor_x = scroll_x;
    } else {
      cursor_x = -xoffset;
    4d08:	bfb7      	itett	lt
    4d0a:	9a04      	ldrlt	r2, [sp, #16]
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    if (xoffset >= 0) {
      cursor_x = scroll_x;
    4d0c:	f8ab 0024 	strhge.w	r0, [fp, #36]	; 0x24
    } else {
      cursor_x = -xoffset;
    4d10:	f1c2 0900 	rsblt	r9, r2, #0
    4d14:	f8ab 9024 	strhlt.w	r9, [fp, #36]	; 0x24
    }
    cursor_y += font->line_space;
    4d18:	7e2a      	ldrb	r2, [r5, #24]
    4d1a:	4413      	add	r3, r2
    4d1c:	b21b      	sxth	r3, r3
    4d1e:	f8ab 3026 	strh.w	r3, [fp, #38]	; 0x26
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
      ((origin_x + (int)width) > (scroll_x + scroll_width))) {
    origin_x = 0;
    4d22:	2700      	movs	r7, #0
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }

  if (scrollEnable && isWritingScrollArea &&
    4d24:	f9bb 2042 	ldrsh.w	r2, [fp, #66]	; 0x42
    4d28:	f9bb 1046 	ldrsh.w	r1, [fp, #70]	; 0x46
    4d2c:	7e68      	ldrb	r0, [r5, #25]
    4d2e:	440a      	add	r2, r1
    4d30:	1a12      	subs	r2, r2, r0
    4d32:	4293      	cmp	r3, r2
    4d34:	dd10      	ble.n	4d58 <ILI9341_t3n::drawFontChar(unsigned int)+0x1a4>
      (cursor_y > (scroll_y + scroll_height - font->cap_height))) {
    scrollTextArea(font->line_space);
    4d36:	7e29      	ldrb	r1, [r5, #24]
    4d38:	4658      	mov	r0, fp
    4d3a:	f7ff f8b5 	bl	3ea8 <ILI9341_t3n::scrollTextArea(unsigned char)>
    cursor_y -= font->line_space;
    4d3e:	f8db 5060 	ldr.w	r5, [fp, #96]	; 0x60
    4d42:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    4d46:	7e2a      	ldrb	r2, [r5, #24]
    cursor_x = scroll_x;
    4d48:	f8bb 1040 	ldrh.w	r1, [fp, #64]	; 0x40
    4d4c:	f8ab 1024 	strh.w	r1, [fp, #36]	; 0x24
  }

  if (scrollEnable && isWritingScrollArea &&
      (cursor_y > (scroll_y + scroll_height - font->cap_height))) {
    scrollTextArea(font->line_space);
    cursor_y -= font->line_space;
    4d50:	1a9b      	subs	r3, r3, r2
    4d52:	b21b      	sxth	r3, r3
    4d54:	f8ab 3026 	strh.w	r3, [fp, #38]	; 0x26
    cursor_x = scroll_x;
  }
  if (cursor_y >= _height)
    4d58:	f9bb 2022 	ldrsh.w	r2, [fp, #34]	; 0x22
    4d5c:	429a      	cmp	r2, r3
    4d5e:	f340 819b 	ble.w	5098 <ILI9341_t3n::drawFontChar(unsigned int)+0x4e4>
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
  bitoffset += font->bits_delta;
    4d62:	9a05      	ldr	r2, [sp, #20]
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    4d64:	7e6c      	ldrb	r4, [r5, #25]
    4d66:	9806      	ldr	r0, [sp, #24]
  int32_t y = origin_y;
  bool opaque = (textbgcolor != textcolor);

  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {
    4d68:	f8bb 104c 	ldrh.w	r1, [fp, #76]	; 0x4c
    4d6c:	f8bb e04a 	ldrh.w	lr, [fp, #74]	; 0x4a
  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
  // Serial.printf("  origin = %d,%d\n", origin_x, origin_y);

  // TODO: compute top skip and number of lines
  int32_t linecount = height;
    4d70:	9005      	str	r0, [sp, #20]
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
  bitoffset += font->bits_delta;
    4d72:	4432      	add	r2, r6
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    4d74:	441c      	add	r4, r3
  int32_t yoffset = fetchbits_signed(data, bitoffset, font->bits_yoffset);
  bitoffset += font->bits_yoffset;
  // Serial.printf("  offset = %d,%d\n", xoffset, yoffset);

  uint32_t delta = fetchbits_unsigned(data, bitoffset, font->bits_delta);
  bitoffset += font->bits_delta;
    4d76:	4691      	mov	r9, r2
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    4d78:	9a08      	ldr	r2, [sp, #32]
    4d7a:	1a24      	subs	r4, r4, r0
  int32_t y = origin_y;
  bool opaque = (textbgcolor != textcolor);

  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {
    4d7c:	4571      	cmp	r1, lr
  }
  if (cursor_y >= _height)
    return;

  // vertically, the top and/or bottom can be clipped
  int32_t origin_y = cursor_y + font->cap_height - height - yoffset;
    4d7e:	eba4 0402 	sub.w	r4, r4, r2
  int32_t y = origin_y;
  bool opaque = (textbgcolor != textcolor);

  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {
    4d82:	f000 81a7 	beq.w	50d4 <ILI9341_t3n::drawFontChar(unsigned int)+0x520>
    // character
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    4d86:	f9bb 2032 	ldrsh.w	r2, [fp, #50]	; 0x32
    4d8a:	f9bb 1024 	ldrsh.w	r1, [fp, #36]	; 0x24
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
    4d8e:	f9bb e03a 	ldrsh.w	lr, [fp, #58]	; 0x3a
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    4d92:	f9bb 6036 	ldrsh.w	r6, [fp, #54]	; 0x36
    4d96:	9604      	str	r6, [sp, #16]
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    4d98:	19d0      	adds	r0, r2, r7
    4d9a:	4607      	mov	r7, r0
      start_x = 0;

    int start_y = (origin_y < cursor_y_origin) ? origin_y : cursor_y_origin;
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    4d9c:	9807      	ldr	r0, [sp, #28]
    if ((origin_x + (int)width) > end_x)
    4d9e:	9708      	str	r7, [sp, #32]
    // character
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    4da0:	440a      	add	r2, r1
      start_x = 0;

    int start_y = (origin_y < cursor_y_origin) ? origin_y : cursor_y_origin;
    if (start_y < 0)
      start_y = 0;
    int end_x = cursor_x_origin + delta;
    4da2:	1810      	adds	r0, r2, r0
    if ((origin_x + (int)width) > end_x)
    4da4:	4447      	add	r7, r8
    4da6:	42b8      	cmp	r0, r7
    4da8:	bfb8      	it	lt
    4daa:	4638      	movlt	r0, r7
    4dac:	4570      	cmp	r0, lr
    4dae:	bfa8      	it	ge
    4db0:	4670      	movge	r0, lr
    int end_y = cursor_y_origin + font->line_space;
    if ((origin_y + (int)height) > end_y)
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    4db2:	1e46      	subs	r6, r0, #1
    4db4:	900e      	str	r0, [sp, #56]	; 0x38
    4db6:	960c      	str	r6, [sp, #48]	; 0x30
    4db8:	4630      	mov	r0, r6
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
    4dba:	9e04      	ldr	r6, [sp, #16]
    4dbc:	42b0      	cmp	r0, r6
    4dbe:	f2c0 817c 	blt.w	50ba <ILI9341_t3n::drawFontChar(unsigned int)+0x506>
    4dc2:	9808      	ldr	r0, [sp, #32]
    4dc4:	4282      	cmp	r2, r0
    4dc6:	bfa8      	it	ge
    4dc8:	4602      	movge	r2, r0
    4dca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    4dce:	4596      	cmp	lr, r2
    4dd0:	920d      	str	r2, [sp, #52]	; 0x34
    4dd2:	f340 8172 	ble.w	50ba <ILI9341_t3n::drawFontChar(unsigned int)+0x506>
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    4dd6:	f9bb e034 	ldrsh.w	lr, [fp, #52]	; 0x34
    int end_x = cursor_x_origin + delta;
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    4dda:	7e2a      	ldrb	r2, [r5, #24]
    if ((origin_y + (int)height) > end_y)
    4ddc:	9e06      	ldr	r6, [sp, #24]
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
    4dde:	f9bb 003c 	ldrsh.w	r0, [fp, #60]	; 0x3c
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
    4de2:	f9bb 5038 	ldrsh.w	r5, [fp, #56]	; 0x38
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    origin_y += _originy;
    4de6:	4474      	add	r4, lr
    4de8:	9409      	str	r4, [sp, #36]	; 0x24
    // figure out bounding rectangle...
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    4dea:	4473      	add	r3, lr
    int end_x = cursor_x_origin + delta;
    if ((origin_x + (int)width) > end_x)
      end_x = origin_x + (int)width;
    if (end_x >= _displayclipx2)
      end_x = _displayclipx2;
    int end_y = cursor_y_origin + font->line_space;
    4dec:	18d4      	adds	r4, r2, r3
    if ((origin_y + (int)height) > end_y)
    4dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4df0:	18b2      	adds	r2, r6, r2
    4df2:	42a2      	cmp	r2, r4
    4df4:	bfb8      	it	lt
    4df6:	4622      	movlt	r2, r4
    4df8:	4282      	cmp	r2, r0
    4dfa:	4614      	mov	r4, r2
    4dfc:	bfa8      	it	ge
    4dfe:	4604      	movge	r4, r0
    4e00:	9410      	str	r4, [sp, #64]	; 0x40
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    4e02:	3c01      	subs	r4, #1
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
    4e04:	42ac      	cmp	r4, r5
    if ((origin_y + (int)height) > end_y)
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    4e06:	940a      	str	r4, [sp, #40]	; 0x28
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
    4e08:	f2c0 8157 	blt.w	50ba <ILI9341_t3n::drawFontChar(unsigned int)+0x506>
    4e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4e0e:	4293      	cmp	r3, r2
    4e10:	bfa8      	it	ge
    4e12:	4613      	movge	r3, r2
    4e14:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
    4e18:	4284      	cmp	r4, r0
    4e1a:	f280 814e 	bge.w	50ba <ILI9341_t3n::drawFontChar(unsigned int)+0x506>
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    4e1e:	f8db 3008 	ldr.w	r3, [fp, #8]
    4e22:	f8db 1014 	ldr.w	r1, [fp, #20]
    4e26:	461e      	mov	r6, r3
    4e28:	2201      	movs	r2, #1
    4e2a:	2300      	movs	r3, #0
    4e2c:	a813      	add	r0, sp, #76	; 0x4c
    4e2e:	f7fd fbb1 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>
    4e32:	4630      	mov	r0, r6
    4e34:	9913      	ldr	r1, [sp, #76]	; 0x4c
    4e36:	f7fd fbdf 	bl	25f8 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    4e3a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
    4e3e:	b12b      	cbz	r3, 4e4c <ILI9341_t3n::drawFontChar(unsigned int)+0x298>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    4e40:	781a      	ldrb	r2, [r3, #0]
    4e42:	f89b 1098 	ldrb.w	r1, [fp, #152]	; 0x98
    4e46:	ea22 0201 	bic.w	r2, r2, r1
    4e4a:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4e4c:	f89b 308e 	ldrb.w	r3, [fp, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4e50:	f8db 201c 	ldr.w	r2, [fp, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4e54:	041b      	lsls	r3, r3, #16
    4e56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4e5a:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
    4e5e:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4e60:	4658      	mov	r0, fp
    4e62:	f7fd ffb5 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4e66:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    4e68:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4e6c:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4e70:	ea46 4303 	orr.w	r3, r6, r3, lsl #16
    4e74:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4e78:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4e7a:	4658      	mov	r0, fp
    4e7c:	f7fd ffa8 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4e80:	f89b 108d 	ldrb.w	r1, [fp, #141]	; 0x8d
    4e84:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4e88:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4e8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4e90:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4e94:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4e96:	4658      	mov	r0, fp
    4e98:	f7fd ff9a 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4e9c:	f89b 308e 	ldrb.w	r3, [fp, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4ea0:	f8db 201c 	ldr.w	r2, [fp, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4ea4:	041b      	lsls	r3, r3, #16
    4ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4eaa:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    4eae:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4eb0:	4658      	mov	r0, fp
    4eb2:	f7fd ff8d 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;
    4eb6:	42ac      	cmp	r4, r5
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4eb8:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4ebc:	f8db 201c 	ldr.w	r2, [fp, #28]
    4ec0:	bfb8      	it	lt
    4ec2:	462c      	movlt	r4, r5
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4ec4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4ec8:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4ecc:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4ece:	4658      	mov	r0, fp
    4ed0:	f7fd ff7e 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4ed4:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
    4ed8:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4edc:	f8db 101c 	ldr.w	r1, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4ee0:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    4ee4:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4ee8:	634b      	str	r3, [r1, #52]	; 0x34
    waitFifoNotFull();
    4eea:	4658      	mov	r0, fp
    4eec:	f7fd ff70 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4ef0:	f89b 308e 	ldrb.w	r3, [fp, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4ef4:	f8db 201c 	ldr.w	r2, [fp, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    4ef8:	041b      	lsls	r3, r3, #16
    4efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    4efe:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    4f02:	6353      	str	r3, [r2, #52]	; 0x34
      end_y = origin_y + (int)height;
    if (end_y >= _displayclipy2)
      end_y = _displayclipy2;
    end_x--; // setup to last one we draw
    end_y--;
    int start_x_min = (start_x >= _displayclipx1) ? start_x : _displayclipx1;
    4f04:	9b04      	ldr	r3, [sp, #16]
    4f06:	42b3      	cmp	r3, r6
    4f08:	bfb8      	it	lt
    4f0a:	4633      	movlt	r3, r6
    waitFifoNotFull();
    4f0c:	4658      	mov	r0, fp
    4f0e:	9311      	str	r3, [sp, #68]	; 0x44
    4f10:	f7fd ff5e 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
      writecommand_cont(ILI9341_RAMWR);
      int screen_y = start_y_min;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    4f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4f16:	42a3      	cmp	r3, r4
    4f18:	dd2d      	ble.n	4f76 <ILI9341_t3n::drawFontChar(unsigned int)+0x3c2>
    4f1a:	f8cd 9010 	str.w	r9, [sp, #16]
    4f1e:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
    4f22:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
    4f26:	9e11      	ldr	r6, [sp, #68]	; 0x44
    4f28:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4f2a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    4f2e:	46d8      	mov	r8, fp
    4f30:	46bb      	mov	fp, r7
    4f32:	9f09      	ldr	r7, [sp, #36]	; 0x24
        for (screen_x = start_x_min; screen_x <= end_x; screen_x++) {
    4f34:	45b1      	cmp	r9, r6
    4f36:	bfa8      	it	ge
    4f38:	46b2      	movge	sl, r6
    4f3a:	db11      	blt.n	4f60 <ILI9341_t3n::drawFontChar(unsigned int)+0x3ac>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4f3c:	f898 108d 	ldrb.w	r1, [r8, #141]	; 0x8d
    4f40:	f8b8 304c 	ldrh.w	r3, [r8, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4f44:	f8d8 201c 	ldr.w	r2, [r8, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4f48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4f4c:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    4f50:	f10a 0a01 	add.w	sl, sl, #1
    4f54:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    4f56:	4640      	mov	r0, r8
    4f58:	f7fd ff3a 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    4f5c:	45aa      	cmp	sl, r5
    4f5e:	d1ed      	bne.n	4f3c <ILI9341_t3n::drawFontChar(unsigned int)+0x388>
          writedata16_cont(textbgcolor);
        }
        screen_y++;
    4f60:	3401      	adds	r4, #1
      writecommand_cont(ILI9341_RAMWR);
      int screen_y = start_y_min;
      int screen_x;

      // Clear above character
      while (screen_y < origin_y) {
    4f62:	42a7      	cmp	r7, r4
    4f64:	d1e6      	bne.n	4f34 <ILI9341_t3n::drawFontChar(unsigned int)+0x380>
    4f66:	465f      	mov	r7, fp
    4f68:	f8dd 9010 	ldr.w	r9, [sp, #16]
    4f6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
    4f70:	46c3      	mov	fp, r8
    4f72:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
        }
        screen_y++;
      }

      // Anti-aliased font
      if (fontbpp > 1) {
    4f76:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
    4f7a:	2b01      	cmp	r3, #1
    4f7c:	f240 8206 	bls.w	538c <ILI9341_t3n::drawFontChar(unsigned int)+0x7d8>
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
    4f80:	f109 0307 	add.w	r3, r9, #7
    4f84:	f023 0907 	bic.w	r9, r3, #7
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    4f88:	9b06      	ldr	r3, [sp, #24]
    4f8a:	2b00      	cmp	r3, #0
    4f8c:	d040      	beq.n	5010 <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
    4f8e:	f8cd 9010 	str.w	r9, [sp, #16]
    4f92:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
    4f96:	9705      	str	r7, [sp, #20]
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    origin_y += _originy;
    4f98:	9d09      	ldr	r5, [sp, #36]	; 0x24
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    4f9a:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    4f9e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    4fa2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    4fa4:	461e      	mov	r6, r3
    4fa6:	f04f 0800 	mov.w	r8, #0
          screen_x = start_x;
          while (screen_x <= end_x) {
    4faa:	454f      	cmp	r7, r9
    4fac:	db28      	blt.n	5000 <ILI9341_t3n::drawFontChar(unsigned int)+0x44c>
    4fae:	464c      	mov	r4, r9
            // XXX: I'm sure clipping could be done way more efficiently than
            // just chekcing every single pixel, but let's just get this going
            if ((screen_x >= _displayclipx1) && (screen_x < _displayclipx2) &&
    4fb0:	f9bb 3036 	ldrsh.w	r3, [fp, #54]	; 0x36
    4fb4:	42a3      	cmp	r3, r4
    4fb6:	dc20      	bgt.n	4ffa <ILI9341_t3n::drawFontChar(unsigned int)+0x446>
    4fb8:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
    4fbc:	42a3      	cmp	r3, r4
    4fbe:	dd1c      	ble.n	4ffa <ILI9341_t3n::drawFontChar(unsigned int)+0x446>
    4fc0:	f9bb 3038 	ldrsh.w	r3, [fp, #56]	; 0x38
    4fc4:	42ab      	cmp	r3, r5
    4fc6:	dc18      	bgt.n	4ffa <ILI9341_t3n::drawFontChar(unsigned int)+0x446>
                (screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    4fc8:	f9bb 303c 	ldrsh.w	r3, [fp, #60]	; 0x3c
    4fcc:	42ab      	cmp	r3, r5
    4fce:	dd14      	ble.n	4ffa <ILI9341_t3n::drawFontChar(unsigned int)+0x446>
              // Clear before or after pixel
              if ((screen_x < origin_x) || (screen_x >= glyphend_x)) {
    4fd0:	9b08      	ldr	r3, [sp, #32]
    4fd2:	42a3      	cmp	r3, r4
    4fd4:	4658      	mov	r0, fp
    4fd6:	dc03      	bgt.n	4fe0 <ILI9341_t3n::drawFontChar(unsigned int)+0x42c>
    4fd8:	9b05      	ldr	r3, [sp, #20]
    4fda:	42a3      	cmp	r3, r4
    4fdc:	f300 818e 	bgt.w	52fc <ILI9341_t3n::drawFontChar(unsigned int)+0x748>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4fe0:	f89b 108d 	ldrb.w	r1, [fp, #141]	; 0x8d
    4fe4:	f8bb 204c 	ldrh.w	r2, [fp, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    4fe8:	f8db 301c 	ldr.w	r3, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    4fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    4ff0:	f042 4210 	orr.w	r2, r2, #2415919104	; 0x90000000
    4ff4:	635a      	str	r2, [r3, #52]	; 0x34
    waitFifoNotFull();
    4ff6:	f7fd feeb 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
                    (uint8_t)(alpha * fontalphamx)));
                bitoffset += fontbpp;
                xp++;
              }
            } // clip
            screen_x++;
    4ffa:	3401      	adds	r4, #1
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
          screen_x = start_x;
          while (screen_x <= end_x) {
    4ffc:	4554      	cmp	r4, sl
    4ffe:	d1d7      	bne.n	4fb0 <ILI9341_t3n::drawFontChar(unsigned int)+0x3fc>
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    5000:	3e01      	subs	r6, #1
                xp++;
              }
            } // clip
            screen_x++;
          }
          screen_y++;
    5002:	f105 0501 	add.w	r5, r5, #1
      if (fontbpp > 1) {
        screen_y = origin_y;
        bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
        int glyphend_x = origin_x + width;
        uint32_t xp = 0;
        while (linecount) {
    5006:	d1d0      	bne.n	4faa <ILI9341_t3n::drawFontChar(unsigned int)+0x3f6>
    5008:	9a09      	ldr	r2, [sp, #36]	; 0x24
    500a:	9b06      	ldr	r3, [sp, #24]
    500c:	4413      	add	r3, r2
    500e:	9309      	str	r3, [sp, #36]	; 0x24
      } // 1bpp

      // clear below character - note reusing xcreen_x for this
      screen_x =
          (end_y + 1 - screen_y) *
          (end_x + 1 - start_x_min); // How many bytes we need to still output
    5010:	9a11      	ldr	r2, [sp, #68]	; 0x44
    5012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    5014:	9909      	ldr	r1, [sp, #36]	; 0x24
    5016:	1a9b      	subs	r3, r3, r2
    5018:	9a10      	ldr	r2, [sp, #64]	; 0x40
    501a:	1a56      	subs	r6, r2, r1
    501c:	fb03 f306 	mul.w	r3, r3, r6
      // Serial.printf("Clear Below: %d\n", screen_x);
      while (screen_x-- > 1) {
    5020:	2b01      	cmp	r3, #1
    5022:	f103 34ff 	add.w	r4, r3, #4294967295
    5026:	dd0f      	ble.n	5048 <ILI9341_t3n::drawFontChar(unsigned int)+0x494>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5028:	f89b 108d 	ldrb.w	r1, [fp, #141]	; 0x8d
    502c:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5030:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5034:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5038:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    503c:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    503e:	4658      	mov	r0, fp
    5040:	f7fd fec6 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    5044:	3c01      	subs	r4, #1
    5046:	d1ef      	bne.n	5028 <ILI9341_t3n::drawFontChar(unsigned int)+0x474>
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    5048:	f89b 108d 	ldrb.w	r1, [fp, #141]	; 0x8d
    504c:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    5050:	f8db 201c 	ldr.w	r2, [fp, #28]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    5054:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5058:	f043 53c0 	orr.w	r3, r3, #402653184	; 0x18000000
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    waitTransmitComplete(mcr);
  }
  void writedata16_last(uint16_t d) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    505c:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_EOQ;
    505e:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    5060:	4658      	mov	r0, fp
    5062:	f7fe f835 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    5066:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
    506a:	b123      	cbz	r3, 5076 <ILI9341_t3n::drawFontChar(unsigned int)+0x4c2>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    506c:	7819      	ldrb	r1, [r3, #0]
    506e:	f89b 2098 	ldrb.w	r2, [fp, #152]	; 0x98
    5072:	430a      	orrs	r2, r1
    5074:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    5076:	f8db 0008 	ldr.w	r0, [fp, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    507a:	7ac3      	ldrb	r3, [r0, #11]
    507c:	b133      	cbz	r3, 508c <ILI9341_t3n::drawFontChar(unsigned int)+0x4d8>
			if (interruptMasksUsed & 0x01) {
    507e:	07db      	lsls	r3, r3, #31
    5080:	d502      	bpl.n	5088 <ILI9341_t3n::drawFontChar(unsigned int)+0x4d4>
				NVIC_ISER0 = interruptSave[0];
    5082:	4bc0      	ldr	r3, [pc, #768]	; (5384 <ILI9341_t3n::drawFontChar(unsigned int)+0x7d0>)
    5084:	6982      	ldr	r2, [r0, #24]
    5086:	601a      	str	r2, [r3, #0]
    5088:	f7fd fa72 	bl	2570 <SPIClass::endTransaction() [clone .part.3]>
      writedata16_last(textbgcolor);
      endSPITransaction();
    }
  }
  // Increment to setup for the next character.
  cursor_x += delta;
    508c:	f8bb 3024 	ldrh.w	r3, [fp, #36]	; 0x24
    5090:	9a07      	ldr	r2, [sp, #28]
    5092:	441a      	add	r2, r3
    5094:	f8ab 2024 	strh.w	r2, [fp, #36]	; 0x24
}
    5098:	b015      	add	sp, #84	; 0x54
    509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else {
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }
  if (wrap && scrollEnable && isWritingScrollArea &&
    509e:	2b00      	cmp	r3, #0
    50a0:	f040 80ea 	bne.w	5278 <ILI9341_t3n::drawFontChar(unsigned int)+0x6c4>
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }

  if (scrollEnable && isWritingScrollArea &&
    50a4:	f89b 3048 	ldrb.w	r3, [fp, #72]	; 0x48
    50a8:	b963      	cbnz	r3, 50c4 <ILI9341_t3n::drawFontChar(unsigned int)+0x510>
    50aa:	f9bb 3026 	ldrsh.w	r3, [fp, #38]	; 0x26
    50ae:	e653      	b.n	4d58 <ILI9341_t3n::drawFontChar(unsigned int)+0x1a4>
  // horizontally, we draw every pixel, or none at all
  if (cursor_x < 0)
    cursor_x = 0;
  int32_t origin_x = cursor_x + xoffset;
  if (origin_x < 0) {
    cursor_x -= xoffset;
    50b0:	1a9b      	subs	r3, r3, r2
    50b2:	f8ab 3024 	strh.w	r3, [fp, #36]	; 0x24
    origin_x = 0;
    50b6:	2700      	movs	r7, #0
    50b8:	e5f8      	b.n	4cac <ILI9341_t3n::drawFontChar(unsigned int)+0xf8>
    int start_y_min = (start_y >= _displayclipy1) ? start_y : _displayclipy1;

    // See if anything is in the display area.
    if ((end_x < _displayclipx1) || (start_x >= _displayclipx2) ||
        (end_y < _displayclipy1) || (start_y >= _displayclipy2)) {
      cursor_x += delta; // could use goto or another indent level...
    50ba:	9b07      	ldr	r3, [sp, #28]
    50bc:	4419      	add	r1, r3
    50be:	f8ab 1024 	strh.w	r1, [fp, #36]	; 0x24
      return;
    50c2:	e7e9      	b.n	5098 <ILI9341_t3n::drawFontChar(unsigned int)+0x4e4>
      cursor_x = -xoffset;
    }
    cursor_y += font->line_space;
  }

  if (scrollEnable && isWritingScrollArea &&
    50c4:	f89b 2049 	ldrb.w	r2, [fp, #73]	; 0x49
    50c8:	f9bb 3026 	ldrsh.w	r3, [fp, #38]	; 0x26
    50cc:	2a00      	cmp	r2, #0
    50ce:	f43f ae43 	beq.w	4d58 <ILI9341_t3n::drawFontChar(unsigned int)+0x1a4>
    50d2:	e627      	b.n	4d24 <ILI9341_t3n::drawFontChar(unsigned int)+0x170>
  // Going to try a fast Opaque method which works similar to drawChar, which is
  // near the speed of writerect
  if (!opaque) {

    // Anti-alias support
    if (fontbpp > 1) {
    50d4:	f89b 0064 	ldrb.w	r0, [fp, #100]	; 0x64
    50d8:	2801      	cmp	r0, #1
    50da:	f240 80d0 	bls.w	527e <ILI9341_t3n::drawFontChar(unsigned int)+0x6ca>
      // case will all be solid because pixels are rendered on same colour as
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
    50de:	1e42      	subs	r2, r0, #1
    50e0:	2301      	movs	r3, #1
    50e2:	4093      	lsls	r3, r2
      while (linecount) {
    50e4:	9a05      	ldr	r2, [sp, #20]
      // be different. Even though an anti-alised font is being used, pixels in
      // this
      // case will all be solid because pixels are rendered on same colour as
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
    50e6:	f109 0607 	add.w	r6, r9, #7
    50ea:	f026 0607 	bic.w	r6, r6, #7
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
    50ee:	2a00      	cmp	r2, #0
    50f0:	d0cc      	beq.n	508c <ILI9341_t3n::drawFontChar(unsigned int)+0x4d8>
    50f2:	b2db      	uxtb	r3, r3
    50f4:	4619      	mov	r1, r3
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    50f6:	1913      	adds	r3, r2, r4
    50f8:	9308      	str	r3, [sp, #32]
    50fa:	2300      	movs	r3, #0
    50fc:	463a      	mov	r2, r7
    50fe:	f8cd 8018 	str.w	r8, [sp, #24]
    5102:	460f      	mov	r7, r1
    5104:	4698      	mov	r8, r3
        uint32_t x = 0;
        while (x < width) {
    5106:	9b06      	ldr	r3, [sp, #24]
    5108:	2b00      	cmp	r3, #0
    510a:	d040      	beq.n	518e <ILI9341_t3n::drawFontChar(unsigned int)+0x5da>
    510c:	eb08 0903 	add.w	r9, r8, r3
    5110:	9905      	ldr	r1, [sp, #20]
    5112:	9b08      	ldr	r3, [sp, #32]
    5114:	1a5b      	subs	r3, r3, r1
    5116:	4644      	mov	r4, r8
    5118:	9304      	str	r3, [sp, #16]

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
  // Shift to LSB position and mask to get value
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
    511a:	f89b 3067 	ldrb.w	r3, [fp, #103]	; 0x67
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
    511e:	fbb4 f5f3 	udiv	r5, r4, r3
  return (int32_t)val;
}

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
    5122:	08f1      	lsrs	r1, r6, #3
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
    5124:	fb03 4515 	mls	r5, r3, r5, r4
    5128:	3b01      	subs	r3, #1
    512a:	1b5b      	subs	r3, r3, r5
    512c:	fb13 f300 	smulbb	r3, r3, r0
    5130:	f81a c001 	ldrb.w	ip, [sl, r1]
    5134:	f89b 5066 	ldrb.w	r5, [fp, #102]	; 0x66
    5138:	b2d9      	uxtb	r1, r3
    513a:	fa4c f301 	asr.w	r3, ip, r1
    513e:	402b      	ands	r3, r5
    5140:	42bb      	cmp	r3, r7
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    5142:	ebc8 0e04 	rsb	lr, r8, r4
            Pixel(origin_x + x, y, textcolor);
          }
          bitoffset += fontbpp;
          x++;
          xp++;
    5146:	f104 0401 	add.w	r4, r4, #1
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
    514a:	d31c      	bcc.n	5186 <ILI9341_t3n::drawFontChar(unsigned int)+0x5d2>
    514c:	f8bb 5032 	ldrh.w	r5, [fp, #50]	; 0x32
    y += _originy;

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    5150:	f9bb 3036 	ldrsh.w	r3, [fp, #54]	; 0x36
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    5154:	4415      	add	r5, r2
    5156:	4475      	add	r5, lr
    5158:	b2ad      	uxth	r5, r5
    515a:	b229      	sxth	r1, r5
    y += _originy;

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    515c:	428b      	cmp	r3, r1
    515e:	dc12      	bgt.n	5186 <ILI9341_t3n::drawFontChar(unsigned int)+0x5d2>
    5160:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
    5164:	428b      	cmp	r3, r1
    5166:	dd0e      	ble.n	5186 <ILI9341_t3n::drawFontChar(unsigned int)+0x5d2>
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    5168:	f8bb e034 	ldrh.w	lr, [fp, #52]	; 0x34
    516c:	9b04      	ldr	r3, [sp, #16]

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    516e:	f9bb 1038 	ldrsh.w	r1, [fp, #56]	; 0x38
    return (uint16_t)((result >> 16) | result); // contract result
  }
  void Pixel(int16_t x, int16_t y, uint16_t color)
      __attribute__((always_inline)) {
    x += _originx;
    y += _originy;
    5172:	4473      	add	r3, lr
    5174:	b29b      	uxth	r3, r3
    5176:	fa0f fe83 	sxth.w	lr, r3

    if ((x < _displayclipx1) || (x >= _displayclipx2) || (y < _displayclipy1) ||
    517a:	4571      	cmp	r1, lr
    517c:	dc03      	bgt.n	5186 <ILI9341_t3n::drawFontChar(unsigned int)+0x5d2>
    517e:	f9bb 103c 	ldrsh.w	r1, [fp, #60]	; 0x3c
    5182:	4571      	cmp	r1, lr
    5184:	dc08      	bgt.n	5198 <ILI9341_t3n::drawFontChar(unsigned int)+0x5e4>
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
    5186:	454c      	cmp	r4, r9
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
            Pixel(origin_x + x, y, textcolor);
          }
          bitoffset += fontbpp;
    5188:	4406      	add	r6, r0
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
        uint32_t x = 0;
        while (x < width) {
    518a:	d1c6      	bne.n	511a <ILI9341_t3n::drawFontChar(unsigned int)+0x566>
    518c:	46a0      	mov	r8, r4
      // themselves!
      // This won't look very good.
      bitoffset = ((bitoffset + 7) & (-8)); // byte-boundary
      uint32_t xp = 0;
      uint8_t halfalpha = 1 << (fontbpp - 1);
      while (linecount) {
    518e:	9b05      	ldr	r3, [sp, #20]
    5190:	3b01      	subs	r3, #1
    5192:	9305      	str	r3, [sp, #20]
    5194:	d1b7      	bne.n	5106 <ILI9341_t3n::drawFontChar(unsigned int)+0x552>
    5196:	e779      	b.n	508c <ILI9341_t3n::drawFontChar(unsigned int)+0x4d8>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    5198:	f89b e08e 	ldrb.w	lr, [fp, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    519c:	f8db 001c 	ldr.w	r0, [fp, #28]
    51a0:	930a      	str	r3, [sp, #40]	; 0x28
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    51a2:	ea4f 4e0e 	mov.w	lr, lr, lsl #16
    51a6:	f04e 4100 	orr.w	r1, lr, #2147483648	; 0x80000000
    51aa:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
        uint32_t x = 0;
        while (x < width) {
          // One pixel at a time, either on (if alpha > 0.5) or off
          if (fetchpixel(data, bitoffset, xp) >= halfalpha) {
            Pixel(origin_x + x, y, textcolor);
    51ae:	f8bb 304a 	ldrh.w	r3, [fp, #74]	; 0x4a
    51b2:	6341      	str	r1, [r0, #52]	; 0x34
    waitFifoNotFull();
    51b4:	4658      	mov	r0, fp
    51b6:	920b      	str	r2, [sp, #44]	; 0x2c
    51b8:	9309      	str	r3, [sp, #36]	; 0x24
    51ba:	f7fd fe09 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    51be:	f89b e08d 	ldrb.w	lr, [fp, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    51c2:	f8db 001c 	ldr.w	r0, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    51c6:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
    51ca:	f04e 4110 	orr.w	r1, lr, #2415919104	; 0x90000000
    51ce:	6341      	str	r1, [r0, #52]	; 0x34
    waitFifoNotFull();
    51d0:	4658      	mov	r0, fp
    51d2:	f7fd fdfd 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    51d6:	f89b e08d 	ldrb.w	lr, [fp, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    51da:	f8db 001c 	ldr.w	r0, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    51de:	ea45 450e 	orr.w	r5, r5, lr, lsl #16
    51e2:	f045 4510 	orr.w	r5, r5, #2415919104	; 0x90000000
    51e6:	6345      	str	r5, [r0, #52]	; 0x34
    waitFifoNotFull();
    51e8:	4658      	mov	r0, fp
    51ea:	f7fd fdf1 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    51ee:	f89b 508e 	ldrb.w	r5, [fp, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    51f2:	f8db 001c 	ldr.w	r0, [fp, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    51f6:	042d      	lsls	r5, r5, #16
    51f8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    51fc:	f045 052b 	orr.w	r5, r5, #43	; 0x2b
    5200:	6345      	str	r5, [r0, #52]	; 0x34
    waitFifoNotFull();
    5202:	4658      	mov	r0, fp
    5204:	f7fd fde4 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5208:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
    520c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    520e:	f8db 001c 	ldr.w	r0, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5212:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    5216:	f045 4510 	orr.w	r5, r5, #2415919104	; 0x90000000
    521a:	6345      	str	r5, [r0, #52]	; 0x34
    waitFifoNotFull();
    521c:	4658      	mov	r0, fp
    521e:	f7fd fdd7 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5222:	f89b 508d 	ldrb.w	r5, [fp, #141]	; 0x8d
    5226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5228:	f8db 001c 	ldr.w	r0, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    522c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    5230:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    5234:	6343      	str	r3, [r0, #52]	; 0x34
    waitFifoNotFull();
    5236:	4658      	mov	r0, fp
    5238:	f7fd fdca 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    523c:	f89b 008e 	ldrb.w	r0, [fp, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5240:	f8db 301c 	ldr.w	r3, [fp, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    5244:	0400      	lsls	r0, r0, #16
    5246:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    524a:	f040 002c 	orr.w	r0, r0, #44	; 0x2c
    524e:	6358      	str	r0, [r3, #52]	; 0x34
    waitFifoNotFull();
    5250:	4658      	mov	r0, fp
    5252:	f7fd fdbd 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5256:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
    525a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    525c:	f8db 301c 	ldr.w	r3, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5260:	ea42 4100 	orr.w	r1, r2, r0, lsl #16
    5264:	f041 4110 	orr.w	r1, r1, #2415919104	; 0x90000000
    waitFifoNotFull();
    5268:	4658      	mov	r0, fp
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    526a:	6359      	str	r1, [r3, #52]	; 0x34
    waitFifoNotFull();
    526c:	f7fd fdb0 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    5270:	f89b 0064 	ldrb.w	r0, [fp, #100]	; 0x64
    5274:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5276:	e786      	b.n	5186 <ILI9341_t3n::drawFontChar(unsigned int)+0x5d2>
    5278:	f9bb 3026 	ldrsh.w	r3, [fp, #38]	; 0x26
    527c:	e532      	b.n	4ce4 <ILI9341_t3n::drawFontChar(unsigned int)+0x130>

    }
    // Soild pixels
    else {

      while (linecount > 0) {
    527e:	9b05      	ldr	r3, [sp, #20]
    5280:	2b00      	cmp	r3, #0
    5282:	bfc8      	it	gt
    5284:	9704      	strgt	r7, [sp, #16]
    5286:	f77f af01 	ble.w	508c <ILI9341_t3n::drawFontChar(unsigned int)+0x4d8>
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    528a:	ea4f 02d9 	mov.w	r2, r9, lsr #3
    528e:	ea6f 0309 	mvn.w	r3, r9
    5292:	f81a 2002 	ldrb.w	r2, [sl, r2]
    5296:	f003 0307 	and.w	r3, r3, #7
    529a:	fa42 f303 	asr.w	r3, r2, r3
    529e:	07da      	lsls	r2, r3, #31
    else {

      while (linecount > 0) {
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
        if (fetchbit(data, bitoffset++) != 0) {
    52a0:	f109 0101 	add.w	r1, r9, #1
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    52a4:	d422      	bmi.n	52ec <ILI9341_t3n::drawFontChar(unsigned int)+0x738>
    // Soild pixels
    else {

      while (linecount > 0) {
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
    52a6:	2701      	movs	r7, #1
    52a8:	4689      	mov	r9, r1
        if (fetchbit(data, bitoffset++) != 0) {
          n = fetchbits_unsigned(data, bitoffset, 3) + 2;
          bitoffset += 3;
        }
        uint32_t x = 0;
    52aa:	2600      	movs	r6, #0
        do {
          int32_t xsize = width - x;
    52ac:	ebc6 0508 	rsb	r5, r6, r8
          if (xsize > 32)
            xsize = 32;
          uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    52b0:	2d20      	cmp	r5, #32
    52b2:	bfa8      	it	ge
    52b4:	2520      	movge	r5, #32
    52b6:	4649      	mov	r1, r9
    52b8:	462a      	mov	r2, r5
    52ba:	4650      	mov	r0, sl
    52bc:	f7fd f930 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
          // Serial.printf("    multi line %d %d %x\n", n, x, bits);
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
    52c0:	9b04      	ldr	r3, [sp, #16]
    52c2:	9702      	str	r7, [sp, #8]
    52c4:	18f1      	adds	r1, r6, r3
    52c6:	4602      	mov	r2, r0
    52c8:	9100      	str	r1, [sp, #0]
    52ca:	9401      	str	r4, [sp, #4]
    52cc:	462b      	mov	r3, r5
          bitoffset += xsize;
          x += xsize;
    52ce:	442e      	add	r6, r5
          int32_t xsize = width - x;
          if (xsize > 32)
            xsize = 32;
          uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
          // Serial.printf("    multi line %d %d %x\n", n, x, bits);
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
    52d0:	2100      	movs	r1, #0
    52d2:	4658      	mov	r0, fp
    52d4:	f7fe fa90 	bl	37f8 <ILI9341_t3n::drawFontBits(bool, unsigned long, unsigned long, long, long, unsigned long)>
          bitoffset += xsize;
          x += xsize;
        } while (x < width);
    52d8:	45b0      	cmp	r8, r6
          if (xsize > 32)
            xsize = 32;
          uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
          // Serial.printf("    multi line %d %d %x\n", n, x, bits);
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
          bitoffset += xsize;
    52da:	44a9      	add	r9, r5
          x += xsize;
        } while (x < width);
    52dc:	d8e6      	bhi.n	52ac <ILI9341_t3n::drawFontChar(unsigned int)+0x6f8>

        y += n;
        linecount -= n;
    52de:	9b05      	ldr	r3, [sp, #20]
    52e0:	1bdb      	subs	r3, r3, r7

    }
    // Soild pixels
    else {

      while (linecount > 0) {
    52e2:	2b00      	cmp	r3, #0
          bitoffset += xsize;
          x += xsize;
        } while (x < width);

        y += n;
        linecount -= n;
    52e4:	9305      	str	r3, [sp, #20]
          drawFontBits(opaque, bits, xsize, origin_x + x, y, n);
          bitoffset += xsize;
          x += xsize;
        } while (x < width);

        y += n;
    52e6:	443c      	add	r4, r7

    }
    // Soild pixels
    else {

      while (linecount > 0) {
    52e8:	dccf      	bgt.n	528a <ILI9341_t3n::drawFontChar(unsigned int)+0x6d6>
    52ea:	e6cf      	b.n	508c <ILI9341_t3n::drawFontChar(unsigned int)+0x4d8>
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
        if (fetchbit(data, bitoffset++) != 0) {
          n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    52ec:	2203      	movs	r2, #3
    52ee:	4650      	mov	r0, sl
    52f0:	f7fd f916 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
          bitoffset += 3;
    52f4:	f109 0104 	add.w	r1, r9, #4

      while (linecount > 0) {
        // Serial.printf("    linecount = %d\n", linecount);
        uint32_t n = 1;
        if (fetchbit(data, bitoffset++) != 0) {
          n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    52f8:	1c87      	adds	r7, r0, #2
    52fa:	e7d5      	b.n	52a8 <ILI9341_t3n::drawFontChar(unsigned int)+0x6f4>

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
  // Shift to LSB position and mask to get value
  uint8_t s = ((fontppb - (x % fontppb) - 1) * fontbpp);
    52fc:	f89b 3067 	ldrb.w	r3, [fp, #103]	; 0x67
   */
  uint16_t alphaBlendRGB565Premultiplied(uint32_t fg, uint32_t bg,
                                         uint8_t alpha)
      __attribute__((always_inline)) {
    uint32_t result =
        ((((fg - bg) * alpha) >> 5) + bg) & 0b00000111111000001111100000011111;
    5300:	f89b 2064 	ldrb.w	r2, [fp, #100]	; 0x64
    5304:	fbb8 f1f3 	udiv	r1, r8, r3
  return (int32_t)val;
}

uint32_t ILI9341_t3n::fetchpixel(const uint8_t *p, uint32_t index, uint32_t x) {
  // The byte
  uint8_t b = p[index >> 3];
    5308:	9804      	ldr	r0, [sp, #16]
    530a:	fb03 8111 	mls	r1, r3, r1, r8
    530e:	3b01      	subs	r3, #1
    5310:	1a5b      	subs	r3, r3, r1
    5312:	08c0      	lsrs	r0, r0, #3
    5314:	fb13 f302 	smulbb	r3, r3, r2
    5318:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    531a:	5c11      	ldrb	r1, [r2, r0]
    531c:	f89b 0066 	ldrb.w	r0, [fp, #102]	; 0x66
                writedata16_cont(textbgcolor);
              }
              // Draw alpha-blended character
              else {
                uint8_t alpha = fetchpixel(data, bitoffset, xp);
                writedata16_cont(alphaBlendRGB565Premultiplied(
    5320:	f8db 2054 	ldr.w	r2, [fp, #84]	; 0x54
    5324:	920b      	str	r2, [sp, #44]	; 0x2c
    5326:	b2db      	uxtb	r3, r3
    5328:	fa41 f303 	asr.w	r3, r1, r3
    532c:	4018      	ands	r0, r3
    532e:	f003 fef5 	bl	911c <__aeabi_i2f>
    5332:	f8db 106c 	ldr.w	r1, [fp, #108]	; 0x6c
    5336:	f003 ff45 	bl	91c4 <__aeabi_fmul>
    533a:	f004 f92f 	bl	959c <__aeabi_f2uiz>
    533e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5340:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
    5344:	4910      	ldr	r1, [pc, #64]	; (5388 <ILI9341_t3n::drawFontChar(unsigned int)+0x7d4>)
    5346:	b2c0      	uxtb	r0, r0
    5348:	1a9b      	subs	r3, r3, r2
    534a:	fb03 f300 	mul.w	r3, r3, r0
    534e:	eb02 1353 	add.w	r3, r2, r3, lsr #5
    5352:	4019      	ands	r1, r3
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5354:	f89b 008d 	ldrb.w	r0, [fp, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5358:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    535c:	ea41 4111 	orr.w	r1, r1, r1, lsr #16
    5360:	b28b      	uxth	r3, r1
    5362:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    5366:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    536a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    536c:	4658      	mov	r0, fp
    536e:	f7fd fd2f 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
                    textcolorPrexpanded, textbgcolorPrexpanded,
                    (uint8_t)(alpha * fontalphamx)));
                bitoffset += fontbpp;
    5372:	9804      	ldr	r0, [sp, #16]
    5374:	f89b 3064 	ldrb.w	r3, [fp, #100]	; 0x64
    5378:	18c3      	adds	r3, r0, r3
                xp++;
    537a:	f108 0801 	add.w	r8, r8, #1
              else {
                uint8_t alpha = fetchpixel(data, bitoffset, xp);
                writedata16_cont(alphaBlendRGB565Premultiplied(
                    textcolorPrexpanded, textbgcolorPrexpanded,
                    (uint8_t)(alpha * fontalphamx)));
                bitoffset += fontbpp;
    537e:	9304      	str	r3, [sp, #16]
    5380:	e63b      	b.n	4ffa <ILI9341_t3n::drawFontChar(unsigned int)+0x446>
    5382:	bf00      	nop
    5384:	e000e100 	.word	0xe000e100
    5388:	07e0f81f 	.word	0x07e0f81f
      // 1bpp
      else {

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
    538c:	9b06      	ldr	r3, [sp, #24]
    538e:	2b00      	cmp	r3, #0
    5390:	f77f ae3e 	ble.w	5010 <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
            do {
              uint32_t xsize = width - x;
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
    5394:	9e09      	ldr	r6, [sp, #36]	; 0x24
    5396:	f8cd a010 	str.w	sl, [sp, #16]
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    539a:	ea4f 03d9 	mov.w	r3, r9, lsr #3
    539e:	9904      	ldr	r1, [sp, #16]
    53a0:	ea6f 0209 	mvn.w	r2, r9
    53a4:	5ccb      	ldrb	r3, [r1, r3]
    53a6:	f002 0207 	and.w	r2, r2, #7
    53aa:	4113      	asrs	r3, r2
    53ac:	f013 0301 	ands.w	r3, r3, #1

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
          // Serial.printf("    linecount = %d\n", linecount);
          uint32_t b = fetchbit(data, bitoffset++);
    53b0:	f109 0201 	add.w	r2, r9, #1
    53b4:	9209      	str	r2, [sp, #36]	; 0x24
  }
  gfxFont = f;
}

static uint32_t fetchbit(const uint8_t *p, uint32_t index) {
  if (p[index >> 3] & (1 << (7 - (index & 7))))
    53b6:	f040 80a5 	bne.w	5504 <ILI9341_t3n::drawFontChar(unsigned int)+0x950>
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    53ba:	930a      	str	r3, [sp, #40]	; 0x28
    53bc:	1c73      	adds	r3, r6, #1
    53be:	930b      	str	r3, [sp, #44]	; 0x2c
    53c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    53c2:	3301      	adds	r3, #1
    53c4:	930f      	str	r3, [sp, #60]	; 0x3c
            // We need to handle case where some of the bits may not be visible,
            // but we still need to
            // read through them
            // Serial.printf("y:%d  %d %d %d %d\n", screen_y, start_x, origin_x,
            // _displayclipx1, _displayclipx2);
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    53c6:	f9bb 7038 	ldrsh.w	r7, [fp, #56]	; 0x38
    53ca:	42b7      	cmp	r7, r6
    53cc:	dc24      	bgt.n	5418 <ILI9341_t3n::drawFontChar(unsigned int)+0x864>
    53ce:	f9bb 303c 	ldrsh.w	r3, [fp, #60]	; 0x3c
    53d2:	42b3      	cmp	r3, r6
    53d4:	dd20      	ble.n	5418 <ILI9341_t3n::drawFontChar(unsigned int)+0x864>
              for (screen_x = start_x; screen_x < origin_x; screen_x++) {
    53d6:	9d08      	ldr	r5, [sp, #32]
    53d8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    53da:	42a5      	cmp	r5, r4
    53dc:	dc03      	bgt.n	53e6 <ILI9341_t3n::drawFontChar(unsigned int)+0x832>
    53de:	e01b      	b.n	5418 <ILI9341_t3n::drawFontChar(unsigned int)+0x864>
    53e0:	3401      	adds	r4, #1
    53e2:	42a5      	cmp	r5, r4
    53e4:	d016      	beq.n	5414 <ILI9341_t3n::drawFontChar(unsigned int)+0x860>
                if ((screen_x >= _displayclipx1) &&
    53e6:	f9bb 3036 	ldrsh.w	r3, [fp, #54]	; 0x36
    53ea:	42a3      	cmp	r3, r4
    53ec:	dcf8      	bgt.n	53e0 <ILI9341_t3n::drawFontChar(unsigned int)+0x82c>
    53ee:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
    53f2:	42a3      	cmp	r3, r4
    53f4:	ddf4      	ble.n	53e0 <ILI9341_t3n::drawFontChar(unsigned int)+0x82c>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    53f6:	f89b 108d 	ldrb.w	r1, [fp, #141]	; 0x8d
    53fa:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    53fe:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5406:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    540a:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    540c:	4658      	mov	r0, fp
    540e:	f7fd fcdf 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    5412:	e7e5      	b.n	53e0 <ILI9341_t3n::drawFontChar(unsigned int)+0x82c>
    5414:	f9bb 7038 	ldrsh.w	r7, [fp, #56]	; 0x38
    // In this mode we need to update to use the offset and bounding rectangles
    // as we are doing it it direct.
    // also update the Origin
    int cursor_x_origin = cursor_x + _originx;
    int cursor_y_origin = cursor_y + _originy;
    origin_x += _originx;
    5418:	9c08      	ldr	r4, [sp, #32]
    541a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    541e:	f04f 0a00 	mov.w	sl, #0
              }
            }
            uint32_t x = 0;
            screen_x = origin_x;
            do {
              uint32_t xsize = width - x;
    5422:	ebca 0508 	rsb	r5, sl, r8
    5426:	2d20      	cmp	r5, #32
    5428:	bf28      	it	cs
    542a:	2520      	movcs	r5, #32
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    542c:	4649      	mov	r1, r9
    542e:	462a      	mov	r2, r5
    5430:	9804      	ldr	r0, [sp, #16]
    5432:	f7fd f875 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    5436:	42b7      	cmp	r7, r6
            screen_x = origin_x;
            do {
              uint32_t xsize = width - x;
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
    5438:	4601      	mov	r1, r0
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    543a:	dc32      	bgt.n	54a2 <ILI9341_t3n::drawFontChar(unsigned int)+0x8ee>
    543c:	f9bb 203c 	ldrsh.w	r2, [fp, #60]	; 0x3c
    5440:	42b2      	cmp	r2, r6
    5442:	dd2e      	ble.n	54a2 <ILI9341_t3n::drawFontChar(unsigned int)+0x8ee>
            do {
              uint32_t xsize = width - x;
              if (xsize > 32)
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
    5444:	1e6a      	subs	r2, r5, #1
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask) {
    5446:	2301      	movs	r3, #1
    5448:	fa13 f202 	lsls.w	r2, r3, r2
    544c:	d028      	beq.n	54a0 <ILI9341_t3n::drawFontChar(unsigned int)+0x8ec>
    544e:	465b      	mov	r3, fp
    5450:	9506      	str	r5, [sp, #24]
    5452:	46b3      	mov	fp, r6
    5454:	4605      	mov	r5, r0
    5456:	4617      	mov	r7, r2
    5458:	461e      	mov	r6, r3
                  if ((screen_x >= _displayclipx1) &&
    545a:	f9b6 2036 	ldrsh.w	r2, [r6, #54]	; 0x36
    545e:	42a2      	cmp	r2, r4
    5460:	dc14      	bgt.n	548c <ILI9341_t3n::drawFontChar(unsigned int)+0x8d8>
    5462:	f9b6 203a 	ldrsh.w	r2, [r6, #58]	; 0x3a
    5466:	42a2      	cmp	r2, r4
    5468:	dd10      	ble.n	548c <ILI9341_t3n::drawFontChar(unsigned int)+0x8d8>
                      (screen_x < _displayclipx2)) {
                    writedata16_cont((bits & bit_mask) ? textcolor
    546a:	423d      	tst	r5, r7
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    546c:	f896 008d 	ldrb.w	r0, [r6, #141]	; 0x8d
    5470:	bf14      	ite	ne
    5472:	f8b6 104a 	ldrhne.w	r1, [r6, #74]	; 0x4a
    5476:	f8b6 104c 	ldrheq.w	r1, [r6, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    547a:	69f2      	ldr	r2, [r6, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    547c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    5480:	f041 4110 	orr.w	r1, r1, #2415919104	; 0x90000000
    5484:	6351      	str	r1, [r2, #52]	; 0x34
    waitFifoNotFull();
    5486:	4630      	mov	r0, r6
    5488:	f7fd fca2 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask) {
    548c:	087f      	lsrs	r7, r7, #1
                    writedata16_cont((bits & bit_mask) ? textcolor
                                                       : textbgcolor);
                    // Serial.write((bits & bit_mask) ? '*' : '.');
                  }
                  bit_mask = bit_mask >> 1;
                  screen_x++; // Current actual screen X
    548e:	f104 0401 	add.w	r4, r4, #1
                xsize = 32;
              uint32_t bits = fetchbits_unsigned(data, bitoffset, xsize);
              uint32_t bit_mask = 1 << (xsize - 1);
              // Serial.printf("     %d %d %x %x - ", x, xsize, bits, bit_mask);
              if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
                while (bit_mask) {
    5492:	d1e2      	bne.n	545a <ILI9341_t3n::drawFontChar(unsigned int)+0x8a6>
    5494:	4633      	mov	r3, r6
    5496:	9d06      	ldr	r5, [sp, #24]
    5498:	f9b3 7038 	ldrsh.w	r7, [r3, #56]	; 0x38
    549c:	465e      	mov	r6, fp
    549e:	469b      	mov	fp, r3
                  }
                  bit_mask = bit_mask >> 1;
                  screen_x++; // Current actual screen X
                }
                // Serial.println();
                bitoffset += xsize;
    54a0:	44a9      	add	r9, r5
              }
              x += xsize;
    54a2:	44aa      	add	sl, r5
            } while (x < width);
    54a4:	45d0      	cmp	r8, sl
    54a6:	d8bc      	bhi.n	5422 <ILI9341_t3n::drawFontChar(unsigned int)+0x86e>
            if ((screen_y >= _displayclipy1) && (screen_y < _displayclipy2)) {
    54a8:	42be      	cmp	r6, r7
    54aa:	db1a      	blt.n	54e2 <ILI9341_t3n::drawFontChar(unsigned int)+0x92e>
    54ac:	f9bb 303c 	ldrsh.w	r3, [fp, #60]	; 0x3c
    54b0:	42b3      	cmp	r3, r6
    54b2:	dd16      	ble.n	54e2 <ILI9341_t3n::drawFontChar(unsigned int)+0x92e>
              // output bg color and right hand side
              while (screen_x++ <= end_x) {
    54b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    54b6:	429c      	cmp	r4, r3
    54b8:	f104 0501 	add.w	r5, r4, #1
    54bc:	dc11      	bgt.n	54e2 <ILI9341_t3n::drawFontChar(unsigned int)+0x92e>
    54be:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    54c0:	f89b 108d 	ldrb.w	r1, [fp, #141]	; 0x8d
    54c4:	f8bb 304c 	ldrh.w	r3, [fp, #76]	; 0x4c
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    54c8:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    54cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    54d0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    54d4:	3501      	adds	r5, #1
    54d6:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    54d8:	4658      	mov	r0, fp
    54da:	f7fd fc79 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    54de:	42a5      	cmp	r5, r4
    54e0:	d1ee      	bne.n	54c0 <ILI9341_t3n::drawFontChar(unsigned int)+0x90c>
    54e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    54e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
                writedata16_cont(textbgcolor);
                // Serial.write('+');
              }
              // Serial.println();
            }
            screen_y++;
    54e6:	3601      	adds	r6, #1
    54e8:	4413      	add	r3, r2
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    54ea:	42b3      	cmp	r3, r6
    54ec:	f47f af6b 	bne.w	53c6 <ILI9341_t3n::drawFontChar(unsigned int)+0x812>
    54f0:	9b05      	ldr	r3, [sp, #20]
    54f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    54f4:	3b01      	subs	r3, #1
    54f6:	1a9b      	subs	r3, r3, r2
      // 1bpp
      else {

        // Now lets process each of the data lines.
        screen_y = origin_y;
        while (linecount > 0) {
    54f8:	2b00      	cmp	r3, #0
    54fa:	9305      	str	r3, [sp, #20]
    54fc:	f73f af4d 	bgt.w	539a <ILI9341_t3n::drawFontChar(unsigned int)+0x7e6>
    5500:	9609      	str	r6, [sp, #36]	; 0x24
    5502:	e585      	b.n	5010 <ILI9341_t3n::drawFontChar(unsigned int)+0x45c>
          if (b == 0) {
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
    5504:	9909      	ldr	r1, [sp, #36]	; 0x24
    5506:	9804      	ldr	r0, [sp, #16]
    5508:	2203      	movs	r2, #3
    550a:	f7fd f809 	bl	2520 <fetchbits_unsigned(unsigned char const*, unsigned long, unsigned long)>
            bitoffset += 3;
    550e:	f109 0304 	add.w	r3, r9, #4
    5512:	9309      	str	r3, [sp, #36]	; 0x24
          }
          uint32_t bitoffset_row_start = bitoffset;
          while (n--) {
    5514:	1c43      	adds	r3, r0, #1
    5516:	3002      	adds	r0, #2
    5518:	930a      	str	r3, [sp, #40]	; 0x28
    551a:	f47f af4f 	bne.w	53bc <ILI9341_t3n::drawFontChar(unsigned int)+0x808>
            // Serial.println("    Single");
            n = 1;
          } else {
            // Serial.println("    Multi");
            n = fetchbits_unsigned(data, bitoffset, 3) + 2;
            bitoffset += 3;
    551e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    5522:	e73a      	b.n	539a <ILI9341_t3n::drawFontChar(unsigned int)+0x7e6>

00005524 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]>:
  }
  return size;
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
    5524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5528:	b095      	sub	sp, #84	; 0x54
    552a:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
    552e:	f89d 4080 	ldrb.w	r4, [sp, #128]	; 0x80
    5532:	9403      	str	r4, [sp, #12]
    5534:	462f      	mov	r7, r5
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    5536:	b224      	sxth	r4, r4
  }
  return size;
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
    5538:	9505      	str	r5, [sp, #20]
    553a:	f8bd 507c 	ldrh.w	r5, [sp, #124]	; 0x7c
    553e:	9504      	str	r5, [sp, #16]
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    5540:	9406      	str	r4, [sp, #24]
  }
  return size;
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
    5542:	f89d 5084 	ldrb.w	r5, [sp, #132]	; 0x84
    5546:	9509      	str	r5, [sp, #36]	; 0x24
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    5548:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    554c:	0064      	lsls	r4, r4, #1
  }
  return size;
}

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
    554e:	462e      	mov	r6, r5
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
    5550:	190d      	adds	r5, r1, r4
    5552:	2d00      	cmp	r5, #0
    5554:	f340 818e 	ble.w	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
      ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
    5558:	b236      	sxth	r6, r6
    555a:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    555e:	eb02 050e 	add.w	r5, r2, lr
    5562:	2d00      	cmp	r5, #0
      ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
    5564:	9608      	str	r6, [sp, #32]
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
      (y >= _height) ||             // Clip bottom
      ((x + 6 * size_x - 1) < 0) || // Clip left  TODO: is this correct?
    5566:	f340 8185 	ble.w	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
    556a:	9207      	str	r2, [sp, #28]
      ((y + 8 * size_y - 1) < 0))   // Clip top   TODO: is this correct?
    return;

  //	Serial.printf("drawchar %d %d %c %x %x %d %d\n", x, y, c, fgcolor,
  //bgcolor, size_x, size_y);
  if (fgcolor == bgcolor) {
    556c:	9a04      	ldr	r2, [sp, #16]
    556e:	4297      	cmp	r7, r2
    5570:	469a      	mov	sl, r3
    5572:	4605      	mov	r5, r0
    5574:	468b      	mov	fp, r1
    5576:	f000 8180 	beq.w	587a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x356>
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    557a:	8e43      	ldrh	r3, [r0, #50]	; 0x32
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    557c:	f9b0 103a 	ldrsh.w	r1, [r0, #58]	; 0x3a
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    5580:	445b      	add	r3, fp
    5582:	b29b      	uxth	r3, r3
    5584:	b21a      	sxth	r2, r3
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    5586:	428a      	cmp	r2, r1
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    5588:	4617      	mov	r7, r2
    558a:	920a      	str	r2, [sp, #40]	; 0x28
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    558c:	f280 8172 	bge.w	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    y += _originy;
    5590:	8eaa      	ldrh	r2, [r5, #52]	; 0x34
    5592:	9807      	ldr	r0, [sp, #28]
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
    5594:	f9b5 c03c 	ldrsh.w	ip, [r5, #60]	; 0x3c
    uint8_t mask = 0x01;
    uint16_t color;

    // We need to offset by the origin.
    x += _originx;
    y += _originy;
    5598:	4410      	add	r0, r2
    559a:	b282      	uxth	r2, r0
    559c:	b216      	sxth	r6, r2
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
    559e:	4566      	cmp	r6, ip
    55a0:	f280 8168 	bge.w	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
        (y >= _displayclipy2) || // Clip bottom
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
    55a4:	f9b5 0036 	ldrsh.w	r0, [r5, #54]	; 0x36
    x += _originx;
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
    55a8:	443c      	add	r4, r7
    55aa:	4284      	cmp	r4, r0
        ((x + 6 * size_x - 1) <
    55ac:	46bb      	mov	fp, r7
    x += _originx;
    y += _originy;
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
    55ae:	f340 8161 	ble.w	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
        ((y + 8 * size_y - 1) <
         _displayclipy1)) // Clip top   TODO: this is not correct
    55b2:	f9b5 8038 	ldrsh.w	r8, [r5, #56]	; 0x38

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
        ((y + 8 * size_y - 1) <
    55b6:	9606      	str	r6, [sp, #24]
    int16_t x_char_start = x; // remember our X where we start outputting...

    if ((x >= _displayclipx2) || // Clip right
        (y >= _displayclipy2) || // Clip bottom
        ((x + 6 * size_x - 1) <
         _displayclipx1) || // Clip left  TODO: this is not correct
    55b8:	44b6      	add	lr, r6
    55ba:	45c6      	cmp	lr, r8
    55bc:	f340 815a 	ble.w	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    55c0:	9c03      	ldr	r4, [sp, #12]
    55c2:	eb04 0944 	add.w	r9, r4, r4, lsl #1
      int16_t h = 8 * size_y;
    55c6:	9c09      	ldr	r4, [sp, #36]	; 0x24

      if (x < _displayclipx1) {
    55c8:	4287      	cmp	r7, r0
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    55ca:	ea4f 0949 	mov.w	r9, r9, lsl #1
      int16_t h = 8 * size_y;
    55ce:	ea4f 0ec4 	mov.w	lr, r4, lsl #3

      if (x < _displayclipx1) {
    55d2:	f2c0 827f 	blt.w	5ad4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x5b0>
    } else
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
    55d6:	fa0f f989 	sxth.w	r9, r9
    55da:	461f      	mov	r7, r3

      if (x < _displayclipx1) {
        w -= (_displayclipx1 - x);
        x = _displayclipx1;
      }
      if ((x + w - 1) >= _displayclipx2)
    55dc:	44cb      	add	fp, r9
    55de:	458b      	cmp	fp, r1
    55e0:	dd02      	ble.n	55e8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0xc4>
        w = _displayclipx2 - x;
    55e2:	1bc9      	subs	r1, r1, r7
    55e4:	fa0f f981 	sxth.w	r9, r1
      if (y < _displayclipy1) {
    55e8:	4546      	cmp	r6, r8
    55ea:	f2c0 82b4 	blt.w	5b56 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x632>
#endif
    {
      // need to build actual pixel rectangle we will output into.
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
      int16_t h = 8 * size_y;
    55ee:	fa0f f48e 	sxth.w	r4, lr
    55f2:	4693      	mov	fp, r2
        w = _displayclipx2 - x;
      if (y < _displayclipy1) {
        h -= (_displayclipy1 - y);
        y = _displayclipy1;
      }
      if ((y + h - 1) >= _displayclipy2)
    55f4:	9b06      	ldr	r3, [sp, #24]
    *(base + 33) = mask;
  }
#endif

  void beginSPITransaction(uint32_t clock) __attribute__((always_inline)) {
    _pspi->beginTransaction(SPISettings(clock, MSBFIRST, SPI_MODE0));
    55f6:	f8d5 8008 	ldr.w	r8, [r5, #8]
    55fa:	6969      	ldr	r1, [r5, #20]
    55fc:	4423      	add	r3, r4
    55fe:	4563      	cmp	r3, ip
        h = _displayclipy2 - y;
    5600:	bfc8      	it	gt
    5602:	ebcb 040c 	rsbgt	r4, fp, ip
    5606:	f04f 0300 	mov.w	r3, #0
    560a:	f04f 0201 	mov.w	r2, #1
    560e:	a813      	add	r0, sp, #76	; 0x4c
    5610:	bfc8      	it	gt
    5612:	b224      	sxthgt	r4, r4
    5614:	f7fc ffbe 	bl	2594 <SPISettings::SPISettings(unsigned long, unsigned char, unsigned char)>
    5618:	4640      	mov	r0, r8
    561a:	9913      	ldr	r1, [sp, #76]	; 0x4c
    561c:	f7fc ffec 	bl	25f8 <SPIClass::beginTransaction(SPISettings)>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
    if (!_dcport)
      _spi_tcr_current = _pimxrt_spi->TCR; // Only if DC is on hardware CS
#endif
    if (_csport) {
    5620:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    5624:	b12b      	cbz	r3, 5632 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x10e>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_LOW(_csport, _cspinmask);
#else
      *_csport &= ~_cspinmask;
    5626:	781a      	ldrb	r2, [r3, #0]
    5628:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
    562c:	ea22 0201 	bic.w	r2, r2, r1
    5630:	701a      	strb	r2, [r3, #0]
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    5632:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5636:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    5638:	041b      	lsls	r3, r3, #16
    563a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    563e:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
    5642:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    5644:	4628      	mov	r0, r5

      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);
    5646:	1e7b      	subs	r3, r7, #1
    5648:	4499      	add	r9, r3
    564a:	f7fd fbc1 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    564e:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5652:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5654:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
    5658:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    565c:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    565e:	4628      	mov	r0, r5
    5660:	f7fd fbb6 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5664:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5668:	69ea      	ldr	r2, [r5, #28]
    566a:	fa1f f989 	uxth.w	r9, r9
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    566e:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    5672:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    5676:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    5678:	4628      	mov	r0, r5
    567a:	f7fd fba9 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    567e:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5682:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    5684:	041b      	lsls	r3, r3, #16
    5686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    568a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
    568e:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    5690:	4628      	mov	r0, r5
    5692:	f7fd fb9d 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5696:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    569a:	69ea      	ldr	r2, [r5, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    569c:	ea4b 4303 	orr.w	r3, fp, r3, lsl #16
    56a0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    56a4:	f10b 38ff 	add.w	r8, fp, #4294967295
    56a8:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    56aa:	4628      	mov	r0, r5
    56ac:	f7fd fb90 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    56b0:	4444      	add	r4, r8
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    56b2:	f895 308d 	ldrb.w	r3, [r5, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    56b6:	69ea      	ldr	r2, [r5, #28]
    56b8:	fa1f f884 	uxth.w	r8, r4
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    56bc:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
    56c0:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    56c4:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    56c6:	4628      	mov	r0, r5
    56c8:	f7fd fb82 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    56cc:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    }
    _pspi->endTransaction();
  }
#if defined(KINETISK)
  void writecommand_cont(uint8_t c) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    56d0:	69ea      	ldr	r2, [r5, #28]
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    56d2:	041b      	lsls	r3, r3, #16
    56d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    56d8:	f043 032c 	orr.w	r3, r3, #44	; 0x2c
    56dc:	eb0a 018a 	add.w	r1, sl, sl, lsl #2
    56e0:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    56e2:	4628      	mov	r0, r5
    56e4:	460c      	mov	r4, r1
    56e6:	910b      	str	r1, [sp, #44]	; 0x2c
    56e8:	f7fd fb72 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
    56ec:	4aaf      	ldr	r2, [pc, #700]	; (59ac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x488>)
    56ee:	1d63      	adds	r3, r4, #5
    56f0:	4413      	add	r3, r2
    56f2:	930c      	str	r3, [sp, #48]	; 0x30
    56f4:	2308      	movs	r3, #8
    56f6:	930d      	str	r3, [sp, #52]	; 0x34
    }
  } else {
    // This solid background approach is about 5 time faster
    uint8_t xc, yc;
    uint8_t xr, yr;
    uint8_t mask = 0x01;
    56f8:	2301      	movs	r3, #1
    56fa:	9306      	str	r3, [sp, #24]
    56fc:	46ab      	mov	fp, r5
      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
    56fe:	f9bb 203c 	ldrsh.w	r2, [fp, #60]	; 0x3c
    5702:	42b2      	cmp	r2, r6
    5704:	f340 808d 	ble.w	5822 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2fe>
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
    5708:	9b09      	ldr	r3, [sp, #36]	; 0x24
    570a:	2b00      	cmp	r3, #0
    570c:	d07e      	beq.n	580c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2e8>
    570e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5710:	1e5a      	subs	r2, r3, #1
    5712:	b2d2      	uxtb	r2, r2
    5714:	3201      	adds	r2, #1
    5716:	4432      	add	r2, r6
    5718:	b213      	sxth	r3, r2
    571a:	9307      	str	r3, [sp, #28]
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
    571c:	f9bb 2038 	ldrsh.w	r2, [fp, #56]	; 0x38
    5720:	42b2      	cmp	r2, r6
    5722:	dc6a      	bgt.n	57fa <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2d6>
    5724:	9b03      	ldr	r3, [sp, #12]
    5726:	9608      	str	r6, [sp, #32]
    5728:	f103 38ff 	add.w	r8, r3, #4294967295
    572c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    572e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5730:	461a      	mov	r2, r3
    5732:	4b9e      	ldr	r3, [pc, #632]	; (59ac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x488>)
    5734:	eb02 0a03 	add.w	sl, r2, r3
    5738:	465e      	mov	r6, fp
    573a:	46d3      	mov	fp, sl
    573c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
    5740:	fa5f f888 	uxtb.w	r8, r8
            for (xc = 0; xc < 5; xc++) {
              if (glcdfont[c * 5 + xc] & mask) {
    5744:	f81b 2b01 	ldrb.w	r2, [fp], #1
    5748:	9b06      	ldr	r3, [sp, #24]
    574a:	421a      	tst	r2, r3
    574c:	9b05      	ldr	r3, [sp, #20]
    574e:	9a04      	ldr	r2, [sp, #16]
    5750:	bf18      	it	ne
    5752:	461f      	movne	r7, r3
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    5754:	9b03      	ldr	r3, [sp, #12]
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
            for (xc = 0; xc < 5; xc++) {
              if (glcdfont[c * 5 + xc] & mask) {
    5756:	bf08      	it	eq
    5758:	4617      	moveq	r7, r2
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    575a:	b32b      	cbz	r3, 57a8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x284>
    575c:	b2a5      	uxth	r5, r4
    575e:	f108 0201 	add.w	r2, r8, #1
    5762:	442a      	add	r2, r5
    5764:	fa0f f982 	sxth.w	r9, r2
    5768:	e003      	b.n	5772 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x24e>
    576a:	3401      	adds	r4, #1
    576c:	b224      	sxth	r4, r4
    576e:	45a1      	cmp	r9, r4
    5770:	d016      	beq.n	57a0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x27c>
                if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    5772:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
    5776:	42a3      	cmp	r3, r4
    5778:	dcf7      	bgt.n	576a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x246>
    577a:	f9b6 303a 	ldrsh.w	r3, [r6, #58]	; 0x3a
    577e:	42a3      	cmp	r3, r4
    5780:	ddf3      	ble.n	576a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x246>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5782:	f896 208d 	ldrb.w	r2, [r6, #141]	; 0x8d
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    5786:	69f3      	ldr	r3, [r6, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    5788:	ea47 4202 	orr.w	r2, r7, r2, lsl #16
    578c:	f042 4210 	orr.w	r2, r2, #2415919104	; 0x90000000
    5790:	3401      	adds	r4, #1
    5792:	635a      	str	r2, [r3, #52]	; 0x34
    waitFifoNotFull();
    5794:	4630      	mov	r0, r6
    5796:	b224      	sxth	r4, r4
    5798:	f7fd fb1a 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
              if (glcdfont[c * 5 + xc] & mask) {
                color = fgcolor;
              } else {
                color = bgcolor;
              }
              for (xr = 0; xr < size_x; xr++) {
    579c:	45a1      	cmp	r9, r4
    579e:	d1e8      	bne.n	5772 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x24e>
    57a0:	eb05 0408 	add.w	r4, r5, r8
    57a4:	3401      	adds	r4, #1
    57a6:	b224      	sxth	r4, r4
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
          x = x_char_start; // get our first x position...
          if (y >= _displayclipy1) {
            for (xc = 0; xc < 5; xc++) {
    57a8:	45d3      	cmp	fp, sl
    57aa:	d1cb      	bne.n	5744 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x220>
                  writedata16_cont(color);
                }
                x++;
              }
            }
            for (xr = 0; xr < size_x; xr++) {
    57ac:	9b03      	ldr	r3, [sp, #12]
    57ae:	46b3      	mov	fp, r6
    57b0:	9e08      	ldr	r6, [sp, #32]
    57b2:	b313      	cbz	r3, 57fa <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2d6>
    57b4:	1e5d      	subs	r5, r3, #1
    57b6:	b2ed      	uxtb	r5, r5
    57b8:	3501      	adds	r5, #1
    57ba:	4425      	add	r5, r4
    57bc:	b22d      	sxth	r5, r5
    57be:	e003      	b.n	57c8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2a4>
    57c0:	3401      	adds	r4, #1
    57c2:	b224      	sxth	r4, r4
    57c4:	42ac      	cmp	r4, r5
    57c6:	d018      	beq.n	57fa <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2d6>
              if ((x >= _displayclipx1) && (x < _displayclipx2)) {
    57c8:	f9bb 3036 	ldrsh.w	r3, [fp, #54]	; 0x36
    57cc:	42a3      	cmp	r3, r4
    57ce:	dcf7      	bgt.n	57c0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x29c>
    57d0:	f9bb 303a 	ldrsh.w	r3, [fp, #58]	; 0x3a
    57d4:	42a3      	cmp	r3, r4
    57d6:	ddf3      	ble.n	57c0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x29c>
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    57d8:	f89b 308d 	ldrb.w	r3, [fp, #141]	; 0x8d
    57dc:	9904      	ldr	r1, [sp, #16]
    _pkinetisk_spi->PUSHR =
        c | (pcs_data << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writedata16_cont(uint16_t d) __attribute__((always_inline)) {
    _pkinetisk_spi->PUSHR =
    57de:	f8db 201c 	ldr.w	r2, [fp, #28]
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    57e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    57e6:	f043 4310 	orr.w	r3, r3, #2415919104	; 0x90000000
    57ea:	3401      	adds	r4, #1
    57ec:	6353      	str	r3, [r2, #52]	; 0x34
    waitFifoNotFull();
    57ee:	4658      	mov	r0, fp
    57f0:	b224      	sxth	r4, r4
    57f2:	f7fd faed 	bl	2dd0 <ILI9341_t3n::waitFifoNotFull()>
                  writedata16_cont(color);
                }
                x++;
              }
            }
            for (xr = 0; xr < size_x; xr++) {
    57f6:	42ac      	cmp	r4, r5
    57f8:	d1e6      	bne.n	57c8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2a4>
    57fa:	3601      	adds	r6, #1
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
        for (yr = 0; (yr < size_y) && (y < _displayclipy2); yr++) {
    57fc:	9b07      	ldr	r3, [sp, #28]
    57fe:	b236      	sxth	r6, r6
    5800:	42b3      	cmp	r3, r6
    5802:	d003      	beq.n	580c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x2e8>
    5804:	f9bb 203c 	ldrsh.w	r2, [fp, #60]	; 0x3c
    5808:	42b2      	cmp	r2, r6
    580a:	dc87      	bgt.n	571c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x1f8>
              x++;
            }
          }
          y++;
        }
        mask = mask << 1;
    580c:	9b06      	ldr	r3, [sp, #24]
    580e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    5810:	005b      	lsls	r3, r3, #1
    5812:	b2db      	uxtb	r3, r3
    5814:	3a01      	subs	r2, #1
    5816:	9306      	str	r3, [sp, #24]
      beginSPITransaction(_SPI_CLOCK);
      setAddr(x, y, x + w - 1, y + h - 1);

      y = y_char_top; // restore the actual y.
      writecommand_cont(ILI9341_RAMWR);
      for (yc = 0; (yc < 8) && (y < _displayclipy2); yc++) {
    5818:	f012 03ff 	ands.w	r3, r2, #255	; 0xff
    581c:	930d      	str	r3, [sp, #52]	; 0x34
    581e:	f47f af6e 	bne.w	56fe <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x1da>
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    5822:	f89b 308e 	ldrb.w	r3, [fp, #142]	; 0x8e
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    5826:	f8db 201c 	ldr.w	r2, [fp, #28]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    582a:	041b      	lsls	r3, r3, #16
    582c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    _pkinetisk_spi->PUSHR =
        d | (pcs_data << 16) | SPI_PUSHR_CTAS(1) | SPI_PUSHR_CONT;
    waitFifoNotFull();
  }
  void writecommand_last(uint8_t c) __attribute__((always_inline)) {
    uint32_t mcr = _pkinetisk_spi->MCR;
    5830:	6811      	ldr	r1, [r2, #0]
    _pkinetisk_spi->PUSHR =
        c | (pcs_command << 16) | SPI_PUSHR_CTAS(0) | SPI_PUSHR_EOQ;
    5832:	6353      	str	r3, [r2, #52]	; 0x34
    waitTransmitComplete(mcr);
    5834:	4658      	mov	r0, fp
    5836:	f7fd fc4b 	bl	30d0 <ILI9341_t3n::waitTransmitComplete(unsigned long)>
      *_csport &= ~_cspinmask;
#endif
    }
  }
  void endSPITransaction() __attribute__((always_inline)) {
    if (_csport) {
    583a:	f8db 309c 	ldr.w	r3, [fp, #156]	; 0x9c
    583e:	465d      	mov	r5, fp
    5840:	b123      	cbz	r3, 584c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x328>
#if defined(__IMXRT1052__) || defined(__IMXRT1062__) // Teensy 4.x
      DIRECT_WRITE_HIGH(_csport, _cspinmask);
#else
      *_csport |= _cspinmask;
    5842:	7819      	ldrb	r1, [r3, #0]
    5844:	f89b 2098 	ldrb.w	r2, [fp, #152]	; 0x98
    5848:	430a      	orrs	r2, r1
    584a:	701a      	strb	r2, [r3, #0]
#endif
    }
    _pspi->endTransaction();
    584c:	68ab      	ldr	r3, [r5, #8]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    584e:	7ada      	ldrb	r2, [r3, #11]
    5850:	b182      	cbz	r2, 5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
			if (interruptMasksUsed & 0x01) {
    5852:	07d0      	lsls	r0, r2, #31
    5854:	d503      	bpl.n	585e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x33a>
				NVIC_ISER0 = interruptSave[0];
    5856:	4a56      	ldr	r2, [pc, #344]	; (59b0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x48c>)
    5858:	6999      	ldr	r1, [r3, #24]
    585a:	6011      	str	r1, [r2, #0]
    585c:	7ada      	ldrb	r2, [r3, #11]
			}
			#if NVIC_NUM_INTERRUPTS > 32
			if (interruptMasksUsed & 0x02) {
    585e:	0791      	lsls	r1, r2, #30
    5860:	d503      	bpl.n	586a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x346>
				NVIC_ISER1 = interruptSave[1];
    5862:	4a54      	ldr	r2, [pc, #336]	; (59b4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x490>)
    5864:	69d9      	ldr	r1, [r3, #28]
    5866:	6011      	str	r1, [r2, #0]
    5868:	7ada      	ldrb	r2, [r3, #11]
			}
			#endif
			#if NVIC_NUM_INTERRUPTS > 64 && defined(NVIC_ISER2)
			if (interruptMasksUsed & 0x04) {
    586a:	0752      	lsls	r2, r2, #29
    586c:	d502      	bpl.n	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
				NVIC_ISER2 = interruptSave[2];
    586e:	4a52      	ldr	r2, [pc, #328]	; (59b8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x494>)
    5870:	6a1b      	ldr	r3, [r3, #32]
    5872:	6013      	str	r3, [r2, #0]
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
  }
}
    5874:	b015      	add	sp, #84	; 0x54
    5876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  //	Serial.printf("drawchar %d %d %c %x %x %d %d\n", x, y, c, fgcolor,
  //bgcolor, size_x, size_y);
  if (fgcolor == bgcolor) {
    // This transparent approach is only about 20% faster
    if ((size_x == 1) && (size_y == 1)) {
    587a:	9b03      	ldr	r3, [sp, #12]
    587c:	2b01      	cmp	r3, #1
    587e:	f000 80ce 	beq.w	5a1e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x4fa>
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    5882:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    5886:	4949      	ldr	r1, [pc, #292]	; (59ac <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x488>)
    5888:	910d      	str	r1, [sp, #52]	; 0x34
    588a:	4618      	mov	r0, r3
    588c:	460c      	mov	r4, r1
    588e:	2305      	movs	r3, #5
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    5890:	0081      	lsls	r1, r0, #2
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    5892:	0042      	lsls	r2, r0, #1
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    5894:	460e      	mov	r6, r1
    5896:	9111      	str	r1, [sp, #68]	; 0x44
    5898:	fb13 310a 	smlabb	r1, r3, sl, r3
    589c:	fb1a f303 	smulbb	r3, sl, r3
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    58a0:	b217      	sxth	r7, r2
    58a2:	930e      	str	r3, [sp, #56]	; 0x38
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
    58a4:	1882      	adds	r2, r0, r2
    58a6:	4623      	mov	r3, r4
    58a8:	440b      	add	r3, r1
    58aa:	920a      	str	r2, [sp, #40]	; 0x28
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    58ac:	4602      	mov	r2, r0
    58ae:	1990      	adds	r0, r2, r6
    58b0:	930f      	str	r3, [sp, #60]	; 0x3c
    58b2:	46aa      	mov	sl, r5
    58b4:	2308      	movs	r3, #8
    58b6:	9d05      	ldr	r5, [sp, #20]
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
    58b8:	970b      	str	r7, [sp, #44]	; 0x2c
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
    58ba:	9010      	str	r0, [sp, #64]	; 0x40
    58bc:	9304      	str	r3, [sp, #16]
    58be:	2701      	movs	r7, #1
    58c0:	f04f 0800 	mov.w	r8, #0
    58c4:	4691      	mov	r9, r2
    58c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    58c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    58ca:	980f      	ldr	r0, [sp, #60]	; 0x3c
    58cc:	189a      	adds	r2, r3, r2
    58ce:	2300      	movs	r3, #0
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
          if (glcdfont[c * 5 + xoff] & mask)
    58d0:	f812 1b01 	ldrb.w	r1, [r2], #1
    58d4:	4239      	tst	r1, r7
            line |= 1;
    58d6:	bf18      	it	ne
    58d8:	f043 0301 	orrne.w	r3, r3, #1
          line <<= 1;
    58dc:	005b      	lsls	r3, r3, #1
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    58de:	4290      	cmp	r0, r2
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
    58e0:	b2db      	uxtb	r3, r3
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    58e2:	d1f5      	bne.n	58d0 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x3ac>
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
    58e4:	105b      	asrs	r3, r3, #1
    58e6:	b2dc      	uxtb	r4, r3
        xoff = 0;
        while (line) {
    58e8:	2b00      	cmp	r3, #0
    58ea:	f000 80ef 	beq.w	5acc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x5a8>
          if (line == 0x1F) {
    58ee:	2c1f      	cmp	r4, #31
    58f0:	f000 8084 	beq.w	59fc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x4d8>
    58f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
    58f8:	fa1f f388 	uxth.w	r3, r8
    58fc:	9303      	str	r3, [sp, #12]
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
            break;
          } else if (line == 0x1E) {
    58fe:	2c1e      	cmp	r4, #30
    5900:	fb12 f303 	smulbb	r3, r2, r3
    5904:	930c      	str	r3, [sp, #48]	; 0x30
    5906:	bf08      	it	eq
    5908:	2100      	moveq	r1, #0
    590a:	d01f      	beq.n	594c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x428>
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
    590c:	9a07      	ldr	r2, [sp, #28]
    590e:	9705      	str	r7, [sp, #20]
    5910:	eb03 0802 	add.w	r8, r3, r2
    5914:	9f08      	ldr	r7, [sp, #32]
    5916:	fa0f f888 	sxth.w	r8, r8
    591a:	2600      	movs	r6, #0
            break;
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    591c:	f004 031c 	and.w	r3, r4, #28
    5920:	2b1c      	cmp	r3, #28
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    5922:	f004 0218 	and.w	r2, r4, #24
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    5926:	ea4f 0144 	mov.w	r1, r4, lsl #1
            xoff += 1;
    592a:	f106 0301 	add.w	r3, r6, #1
            break;
          } else if (line == 0x1E) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    592e:	d045      	beq.n	59bc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x498>
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    5930:	2a18      	cmp	r2, #24
    5932:	d053      	beq.n	59dc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x4b8>
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
    5934:	06e2      	lsls	r2, r4, #27
    5936:	d426      	bmi.n	5986 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x462>
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    5938:	b2cc      	uxtb	r4, r1
            xoff += 1;
    593a:	b21e      	sxth	r6, r3
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
        xoff = 0;
        while (line) {
    593c:	2c00      	cmp	r4, #0
    593e:	d033      	beq.n	59a8 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x484>
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
            break;
          } else if (line == 0x1E) {
    5940:	2c1e      	cmp	r4, #30
    5942:	d1eb      	bne.n	591c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x3f8>
    5944:	fb16 f609 	smulbb	r6, r6, r9
    5948:	9f05      	ldr	r7, [sp, #20]
    594a:	b2b1      	uxth	r1, r6
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
    594c:	9807      	ldr	r0, [sp, #28]
    594e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    5950:	9501      	str	r5, [sp, #4]
    5952:	4403      	add	r3, r0
    5954:	4459      	add	r1, fp
    5956:	b21a      	sxth	r2, r3
    5958:	9b08      	ldr	r3, [sp, #32]
    595a:	9300      	str	r3, [sp, #0]
    595c:	b209      	sxth	r1, r1
    595e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    5960:	4650      	mov	r0, sl
    5962:	f7fd fdeb 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    5966:	9b04      	ldr	r3, [sp, #16]
        mask = mask << 1;
      }
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    5968:	9a03      	ldr	r2, [sp, #12]
    596a:	3b01      	subs	r3, #1
    596c:	b29b      	uxth	r3, r3
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    596e:	007f      	lsls	r7, r7, #1
        mask = mask << 1;
      }
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    5970:	f102 0801 	add.w	r8, r2, #1
    5974:	9304      	str	r3, [sp, #16]
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    5976:	b2ff      	uxtb	r7, r7
        mask = mask << 1;
      }
    } else {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    5978:	fa0f f888 	sxth.w	r8, r8
    597c:	2b00      	cmp	r3, #0
    597e:	d1a2      	bne.n	58c6 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x3a2>
      }
      writecommand_last(ILI9341_NOP);
      endSPITransaction();
    }
  }
}
    5980:	b015      	add	sp, #84	; 0x54
    5982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
    5986:	fb06 b109 	mla	r1, r6, r9, fp
            line <<= 2;
    598a:	00a4      	lsls	r4, r4, #2
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
    598c:	b2b6      	uxth	r6, r6
    598e:	9501      	str	r5, [sp, #4]
    5990:	9700      	str	r7, [sp, #0]
    5992:	b209      	sxth	r1, r1
    5994:	9b06      	ldr	r3, [sp, #24]
    5996:	4642      	mov	r2, r8
    5998:	4650      	mov	r0, sl
            line <<= 2;
            xoff += 2;
    599a:	3602      	adds	r6, #2
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
            line <<= 2;
    599c:	b2e4      	uxtb	r4, r4
                     fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            fillRect(x + xoff * size_x, y + yoff * size_y, size_x, size_y,
                     fgcolor);
    599e:	f7fd fdcd 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            line <<= 2;
            xoff += 2;
    59a2:	b236      	sxth	r6, r6
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
        xoff = 0;
        while (line) {
    59a4:	2c00      	cmp	r4, #0
    59a6:	d1cb      	bne.n	5940 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x41c>
    59a8:	9f05      	ldr	r7, [sp, #20]
    59aa:	e7dc      	b.n	5966 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x442>
    59ac:	0001b2dc 	.word	0x0001b2dc
    59b0:	e000e100 	.word	0xe000e100
    59b4:	e000e104 	.word	0xe000e104
    59b8:	e000e108 	.word	0xe000e108
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
    59bc:	fb06 b109 	mla	r1, r6, r9, fp
    59c0:	b2b6      	uxth	r6, r6
    59c2:	9501      	str	r5, [sp, #4]
    59c4:	9700      	str	r7, [sp, #0]
    59c6:	b209      	sxth	r1, r1
    59c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    59ca:	4642      	mov	r2, r8
    59cc:	4650      	mov	r0, sl
            line <<= 4;
            xoff += 4;
    59ce:	3604      	adds	r6, #4
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
    59d0:	0124      	lsls	r4, r4, #4
            fillRect(x + xoff * size_x, y + yoff * size_y, 4 * size_x, size_y,
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
    59d2:	f7fd fdb3 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            line <<= 4;
            xoff += 4;
    59d6:	b236      	sxth	r6, r6
                     fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 3 * size_x, size_y,
                     fgcolor);
            line <<= 4;
    59d8:	b2e4      	uxtb	r4, r4
    59da:	e7af      	b.n	593c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x418>
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
    59dc:	fb06 b109 	mla	r1, r6, r9, fp
    59e0:	b2b6      	uxth	r6, r6
    59e2:	9501      	str	r5, [sp, #4]
    59e4:	9700      	str	r7, [sp, #0]
    59e6:	b209      	sxth	r1, r1
    59e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    59ea:	4642      	mov	r2, r8
    59ec:	4650      	mov	r0, sl
            line <<= 3;
            xoff += 3;
    59ee:	3603      	adds	r6, #3
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
            line <<= 3;
    59f0:	00e4      	lsls	r4, r4, #3
                     fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
    59f2:	f7fd fda3 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
            line <<= 3;
            xoff += 3;
    59f6:	b236      	sxth	r6, r6
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 2 * size_x, size_y,
                     fgcolor);
            line <<= 3;
    59f8:	b2e4      	uxtb	r4, r4
    59fa:	e79f      	b.n	593c <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x418>
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            fillRect(x + xoff * size_x, y + yoff * size_y, 5 * size_x, size_y,
                     fgcolor);
    59fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    59fe:	9a07      	ldr	r2, [sp, #28]
    5a00:	9501      	str	r5, [sp, #4]
    5a02:	fb08 2203 	mla	r2, r8, r3, r2
    5a06:	9b08      	ldr	r3, [sp, #32]
    5a08:	9300      	str	r3, [sp, #0]
    5a0a:	fa1f f488 	uxth.w	r4, r8
    5a0e:	b212      	sxth	r2, r2
    5a10:	9b10      	ldr	r3, [sp, #64]	; 0x40
    5a12:	9403      	str	r4, [sp, #12]
    5a14:	4659      	mov	r1, fp
    5a16:	4650      	mov	r0, sl
    5a18:	f7fd fd90 	bl	353c <ILI9341_t3n::fillRect(short, short, short, short, unsigned short)>
    5a1c:	e7a3      	b.n	5966 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x442>

  //	Serial.printf("drawchar %d %d %c %x %x %d %d\n", x, y, c, fgcolor,
  //bgcolor, size_x, size_y);
  if (fgcolor == bgcolor) {
    // This transparent approach is only about 20% faster
    if ((size_x == 1) && (size_y == 1)) {
    5a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5a20:	2b01      	cmp	r3, #1
    5a22:	f47f af2e 	bne.w	5882 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x35e>
    5a26:	2305      	movs	r3, #5
    5a28:	4a4f      	ldr	r2, [pc, #316]	; (5b68 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x644>)
    5a2a:	f8bd 901c 	ldrh.w	r9, [sp, #28]
    5a2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    5a30:	920d      	str	r2, [sp, #52]	; 0x34
    5a32:	fb13 380a 	smlabb	r8, r3, sl, r3
    5a36:	fb1a f303 	smulbb	r3, sl, r3
    5a3a:	9304      	str	r3, [sp, #16]
    5a3c:	4490      	add	r8, r2
    5a3e:	f04f 0a00 	mov.w	sl, #0
    5a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    5a44:	9a04      	ldr	r2, [sp, #16]
    5a46:	189a      	adds	r2, r3, r2
    5a48:	2300      	movs	r3, #0
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
          if (glcdfont[c * 5 + xoff] & mask)
    5a4a:	f812 1b01 	ldrb.w	r1, [r2], #1
    5a4e:	4239      	tst	r1, r7
            line |= 1;
    5a50:	bf18      	it	ne
    5a52:	f043 0301 	orrne.w	r3, r3, #1
          line <<= 1;
    5a56:	005b      	lsls	r3, r3, #1
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    5a58:	4590      	cmp	r8, r2
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
    5a5a:	b2db      	uxtb	r3, r3
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
        uint8_t line = 0;
        for (xoff = 0; xoff < 5; xoff++) {
    5a5c:	d1f5      	bne.n	5a4a <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x526>
          if (glcdfont[c * 5 + xoff] & mask)
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
    5a5e:	105b      	asrs	r3, r3, #1
    5a60:	b2dc      	uxtb	r4, r3
        xoff = 0;
        while (line) {
    5a62:	b33b      	cbz	r3, 5ab4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x590>
          if (line == 0x1F) {
    5a64:	2c1f      	cmp	r4, #31
    5a66:	d06c      	beq.n	5b42 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x61e>
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
    5a68:	2c1e      	cmp	r4, #30
    5a6a:	f04f 0600 	mov.w	r6, #0
    5a6e:	d016      	beq.n	5a9e <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x57a>
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    5a70:	fa0f f389 	sxth.w	r3, r9
    5a74:	9303      	str	r3, [sp, #12]
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    5a76:	f004 031c 	and.w	r3, r4, #28
    5a7a:	2b1c      	cmp	r3, #28
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    5a7c:	f004 0218 	and.w	r2, r4, #24
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    5a80:	ea4f 0144 	mov.w	r1, r4, lsl #1
            xoff += 1;
    5a84:	f106 0301 	add.w	r3, r6, #1
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
    5a88:	d03b      	beq.n	5b02 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x5de>
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
    5a8a:	2a18      	cmp	r2, #24
    5a8c:	d049      	beq.n	5b22 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x5fe>
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
    5a8e:	06e0      	lsls	r0, r4, #27
    5a90:	d429      	bmi.n	5ae6 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x5c2>
            drawPixel(x + xoff, y + yoff, fgcolor);
            line <<= 2;
            xoff += 2;
          } else {
            line <<= 1;
    5a92:	b2cc      	uxtb	r4, r1
            xoff += 1;
    5a94:	b21e      	sxth	r6, r3
            line |= 1;
          line <<= 1;
        }
        line >>= 1;
        xoff = 0;
        while (line) {
    5a96:	b16c      	cbz	r4, 5ab4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x590>
          if (line == 0x1F) {
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
            break;
          } else if (line == 0x1E) {
    5a98:	2c1e      	cmp	r4, #30
    5a9a:	d1ec      	bne.n	5a76 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x552>
    5a9c:	b2b6      	uxth	r6, r6
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
    5a9e:	9b05      	ldr	r3, [sp, #20]
    5aa0:	9300      	str	r3, [sp, #0]
    5aa2:	eb06 010b 	add.w	r1, r6, fp
    5aa6:	b209      	sxth	r1, r1
    5aa8:	2304      	movs	r3, #4
    5aaa:	fa0f f289 	sxth.w	r2, r9
    5aae:	4628      	mov	r0, r5
    5ab0:	f7fd fc1e 	bl	32f0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
    5ab4:	f10a 0a01 	add.w	sl, sl, #1
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    5ab8:	007f      	lsls	r7, r7, #1
    5aba:	f109 0901 	add.w	r9, r9, #1
  if (fgcolor == bgcolor) {
    // This transparent approach is only about 20% faster
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    5abe:	f1ba 0f08 	cmp.w	sl, #8
          } else {
            line <<= 1;
            xoff += 1;
          }
        }
        mask = mask << 1;
    5ac2:	b2ff      	uxtb	r7, r7
    5ac4:	fa1f f989 	uxth.w	r9, r9
  if (fgcolor == bgcolor) {
    // This transparent approach is only about 20% faster
    if ((size_x == 1) && (size_y == 1)) {
      uint8_t mask = 0x01;
      int16_t xoff, yoff;
      for (yoff = 0; yoff < 8; yoff++) {
    5ac8:	d1bb      	bne.n	5a42 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x51e>
    5aca:	e6d3      	b.n	5874 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x350>
    5acc:	fa1f f388 	uxth.w	r3, r8
    5ad0:	9303      	str	r3, [sp, #12]
    5ad2:	e748      	b.n	5966 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x442>
      int16_t y_char_top = y; // remember the y
      int16_t w = 6 * size_x;
      int16_t h = 8 * size_y;

      if (x < _displayclipx1) {
        w -= (_displayclipx1 - x);
    5ad4:	b284      	uxth	r4, r0
    5ad6:	ebc4 0909 	rsb	r9, r4, r9
    5ada:	4499      	add	r9, r3
    5adc:	fa0f f989 	sxth.w	r9, r9
    5ae0:	4627      	mov	r7, r4
    5ae2:	4683      	mov	fp, r0
    5ae4:	e57a      	b.n	55dc <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0xb8>
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    5ae6:	b2b6      	uxth	r6, r6
    5ae8:	eb06 010b 	add.w	r1, r6, fp
    5aec:	b209      	sxth	r1, r1
    5aee:	9b05      	ldr	r3, [sp, #20]
    5af0:	9a03      	ldr	r2, [sp, #12]
    5af2:	4628      	mov	r0, r5
            line <<= 2;
            xoff += 2;
    5af4:	3602      	adds	r6, #2
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
            line <<= 2;
    5af6:	00a4      	lsls	r4, r4, #2
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
    5af8:	f7fd fb02 	bl	3100 <ILI9341_t3n::drawPixel(short, short, unsigned short)>
            line <<= 2;
            xoff += 2;
    5afc:	b236      	sxth	r6, r6
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
            xoff += 3;
          } else if ((line & 0x10) == 0x10) {
            drawPixel(x + xoff, y + yoff, fgcolor);
            line <<= 2;
    5afe:	b2e4      	uxtb	r4, r4
    5b00:	e7c9      	b.n	5a96 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x572>
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
    5b02:	b2b6      	uxth	r6, r6
    5b04:	9b05      	ldr	r3, [sp, #20]
    5b06:	9300      	str	r3, [sp, #0]
    5b08:	eb06 010b 	add.w	r1, r6, fp
    5b0c:	b209      	sxth	r1, r1
    5b0e:	2303      	movs	r3, #3
    5b10:	9a03      	ldr	r2, [sp, #12]
    5b12:	4628      	mov	r0, r5
            line <<= 4;
            xoff += 4;
    5b14:	3604      	adds	r6, #4
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
    5b16:	0124      	lsls	r4, r4, #4
            break;
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
    5b18:	f7fd fbea 	bl	32f0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
            line <<= 4;
            xoff += 4;
    5b1c:	b236      	sxth	r6, r6
          } else if (line == 0x1E) {
            drawFastHLine(x + xoff, y + yoff, 4, fgcolor);
            break;
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
    5b1e:	b2e4      	uxtb	r4, r4
    5b20:	e7b9      	b.n	5a96 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x572>
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
    5b22:	b2b6      	uxth	r6, r6
    5b24:	9b05      	ldr	r3, [sp, #20]
    5b26:	9300      	str	r3, [sp, #0]
    5b28:	eb06 010b 	add.w	r1, r6, fp
    5b2c:	b209      	sxth	r1, r1
    5b2e:	2302      	movs	r3, #2
    5b30:	9a03      	ldr	r2, [sp, #12]
    5b32:	4628      	mov	r0, r5
            line <<= 3;
            xoff += 3;
    5b34:	3603      	adds	r6, #3
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
    5b36:	00e4      	lsls	r4, r4, #3
          } else if ((line & 0x1C) == 0x1C) {
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
    5b38:	f7fd fbda 	bl	32f0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
            line <<= 3;
            xoff += 3;
    5b3c:	b236      	sxth	r6, r6
            drawFastHLine(x + xoff, y + yoff, 3, fgcolor);
            line <<= 4;
            xoff += 4;
          } else if ((line & 0x18) == 0x18) {
            drawFastHLine(x + xoff, y + yoff, 2, fgcolor);
            line <<= 3;
    5b3e:	b2e4      	uxtb	r4, r4
    5b40:	e7a9      	b.n	5a96 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x572>
        }
        line >>= 1;
        xoff = 0;
        while (line) {
          if (line == 0x1F) {
            drawFastHLine(x + xoff, y + yoff, 5, fgcolor);
    5b42:	9b05      	ldr	r3, [sp, #20]
    5b44:	9300      	str	r3, [sp, #0]
    5b46:	fa0f f289 	sxth.w	r2, r9
    5b4a:	2305      	movs	r3, #5
    5b4c:	4659      	mov	r1, fp
    5b4e:	4628      	mov	r0, r5
    5b50:	f7fd fbce 	bl	32f0 <ILI9341_t3n::drawFastHLine(short, short, short, unsigned short)>
    5b54:	e7ae      	b.n	5ab4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0x590>
        x = _displayclipx1;
      }
      if ((x + w - 1) >= _displayclipx2)
        w = _displayclipx2 - x;
      if (y < _displayclipy1) {
        h -= (_displayclipy1 - y);
    5b56:	fa1f fb88 	uxth.w	fp, r8
    5b5a:	ebcb 040e 	rsb	r4, fp, lr
    5b5e:	4422      	add	r2, r4
    5b60:	b214      	sxth	r4, r2
    5b62:	f8cd 8018 	str.w	r8, [sp, #24]
    5b66:	e545      	b.n	55f4 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]+0xd0>
    5b68:	0001b2dc 	.word	0x0001b2dc

00005b6c <ILI9341_t3n::write(unsigned char const*, unsigned int)>:

// overwrite functions from class Print:

size_t ILI9341_t3n::write(uint8_t c) { return write(&c, 1); }

size_t ILI9341_t3n::write(const uint8_t *buffer, size_t size) {
    5b6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // Lets try to handle some of the special font centering code that was done
  // for default fonts.
  if (_center_x_text || _center_y_text) {
    5b70:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28

// overwrite functions from class Print:

size_t ILI9341_t3n::write(uint8_t c) { return write(&c, 1); }

size_t ILI9341_t3n::write(const uint8_t *buffer, size_t size) {
    5b74:	b089      	sub	sp, #36	; 0x24
    5b76:	4604      	mov	r4, r0
    5b78:	460f      	mov	r7, r1
    5b7a:	4691      	mov	r9, r2
  // Lets try to handle some of the special font centering code that was done
  // for default fonts.
  if (_center_x_text || _center_y_text) {
    5b7c:	bb2b      	cbnz	r3, 5bca <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x5e>
    5b7e:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
    5b82:	bb13      	cbnz	r3, 5bca <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x5e>
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5b84:	f1b9 0f00 	cmp.w	r9, #0
    5b88:	d01b      	beq.n	5bc2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x56>
    5b8a:	464d      	mov	r5, r9
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
          cursor_x = scroll_x;
        } else if (wrap && (cursor_x > (_width - textsize_x * 6))) {
          cursor_y += textsize_y * 6;
          cursor_x = 0;
    5b8c:	f04f 0800 	mov.w	r8, #0
  size_t cb = size;
  while (cb) {
    uint8_t c = *buffer++;
    cb--;

    if (font) {
    5b90:	6e23      	ldr	r3, [r4, #96]	; 0x60
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    uint8_t c = *buffer++;
    5b92:	f817 6b01 	ldrb.w	r6, [r7], #1
    cb--;
    5b96:	3d01      	subs	r5, #1

    if (font) {
    5b98:	2b00      	cmp	r3, #0
    5b9a:	d04f      	beq.n	5c3c <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xd0>
      if (c == '\n') {
    5b9c:	2e0a      	cmp	r6, #10
    5b9e:	d146      	bne.n	5c2e <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xc2>
        cursor_y += font->line_space;
    5ba0:	7e19      	ldrb	r1, [r3, #24]
    5ba2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    5ba4:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
    uint8_t c = *buffer++;
    cb--;

    if (font) {
      if (c == '\n') {
        cursor_y += font->line_space;
    5ba8:	440b      	add	r3, r1
    5baa:	84e3      	strh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    5bac:	2a00      	cmp	r2, #0
    5bae:	d054      	beq.n	5c5a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xee>
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
        cursor_y += textsize_y * 8;
        if (scrollEnable && isWritingScrollArea) {
    5bb0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    5bb4:	2b00      	cmp	r3, #0
    5bb6:	d050      	beq.n	5c5a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xee>
          cursor_x = scroll_x;
    5bb8:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    5bbc:	84a3      	strh	r3, [r4, #36]	; 0x24
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5bbe:	2d00      	cmp	r5, #0
    5bc0:	d1e6      	bne.n	5b90 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x24>
        }
      }
    }
  }
  return size;
}
    5bc2:	4648      	mov	r0, r9
    5bc4:	b009      	add	sp, #36	; 0x24
    5bc6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // Lets try to handle some of the special font centering code that was done
  // for default fonts.
  if (_center_x_text || _center_y_text) {
    int16_t x, y;
    uint16_t strngWidth, strngHeight;
    getTextBounds(buffer, size, 0, 0, &x, &y, &strngWidth, &strngHeight);
    5bca:	2300      	movs	r3, #0
    5bcc:	a807      	add	r0, sp, #28
    5bce:	f10d 011a 	add.w	r1, sp, #26
    5bd2:	aa06      	add	r2, sp, #24
    5bd4:	f10d 051e 	add.w	r5, sp, #30
    5bd8:	9003      	str	r0, [sp, #12]
    5bda:	9102      	str	r1, [sp, #8]
    5bdc:	9201      	str	r2, [sp, #4]
    5bde:	9300      	str	r3, [sp, #0]
    5be0:	9504      	str	r5, [sp, #16]
    5be2:	fa1f f289 	uxth.w	r2, r9
    5be6:	4639      	mov	r1, r7
    5be8:	4620      	mov	r0, r4
    5bea:	f7fc ffd1 	bl	2b90 <ILI9341_t3n::getTextBounds(unsigned char const*, unsigned short, short, short, short*, short*, unsigned short*, unsigned short*)>
    // Serial.printf("_fontwrite bounds: %d %d %u %u\n", x, y, strngWidth,
    // strngHeight);
    // Note we may want to play with the x ane y returned if they offset some
    if (_center_x_text &&
    5bee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    5bf2:	b14b      	cbz	r3, 5c08 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x9c>
        strngWidth > 0) { // Avoid operations for strngWidth = 0
    5bf4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    uint16_t strngWidth, strngHeight;
    getTextBounds(buffer, size, 0, 0, &x, &y, &strngWidth, &strngHeight);
    // Serial.printf("_fontwrite bounds: %d %d %u %u\n", x, y, strngWidth,
    // strngHeight);
    // Note we may want to play with the x ane y returned if they offset some
    if (_center_x_text &&
    5bf8:	b133      	cbz	r3, 5c08 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x9c>
        strngWidth > 0) { // Avoid operations for strngWidth = 0
      cursor_x -= (x + strngWidth / 2);
    5bfa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    5bfe:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    5c00:	eb01 0353 	add.w	r3, r1, r3, lsr #1
    5c04:	1ad3      	subs	r3, r2, r3
    5c06:	84a3      	strh	r3, [r4, #36]	; 0x24
    }
    if (_center_y_text &&
    5c08:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
    5c0c:	b14b      	cbz	r3, 5c22 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xb6>
        strngHeight > 0) { // Avoid operations for strngWidth = 0
    5c0e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
    // Note we may want to play with the x ane y returned if they offset some
    if (_center_x_text &&
        strngWidth > 0) { // Avoid operations for strngWidth = 0
      cursor_x -= (x + strngWidth / 2);
    }
    if (_center_y_text &&
    5c12:	b133      	cbz	r3, 5c22 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xb6>
        strngHeight > 0) { // Avoid operations for strngWidth = 0
      cursor_y -= (y + strngHeight / 2);
    5c14:	f8bd 101a 	ldrh.w	r1, [sp, #26]
    5c18:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
    5c1a:	eb01 0353 	add.w	r3, r1, r3, lsr #1
    5c1e:	1ad3      	subs	r3, r2, r3
    5c20:	84e3      	strh	r3, [r4, #38]	; 0x26
    }
    _center_x_text = false;
    5c22:	2300      	movs	r3, #0
    5c24:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    _center_y_text = false;
    5c28:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    5c2c:	e7aa      	b.n	5b84 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x18>
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
        }
      } else {
        drawFontChar(c);
    5c2e:	4631      	mov	r1, r6
    5c30:	4620      	mov	r0, r4
    5c32:	f7fe ffbf 	bl	4bb4 <ILI9341_t3n::drawFontChar(unsigned int)>
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5c36:	2d00      	cmp	r5, #0
    5c38:	d1aa      	bne.n	5b90 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x24>
    5c3a:	e7c2      	b.n	5bc2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x56>
          cursor_x = 0;
        }
      } else {
        drawFontChar(c);
      }
    } else if (gfxFont) {
    5c3c:	6f63      	ldr	r3, [r4, #116]	; 0x74
    5c3e:	b1c3      	cbz	r3, 5c72 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x106>
      if (c == '\n') {
    5c40:	2e0a      	cmp	r6, #10
    5c42:	d10f      	bne.n	5c64 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xf8>
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    5c44:	7a9a      	ldrb	r2, [r3, #10]
    5c46:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
    5c4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    5c4c:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
      } else {
        drawFontChar(c);
      }
    } else if (gfxFont) {
      if (c == '\n') {
        cursor_y += (int16_t)textsize_y * gfxFont->yAdvance;
    5c50:	fb00 3302 	mla	r3, r0, r2, r3
    5c54:	84e3      	strh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    5c56:	2900      	cmp	r1, #0
    5c58:	d1aa      	bne.n	5bb0 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x44>
      if (c == '\n') {
        cursor_y += font->line_space;
        if (scrollEnable && isWritingScrollArea) {
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
    5c5a:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5c5e:	2d00      	cmp	r5, #0
    5c60:	d196      	bne.n	5b90 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x24>
    5c62:	e7ae      	b.n	5bc2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x56>
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
        }
      } else {
        drawGFXFontChar(c);
    5c64:	4631      	mov	r1, r6
    5c66:	4620      	mov	r0, r4
    5c68:	f7fe fb90 	bl	438c <ILI9341_t3n::drawGFXFontChar(unsigned int)>
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5c6c:	2d00      	cmp	r5, #0
    5c6e:	d18f      	bne.n	5b90 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x24>
    5c70:	e7a7      	b.n	5bc2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x56>
        }
      } else {
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
    5c72:	2e0a      	cmp	r6, #10
    5c74:	d03e      	beq.n	5cf4 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x188>
        if (scrollEnable && isWritingScrollArea) {
          cursor_x = scroll_x;
        } else {
          cursor_x = 0;
        }
      } else if (c == '\r') {
    5c76:	2e0d      	cmp	r6, #13
    5c78:	d0a1      	beq.n	5bbe <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x52>
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    5c7a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
    5c7e:	b11b      	cbz	r3, 5c88 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x11c>
    5c80:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
    5c84:	2b00      	cmp	r3, #0
    5c86:	d157      	bne.n	5d38 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x1cc>
    5c88:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
    5c8c:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    5c90:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
    5c94:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
          scrollTextArea(textsize_y * 8);
          cursor_y -= textsize_y * 8;
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
    5c98:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58

// Draw a character
void ILI9341_t3n::drawChar(int16_t x, int16_t y, unsigned char c,
                           uint16_t fgcolor, uint16_t bgcolor, uint8_t size_x,
                           uint8_t size_y) {
  if ((x >= _width) ||              // Clip right
    5c9c:	428b      	cmp	r3, r1
    5c9e:	dd03      	ble.n	5ca8 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x13c>
    5ca0:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
    5ca4:	4283      	cmp	r3, r0
    5ca6:	dc57      	bgt.n	5d58 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x1ec>
          cursor_y -= textsize_y * 8;
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
    5ca8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
    5cac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
        if (wrap && scrollEnable && isWritingScrollArea &&
    5cb0:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
          cursor_y -= textsize_y * 8;
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
    5cb4:	b21b      	sxth	r3, r3
    5cb6:	84a3      	strh	r3, [r4, #36]	; 0x24
        if (wrap && scrollEnable && isWritingScrollArea &&
    5cb8:	2800      	cmp	r0, #0
    5cba:	d080      	beq.n	5bbe <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x52>
    5cbc:	f894 1048 	ldrb.w	r1, [r4, #72]	; 0x48
    5cc0:	b319      	cbz	r1, 5d0a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x19e>
    5cc2:	f894 1049 	ldrb.w	r1, [r4, #73]	; 0x49
    5cc6:	b301      	cbz	r1, 5d0a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x19e>
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
    5cc8:	f9b4 0040 	ldrsh.w	r0, [r4, #64]	; 0x40
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
    5ccc:	f9b4 1044 	ldrsh.w	r1, [r4, #68]	; 0x44
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
    5cd0:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
    5cd4:	0052      	lsls	r2, r2, #1
          cursor_x = scroll_x;
        }
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
    5cd6:	4401      	add	r1, r0
    5cd8:	4411      	add	r1, r2
    5cda:	428b      	cmp	r3, r1
    5cdc:	dd18      	ble.n	5d10 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x1a4>
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
    5cde:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    5ce0:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
          cursor_x = scroll_x;
    5ce4:	84a0      	strh	r0, [r4, #36]	; 0x24
        drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                 textsize_y);
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
    5ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5cea:	84e3      	strh	r3, [r4, #38]	; 0x26
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5cec:	2d00      	cmp	r5, #0
    5cee:	f47f af4f 	bne.w	5b90 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x24>
    5cf2:	e766      	b.n	5bc2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x56>
      } else {
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
        cursor_y += textsize_y * 8;
    5cf4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    5cf6:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
        if (scrollEnable && isWritingScrollArea) {
    5cfa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
      } else {
        drawGFXFontChar(c);
      }
    } else {
      if (c == '\n') {
        cursor_y += textsize_y * 8;
    5cfe:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    5d02:	84e3      	strh	r3, [r4, #38]	; 0x26
        if (scrollEnable && isWritingScrollArea) {
    5d04:	2a00      	cmp	r2, #0
    5d06:	d0a8      	beq.n	5c5a <ILI9341_t3n::write(unsigned char const*, unsigned int)+0xee>
    5d08:	e752      	b.n	5bb0 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x44>
    5d0a:	eba2 0282 	sub.w	r2, r2, r2, lsl #2
    5d0e:	0052      	lsls	r2, r2, #1
        cursor_x += textsize_x * 6;
        if (wrap && scrollEnable && isWritingScrollArea &&
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
          cursor_x = scroll_x;
        } else if (wrap && (cursor_x > (_width - textsize_x * 6))) {
    5d10:	f9b4 1020 	ldrsh.w	r1, [r4, #32]
    5d14:	440a      	add	r2, r1
    5d16:	429a      	cmp	r2, r3
    5d18:	f6bf af51 	bge.w	5bbe <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x52>
          cursor_y += textsize_y * 6;
    5d1c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
    5d20:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
          cursor_x = 0;
    5d22:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
        if (wrap && scrollEnable && isWritingScrollArea &&
            (cursor_x > (scroll_x + scroll_width - textsize_x * 6))) {
          cursor_y += textsize_y * 8;
          cursor_x = scroll_x;
        } else if (wrap && (cursor_x > (_width - textsize_x * 6))) {
          cursor_y += textsize_y * 6;
    5d26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    5d2a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    5d2e:	84e3      	strh	r3, [r4, #38]	; 0x26
    _center_x_text = false;
    _center_y_text = false;
  }

  size_t cb = size;
  while (cb) {
    5d30:	2d00      	cmp	r5, #0
    5d32:	f47f af2d 	bne.w	5b90 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x24>
    5d36:	e744      	b.n	5bc2 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x56>
          cursor_x = 0;
        }
      } else if (c == '\r') {
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    5d38:	f9b4 2042 	ldrsh.w	r2, [r4, #66]	; 0x42
    5d3c:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	; 0x46
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
    5d40:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
    5d44:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
          cursor_x = 0;
        }
      } else if (c == '\r') {
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
    5d48:	4413      	add	r3, r2
    5d4a:	eba3 03ce 	sub.w	r3, r3, lr, lsl #3
    5d4e:	4298      	cmp	r0, r3
    5d50:	dc17      	bgt.n	5d82 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x216>
    5d52:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
    5d56:	e79d      	b.n	5c94 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x128>
    5d58:	f8b4 c04c 	ldrh.w	ip, [r4, #76]	; 0x4c
    5d5c:	f8cd e00c 	str.w	lr, [sp, #12]
    5d60:	f8b4 e04a 	ldrh.w	lr, [r4, #74]	; 0x4a
    5d64:	f8cd e000 	str.w	lr, [sp]
    5d68:	9202      	str	r2, [sp, #8]
    5d6a:	4633      	mov	r3, r6
    5d6c:	4602      	mov	r2, r0
    5d6e:	f8cd c004 	str.w	ip, [sp, #4]
    5d72:	4620      	mov	r0, r4
    5d74:	f7ff fbd6 	bl	5524 <ILI9341_t3n::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char, unsigned char) [clone .part.8] [clone .constprop.11]>
    5d78:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
    5d7c:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
    5d80:	e792      	b.n	5ca8 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x13c>
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
          scrollTextArea(textsize_y * 8);
    5d82:	ea4f 01ce 	mov.w	r1, lr, lsl #3
    5d86:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
    5d8a:	4620      	mov	r0, r4
    5d8c:	f7fe f88c 	bl	3ea8 <ILI9341_t3n::scrollTextArea(unsigned char)>
          cursor_y -= textsize_y * 8;
    5d90:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
    5d92:	f894 e059 	ldrb.w	lr, [r4, #89]	; 0x59
          cursor_x = scroll_x;
    5d96:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
    5d9a:	84a1      	strh	r1, [r4, #36]	; 0x24
        // skip em
      } else {
        if (scrollEnable && isWritingScrollArea &&
            (cursor_y > (scroll_y + scroll_height - textsize_y * 8))) {
          scrollTextArea(textsize_y * 8);
          cursor_y -= textsize_y * 8;
    5d9c:	eba0 00ce 	sub.w	r0, r0, lr, lsl #3
    5da0:	b200      	sxth	r0, r0
    5da2:	84e0      	strh	r0, [r4, #38]	; 0x26
    5da4:	e776      	b.n	5c94 <ILI9341_t3n::write(unsigned char const*, unsigned int)+0x128>
    5da6:	bf00      	nop

00005da8 <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    5da8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    5dac:	f890 0038 	ldrb.w	r0, [r0, #56]	; 0x38
	}
    5db0:	1a10      	subs	r0, r2, r0
    5db2:	4770      	bx	lr

00005db4 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5db4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    5db8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    5dbc:	429a      	cmp	r2, r3
    5dbe:	d905      	bls.n	5dcc <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    5dc0:	1c5a      	adds	r2, r3, #1
    5dc2:	4403      	add	r3, r0
    5dc4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    5dc8:	7e18      	ldrb	r0, [r3, #24]
    5dca:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5dcc:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    5dd0:	4770      	bx	lr
    5dd2:	bf00      	nop

00005dd4 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5dd4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    5dd8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
    5ddc:	429a      	cmp	r2, r3
		return rxBuffer[rxBufferIndex];
    5dde:	bf86      	itte	hi
    5de0:	181b      	addhi	r3, r3, r0
    5de2:	7e18      	ldrbhi	r0, [r3, #24]
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    5de4:	f04f 30ff 	movls.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    5de8:	4770      	bx	lr
    5dea:	bf00      	nop

00005dec <TwoWire::flush()>:
	virtual void flush(void) {
    5dec:	4770      	bx	lr
    5dee:	bf00      	nop

00005df0 <TwoWire::write(unsigned char const*, unsigned int)>:
	}
	return 0;
}

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    5df0:	b538      	push	{r3, r4, r5, lr}
    5df2:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    5df4:	f8b0 005e 	ldrh.w	r0, [r0, #94]	; 0x5e
    5df8:	b190      	cbz	r0, 5e20 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    5dfa:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    5dfe:	4614      	mov	r4, r2
    5e00:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    5e04:	4294      	cmp	r4, r2
    5e06:	d80c      	bhi.n	5e22 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    5e08:	f105 003b 	add.w	r0, r5, #59	; 0x3b
    5e0c:	4418      	add	r0, r3
    5e0e:	4622      	mov	r2, r4
    5e10:	f000 fe5a 	bl	6ac8 <memcpy>
		txBufferLength += quantity;
    5e14:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
    5e18:	4423      	add	r3, r4
    5e1a:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
    5e1e:	4620      	mov	r0, r4
		return quantity;
	}
	return 0;
}
    5e20:	bd38      	pop	{r3, r4, r5, pc}
	int getWriteError() { return write_error; }
	void clearWriteError() { setWriteError(0); }
	int printf(const char *format, ...);
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    5e22:	2001      	movs	r0, #1
    5e24:	4614      	mov	r4, r2
    5e26:	7128      	strb	r0, [r5, #4]
    5e28:	e7ee      	b.n	5e08 <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    5e2a:	bf00      	nop

00005e2c <TwoWire::write(unsigned char)>:
//  I2C0_C2      // I2C Control Register 2
//  I2C0_FLT     // I2C Programmable Input Glitch Filter register

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    5e2c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    5e30:	b16b      	cbz	r3, 5e4e <TwoWire::write(unsigned char)+0x22>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    5e32:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
    5e36:	2b20      	cmp	r3, #32
    5e38:	d807      	bhi.n	5e4a <TwoWire::write(unsigned char)+0x1e>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    5e3a:	18c2      	adds	r2, r0, r3
    5e3c:	3301      	adds	r3, #1
    5e3e:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
		return 1;
    5e42:	2001      	movs	r0, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    5e44:	f882 103b 	strb.w	r1, [r2, #59]	; 0x3b
    5e48:	4770      	bx	lr
    5e4a:	2301      	movs	r3, #1
    5e4c:	7103      	strb	r3, [r0, #4]
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    5e4e:	2000      	movs	r0, #0
    5e50:	4770      	bx	lr
    5e52:	bf00      	nop

00005e54 <TwoWire::begin()>:
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    5e54:	2300      	movs	r3, #0
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    5e56:	6942      	ldr	r2, [r0, #20]
void TwoWire::begin(void)
{
	//serial_begin(BAUD2DIV(115200));
	//serial_print("\nWire Begin\n");

	rxBufferIndex = 0;
    5e58:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	rxBufferLength = 0;
    5e5c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	txBufferIndex = 0;
    5e60:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	txBufferLength = 0;
    5e64:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
	transmitting = 0;
    5e68:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
    5e6c:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    5e70:	ca06      	ldmia	r2, {r1, r2}

void sda_rising_isr0(void);
void sda_rising_isr1(void);

void TwoWire::begin(void)
{
    5e72:	b430      	push	{r4, r5}
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    5e74:	680d      	ldr	r5, [r1, #0]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    5e76:	6904      	ldr	r4, [r0, #16]
	rxBufferIndex = 0;
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
    5e78:	6643      	str	r3, [r0, #100]	; 0x64
	user_onReceive = NULL;
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    5e7a:	432a      	orrs	r2, r5
	rxBufferLength = 0;
	txBufferIndex = 0;
	txBufferLength = 0;
	transmitting = 0;
	user_onRequest = NULL;
	user_onReceive = NULL;
    5e7c:	6683      	str	r3, [r0, #104]	; 0x68
	slave_mode = 0;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    5e7e:	600a      	str	r2, [r1, #0]
	port().C1 = 0;
    5e80:	70a3      	strb	r3, [r4, #2]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    5e82:	6942      	ldr	r2, [r0, #20]
    5e84:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    5e88:	4916      	ldr	r1, [pc, #88]	; (5ee4 <TwoWire::begin()+0x90>)
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    5e8a:	6814      	ldr	r4, [r2, #0]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    5e8c:	4413      	add	r3, r2
    5e8e:	7a1d      	ldrb	r5, [r3, #8]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    5e90:	7b5b      	ldrb	r3, [r3, #13]
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    5e92:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    5e96:	021b      	lsls	r3, r3, #8
	// would enable pullup resistors.  However, there seems
	// to be a bug in chip while I2C is enabled, where setting
	// those causes the port to be driven strongly high.
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    5e98:	686d      	ldr	r5, [r5, #4]
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    5e9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5e9e:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    5ea2:	602b      	str	r3, [r5, #0]
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    5ea4:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
    5ea8:	4413      	add	r3, r2
    5eaa:	7c9d      	ldrb	r5, [r3, #18]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    5eac:	7ddb      	ldrb	r3, [r3, #23]
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    5eae:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    5eb2:	021b      	lsls	r3, r3, #8
	uint32_t mux;
	volatile uint32_t *reg;
	reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
	mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    5eb4:	6849      	ldr	r1, [r1, #4]
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    5eb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    5eba:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    5ebe:	600b      	str	r3, [r1, #0]
	//pinMode(4, OUTPUT);
}

void TwoWire::setClock(uint32_t frequency)
{
	if (!(hardware.clock_gate_register & hardware.clock_gate_mask)) return;
    5ec0:	6821      	ldr	r1, [r4, #0]
    5ec2:	6853      	ldr	r3, [r2, #4]
    5ec4:	4219      	tst	r1, r3
    5ec6:	d005      	beq.n	5ed4 <TwoWire::begin()+0x80>
    5ec8:	6903      	ldr	r3, [r0, #16]
		port().F = I2C_F_DIV56; // 0.96 MHz
	}
	port().FLT = 4;
#elif F_BUS == 48000000
	if (frequency < 400000) {
		port().F = 0x27;	// 100 kHz
    5eca:	2227      	movs	r2, #39	; 0x27
    5ecc:	705a      	strb	r2, [r3, #1]
    5ece:	6903      	ldr	r3, [r0, #16]
	} else if (frequency < 1000000) {
		port().F = 0x1A; // 400 kHz
	} else {
		port().F = 0x0D; // 1 MHz
	}
	port().FLT = 4;
    5ed0:	2204      	movs	r2, #4
    5ed2:	719a      	strb	r2, [r3, #6]
    5ed4:	6903      	ldr	r3, [r0, #16]
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
	mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
	*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
	setClock(100000);
	port().C2 = I2C_C2_HDRS;
    5ed6:	2220      	movs	r2, #32
    5ed8:	715a      	strb	r2, [r3, #5]
    5eda:	6903      	ldr	r3, [r0, #16]
	port().C1 = I2C_C1_IICEN;
    5edc:	2280      	movs	r2, #128	; 0x80
    5ede:	709a      	strb	r2, [r3, #2]
	//pinMode(3, OUTPUT);
	//pinMode(4, OUTPUT);
}
    5ee0:	bc30      	pop	{r4, r5}
    5ee2:	4770      	bx	lr
    5ee4:	0001b848 	.word	0x0001b848

00005ee8 <TwoWire::isr()>:
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    5ee8:	b510      	push	{r4, lr}
    5eea:	6902      	ldr	r2, [r0, #16]
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
    5eec:	78d3      	ldrb	r3, [r2, #3]
    5eee:	b2db      	uxtb	r3, r3
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    5ef0:	06d9      	lsls	r1, r3, #27
	hardware.clock_gate_register &= ~hardware.clock_gate_mask;
}


void TwoWire::isr(void)
{
    5ef2:	4604      	mov	r4, r0
	uint8_t status, c1, data;
	static uint8_t receiving=0;

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
    5ef4:	d53d      	bpl.n	5f72 <TwoWire::isr()+0x8a>
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    5ef6:	2110      	movs	r1, #16
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    5ef8:	0658      	lsls	r0, r3, #25

	status = port().S;
	//serial_print(".");
	if (status & I2C_S_ARBL) {
		// Arbitration Lost
		port().S = I2C_S_ARBL;
    5efa:	70d1      	strb	r1, [r2, #3]
		if (receiving && rxBufferLength > 0) {
			// TODO: does this detect the STOP condition in slave receive mode?


		}
		if (!(status & I2C_S_IAAS)) return;
    5efc:	d538      	bpl.n	5f70 <TwoWire::isr()+0x88>
	}
	if (status & I2C_S_IAAS) {
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
    5efe:	f003 0304 	and.w	r3, r3, #4
    5f02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    5f06:	2b00      	cmp	r3, #0
    5f08:	d051      	beq.n	5fae <TwoWire::isr()+0xc6>
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    5f0a:	493d      	ldr	r1, [pc, #244]	; (6000 <TwoWire::isr()+0x118>)
			txBufferLength = 0;
			if (user_onRequest != NULL) {
    5f0c:	6e62      	ldr	r2, [r4, #100]	; 0x64
		//serial_print("\n");
		// Addressed As A Slave
		if (status & I2C_S_SRW) {
			//serial_print("T");
			// Begin Slave Transmit
			receiving = 0;
    5f0e:	2300      	movs	r3, #0
    5f10:	700b      	strb	r3, [r1, #0]
			txBufferLength = 0;
    5f12:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			if (user_onRequest != NULL) {
    5f16:	2a00      	cmp	r2, #0
    5f18:	d05b      	beq.n	5fd2 <TwoWire::isr()+0xea>
				user_onRequest();
    5f1a:	4790      	blx	r2
			}
			if (txBufferLength == 0) {
    5f1c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    5f20:	2b00      	cmp	r3, #0
    5f22:	d056      	beq.n	5fd2 <TwoWire::isr()+0xea>
    5f24:	6923      	ldr	r3, [r4, #16]
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
				txBuffer[0] = 0;
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    5f26:	22d0      	movs	r2, #208	; 0xd0
    5f28:	709a      	strb	r2, [r3, #2]
    5f2a:	6923      	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
    5f2c:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
    5f30:	711a      	strb	r2, [r3, #4]
    5f32:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 1;
    5f34:	2201      	movs	r2, #1
    5f36:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
			receiving = 1;
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    5f3a:	2202      	movs	r2, #2
    5f3c:	70da      	strb	r2, [r3, #3]
		return;
    5f3e:	bd10      	pop	{r4, pc}
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    5f40:	4b30      	ldr	r3, [pc, #192]	; (6004 <TwoWire::isr()+0x11c>)
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
	} else {
		// Continue Slave Receive
		irqcount = 0;
    5f42:	f884 0060 	strb.w	r0, [r4, #96]	; 0x60
		#if defined(WIRE_IMPLEMENT_WIRE) && !defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
    5f46:	429c      	cmp	r4, r3
    5f48:	d04a      	beq.n	5fe0 <TwoWire::isr()+0xf8>
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		} else if (this == &Wire1) {
    5f4a:	4b2f      	ldr	r3, [pc, #188]	; (6008 <TwoWire::isr()+0x120>)
    5f4c:	429c      	cmp	r4, r3
    5f4e:	d052      	beq.n	5ff6 <TwoWire::isr()+0x10e>
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    5f50:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    5f54:	7913      	ldrb	r3, [r2, #4]
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    5f56:	291f      	cmp	r1, #31
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		}
		#endif
		#endif // WIRE_HAS_STOP_INTERRUPT
		//digitalWriteFast(4, HIGH);
		data = port().D;
    5f58:	b2db      	uxtb	r3, r3
		//serial_phex(data);
		if (rxBufferLength < BUFFER_LENGTH && receiving) {
    5f5a:	d807      	bhi.n	5f6c <TwoWire::isr()+0x84>
    5f5c:	4828      	ldr	r0, [pc, #160]	; (6000 <TwoWire::isr()+0x118>)
    5f5e:	7800      	ldrb	r0, [r0, #0]
    5f60:	b120      	cbz	r0, 5f6c <TwoWire::isr()+0x84>
			rxBuffer[rxBufferLength++] = data;
    5f62:	1860      	adds	r0, r4, r1
    5f64:	3101      	adds	r1, #1
    5f66:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
    5f6a:	7603      	strb	r3, [r0, #24]
		}
		//digitalWriteFast(4, LOW);
	}
	port().S = I2C_S_IICIF;
    5f6c:	2302      	movs	r3, #2
    5f6e:	70d3      	strb	r3, [r2, #3]
    5f70:	bd10      	pop	{r4, pc}


		}
		if (!(status & I2C_S_IAAS)) return;
	}
	if (status & I2C_S_IAAS) {
    5f72:	0659      	lsls	r1, r3, #25
    5f74:	d4c3      	bmi.n	5efe <TwoWire::isr()+0x16>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
	}
	#endif
	c1 = port().C1;
    5f76:	7891      	ldrb	r1, [r2, #2]
	if (c1 & I2C_C1_TX) {
    5f78:	f001 0110 	and.w	r1, r1, #16
    5f7c:	f001 00ff 	and.w	r0, r1, #255	; 0xff
    5f80:	2900      	cmp	r1, #0
    5f82:	d0dd      	beq.n	5f40 <TwoWire::isr()+0x58>
		// Continue Slave Transmit
		//serial_print("t");
		if ((status & I2C_S_RXAK) == 0) {
    5f84:	f013 0301 	ands.w	r3, r3, #1
    5f88:	d11e      	bne.n	5fc8 <TwoWire::isr()+0xe0>
			//serial_print(".");
			// Master ACK'd previous byte
			if (txBufferIndex < txBufferLength) {
    5f8a:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
    5f8e:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
    5f92:	4288      	cmp	r0, r1
				port().D = txBuffer[txBufferIndex++];
    5f94:	bf81      	itttt	hi
    5f96:	1c4b      	addhi	r3, r1, #1
    5f98:	1909      	addhi	r1, r1, r4
    5f9a:	f884 305c 	strbhi.w	r3, [r4, #92]	; 0x5c
    5f9e:	f891 303b 	ldrbhi.w	r3, [r1, #59]	; 0x3b
			} else {
				port().D = 0;
    5fa2:	7113      	strb	r3, [r2, #4]
    5fa4:	6923      	ldr	r3, [r4, #16]
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
    5fa6:	22d0      	movs	r2, #208	; 0xd0
    5fa8:	709a      	strb	r2, [r3, #2]
    5faa:	6922      	ldr	r2, [r4, #16]
    5fac:	e7de      	b.n	5f6c <TwoWire::isr()+0x84>
    5fae:	6923      	ldr	r3, [r4, #16]
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
			rxBufferLength = 0;
    5fb0:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    5fb4:	22c0      	movs	r2, #192	; 0xc0
    5fb6:	709a      	strb	r2, [r3, #2]
    5fb8:	6923      	ldr	r3, [r4, #16]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    5fba:	4a11      	ldr	r2, [pc, #68]	; (6000 <TwoWire::isr()+0x118>)
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
    5fbc:	7919      	ldrb	r1, [r3, #4]
			port().D = txBuffer[0];
			txBufferIndex = 1;
		} else {
			// Begin Slave Receive
			//serial_print("R");
			receiving = 1;
    5fbe:	2101      	movs	r1, #1
    5fc0:	7011      	strb	r1, [r2, #0]
			rxBufferLength = 0;
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
			data = port().D;
		}
		port().S = I2C_S_IICIF;
    5fc2:	2202      	movs	r2, #2
    5fc4:	70da      	strb	r2, [r3, #3]
		return;
    5fc6:	bd10      	pop	{r4, pc}
			}
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE | I2C_C1_TX;
		} else {
			//serial_print("*");
			// Master did not ACK previous byte
			port().C1 = I2C_C1_IICEN | I2C_C1_IICIE;
    5fc8:	23c0      	movs	r3, #192	; 0xc0
    5fca:	7093      	strb	r3, [r2, #2]
    5fcc:	6922      	ldr	r2, [r4, #16]
			data = port().D;
    5fce:	7913      	ldrb	r3, [r2, #4]
    5fd0:	e7cc      	b.n	5f6c <TwoWire::isr()+0x84>
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    5fd2:	2201      	movs	r2, #1
				txBuffer[0] = 0;
    5fd4:	2300      	movs	r3, #0
			}
			if (txBufferLength == 0) {
				// is this correct, transmitting a single zero
				// when we should send nothing?  Arduino's AVR
				// implementation does this, but is it ok?
				txBufferLength = 1;
    5fd6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				txBuffer[0] = 0;
    5fda:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
    5fde:	e7a1      	b.n	5f24 <TwoWire::isr()+0x3c>
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
		#elif !defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
		#elif defined(WIRE_IMPLEMENT_WIRE) && defined(WIRE_IMPLEMENT_WIRE1)
		if (this == &Wire) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr0, RISING);
    5fe0:	6962      	ldr	r2, [r4, #20]
    5fe2:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    5fe6:	4909      	ldr	r1, [pc, #36]	; (600c <TwoWire::isr()+0x124>)
		} else if (this == &Wire1) {
			attachInterrupt(hardware.sda_pin[sda_pin_index], sda_rising_isr1, RISING);
    5fe8:	4413      	add	r3, r2
    5fea:	2203      	movs	r2, #3
    5fec:	7a18      	ldrb	r0, [r3, #8]
    5fee:	f000 fed1 	bl	6d94 <attachInterrupt>
    5ff2:	6922      	ldr	r2, [r4, #16]
    5ff4:	e7ac      	b.n	5f50 <TwoWire::isr()+0x68>
    5ff6:	6962      	ldr	r2, [r4, #20]
    5ff8:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
    5ffc:	4904      	ldr	r1, [pc, #16]	; (6010 <TwoWire::isr()+0x128>)
    5ffe:	e7f3      	b.n	5fe8 <TwoWire::isr()+0x100>
    6000:	1fff9720 	.word	0x1fff9720
    6004:	1fff88cc 	.word	0x1fff88cc
    6008:	1fff8938 	.word	0x1fff8938
    600c:	00006071 	.word	0x00006071
    6010:	0000607d 	.word	0x0000607d

00006014 <TwoWire::sda_rising_isr()>:
    6014:	6903      	ldr	r3, [r0, #16]
#endif

void TwoWire::sda_rising_isr(void)
{
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
    6016:	78db      	ldrb	r3, [r3, #3]
    6018:	f003 0320 	and.w	r3, r3, #32
    601c:	b173      	cbz	r3, 603c <TwoWire::sda_rising_isr()+0x28>
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    601e:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
    6022:	3301      	adds	r3, #1
    6024:	b2db      	uxtb	r3, r3
    6026:	2b01      	cmp	r3, #1
    6028:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
    602c:	d91a      	bls.n	6064 <TwoWire::sda_rising_isr()+0x50>
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
    602e:	6942      	ldr	r2, [r0, #20]
    6030:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    6034:	4413      	add	r3, r2
    6036:	7a18      	ldrb	r0, [r3, #8]
    6038:	f000 bf28 	b.w	6e8c <detachInterrupt>
	Wire1.sda_rising_isr();
}
#endif

void TwoWire::sda_rising_isr(void)
{
    603c:	b570      	push	{r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
    603e:	6942      	ldr	r2, [r0, #20]
    6040:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    6044:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    6048:	4413      	add	r3, r2
    604a:	4604      	mov	r4, r0
    604c:	7a18      	ldrb	r0, [r3, #8]
    604e:	f000 ff1d 	bl	6e8c <detachInterrupt>
		if (user_onReceive != NULL) {
    6052:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    6054:	b15b      	cbz	r3, 606e <TwoWire::sda_rising_isr()+0x5a>
			rxBufferIndex = 0;
    6056:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
			user_onReceive(rxBufferLength);
    605a:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
		if (++irqcount >= 2 || !slave_mode) {
			detachInterrupt(hardware.sda_pin[sda_pin_index]);
		}
	}
	//digitalWrite(3, LOW);
}
    605e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	//digitalWrite(3, HIGH);
	if (!(port().S & I2C_S_BUSY)) {
		detachInterrupt(hardware.sda_pin[sda_pin_index]);
		if (user_onReceive != NULL) {
			rxBufferIndex = 0;
			user_onReceive(rxBufferLength);
    6062:	4718      	bx	r3
		}
		//delayMicroseconds(100);
	} else {
		if (++irqcount >= 2 || !slave_mode) {
    6064:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
    6068:	2b00      	cmp	r3, #0
    606a:	d0e0      	beq.n	602e <TwoWire::sda_rising_isr()+0x1a>
    606c:	4770      	bx	lr
    606e:	bd70      	pop	{r4, r5, r6, pc}

00006070 <sda_rising_isr0()>:
#if !defined(WIRE_HAS_STOP_INTERRUPT)

#if defined(WIRE_IMPLEMENT_WIRE)
void sda_rising_isr0(void)
{
	Wire.sda_rising_isr();
    6070:	4801      	ldr	r0, [pc, #4]	; (6078 <sda_rising_isr0()+0x8>)
    6072:	f7ff bfcf 	b.w	6014 <TwoWire::sda_rising_isr()>
    6076:	bf00      	nop
    6078:	1fff88cc 	.word	0x1fff88cc

0000607c <sda_rising_isr1()>:
}
#endif
#if defined(WIRE_IMPLEMENT_WIRE1)
void sda_rising_isr1(void)
{
	Wire1.sda_rising_isr();
    607c:	4801      	ldr	r0, [pc, #4]	; (6084 <sda_rising_isr1()+0x8>)
    607e:	f7ff bfc9 	b.w	6014 <TwoWire::sda_rising_isr()>
    6082:	bf00      	nop
    6084:	1fff8938 	.word	0x1fff8938

00006088 <TwoWire::wait_idle()>:
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    6088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    608c:	4f37      	ldr	r7, [pc, #220]	; (616c <L_1545_delayMicroseconds+0x1a>)
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    608e:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 6170 <L_1545_delayMicroseconds+0x1e>
    6092:	683b      	ldr	r3, [r7, #0]
    6094:	6902      	ldr	r2, [r0, #16]
	}
	return 0;
}

bool TwoWire::wait_idle(void)
{
    6096:	b082      	sub	sp, #8
    6098:	4606      	mov	r6, r0
    609a:	9300      	str	r3, [sp, #0]
	return ret;
    609c:	f8dd 8000 	ldr.w	r8, [sp]
	bool reset=false;
    60a0:	2100      	movs	r1, #0
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    60a2:	25a0      	movs	r5, #160	; 0xa0
	uint8_t i2c_status(void) {
		return port().S;
    60a4:	78d3      	ldrb	r3, [r2, #3]
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    60a6:	069b      	lsls	r3, r3, #26
    60a8:	d55b      	bpl.n	6162 <L_1545_delayMicroseconds+0x10>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    60aa:	683b      	ldr	r3, [r7, #0]
    60ac:	9301      	str	r3, [sp, #4]
	return ret;
    60ae:	9b01      	ldr	r3, [sp, #4]
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
    60b0:	ebc8 0303 	rsb	r3, r8, r3
#if 1
		if (waited > 15 && !reset) {
    60b4:	2b0f      	cmp	r3, #15
    60b6:	d9f5      	bls.n	60a4 <TwoWire::wait_idle()+0x1c>
    60b8:	b149      	cbz	r1, 60ce <TwoWire::wait_idle()+0x46>
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			delayMicroseconds(10);
			continue;
		}
#endif
		if (waited > 16) {
    60ba:	2b10      	cmp	r3, #16
    60bc:	d0f2      	beq.n	60a4 <TwoWire::wait_idle()+0x1c>
			// bus stuck busy too long
			port().C1 = 0;
    60be:	2000      	movs	r0, #0
    60c0:	7090      	strb	r0, [r2, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    60c2:	6933      	ldr	r3, [r6, #16]
			port().C1 = I2C_C1_IICEN;
    60c4:	2280      	movs	r2, #128	; 0x80
    60c6:	709a      	strb	r2, [r3, #2]
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
}
    60c8:	b002      	add	sp, #8
    60ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
    60ce:	6972      	ldr	r2, [r6, #20]
    60d0:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    60d4:	4413      	add	r3, r2
			pinMode(sda_pin, INPUT_DISABLE);
    60d6:	2105      	movs	r1, #5
    60d8:	7a18      	ldrb	r0, [r3, #8]
    60da:	f000 ff33 	bl	6f44 <pinMode>
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    60de:	6972      	ldr	r2, [r6, #20]
    60e0:	f896 3061 	ldrb.w	r3, [r6, #97]	; 0x61
    60e4:	4413      	add	r3, r2
			pinMode(scl_pin, OUTPUT);
    60e6:	2101      	movs	r1, #1
		if (waited > 15 && !reset) {
			reset = true;
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
    60e8:	f893 a012 	ldrb.w	sl, [r3, #18]
			pinMode(scl_pin, OUTPUT);
    60ec:	4650      	mov	r0, sl
    60ee:	f000 ff29 	bl	6f44 <pinMode>
    60f2:	2409      	movs	r4, #9
			for (int i=0; i < 9; i++) {
				digitalWrite(scl_pin, LOW);
    60f4:	2100      	movs	r1, #0
    60f6:	4650      	mov	r0, sl
    60f8:	f000 ff1e 	bl	6f38 <digitalWrite>
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    60fc:	462b      	mov	r3, r5

000060fe <L_1480_delayMicroseconds>:
    60fe:	3b01      	subs	r3, #1
    6100:	d1fd      	bne.n	60fe <L_1480_delayMicroseconds>
				delayMicroseconds(5);
				digitalWrite(scl_pin, HIGH);
    6102:	2101      	movs	r1, #1
    6104:	4650      	mov	r0, sl
    6106:	f000 ff17 	bl	6f38 <digitalWrite>
    610a:	462b      	mov	r3, r5

0000610c <L_1494_delayMicroseconds>:
    610c:	3b01      	subs	r3, #1
    610e:	d1fd      	bne.n	610c <L_1494_delayMicroseconds>
			//Serial.println("attempt forced reset");
			uint8_t sda_pin = hardware.sda_pin[sda_pin_index];
			pinMode(sda_pin, INPUT_DISABLE);
			uint8_t scl_pin = hardware.scl_pin[sda_pin_index];
			pinMode(scl_pin, OUTPUT);
			for (int i=0; i < 9; i++) {
    6110:	3c01      	subs	r4, #1
    6112:	d1ef      	bne.n	60f4 <TwoWire::wait_idle()+0x6c>
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    6114:	6970      	ldr	r0, [r6, #20]
    6116:	f896 1061 	ldrb.w	r1, [r6, #97]	; 0x61
    611a:	4401      	add	r1, r0
    611c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    6120:	7a0c      	ldrb	r4, [r1, #8]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    6122:	7b4b      	ldrb	r3, [r1, #13]
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    6124:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    6128:	021b      	lsls	r3, r3, #8
				digitalWrite(scl_pin, HIGH);
				delayMicroseconds(5);
			}
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
    612a:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    612c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    6130:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    6134:	600b      	str	r3, [r1, #0]
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    6136:	f896 3062 	ldrb.w	r3, [r6, #98]	; 0x62
    613a:	4403      	add	r3, r0
    613c:	7c99      	ldrb	r1, [r3, #18]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    613e:	7ddb      	ldrb	r3, [r3, #23]
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    6140:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    6144:	021b      	lsls	r3, r3, #8
			uint32_t mux;
			volatile uint32_t *reg;
			reg = portConfigRegister(hardware.sda_pin[sda_pin_index]);
			mux = PORT_PCR_MUX(hardware.sda_mux[sda_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
			reg = portConfigRegister(hardware.scl_pin[scl_pin_index]);
    6146:	6849      	ldr	r1, [r1, #4]
			mux = PORT_PCR_MUX(hardware.scl_mux[scl_pin_index]);
			*reg = mux|PORT_PCR_ODE|PORT_PCR_SRE|PORT_PCR_DSE;
    6148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
    614c:	f043 0364 	orr.w	r3, r3, #100	; 0x64
    6150:	600b      	str	r3, [r1, #0]

00006152 <L_1545_delayMicroseconds>:
    6152:	3a01      	subs	r2, #1
    6154:	d1fd      	bne.n	6152 <L_1545_delayMicroseconds>
    6156:	6932      	ldr	r2, [r6, #16]
	uint8_t i2c_status(void) {
		return port().S;
    6158:	78d3      	ldrb	r3, [r2, #3]
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    615a:	069b      	lsls	r3, r3, #26
		//Serial.write('.') ;
		uint32_t waited = millis() - wait_begin;
#if 1
		if (waited > 15 && !reset) {
			reset = true;
    615c:	f04f 0101 	mov.w	r1, #1
{
	bool reset=false;
	uint32_t wait_begin = millis();

	//Serial.print("busy:");
	while (i2c_status() & I2C_S_BUSY) {
    6160:	d4a3      	bmi.n	60aa <TwoWire::wait_idle()+0x22>
			//Serial.println("abort");
			//return 4; // timeout waiting for bus
			return false;
		}
	}
	return true;
    6162:	2001      	movs	r0, #1
}
    6164:	b002      	add	sp, #8
    6166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    616a:	bf00      	nop
    616c:	1fff9724 	.word	0x1fff9724
    6170:	0001b848 	.word	0x0001b848

00006174 <TwoWire::endTransmission(unsigned char)>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    6174:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    6176:	6903      	ldr	r3, [r0, #16]
	uint8_t i, status, ret=0;
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    6178:	2212      	movs	r2, #18
    617a:	70da      	strb	r2, [r3, #3]
    617c:	6902      	ldr	r2, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    617e:	7893      	ldrb	r3, [r2, #2]
    6180:	f003 0320 	and.w	r3, r3, #32
	}
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    6184:	b085      	sub	sp, #20
    6186:	4604      	mov	r4, r0
    6188:	460d      	mov	r5, r1
	uint32_t wait_begin;

	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    618a:	2b00      	cmp	r3, #0
    618c:	d05e      	beq.n	624c <TwoWire::endTransmission(unsigned char)+0xd8>
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    618e:	23b4      	movs	r3, #180	; 0xb4
    6190:	7093      	strb	r3, [r2, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6192:	493c      	ldr	r1, [pc, #240]	; (6284 <TwoWire::endTransmission(unsigned char)+0x110>)
    6194:	6922      	ldr	r2, [r4, #16]
    6196:	680b      	ldr	r3, [r1, #0]
    6198:	9300      	str	r3, [sp, #0]
	return ret;
    619a:	9e00      	ldr	r6, [sp, #0]
    619c:	e005      	b.n	61aa <TwoWire::endTransmission(unsigned char)+0x36>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    619e:	680b      	ldr	r3, [r1, #0]
    61a0:	9301      	str	r3, [sp, #4]
	return ret;
    61a2:	9b01      	ldr	r3, [sp, #4]
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
    61a4:	1b9b      	subs	r3, r3, r6
    61a6:	2b04      	cmp	r3, #4
    61a8:	d842      	bhi.n	6230 <TwoWire::endTransmission(unsigned char)+0xbc>
	uint8_t i2c_status(void) {
		return port().S;
    61aa:	78d3      	ldrb	r3, [r2, #3]
	}
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    61ac:	f003 0320 	and.w	r3, r3, #32
    61b0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    61b4:	2b00      	cmp	r3, #0
    61b6:	d0f2      	beq.n	619e <TwoWire::endTransmission(unsigned char)+0x2a>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    61b8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    61bc:	2b00      	cmp	r3, #0
    61be:	d031      	beq.n	6224 <TwoWire::endTransmission(unsigned char)+0xb0>
    61c0:	f04f 0e00 	mov.w	lr, #0
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    61c4:	f04f 0c02 	mov.w	ip, #2
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
		port().D = txBuffer[i];
    61c8:	eb04 030e 	add.w	r3, r4, lr
    61cc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
    61d0:	7113      	strb	r3, [r2, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61d2:	680b      	ldr	r3, [r1, #0]
    61d4:	9303      	str	r3, [sp, #12]
	return ret;
    61d6:	9f03      	ldr	r7, [sp, #12]
    61d8:	6920      	ldr	r0, [r4, #16]
    61da:	e007      	b.n	61ec <TwoWire::endTransmission(unsigned char)+0x78>
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
    61dc:	069b      	lsls	r3, r3, #26
    61de:	d50d      	bpl.n	61fc <TwoWire::endTransmission(unsigned char)+0x88>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    61e0:	680b      	ldr	r3, [r1, #0]
    61e2:	9302      	str	r3, [sp, #8]
	return ret;
    61e4:	9b02      	ldr	r3, [sp, #8]
			if (millis() - wait_begin > 5) {
    61e6:	1bdb      	subs	r3, r3, r7
    61e8:	2b05      	cmp	r3, #5
    61ea:	d828      	bhi.n	623e <TwoWire::endTransmission(unsigned char)+0xca>
    61ec:	78c3      	ldrb	r3, [r0, #3]
    61ee:	b2db      	uxtb	r3, r3
		port().D = txBuffer[i];
		//Serial.write('^');
		wait_begin = millis();
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
    61f0:	f003 0202 	and.w	r2, r3, #2
    61f4:	f002 06ff 	and.w	r6, r2, #255	; 0xff
    61f8:	2a00      	cmp	r2, #0
    61fa:	d0ef      	beq.n	61dc <TwoWire::endTransmission(unsigned char)+0x68>
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
			}
		}
		port().S = I2C_S_IICIF;
    61fc:	f880 c003 	strb.w	ip, [r0, #3]
    6200:	6926      	ldr	r6, [r4, #16]
    6202:	78f3      	ldrb	r3, [r6, #3]
    6204:	b2db      	uxtb	r3, r3
		//Serial.write('$');
		status = i2c_status();
		if ((status & I2C_S_ARBL)) {
    6206:	06df      	lsls	r7, r3, #27
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    6208:	4632      	mov	r2, r6
    620a:	d42d      	bmi.n	6268 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err4\n");
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
    620c:	069f      	lsls	r7, r3, #26
    620e:	d52b      	bpl.n	6268 <TwoWire::endTransmission(unsigned char)+0xf4>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
			break;
		}
		if (status & I2C_S_RXAK) {
    6210:	07db      	lsls	r3, r3, #31
    6212:	d431      	bmi.n	6278 <TwoWire::endTransmission(unsigned char)+0x104>
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
		}
	}
	// transmit the address and data
	for (i=0; i < txBufferLength; i++) {
    6214:	f10e 0e01 	add.w	lr, lr, #1
    6218:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
    621c:	fa5f fe8e 	uxtb.w	lr, lr
    6220:	4573      	cmp	r3, lr
    6222:	d8d1      	bhi.n	61c8 <TwoWire::endTransmission(unsigned char)+0x54>
	return true;
}

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	uint8_t i, status, ret=0;
    6224:	2000      	movs	r0, #0
			}
			sendStop = 1;
			break;
		}
	}
	if (sendStop) {
    6226:	bb1d      	cbnz	r5, 6270 <TwoWire::endTransmission(unsigned char)+0xfc>
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
		// TODO: do we wait for this somehow?
	}
	transmitting = 0;
    6228:	2300      	movs	r3, #0
    622a:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    622e:	e004      	b.n	623a <TwoWire::endTransmission(unsigned char)+0xc6>
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		//Serial.write('*') ;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    6230:	7090      	strb	r0, [r2, #2]
    6232:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    6234:	2280      	movs	r2, #128	; 0x80
    6236:	709a      	strb	r2, [r3, #2]
			//Serial.println("abort2");
			//Serial.printf("endTransmission err2\n");
			return 4; // error generating start condition
    6238:	2004      	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    623a:	b005      	add	sp, #20
    623c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (1) {
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    623e:	7086      	strb	r6, [r0, #2]
    6240:	6923      	ldr	r3, [r4, #16]
				port().C1 = I2C_C1_IICEN;
    6242:	2280      	movs	r2, #128	; 0x80
				//Serial.println("abort3");
				//Serial.printf("endTransmission err3\n");
				return 4; // clock stretch too long
    6244:	2004      	movs	r0, #4
			status = i2c_status();
			if ((status & I2C_S_IICIF)) break;
			if (!(status & I2C_S_BUSY)) break;
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
				port().C1 = I2C_C1_IICEN;
    6246:	709a      	strb	r2, [r3, #2]
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    6248:	b005      	add	sp, #20
    624a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    624c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
		// we are already the bus master, so send a repeated start
		//Serial.print("rstart:");
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    6250:	f7ff ff1a 	bl	6088 <TwoWire::wait_idle()>
    6254:	b910      	cbnz	r0, 625c <TwoWire::endTransmission(unsigned char)+0xe8>
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
    6256:	2004      	movs	r0, #4
	}
	transmitting = 0;
	//Serial.print(" ret=");
	//Serial.println(ret);
	return ret;
}
    6258:	b005      	add	sp, #20
    625a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    625c:	6923      	ldr	r3, [r4, #16]
		if (!wait_idle()) {
			//Serial.printf("endTransmission err1\n");
			return 4; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    625e:	f884 605f 	strb.w	r6, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    6262:	22b0      	movs	r2, #176	; 0xb0
    6264:	709a      	strb	r2, [r3, #2]
    6266:	e794      	b.n	6192 <TwoWire::endTransmission(unsigned char)+0x1e>
			ret = 4; // 4:other error
			break;
		}
		if (!(status & I2C_S_BUSY)) {
			// suddenly lost control of the bus!
			port().C1 = I2C_C1_IICEN;
    6268:	2380      	movs	r3, #128	; 0x80
    626a:	70b3      	strb	r3, [r6, #2]
			//Serial.printf("endTransmission err5\n");
			ret = 4; // 4:other error
    626c:	2004      	movs	r0, #4
    626e:	e7da      	b.n	6226 <TwoWire::endTransmission(unsigned char)+0xb2>
    6270:	6926      	ldr	r6, [r4, #16]
			break;
		}
	}
	if (sendStop) {
		// send the stop condition
		port().C1 = I2C_C1_IICEN;
    6272:	2380      	movs	r3, #128	; 0x80
    6274:	70b3      	strb	r3, [r6, #2]
    6276:	e7d7      	b.n	6228 <TwoWire::endTransmission(unsigned char)+0xb4>
			if (i == 0) {
				//Serial.printf("endTransmission err6\n");
				ret = 2; // 2:received NACK on transmit of address
			} else {
				//Serial.printf("endTransmission err7\n");
				ret = 3; // 3:received NACK on transmit of data 
    6278:	f1be 0f00 	cmp.w	lr, #0
    627c:	bf0c      	ite	eq
    627e:	2002      	moveq	r0, #2
    6280:	2003      	movne	r0, #3
    6282:	e7f6      	b.n	6272 <TwoWire::endTransmission(unsigned char)+0xfe>
    6284:	1fff9724 	.word	0x1fff9724

00006288 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    6288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    628c:	6906      	ldr	r6, [r0, #16]
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    628e:	2500      	movs	r5, #0
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    6290:	2712      	movs	r7, #18
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
	uint32_t wait_begin;

	rxBufferIndex = 0;
    6292:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
	rxBufferLength = 0;
    6296:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
    629a:	70f7      	strb	r7, [r6, #3]
    629c:	f8d0 c010 	ldr.w	ip, [r0, #16]
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    62a0:	f89c e002 	ldrb.w	lr, [ip, #2]
    62a4:	f00e 0e20 	and.w	lr, lr, #32
	return ret;
}


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
    62a8:	b088      	sub	sp, #32
    62aa:	4604      	mov	r4, r0
    62ac:	4688      	mov	r8, r1
    62ae:	4615      	mov	r5, r2
    62b0:	461e      	mov	r6, r3
	rxBufferLength = 0;
	//serial_print("requestFrom\n");
	// clear the status flags
	port().S = I2C_S_IICIF | I2C_S_ARBL;
	// now take control of the bus...
	if (port().C1 & I2C_C1_MST) {
    62b2:	f1be 0f00 	cmp.w	lr, #0
    62b6:	d049      	beq.n	634c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xc4>
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
    62b8:	23b4      	movs	r3, #180	; 0xb4
    62ba:	f88c 3002 	strb.w	r3, [ip, #2]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    62be:	4b78      	ldr	r3, [pc, #480]	; (64a0 <L_3073_delayMicroseconds+0x1a>)
    62c0:	6921      	ldr	r1, [r4, #16]
    62c2:	681a      	ldr	r2, [r3, #0]
    62c4:	9200      	str	r2, [sp, #0]
	return ret;
    62c6:	f8dd e000 	ldr.w	lr, [sp]
    62ca:	e006      	b.n	62da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x52>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    62cc:	681a      	ldr	r2, [r3, #0]
    62ce:	9201      	str	r2, [sp, #4]
	return ret;
    62d0:	9801      	ldr	r0, [sp, #4]
	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
    62d2:	ebce 0000 	rsb	r0, lr, r0
    62d6:	2804      	cmp	r0, #4
    62d8:	d830      	bhi.n	633c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xb4>
	uint8_t i2c_status(void) {
		return port().S;
    62da:	78c8      	ldrb	r0, [r1, #3]
    62dc:	f000 0020 	and.w	r0, r0, #32

	// wait until start condition establishes control of the bus
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
    62e0:	f000 07ff 	and.w	r7, r0, #255	; 0xff
    62e4:	2800      	cmp	r0, #0
    62e6:	d0f1      	beq.n	62cc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x44>
			//Serial.printf("requestFrom err2\n");
			return 0; // error generating start condition
		}
	}
	// send the address
	port().D = (address << 1) | 1;
    62e8:	ea4f 0248 	mov.w	r2, r8, lsl #1
    62ec:	f042 0201 	orr.w	r2, r2, #1
    62f0:	b2d2      	uxtb	r2, r2
    62f2:	710a      	strb	r2, [r1, #4]
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    62f4:	681a      	ldr	r2, [r3, #0]
    62f6:	9202      	str	r2, [sp, #8]
	return ret;
    62f8:	f8dd e008 	ldr.w	lr, [sp, #8]
    62fc:	6920      	ldr	r0, [r4, #16]
    62fe:	e006      	b.n	630e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x86>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6300:	681a      	ldr	r2, [r3, #0]
    6302:	9203      	str	r2, [sp, #12]
	return ret;
    6304:	9903      	ldr	r1, [sp, #12]
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    6306:	ebce 0101 	rsb	r1, lr, r1
    630a:	2905      	cmp	r1, #5
    630c:	d82a      	bhi.n	6364 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xdc>
		}
	}
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    630e:	78c1      	ldrb	r1, [r0, #3]
    6310:	f001 0102 	and.w	r1, r1, #2
    6314:	f001 07ff 	and.w	r7, r1, #255	; 0xff
    6318:	2900      	cmp	r1, #0
    631a:	d0f1      	beq.n	6300 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x78>
			port().C1 = I2C_C1_IICEN;
			//Serial.printf("requestFrom err3\n");
			return 0; // clock stretch too long (during address)
		}
	}
	port().S = I2C_S_IICIF;
    631c:	f04f 0c02 	mov.w	ip, #2
    6320:	f880 c003 	strb.w	ip, [r0, #3]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    6324:	6922      	ldr	r2, [r4, #16]
	uint8_t i2c_status(void) {
		return port().S;
    6326:	78d1      	ldrb	r1, [r2, #3]
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
    6328:	f011 0711 	ands.w	r7, r1, #17
    632c:	d122      	bne.n	6374 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xec>
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
		//Serial.printf("requestFrom err4\n");
		return 0;
	}
	if (length == 0) {
    632e:	bb2d      	cbnz	r5, 637c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xf4>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
    6330:	2e00      	cmp	r6, #0
    6332:	bf0c      	ite	eq
    6334:	23a0      	moveq	r3, #160	; 0xa0
    6336:	2380      	movne	r3, #128	; 0x80
    6338:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err5\n");
		return 0;
    633a:	e003      	b.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	wait_begin = millis();
	while (1) {
		status = i2c_status();
		if ((status & I2C_S_BUSY)) break;
		if (millis() - wait_begin > 4) {
			port().C1 = 0;
    633c:	708f      	strb	r7, [r1, #2]
	size_t write(int n) {
		return write((uint8_t)n);
	}
	using Print::write;
private:
	KINETIS_I2C_t& port() { return (*(KINETIS_I2C_t *) port_addr); }
    633e:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    6340:	2280      	movs	r2, #128	; 0x80
    6342:	709a      	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    6344:	4638      	mov	r0, r7
    6346:	b008      	add	sp, #32
    6348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    634c:	f00e 07ff 	and.w	r7, lr, #255	; 0xff
	if (port().C1 & I2C_C1_MST) {
		// we are already the bus master, so send a repeated start
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_RSTA | I2C_C1_TX;
	} else {
		// we are not currently the bus master, so wait for bus ready
		if (!wait_idle()) {
    6350:	f7ff fe9a 	bl	6088 <TwoWire::wait_idle()>
    6354:	2800      	cmp	r0, #0
    6356:	d0f5      	beq.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    6358:	6923      	ldr	r3, [r4, #16]
			//Serial.printf("requestFrom err1\n");
			return 0; // timeout waiting for bus
		}
		// become the bus master in transmit mode (send start)
		slave_mode = 0;
    635a:	f884 705f 	strb.w	r7, [r4, #95]	; 0x5f
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    635e:	22b0      	movs	r2, #176	; 0xb0
    6360:	709a      	strb	r2, [r3, #2]
    6362:	e7ac      	b.n	62be <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x36>
	// send the address
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    6364:	7087      	strb	r7, [r0, #2]
    6366:	6923      	ldr	r3, [r4, #16]
			port().C1 = I2C_C1_IICEN;
    6368:	2280      	movs	r2, #128	; 0x80
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    636a:	4638      	mov	r0, r7
	port().D = (address << 1) | 1;
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    636c:	709a      	strb	r2, [r3, #2]
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
	rxBufferLength = count;
	return count;
}
    636e:	b008      	add	sp, #32
    6370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	port().S = I2C_S_IICIF;
	status = i2c_status();
	if ((status & I2C_S_RXAK) || (status & I2C_S_ARBL)) {
		// the slave device did not acknowledge
		// or we lost bus arbitration to another master
		port().C1 = I2C_C1_IICEN;
    6374:	2380      	movs	r3, #128	; 0x80
    6376:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err4\n");
		return 0;
    6378:	2700      	movs	r7, #0
    637a:	e7e3      	b.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		// TODO: does anybody really do zero length reads?
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
    637c:	2d01      	cmp	r5, #1
    637e:	d075      	beq.n	646c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1e4>
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
    6380:	21a0      	movs	r1, #160	; 0xa0
    6382:	7091      	strb	r1, [r2, #2]
    6384:	6921      	ldr	r1, [r4, #16]
	}
	tmp = port().D; // initiate the first receive
    6386:	790a      	ldrb	r2, [r1, #4]
    6388:	46be      	mov	lr, r7
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    638a:	4667      	mov	r7, ip
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    638c:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6390:	681a      	ldr	r2, [r3, #0]
    6392:	9204      	str	r2, [sp, #16]
	return ret;
    6394:	9804      	ldr	r0, [sp, #16]
    6396:	e005      	b.n	63a4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x11c>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6398:	681a      	ldr	r2, [r3, #0]
    639a:	9205      	str	r2, [sp, #20]
	return ret;
    639c:	9a05      	ldr	r2, [sp, #20]
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
    639e:	1a12      	subs	r2, r2, r0
    63a0:	2a05      	cmp	r2, #5
    63a2:	d84a      	bhi.n	643a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b2>
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
    63a4:	78ca      	ldrb	r2, [r1, #3]
    63a6:	f002 0202 	and.w	r2, r2, #2
    63aa:	f002 08ff 	and.w	r8, r2, #255	; 0xff
    63ae:	2a00      	cmp	r2, #0
    63b0:	d0f2      	beq.n	6398 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x110>
				rxBufferLength = count;
				//Serial.printf("requestFrom err6\n");
				return count; // clock stretch too long (during data)
			}
		}
		port().S = I2C_S_IICIF;
    63b2:	70cf      	strb	r7, [r1, #3]
    63b4:	6921      	ldr	r1, [r4, #16]
		status = port().S;
    63b6:	78ca      	ldrb	r2, [r1, #3]
    63b8:	b2d2      	uxtb	r2, r2
		if ((status & I2C_S_ARBL)) {
    63ba:	f012 0f10 	tst.w	r2, #16
    63be:	4608      	mov	r0, r1
    63c0:	d15a      	bne.n	6478 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7a\n");
			return count;
		}
		if (!(status & I2C_S_BUSY)) {
    63c2:	0692      	lsls	r2, r2, #26
    63c4:	d558      	bpl.n	6478 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
			// or suddenly lost control of the bus!
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
    63c6:	3d01      	subs	r5, #1
    63c8:	b2ed      	uxtb	r5, r5
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    63ca:	2d01      	cmp	r5, #1
    63cc:	d049      	beq.n	6462 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1da>
		if (count < BUFFER_LENGTH) {
    63ce:	f1be 0f1f 	cmp.w	lr, #31
    63d2:	d93b      	bls.n	644c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1c4>
			rxBuffer[count++] = port().D;
		} else {
			tmp = port().D;
    63d4:	790a      	ldrb	r2, [r1, #4]
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
	//delayMicroseconds(250);
	while (length > 1) {
    63d6:	2d01      	cmp	r5, #1
    63d8:	d1da      	bne.n	6390 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x108>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    63da:	681a      	ldr	r2, [r3, #0]
    63dc:	9206      	str	r2, [sp, #24]
	return ret;
    63de:	9d06      	ldr	r5, [sp, #24]
    63e0:	e005      	b.n	63ee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x166>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    63e2:	681a      	ldr	r2, [r3, #0]
    63e4:	9207      	str	r2, [sp, #28]
	return ret;
    63e6:	9a07      	ldr	r2, [sp, #28]
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
    63e8:	1b52      	subs	r2, r2, r5
    63ea:	2a05      	cmp	r2, #5
    63ec:	d846      	bhi.n	647c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f4>
		} else {
			tmp = port().D;
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
    63ee:	78c2      	ldrb	r2, [r0, #3]
    63f0:	f002 0202 	and.w	r2, r2, #2
    63f4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
    63f8:	2a00      	cmp	r2, #0
    63fa:	d0f2      	beq.n	63e2 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x15a>
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
		}
	}
	port().S = I2C_S_IICIF;
    63fc:	2302      	movs	r3, #2
    63fe:	70c3      	strb	r3, [r0, #3]
    6400:	6922      	ldr	r2, [r4, #16]
	status = port().S;
    6402:	78d3      	ldrb	r3, [r2, #3]
    6404:	b2db      	uxtb	r3, r3
	if ((status & I2C_S_ARBL)) {
    6406:	06d9      	lsls	r1, r3, #27
    6408:	d43a      	bmi.n	6480 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f8>
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
		//Serial.printf("requestFrom err9a\n");
		return count;
	}
	if (!(status & I2C_S_BUSY)) {
    640a:	069b      	lsls	r3, r3, #26
    640c:	d534      	bpl.n	6478 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1f0>
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    640e:	23b0      	movs	r3, #176	; 0xb0
	if (count < BUFFER_LENGTH) {
    6410:	f1be 0f1f 	cmp.w	lr, #31
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//Serial.printf("requestFrom err9b\n");
		return count;
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
    6414:	7093      	strb	r3, [r2, #2]
	if (count < BUFFER_LENGTH) {
    6416:	d83f      	bhi.n	6498 <L_3073_delayMicroseconds+0x12>
    6418:	6922      	ldr	r2, [r4, #16]
		rxBuffer[count++] = port().D;
    641a:	eb04 030e 	add.w	r3, r4, lr
    641e:	7912      	ldrb	r2, [r2, #4]
    6420:	761a      	strb	r2, [r3, #24]
    6422:	f10e 0e01 	add.w	lr, lr, #1
    6426:	fa5f fe8e 	uxtb.w	lr, lr
#if F_CPU > 120000000
	__asm__("nop");
	__asm__("nop");
	__asm__("nop");
#endif
	if (sendStop) port().C1 = I2C_C1_IICEN;
    642a:	b116      	cbz	r6, 6432 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1aa>
    642c:	6923      	ldr	r3, [r4, #16]
    642e:	2280      	movs	r2, #128	; 0x80
    6430:	709a      	strb	r2, [r3, #2]
	rxBufferLength = count;
    6432:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
	return count;
    6436:	4677      	mov	r7, lr
    6438:	e784      	b.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
	//delayMicroseconds(250);
	while (length > 1) {
		wait_begin = millis();
		while (!(port().S & I2C_S_IICIF)) {
			if (millis() - wait_begin > 5) {
				port().C1 = 0;
    643a:	f881 8002 	strb.w	r8, [r1, #2]
    643e:	6923      	ldr	r3, [r4, #16]
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
    6440:	2280      	movs	r2, #128	; 0x80
    6442:	709a      	strb	r2, [r3, #2]
			rxBufferLength = count;
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    6444:	4677      	mov	r7, lr
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
			port().C1 = I2C_C1_IICEN;
			rxBufferLength = count;
    6446:	f884 e039 	strb.w	lr, [r4, #57]	; 0x39
			//Serial.printf("requestFrom err8\n");
			return count; // clock stretch too long (during data)
    644a:	e77b      	b.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
		if (count < BUFFER_LENGTH) {
			rxBuffer[count++] = port().D;
    644c:	eb04 020e 	add.w	r2, r4, lr
    6450:	f891 8004 	ldrb.w	r8, [r1, #4]
    6454:	f882 8018 	strb.w	r8, [r2, #24]
    6458:	f10e 0e01 	add.w	lr, lr, #1
    645c:	fa5f fe8e 	uxtb.w	lr, lr
    6460:	e7b9      	b.n	63d6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x14e>
			// TODO: what is the proper thing to do here??
			//Serial.printf("requestFrom err7b\n");
			return count;
		}
		length--;
		if (length == 1) port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    6462:	f881 c002 	strb.w	ip, [r1, #2]
    6466:	6921      	ldr	r1, [r4, #16]
    6468:	4608      	mov	r0, r1
    646a:	e7b0      	b.n	63ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x146>
		// if so, does this code really work?
		port().C1 = I2C_C1_IICEN | (sendStop ? 0 : I2C_C1_MST);
		//Serial.printf("requestFrom err5\n");
		return 0;
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
    646c:	21a8      	movs	r1, #168	; 0xa8
    646e:	7091      	strb	r1, [r2, #2]
    6470:	6920      	ldr	r0, [r4, #16]


uint8_t TwoWire::requestFrom(uint8_t address, uint8_t length, uint8_t sendStop)
{
	uint8_t tmp __attribute__((unused));
	uint8_t status, count=0;
    6472:	46be      	mov	lr, r7
	} else if (length == 1) {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TXAK;
	} else {
		port().C1 = I2C_C1_IICEN | I2C_C1_MST;
	}
	tmp = port().D; // initiate the first receive
    6474:	7902      	ldrb	r2, [r0, #4]
    6476:	e7b0      	b.n	63da <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x152>
    6478:	4677      	mov	r7, lr
    647a:	e763      	b.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
		}
	}
	wait_begin = millis();
	while (!(port().S & I2C_S_IICIF)) {
		if (millis() - wait_begin > 5) {
			port().C1 = 0;
    647c:	7081      	strb	r1, [r0, #2]
    647e:	e7de      	b.n	643e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1b6>
	if ((status & I2C_S_ARBL)) {
		// we lost bus arbitration to another master
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
    6480:	2110      	movs	r1, #16
#else
		"subs   %0, #1"				"\n\t"
		"bne    L_%=_delayMicroseconds"		"\n"
		: "+r" (n) :
#endif
	);
    6482:	23a0      	movs	r3, #160	; 0xa0
    6484:	70d1      	strb	r1, [r2, #3]

00006486 <L_3073_delayMicroseconds>:
    6486:	3b01      	subs	r3, #1
    6488:	d1fd      	bne.n	6486 <L_3073_delayMicroseconds>
    648a:	6922      	ldr	r2, [r4, #16]
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    648c:	7893      	ldrb	r3, [r2, #2]
    648e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		//Serial.printf("requestFrom err9a\n");
		return count;
    6492:	4677      	mov	r7, lr
		// or suddenly lost control of the bus!
		// TODO: what is the proper thing to do here??
		//digitalWriteFast(13, HIGH);
		port().S = I2C_S_ARBL;
		delayMicroseconds(5);
		port().C1 &= ~I2C_C1_TXAK;
    6494:	7093      	strb	r3, [r2, #2]
		//Serial.printf("requestFrom err9a\n");
		return count;
    6496:	e755      	b.n	6344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0xbc>
    6498:	6923      	ldr	r3, [r4, #16]
	}
	port().C1 = I2C_C1_IICEN | I2C_C1_MST | I2C_C1_TX;
	if (count < BUFFER_LENGTH) {
		rxBuffer[count++] = port().D;
	} else {
		tmp = port().D;
    649a:	791b      	ldrb	r3, [r3, #4]
    649c:	e7c5      	b.n	642a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)+0x1a2>
    649e:	bf00      	nop
    64a0:	1fff9724 	.word	0x1fff9724

000064a4 <i2c0_isr>:
#define MAKE_CONST(x) (__builtin_constant_p(x) ? (x) : (x))

#ifdef WIRE_IMPLEMENT_WIRE
constexpr uintptr_t i2c0_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C0));
TwoWire Wire(i2c0_addr, TwoWire::i2c0_hardware);
void i2c0_isr(void) { Wire.isr(); }
    64a4:	4801      	ldr	r0, [pc, #4]	; (64ac <i2c0_isr+0x8>)
    64a6:	f7ff bd1f 	b.w	5ee8 <TwoWire::isr()>
    64aa:	bf00      	nop
    64ac:	1fff88cc 	.word	0x1fff88cc

000064b0 <i2c1_isr>:
#endif
#ifdef WIRE_IMPLEMENT_WIRE1
constexpr uintptr_t i2c1_addr = uintptr_t(MAKE_CONST(&KINETIS_I2C1));
TwoWire Wire1(i2c1_addr, TwoWire::i2c1_hardware);
void i2c1_isr(void) { Wire1.isr(); }
    64b0:	4801      	ldr	r0, [pc, #4]	; (64b8 <i2c1_isr+0x8>)
    64b2:	f7ff bd19 	b.w	5ee8 <TwoWire::isr()>
    64b6:	bf00      	nop
    64b8:	1fff8938 	.word	0x1fff8938

000064bc <date2days(unsigned short, unsigned char, unsigned char)>:
    @param d Day
    @return Number of days
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000)
    64bc:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
    y -= 2000;
    64c0:	bf24      	itt	cs
    64c2:	f5a0 60fa 	subcs.w	r0, r0, #2000	; 0x7d0
    64c6:	b280      	uxthcs	r0, r0
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    64c8:	2901      	cmp	r1, #1
    @param m Month
    @param d Day
    @return Number of days
*/
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
    64ca:	b430      	push	{r4, r5}
  if (y >= 2000)
    y -= 2000;
  uint16_t days = d;
    64cc:	b292      	uxth	r2, r2
  for (uint8_t i = 1; i < m; ++i)
    64ce:	d911      	bls.n	64f4 <date2days(unsigned short, unsigned char, unsigned char)+0x38>
    64d0:	4b0f      	ldr	r3, [pc, #60]	; (6510 <date2days(unsigned short, unsigned char, unsigned char)+0x54>)
    64d2:	1e8d      	subs	r5, r1, #2
    64d4:	fa53 f585 	uxtab	r5, r3, r5
    64d8:	241f      	movs	r4, #31
    64da:	e001      	b.n	64e0 <date2days(unsigned short, unsigned char, unsigned char)+0x24>
    64dc:	f813 4f01 	ldrb.w	r4, [r3, #1]!
    days += pgm_read_byte(daysInMonth + i - 1);
    64e0:	4422      	add	r2, r4
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000)
    y -= 2000;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    64e2:	42ab      	cmp	r3, r5
    days += pgm_read_byte(daysInMonth + i - 1);
    64e4:	b292      	uxth	r2, r2
/**************************************************************************/
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
  if (y >= 2000)
    y -= 2000;
  uint16_t days = d;
  for (uint8_t i = 1; i < m; ++i)
    64e6:	d1f9      	bne.n	64dc <date2days(unsigned short, unsigned char, unsigned char)+0x20>
    days += pgm_read_byte(daysInMonth + i - 1);
  if (m > 2 && y % 4 == 0)
    64e8:	2902      	cmp	r1, #2
    64ea:	d903      	bls.n	64f4 <date2days(unsigned short, unsigned char, unsigned char)+0x38>
    64ec:	0783      	lsls	r3, r0, #30
    ++days;
    64ee:	bf04      	itt	eq
    64f0:	3201      	addeq	r2, #1
    64f2:	b292      	uxtheq	r2, r2
  return days + 365 * y + (y + 3) / 4 - 1;
    64f4:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
    64f8:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
    64fc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6500:	3b01      	subs	r3, #1
    6502:	3003      	adds	r0, #3
    6504:	eb03 00a0 	add.w	r0, r3, r0, asr #2
    6508:	4410      	add	r0, r2
}
    650a:	b280      	uxth	r0, r0
    650c:	bc30      	pop	{r4, r5}
    650e:	4770      	bx	lr
    6510:	0001b83c 	.word	0x0001b83c

00006514 <DateTime::DateTime(unsigned long)>:
    @see The `unixtime()` method is the converse of this constructor.

    @param t Time elapsed in seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
    6514:	b5f0      	push	{r4, r5, r6, r7, lr}
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
    6516:	4c35      	ldr	r4, [pc, #212]	; (65ec <DateTime::DateTime(unsigned long)+0xd8>)

  ss = t % 60;
    6518:	4b35      	ldr	r3, [pc, #212]	; (65f0 <DateTime::DateTime(unsigned long)+0xdc>)
  t /= 60;
  mm = t % 60;
  t /= 60;
  hh = t % 24;
    651a:	4a36      	ldr	r2, [pc, #216]	; (65f4 <DateTime::DateTime(unsigned long)+0xe0>)
    651c:	4d36      	ldr	r5, [pc, #216]	; (65f8 <DateTime::DateTime(unsigned long)+0xe4>)
  uint16_t days = t / 24;
    651e:	4e37      	ldr	r6, [pc, #220]	; (65fc <DateTime::DateTime(unsigned long)+0xe8>)

    @param t Time elapsed in seconds since 1970-01-01 00:00:00.
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970
    6520:	440c      	add	r4, r1

  ss = t % 60;
    6522:	fba3 7104 	umull	r7, r1, r3, r4
  t /= 60;
  mm = t % 60;
  t /= 60;
  hh = t % 24;
    6526:	fba2 7204 	umull	r7, r2, r2, r4
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
    652a:	0949      	lsrs	r1, r1, #5
  t /= 60;
  mm = t % 60;
  t /= 60;
  hh = t % 24;
    652c:	0ad2      	lsrs	r2, r2, #11
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
  t /= 60;
  mm = t % 60;
    652e:	fba3 7301 	umull	r7, r3, r3, r1
  t /= 60;
  hh = t % 24;
    6532:	fba5 7502 	umull	r7, r5, r5, r2
  uint16_t days = t / 24;
    6536:	fba6 7604 	umull	r7, r6, r6, r4
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
  t /= 60;
  mm = t % 60;
    653a:	095b      	lsrs	r3, r3, #5
  t /= 60;
  hh = t % 24;
    653c:	092d      	lsrs	r5, r5, #4
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
    653e:	ebc1 1701 	rsb	r7, r1, r1, lsl #4
  t /= 60;
  mm = t % 60;
  t /= 60;
  hh = t % 24;
  uint16_t days = t / 24;
    6542:	0c36      	lsrs	r6, r6, #16
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
  t /= 60;
  mm = t % 60;
    6544:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  t /= 60;
  hh = t % 24;
    6548:	eb05 0545 	add.w	r5, r5, r5, lsl #1
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
  t /= 60;
  mm = t % 60;
    654c:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
  t /= 60;
  hh = t % 24;
    6550:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
    6554:	eba4 0487 	sub.w	r4, r4, r7, lsl #2
  mm = t % 60;
  t /= 60;
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    6558:	2200      	movs	r2, #0
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
    655a:	f5b6 7fb7 	cmp.w	r6, #366	; 0x16e
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
  t /= 60;
  mm = t % 60;
    655e:	7103      	strb	r3, [r0, #4]
*/
/**************************************************************************/
DateTime::DateTime(uint32_t t) {
  t -= SECONDS_FROM_1970_TO_2000; // bring to 2000 timestamp from 1970

  ss = t % 60;
    6560:	7144      	strb	r4, [r0, #5]
  t /= 60;
  mm = t % 60;
  t /= 60;
  hh = t % 24;
    6562:	70c5      	strb	r5, [r0, #3]
  uint16_t days = t / 24;
    6564:	b2b3      	uxth	r3, r6
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    6566:	7002      	strb	r2, [r0, #0]
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    6568:	f04f 0101 	mov.w	r1, #1
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
    656c:	d33b      	bcc.n	65e6 <DateTime::DateTime(unsigned long)+0xd2>
    656e:	460a      	mov	r2, r1
    6570:	e000      	b.n	6574 <DateTime::DateTime(unsigned long)+0x60>
    6572:	4621      	mov	r1, r4
      break;
    days -= 365 + leap;
    6574:	f5c2 427e 	rsb	r2, r2, #65024	; 0xfe00
    6578:	3293      	adds	r2, #147	; 0x93
  t /= 60;
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    leap = yOff % 4 == 0;
    657a:	f011 0503 	ands.w	r5, r1, #3
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
    657e:	4413      	add	r3, r2
  t /= 60;
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    leap = yOff % 4 == 0;
    6580:	bf0c      	ite	eq
    6582:	2201      	moveq	r2, #1
    6584:	2200      	movne	r2, #0
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
    6586:	b29b      	uxth	r3, r3
  hh = t % 24;
  uint16_t days = t / 24;
  uint8_t leap;
  for (yOff = 0;; ++yOff) {
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
    6588:	f202 166d 	addw	r6, r2, #365	; 0x16d
    658c:	1c4c      	adds	r4, r1, #1
    658e:	42b3      	cmp	r3, r6
    6590:	b2e4      	uxtb	r4, r4
    6592:	d2ee      	bcs.n	6572 <DateTime::DateTime(unsigned long)+0x5e>
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    6594:	2201      	movs	r2, #1
    6596:	7001      	strb	r1, [r0, #0]
    6598:	7042      	strb	r2, [r0, #1]
    659a:	4e19      	ldr	r6, [pc, #100]	; (6600 <DateTime::DateTime(unsigned long)+0xec>)
    659c:	211f      	movs	r1, #31
    659e:	2201      	movs	r2, #1
    65a0:	f04f 0c03 	mov.w	ip, #3
    65a4:	e009      	b.n	65ba <DateTime::DateTime(unsigned long)+0xa6>
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
      ++daysPerMonth;
    if (days < daysPerMonth)
    65a6:	429c      	cmp	r4, r3
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    65a8:	b2fa      	uxtb	r2, r7
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
      ++daysPerMonth;
    if (days < daysPerMonth)
    65aa:	d819      	bhi.n	65e0 <DateTime::DateTime(unsigned long)+0xcc>
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    65ac:	2a0c      	cmp	r2, #12
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
      ++daysPerMonth;
    if (days < daysPerMonth)
      break;
    days -= daysPerMonth;
    65ae:	fa1f f38e 	uxth.w	r3, lr
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    65b2:	7042      	strb	r2, [r0, #1]
    65b4:	d014      	beq.n	65e0 <DateTime::DateTime(unsigned long)+0xcc>
    65b6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
      ++daysPerMonth;
    if (days < daysPerMonth)
    65ba:	b28c      	uxth	r4, r1
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    65bc:	1c57      	adds	r7, r2, #1
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
      ++daysPerMonth;
    if (days < daysPerMonth)
      break;
    days -= daysPerMonth;
    65be:	ebc4 0e03 	rsb	lr, r4, r3
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
    65c2:	2d00      	cmp	r5, #0
    65c4:	d1ef      	bne.n	65a6 <DateTime::DateTime(unsigned long)+0x92>
    65c6:	2a02      	cmp	r2, #2
    65c8:	d1ed      	bne.n	65a6 <DateTime::DateTime(unsigned long)+0x92>
      ++daysPerMonth;
    if (days < daysPerMonth)
    65ca:	3101      	adds	r1, #1
    65cc:	b2c9      	uxtb	r1, r1
    65ce:	4299      	cmp	r1, r3
      break;
    days -= daysPerMonth;
    65d0:	eba3 0101 	sub.w	r1, r3, r1
  }
  for (m = 1; m < 12; ++m) {
    uint8_t daysPerMonth = pgm_read_byte(daysInMonth + m - 1);
    if (leap && m == 2)
      ++daysPerMonth;
    if (days < daysPerMonth)
    65d4:	d804      	bhi.n	65e0 <DateTime::DateTime(unsigned long)+0xcc>
      break;
    days -= daysPerMonth;
    65d6:	b28b      	uxth	r3, r1
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    65d8:	f880 c001 	strb.w	ip, [r0, #1]
    65dc:	2203      	movs	r2, #3
    65de:	e7ea      	b.n	65b6 <DateTime::DateTime(unsigned long)+0xa2>
      ++daysPerMonth;
    if (days < daysPerMonth)
      break;
    days -= daysPerMonth;
  }
  d = days + 1;
    65e0:	3301      	adds	r3, #1
    65e2:	7083      	strb	r3, [r0, #2]
}
    65e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    leap = yOff % 4 == 0;
    if (days < 365U + leap)
      break;
    days -= 365 + leap;
  }
  for (m = 1; m < 12; ++m) {
    65e6:	4615      	mov	r5, r2
    65e8:	7041      	strb	r1, [r0, #1]
    65ea:	e7d6      	b.n	659a <DateTime::DateTime(unsigned long)+0x86>
    65ec:	c792bc80 	.word	0xc792bc80
    65f0:	88888889 	.word	0x88888889
    65f4:	91a2b3c5 	.word	0x91a2b3c5
    65f8:	aaaaaaab 	.word	0xaaaaaaab
    65fc:	c22e4507 	.word	0xc22e4507
    6600:	0001b83c 	.word	0x0001b83c

00006604 <DateTime::DateTime(unsigned short, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
    @param month Month number (1--12).
    @param day Day of the month (1--31).
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
    6604:	b470      	push	{r4, r5, r6}
                   uint8_t min, uint8_t sec) {
  if (year >= 2000)
    6606:	f5b1 6ffa 	cmp.w	r1, #2000	; 0x7d0
    year -= 2000;
    660a:	bf28      	it	cs
    660c:	f5a1 61fa 	subcs.w	r1, r1, #2000	; 0x7d0
    @param month Month number (1--12).
    @param day Day of the month (1--31).
    @param hour,min,sec Hour (0--23), minute (0--59) and second (0--59).
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
    6610:	f89d 600c 	ldrb.w	r6, [sp, #12]
    6614:	f89d 5010 	ldrb.w	r5, [sp, #16]
    6618:	f89d 4014 	ldrb.w	r4, [sp, #20]
  if (year >= 2000)
    year -= 2000;
  yOff = year;
  m = month;
  d = day;
  hh = hour;
    661c:	70c6      	strb	r6, [r0, #3]
*/
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000)
    year -= 2000;
    661e:	bf28      	it	cs
    6620:	b289      	uxthcs	r1, r1
  yOff = year;
  m = month;
  d = day;
  hh = hour;
  mm = min;
    6622:	7105      	strb	r5, [r0, #4]
  ss = sec;
    6624:	7144      	strb	r4, [r0, #5]
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000)
    year -= 2000;
  yOff = year;
    6626:	7001      	strb	r1, [r0, #0]
  m = month;
    6628:	7042      	strb	r2, [r0, #1]
  d = day;
    662a:	7083      	strb	r3, [r0, #2]
  hh = hour;
  mm = min;
  ss = sec;
}
    662c:	bc70      	pop	{r4, r5, r6}
    662e:	4770      	bx	lr

00006630 <DateTime::DateTime(DateTime const&)>:
    @brief  Copy constructor.
    @param copy DateTime to copy.
*/
/**************************************************************************/
DateTime::DateTime(const DateTime &copy)
    : yOff(copy.yOff), m(copy.m), d(copy.d), hh(copy.hh), mm(copy.mm),
    6630:	780a      	ldrb	r2, [r1, #0]
      ss(copy.ss) {}
    6632:	7002      	strb	r2, [r0, #0]
    @brief  Copy constructor.
    @param copy DateTime to copy.
*/
/**************************************************************************/
DateTime::DateTime(const DateTime &copy)
    : yOff(copy.yOff), m(copy.m), d(copy.d), hh(copy.hh), mm(copy.mm),
    6634:	784a      	ldrb	r2, [r1, #1]
      ss(copy.ss) {}
    6636:	7042      	strb	r2, [r0, #1]
    @brief  Copy constructor.
    @param copy DateTime to copy.
*/
/**************************************************************************/
DateTime::DateTime(const DateTime &copy)
    : yOff(copy.yOff), m(copy.m), d(copy.d), hh(copy.hh), mm(copy.mm),
    6638:	788a      	ldrb	r2, [r1, #2]
      ss(copy.ss) {}
    663a:	7082      	strb	r2, [r0, #2]
    @brief  Copy constructor.
    @param copy DateTime to copy.
*/
/**************************************************************************/
DateTime::DateTime(const DateTime &copy)
    : yOff(copy.yOff), m(copy.m), d(copy.d), hh(copy.hh), mm(copy.mm),
    663c:	78ca      	ldrb	r2, [r1, #3]
      ss(copy.ss) {}
    663e:	70c2      	strb	r2, [r0, #3]
    @brief  Copy constructor.
    @param copy DateTime to copy.
*/
/**************************************************************************/
DateTime::DateTime(const DateTime &copy)
    : yOff(copy.yOff), m(copy.m), d(copy.d), hh(copy.hh), mm(copy.mm),
    6640:	790a      	ldrb	r2, [r1, #4]
      ss(copy.ss) {}
    6642:	7102      	strb	r2, [r0, #4]
    6644:	794a      	ldrb	r2, [r1, #5]
    6646:	7142      	strb	r2, [r0, #5]
    6648:	4770      	bx	lr
    664a:	bf00      	nop

0000664c <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)>:

    @param date Date PROGMEM string, e.g. F("Apr 16 2020").
    @param time Time PROGMEM string, e.g. F("18:34:56").
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
    664c:	b4f0      	push	{r4, r5, r6, r7}
    664e:	460b      	mov	r3, r1
    6650:	b084      	sub	sp, #16
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
    6652:	6849      	ldr	r1, [r1, #4]
    6654:	891f      	ldrh	r7, [r3, #8]
    6656:	7a9e      	ldrb	r6, [r3, #10]

    @param date Date PROGMEM string, e.g. F("Apr 16 2020").
    @param time Time PROGMEM string, e.g. F("18:34:56").
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
    6658:	4604      	mov	r4, r0
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
    665a:	6818      	ldr	r0, [r3, #0]
    665c:	ad01      	add	r5, sp, #4
    665e:	c503      	stmia	r5!, {r0, r1}
    6660:	802f      	strh	r7, [r5, #0]
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    6662:	f89d 300d 	ldrb.w	r3, [sp, #13]
*/
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
    6666:	70ae      	strb	r6, [r5, #2]
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    6668:	3b30      	subs	r3, #48	; 0x30
    666a:	b2db      	uxtb	r3, r3
    666c:	2b09      	cmp	r3, #9
    666e:	bf98      	it	ls
    6670:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
  yOff = conv2d(buff + 9);
    6674:	f89d 100e 	ldrb.w	r1, [sp, #14]
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
    6678:	f89d 0004 	ldrb.w	r0, [sp, #4]
    667c:	bf98      	it	ls
    667e:	005b      	lslls	r3, r3, #1
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
  yOff = conv2d(buff + 9);
    6680:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    6684:	bf94      	ite	ls
    6686:	b2db      	uxtbls	r3, r3
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    6688:	2300      	movhi	r3, #0
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
  yOff = conv2d(buff + 9);
    668a:	440b      	add	r3, r1
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
    668c:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
/**************************************************************************/
DateTime::DateTime(const __FlashStringHelper *date,
                   const __FlashStringHelper *time) {
  char buff[11];
  memcpy_P(buff, date, 11);
  yOff = conv2d(buff + 9);
    6690:	7023      	strb	r3, [r4, #0]
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
    6692:	2912      	cmp	r1, #18
    6694:	d816      	bhi.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
    6696:	e8df f001 	tbb	[pc, r1]
    669a:	1566      	.short	0x1566
    669c:	71156e15 	.word	0x71156e15
    66a0:	0a151515 	.word	0x0a151515
    66a4:	7c741515 	.word	0x7c741515
    66a8:	1515157f 	.word	0x1515157f
    66ac:	63          	.byte	0x63
    66ad:	00          	.byte	0x00
  case 'J':
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
    66ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
    66b2:	2b61      	cmp	r3, #97	; 0x61
    66b4:	d073      	beq.n	679e <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x152>
    66b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    66ba:	2b6e      	cmp	r3, #110	; 0x6e
    66bc:	bf14      	ite	ne
    66be:	2307      	movne	r3, #7
    66c0:	2306      	moveq	r3, #6
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
    66c2:	7063      	strb	r3, [r4, #1]
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    66c4:	f89d 3008 	ldrb.w	r3, [sp, #8]
    break;
  case 'D':
    m = 12;
    break;
  }
  d = conv2d(buff + 4);
    66c8:	f89d 1009 	ldrb.w	r1, [sp, #9]
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    66cc:	3b30      	subs	r3, #48	; 0x30
    66ce:	b2db      	uxtb	r3, r3
    66d0:	2b09      	cmp	r3, #9
    66d2:	bf9d      	ittte	ls
    66d4:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
    66d8:	005b      	lslls	r3, r3, #1
    66da:	b2db      	uxtbls	r3, r3
    66dc:	2300      	movhi	r3, #0
    break;
  case 'D':
    m = 12;
    break;
  }
  d = conv2d(buff + 4);
    66de:	3930      	subs	r1, #48	; 0x30
    66e0:	440b      	add	r3, r1
    66e2:	70a3      	strb	r3, [r4, #2]
  memcpy_P(buff, time, 8);
    66e4:	6810      	ldr	r0, [r2, #0]
    66e6:	6851      	ldr	r1, [r2, #4]
    66e8:	ab01      	add	r3, sp, #4
    66ea:	c303      	stmia	r3!, {r0, r1}
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    66ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
    m = 12;
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
    66f0:	f89d 1005 	ldrb.w	r1, [sp, #5]
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    66f4:	3b30      	subs	r3, #48	; 0x30
    66f6:	b2db      	uxtb	r3, r3
    66f8:	2b09      	cmp	r3, #9
    66fa:	bf9c      	itt	ls
    66fc:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
    6700:	005a      	lslls	r2, r3, #1
    6702:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6706:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    670a:	b2db      	uxtb	r3, r3
    670c:	bf94      	ite	ls
    670e:	b2d2      	uxtbls	r2, r2
    6710:	2200      	movhi	r2, #0
    m = 12;
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
    6712:	3930      	subs	r1, #48	; 0x30
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    6714:	2b09      	cmp	r3, #9
    m = 12;
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
    6716:	440a      	add	r2, r1
    6718:	bf98      	it	ls
    671a:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
    671e:	70e2      	strb	r2, [r4, #3]
    6720:	bf98      	it	ls
    6722:	005a      	lslls	r2, r3, #1
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    6724:	f89d 300a 	ldrb.w	r3, [sp, #10]
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
  mm = conv2d(buff + 3);
    6728:	f89d 1008 	ldrb.w	r1, [sp, #8]
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    672c:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
    6730:	b2db      	uxtb	r3, r3
    6732:	bf94      	ite	ls
    6734:	b2d2      	uxtbls	r2, r2
    6736:	2200      	movhi	r2, #0
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
  mm = conv2d(buff + 3);
    6738:	3930      	subs	r1, #48	; 0x30
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    673a:	2b09      	cmp	r3, #9
    break;
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
  mm = conv2d(buff + 3);
    673c:	440a      	add	r2, r1
    673e:	bf98      	it	ls
    6740:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
    6744:	7122      	strb	r2, [r4, #4]
  ss = conv2d(buff + 6);
    6746:	f89d 200b 	ldrb.w	r2, [sp, #11]
    674a:	bf9a      	itte	ls
    674c:	005b      	lslls	r3, r3, #1
    674e:	b2db      	uxtbls	r3, r3
    @param p Pointer to a string containing two digits
*/
/**************************************************************************/
static uint8_t conv2d(const char *p) {
  uint8_t v = 0;
  if ('0' <= *p && *p <= '9')
    6750:	2300      	movhi	r3, #0
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
  mm = conv2d(buff + 3);
  ss = conv2d(buff + 6);
    6752:	3a30      	subs	r2, #48	; 0x30
    6754:	4413      	add	r3, r2
}
    6756:	4620      	mov	r0, r4
  }
  d = conv2d(buff + 4);
  memcpy_P(buff, time, 8);
  hh = conv2d(buff);
  mm = conv2d(buff + 3);
  ss = conv2d(buff + 6);
    6758:	7163      	strb	r3, [r4, #5]
}
    675a:	b004      	add	sp, #16
    675c:	bcf0      	pop	{r4, r5, r6, r7}
    675e:	4770      	bx	lr
    break;
  case 'M':
    m = buff[2] == 'r' ? 3 : 5;
    break;
  case 'S':
    m = 9;
    6760:	2309      	movs	r3, #9
    6762:	7063      	strb	r3, [r4, #1]
    break;
    6764:	e7ae      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
    break;
  case 'F':
    m = 2;
    break;
  case 'A':
    m = buff[2] == 'r' ? 4 : 8;
    6766:	f89d 3006 	ldrb.w	r3, [sp, #6]
    676a:	2b72      	cmp	r3, #114	; 0x72
    676c:	bf14      	ite	ne
    676e:	2308      	movne	r3, #8
    6770:	2304      	moveq	r3, #4
    6772:	7063      	strb	r3, [r4, #1]
    break;
    6774:	e7a6      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
    6776:	230c      	movs	r3, #12
    6778:	7063      	strb	r3, [r4, #1]
    677a:	e7a3      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
  switch (buff[0]) {
  case 'J':
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
    break;
  case 'F':
    m = 2;
    677c:	2302      	movs	r3, #2
    677e:	7063      	strb	r3, [r4, #1]
    break;
    6780:	e7a0      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
  case 'A':
    m = buff[2] == 'r' ? 4 : 8;
    break;
  case 'M':
    m = buff[2] == 'r' ? 3 : 5;
    6782:	f89d 3006 	ldrb.w	r3, [sp, #6]
    6786:	2b72      	cmp	r3, #114	; 0x72
    6788:	bf14      	ite	ne
    678a:	2305      	movne	r3, #5
    678c:	2303      	moveq	r3, #3
    678e:	7063      	strb	r3, [r4, #1]
    break;
    6790:	e798      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
    break;
  case 'O':
    m = 10;
    break;
  case 'N':
    m = 11;
    6792:	230b      	movs	r3, #11
    6794:	7063      	strb	r3, [r4, #1]
    break;
    6796:	e795      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
    break;
  case 'S':
    m = 9;
    break;
  case 'O':
    m = 10;
    6798:	230a      	movs	r3, #10
    679a:	7063      	strb	r3, [r4, #1]
    break;
    679c:	e792      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>
  memcpy_P(buff, date, 11);
  yOff = conv2d(buff + 9);
  // Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
  switch (buff[0]) {
  case 'J':
    m = (buff[1] == 'a') ? 1 : ((buff[2] == 'n') ? 6 : 7);
    679e:	2301      	movs	r3, #1
    break;
  case 'N':
    m = 11;
    break;
  case 'D':
    m = 12;
    67a0:	7063      	strb	r3, [r4, #1]
    67a2:	e78f      	b.n	66c4 <DateTime::DateTime(__FlashStringHelper const*, __FlashStringHelper const*)+0x78>

000067a4 <DateTime::dayOfTheWeek() const>:
/*!
    @brief  Return the day of the week.
    @return Day of week as an integer from 0 (Sunday) to 6 (Saturday).
*/
/**************************************************************************/
uint8_t DateTime::dayOfTheWeek() const {
    67a4:	b508      	push	{r3, lr}
  uint16_t day = date2days(yOff, m, d);
    67a6:	7882      	ldrb	r2, [r0, #2]
    67a8:	7841      	ldrb	r1, [r0, #1]
    67aa:	7800      	ldrb	r0, [r0, #0]
    67ac:	f7ff fe86 	bl	64bc <date2days(unsigned short, unsigned char, unsigned char)>
  return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
    67b0:	4a06      	ldr	r2, [pc, #24]	; (67cc <DateTime::dayOfTheWeek() const+0x28>)
    67b2:	3006      	adds	r0, #6
    67b4:	fb80 2302 	smull	r2, r3, r0, r2
    67b8:	18c2      	adds	r2, r0, r3
    67ba:	17c3      	asrs	r3, r0, #31
    67bc:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
    67c0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
    67c4:	1ac0      	subs	r0, r0, r3
}
    67c6:	b2c0      	uxtb	r0, r0
    67c8:	bd08      	pop	{r3, pc}
    67ca:	bf00      	nop
    67cc:	92492493 	.word	0x92492493

000067d0 <RTC_DS3231::begin()>:
/*!
    @brief  Start I2C for the DS3231 and test succesful connection
    @return True if Wire can find DS3231 or false otherwise.
*/
/**************************************************************************/
boolean RTC_DS3231::begin(void) {
    67d0:	b510      	push	{r4, lr}
  Wire.begin();
    67d2:	4c0a      	ldr	r4, [pc, #40]	; (67fc <RTC_DS3231::begin()+0x2c>)
    67d4:	4620      	mov	r0, r4
    67d6:	f7ff fb3d 	bl	5e54 <TwoWire::begin()>
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
		transmitting = 1;
    67da:	2301      	movs	r3, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    67dc:	22d0      	movs	r2, #208	; 0xd0
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    67de:	4620      	mov	r0, r4
    67e0:	4619      	mov	r1, r3
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    67e2:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
		transmitting = 1;
    67e6:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
		txBufferLength = 1;
    67ea:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    67ee:	f7ff fcc1 	bl	6174 <TwoWire::endTransmission(unsigned char)>
  Wire.beginTransmission(DS3231_ADDRESS);
  if (Wire.endTransmission() == 0)
    return true;
  return false;
}
    67f2:	fab0 f080 	clz	r0, r0
    67f6:	0940      	lsrs	r0, r0, #5
    67f8:	bd10      	pop	{r4, pc}
    67fa:	bf00      	nop
    67fc:	1fff88cc 	.word	0x1fff88cc

00006800 <RTC_DS3231::now()>:
/*!
    @brief  Get the current date/time
    @return DateTime object with the current date/time
*/
/**************************************************************************/
DateTime RTC_DS3231::now() {
    6800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    6802:	4d50      	ldr	r5, [pc, #320]	; (6944 <RTC_DS3231::now()+0x144>)
    6804:	23d0      	movs	r3, #208	; 0xd0
		transmitting = 1;
    6806:	2601      	movs	r6, #1
  Wire.beginTransmission(DS3231_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    6808:	2100      	movs	r1, #0
/*!
    @brief  Get the current date/time
    @return DateTime object with the current date/time
*/
/**************************************************************************/
DateTime RTC_DS3231::now() {
    680a:	4604      	mov	r4, r0
  Wire.beginTransmission(DS3231_ADDRESS);
  Wire._I2C_WRITE((byte)0);
    680c:	4628      	mov	r0, r5
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    680e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    6812:	f885 605e 	strb.w	r6, [r5, #94]	; 0x5e
		txBufferLength = 1;
    6816:	f885 605d 	strb.w	r6, [r5, #93]	; 0x5d
    681a:	f7ff fb07 	bl	5e2c <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    681e:	4631      	mov	r1, r6
    6820:	4628      	mov	r0, r5
    6822:	f7ff fca7 	bl	6174 <TwoWire::endTransmission(unsigned char)>
	uint8_t requestFrom(int address, int quantity, int sendStop) {
		return requestFrom((uint8_t)address, (uint8_t)quantity,
			(uint8_t)(sendStop ? 1 : 0));
	}
	uint8_t requestFrom(int address, int quantity) {
		return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)1);
    6826:	2207      	movs	r2, #7
    6828:	4633      	mov	r3, r6
    682a:	4628      	mov	r0, r5
    682c:	2168      	movs	r1, #104	; 0x68
    682e:	f7ff fd2b 	bl	6288 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6832:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    6836:	f895 7039 	ldrb.w	r7, [r5, #57]	; 0x39
    683a:	42ba      	cmp	r2, r7
    683c:	d26c      	bcs.n	6918 <RTC_DS3231::now()+0x118>
		return rxBuffer[rxBufferIndex++];
    683e:	18a9      	adds	r1, r5, r2
    6840:	1993      	adds	r3, r2, r6
  Wire.endTransmission();

  Wire.requestFrom(DS3231_ADDRESS, 7);
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
    6842:	7e08      	ldrb	r0, [r1, #24]
    6844:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    6848:	1101      	asrs	r1, r0, #4
    684a:	b2db      	uxtb	r3, r3
    684c:	eba1 0181 	sub.w	r1, r1, r1, lsl #2
    6850:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6854:	429f      	cmp	r7, r3
    6856:	b2c9      	uxtb	r1, r1
		return rxBuffer[rxBufferIndex++];
    6858:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    685c:	d963      	bls.n	6926 <RTC_DS3231::now()+0x126>
		return rxBuffer[rxBufferIndex++];
    685e:	18e8      	adds	r0, r5, r3
    6860:	1c93      	adds	r3, r2, #2
    6862:	7e06      	ldrb	r6, [r0, #24]
    6864:	1130      	asrs	r0, r6, #4
    6866:	b2db      	uxtb	r3, r3
    6868:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
    686c:	eb06 0040 	add.w	r0, r6, r0, lsl #1
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6870:	42bb      	cmp	r3, r7
    6872:	b2c0      	uxtb	r0, r0
		return rxBuffer[rxBufferIndex++];
    6874:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6878:	d25f      	bcs.n	693a <RTC_DS3231::now()+0x13a>
		return rxBuffer[rxBufferIndex++];
    687a:	18ee      	adds	r6, r5, r3
    687c:	1cd3      	adds	r3, r2, #3
    687e:	f896 e018 	ldrb.w	lr, [r6, #24]
    6882:	ea4f 162e 	mov.w	r6, lr, asr #4
    6886:	b2db      	uxtb	r3, r3
    6888:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
    688c:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6890:	42bb      	cmp	r3, r7
    6892:	b2f6      	uxtb	r6, r6
		return rxBuffer[rxBufferIndex++];
    6894:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6898:	d241      	bcs.n	691e <RTC_DS3231::now()+0x11e>
		return rxBuffer[rxBufferIndex++];
    689a:	f102 0e04 	add.w	lr, r2, #4
    689e:	fa5f fe8e 	uxtb.w	lr, lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    68a2:	45be      	cmp	lr, r7
		return rxBuffer[rxBufferIndex++];
    68a4:	f885 e038 	strb.w	lr, [r5, #56]	; 0x38
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    68a8:	d239      	bcs.n	691e <RTC_DS3231::now()+0x11e>
		return rxBuffer[rxBufferIndex++];
    68aa:	44ae      	add	lr, r5
    68ac:	1d53      	adds	r3, r2, #5
    68ae:	b2db      	uxtb	r3, r3
    68b0:	f89e 2018 	ldrb.w	r2, [lr, #24]
    68b4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    68b8:	f3c2 1e03 	ubfx	lr, r2, #4, #4
    68bc:	ebae 0e8e 	sub.w	lr, lr, lr, lsl #2
    68c0:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    68c4:	42bb      	cmp	r3, r7
    68c6:	fa5f fe8e 	uxtb.w	lr, lr
    68ca:	d233      	bcs.n	6934 <RTC_DS3231::now()+0x134>
		return rxBuffer[rxBufferIndex++];
    68cc:	18ea      	adds	r2, r5, r3
    68ce:	3301      	adds	r3, #1
    68d0:	7e12      	ldrb	r2, [r2, #24]
    68d2:	ea4f 1c22 	mov.w	ip, r2, asr #4
    68d6:	ebac 0c8c 	sub.w	ip, ip, ip, lsl #2
    68da:	b2db      	uxtb	r3, r3
    68dc:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
    68e0:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    68e4:	fa5f fc8c 	uxtb.w	ip, ip
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    68e8:	429f      	cmp	r7, r3
    68ea:	d921      	bls.n	6930 <RTC_DS3231::now()+0x130>
		return rxBuffer[rxBufferIndex++];
    68ec:	18ea      	adds	r2, r5, r3
    68ee:	3301      	adds	r3, #1
    68f0:	7e12      	ldrb	r2, [r2, #24]
    68f2:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    68f6:	1113      	asrs	r3, r2, #4
    68f8:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
    68fc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    6900:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    year -= 2000;
  yOff = year;
  m = month;
  d = day;
  hh = hour;
  mm = min;
    6904:	7120      	strb	r0, [r4, #4]
/**************************************************************************/
DateTime::DateTime(uint16_t year, uint8_t month, uint8_t day, uint8_t hour,
                   uint8_t min, uint8_t sec) {
  if (year >= 2000)
    year -= 2000;
  yOff = year;
    6906:	7023      	strb	r3, [r4, #0]
  m = month;
    6908:	f884 c001 	strb.w	ip, [r4, #1]
  d = day;
    690c:	f884 e002 	strb.w	lr, [r4, #2]
  hh = hour;
    6910:	70e6      	strb	r6, [r4, #3]
  mm = min;
  ss = sec;
    6912:	7161      	strb	r1, [r4, #5]
  uint8_t d = bcd2bin(Wire._I2C_READ());
  uint8_t m = bcd2bin(Wire._I2C_READ());
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;

  return DateTime(y, m, d, hh, mm, ss);
}
    6914:	4620      	mov	r0, r4
    6916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    6918:	20a5      	movs	r0, #165	; 0xa5
   values as BCD.
    @param val BCD value
    @return Binary value
*/
/**************************************************************************/
static uint8_t bcd2bin(uint8_t val) { return val - 6 * (val >> 4); }
    691a:	4606      	mov	r6, r0
    691c:	2155      	movs	r1, #85	; 0x55
    691e:	23a5      	movs	r3, #165	; 0xa5
    6920:	469e      	mov	lr, r3
    6922:	469c      	mov	ip, r3
    6924:	e7ee      	b.n	6904 <RTC_DS3231::now()+0x104>
    6926:	20a5      	movs	r0, #165	; 0xa5
    6928:	4606      	mov	r6, r0
    692a:	f04f 32ff 	mov.w	r2, #4294967295
    692e:	e7c3      	b.n	68b8 <RTC_DS3231::now()+0xb8>
    6930:	23a5      	movs	r3, #165	; 0xa5
    6932:	e7e7      	b.n	6904 <RTC_DS3231::now()+0x104>
    6934:	23a5      	movs	r3, #165	; 0xa5
    6936:	469c      	mov	ip, r3
    6938:	e7e4      	b.n	6904 <RTC_DS3231::now()+0x104>
    693a:	f04f 0ca5 	mov.w	ip, #165	; 0xa5
    693e:	4666      	mov	r6, ip
    6940:	46e6      	mov	lr, ip
    6942:	e7d1      	b.n	68e8 <RTC_DS3231::now()+0xe8>
    6944:	1fff88cc 	.word	0x1fff88cc

00006948 <write_i2c_register(unsigned char, unsigned char, unsigned char) [clone .constprop.6]>:
    @param addr I2C address
    @param reg Register address
    @param val Value to write
*/
/**************************************************************************/
static void write_i2c_register(uint8_t addr, uint8_t reg, uint8_t val) {
    6948:	b570      	push	{r4, r5, r6, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    694a:	4c0c      	ldr	r4, [pc, #48]	; (697c <write_i2c_register(unsigned char, unsigned char, unsigned char) [clone .constprop.6]+0x34>)
		transmitting = 1;
    694c:	2501      	movs	r5, #1
    694e:	460e      	mov	r6, r1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    6950:	23d0      	movs	r3, #208	; 0xd0
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
    6952:	4601      	mov	r1, r0
    6954:	4620      	mov	r0, r4
    6956:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    695a:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    695e:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    6962:	f7ff fa63 	bl	5e2c <TwoWire::write(unsigned char)>
  Wire._I2C_WRITE((byte)val);
    6966:	4631      	mov	r1, r6
    6968:	4620      	mov	r0, r4
    696a:	f7ff fa5f 	bl	5e2c <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    696e:	4629      	mov	r1, r5
    6970:	4620      	mov	r0, r4
  Wire.endTransmission();
}
    6972:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6976:	f7ff bbfd 	b.w	6174 <TwoWire::endTransmission(unsigned char)>
    697a:	bf00      	nop
    697c:	1fff88cc 	.word	0x1fff88cc

00006980 <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]>:
    @param addr I2C address
    @param reg Register address
    @return Register value
*/
/**************************************************************************/
static uint8_t read_i2c_register(uint8_t addr, uint8_t reg) {
    6980:	b538      	push	{r3, r4, r5, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    6982:	4c12      	ldr	r4, [pc, #72]	; (69cc <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]+0x4c>)
		transmitting = 1;
    6984:	2501      	movs	r5, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    6986:	23d0      	movs	r3, #208	; 0xd0
  Wire.beginTransmission(addr);
  Wire._I2C_WRITE((byte)reg);
    6988:	4601      	mov	r1, r0
    698a:	4620      	mov	r0, r4
    698c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		transmitting = 1;
    6990:	f884 505e 	strb.w	r5, [r4, #94]	; 0x5e
		txBufferLength = 1;
    6994:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
    6998:	f7ff fa48 	bl	5e2c <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    699c:	4629      	mov	r1, r5
    699e:	4620      	mov	r0, r4
    69a0:	f7ff fbe8 	bl	6174 <TwoWire::endTransmission(unsigned char)>
	}
	uint8_t requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop);
	uint8_t requestFrom(uint8_t address, uint8_t quantity) {
		return requestFrom(address, quantity, (uint8_t)1);
    69a4:	462b      	mov	r3, r5
    69a6:	462a      	mov	r2, r5
    69a8:	4620      	mov	r0, r4
    69aa:	2168      	movs	r1, #104	; 0x68
    69ac:	f7ff fc6c 	bl	6288 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    69b0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    69b4:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
    69b8:	429a      	cmp	r2, r3
    69ba:	d905      	bls.n	69c8 <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]+0x48>
		return rxBuffer[rxBufferIndex++];
    69bc:	18e2      	adds	r2, r4, r3
    69be:	442b      	add	r3, r5
    69c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    69c4:	7e10      	ldrb	r0, [r2, #24]
    69c6:	bd38      	pop	{r3, r4, r5, pc}
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    69c8:	20ff      	movs	r0, #255	; 0xff
  Wire.endTransmission();

  Wire.requestFrom(addr, (byte)1);
  return Wire._I2C_READ();
}
    69ca:	bd38      	pop	{r3, r4, r5, pc}
    69cc:	1fff88cc 	.word	0x1fff88cc

000069d0 <RTC_DS3231::adjust(DateTime const&)>:
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
    69d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    69d2:	4d34      	ldr	r5, [pc, #208]	; (6aa4 <RTC_DS3231::adjust(DateTime const&)+0xd4>)
  Wire.beginTransmission(DS3231_ADDRESS);
  Wire._I2C_WRITE((byte)DS3231_TIME); // start at location 0
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    69d4:	4c34      	ldr	r4, [pc, #208]	; (6aa8 <RTC_DS3231::adjust(DateTime const&)+0xd8>)
/*!
    @brief  Set the date and flip the Oscillator Stop Flag
    @param dt DateTime object containing the date/time to set
*/
/**************************************************************************/
void RTC_DS3231::adjust(const DateTime &dt) {
    69d6:	4606      	mov	r6, r0
		transmitting = 1;
    69d8:	2701      	movs	r7, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin);
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    69da:	23d0      	movs	r3, #208	; 0xd0
  Wire.beginTransmission(DS3231_ADDRESS);
  Wire._I2C_WRITE((byte)DS3231_TIME); // start at location 0
    69dc:	4628      	mov	r0, r5
    69de:	2100      	movs	r1, #0
    69e0:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
		transmitting = 1;
    69e4:	f885 705e 	strb.w	r7, [r5, #94]	; 0x5e
		txBufferLength = 1;
    69e8:	f885 705d 	strb.w	r7, [r5, #93]	; 0x5d
    69ec:	f7ff fa1e 	bl	5e2c <TwoWire::write(unsigned char)>
    69f0:	7971      	ldrb	r1, [r6, #5]
  Wire._I2C_WRITE(bin2bcd(dt.second()));
    69f2:	fba4 2301 	umull	r2, r3, r4, r1
    69f6:	08db      	lsrs	r3, r3, #3
    69f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    69fc:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    6a00:	b2c9      	uxtb	r1, r1
    6a02:	4628      	mov	r0, r5
    6a04:	f7ff fa12 	bl	5e2c <TwoWire::write(unsigned char)>
    6a08:	7931      	ldrb	r1, [r6, #4]
  Wire._I2C_WRITE(bin2bcd(dt.minute()));
    6a0a:	fba4 2301 	umull	r2, r3, r4, r1
    6a0e:	08db      	lsrs	r3, r3, #3
    6a10:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6a14:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    6a18:	b2c9      	uxtb	r1, r1
    6a1a:	4628      	mov	r0, r5
    6a1c:	f7ff fa06 	bl	5e2c <TwoWire::write(unsigned char)>
    6a20:	78f1      	ldrb	r1, [r6, #3]
  Wire._I2C_WRITE(bin2bcd(dt.hour()));
    6a22:	fba4 2301 	umull	r2, r3, r4, r1
    6a26:	08db      	lsrs	r3, r3, #3
    6a28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6a2c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    6a30:	b2c9      	uxtb	r1, r1
    6a32:	4628      	mov	r0, r5
    6a34:	f7ff f9fa 	bl	5e2c <TwoWire::write(unsigned char)>
  Wire._I2C_WRITE(bin2bcd(0));
    6a38:	4628      	mov	r0, r5
    6a3a:	2100      	movs	r1, #0
    6a3c:	f7ff f9f6 	bl	5e2c <TwoWire::write(unsigned char)>
    6a40:	78b1      	ldrb	r1, [r6, #2]
  Wire._I2C_WRITE(bin2bcd(dt.day()));
    6a42:	fba4 2301 	umull	r2, r3, r4, r1
    6a46:	08db      	lsrs	r3, r3, #3
    6a48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6a4c:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    6a50:	b2c9      	uxtb	r1, r1
    6a52:	4628      	mov	r0, r5
    6a54:	f7ff f9ea 	bl	5e2c <TwoWire::write(unsigned char)>
    6a58:	7871      	ldrb	r1, [r6, #1]
  Wire._I2C_WRITE(bin2bcd(dt.month()));
    6a5a:	fba4 2301 	umull	r2, r3, r4, r1
    6a5e:	08db      	lsrs	r3, r3, #3
    6a60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    6a64:	eb01 0143 	add.w	r1, r1, r3, lsl #1
    6a68:	b2c9      	uxtb	r1, r1
    6a6a:	4628      	mov	r0, r5
    6a6c:	f7ff f9de 	bl	5e2c <TwoWire::write(unsigned char)>
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
    6a70:	7831      	ldrb	r1, [r6, #0]
    6a72:	fba4 3401 	umull	r3, r4, r4, r1
    6a76:	08e4      	lsrs	r4, r4, #3
    6a78:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    6a7c:	eb01 0144 	add.w	r1, r1, r4, lsl #1
    6a80:	b2c9      	uxtb	r1, r1
    6a82:	4628      	mov	r0, r5
    6a84:	f7ff f9d2 	bl	5e2c <TwoWire::write(unsigned char)>
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    6a88:	4639      	mov	r1, r7
    6a8a:	4628      	mov	r0, r5
    6a8c:	f7ff fb72 	bl	6174 <TwoWire::endTransmission(unsigned char)>
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    6a90:	200f      	movs	r0, #15
    6a92:	f7ff ff75 	bl	6980 <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]>
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
}
    6a96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire._I2C_WRITE(bin2bcd(dt.year() - 2000));
  Wire.endTransmission();

  uint8_t statreg = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
  statreg &= ~0x80; // flip OSF bit
  write_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG, statreg);
    6a9a:	f000 017f 	and.w	r1, r0, #127	; 0x7f
    6a9e:	200f      	movs	r0, #15
    6aa0:	f7ff bf52 	b.w	6948 <write_i2c_register(unsigned char, unsigned char, unsigned char) [clone .constprop.6]>
    6aa4:	1fff88cc 	.word	0x1fff88cc
    6aa8:	cccccccd 	.word	0xcccccccd

00006aac <RTC_DS3231::lostPower()>:
    @return True if the bit is set (oscillator stopped) or false if it is
   running
*/
/**************************************************************************/
bool RTC_DS3231::lostPower(void) 
{
    6aac:	b508      	push	{r3, lr}
//DEBUG!!
  byte regval = read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG);
    6aae:	200f      	movs	r0, #15
    6ab0:	f7ff ff66 	bl	6980 <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]>
  //Serial.print("DS3231_STATUSREG = "); Serial.println(regval, HEX);
  regval = read_i2c_register(DS3231_ADDRESS, DS3231_CONTROL);
    6ab4:	200e      	movs	r0, #14
    6ab6:	f7ff ff63 	bl	6980 <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]>
  //Serial.print("DS3231_CONTROL = "); Serial.println(regval, HEX);
//DEBUG!!

  return (read_i2c_register(DS3231_ADDRESS, DS3231_STATUSREG) >> 7);
    6aba:	200f      	movs	r0, #15
    6abc:	f7ff ff60 	bl	6980 <read_i2c_register(unsigned char, unsigned char) [clone .constprop.7]>
}
    6ac0:	f3c0 10c0 	ubfx	r0, r0, #7, #1
    6ac4:	bd08      	pop	{r3, pc}
    6ac6:	bf00      	nop

00006ac8 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    6ac8:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    6aca:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    6ace:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    6ad2:	d16d      	bne.n	6bb0 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6ad4:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    6ad6:	d341      	bcc.n	6b5c <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6ad8:	f851 3b04 	ldr.w	r3, [r1], #4
    6adc:	f840 3b04 	str.w	r3, [r0], #4
    6ae0:	f851 3b04 	ldr.w	r3, [r1], #4
    6ae4:	f840 3b04 	str.w	r3, [r0], #4
    6ae8:	f851 3b04 	ldr.w	r3, [r1], #4
    6aec:	f840 3b04 	str.w	r3, [r0], #4
    6af0:	f851 3b04 	ldr.w	r3, [r1], #4
    6af4:	f840 3b04 	str.w	r3, [r0], #4
    6af8:	f851 3b04 	ldr.w	r3, [r1], #4
    6afc:	f840 3b04 	str.w	r3, [r0], #4
    6b00:	f851 3b04 	ldr.w	r3, [r1], #4
    6b04:	f840 3b04 	str.w	r3, [r0], #4
    6b08:	f851 3b04 	ldr.w	r3, [r1], #4
    6b0c:	f840 3b04 	str.w	r3, [r0], #4
    6b10:	f851 3b04 	ldr.w	r3, [r1], #4
    6b14:	f840 3b04 	str.w	r3, [r0], #4
    6b18:	f851 3b04 	ldr.w	r3, [r1], #4
    6b1c:	f840 3b04 	str.w	r3, [r0], #4
    6b20:	f851 3b04 	ldr.w	r3, [r1], #4
    6b24:	f840 3b04 	str.w	r3, [r0], #4
    6b28:	f851 3b04 	ldr.w	r3, [r1], #4
    6b2c:	f840 3b04 	str.w	r3, [r0], #4
    6b30:	f851 3b04 	ldr.w	r3, [r1], #4
    6b34:	f840 3b04 	str.w	r3, [r0], #4
    6b38:	f851 3b04 	ldr.w	r3, [r1], #4
    6b3c:	f840 3b04 	str.w	r3, [r0], #4
    6b40:	f851 3b04 	ldr.w	r3, [r1], #4
    6b44:	f840 3b04 	str.w	r3, [r0], #4
    6b48:	f851 3b04 	ldr.w	r3, [r1], #4
    6b4c:	f840 3b04 	str.w	r3, [r0], #4
    6b50:	f851 3b04 	ldr.w	r3, [r1], #4
    6b54:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    6b58:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    6b5a:	d2bd      	bcs.n	6ad8 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    6b5c:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    6b5e:	d311      	bcc.n	6b84 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    6b60:	f851 3b04 	ldr.w	r3, [r1], #4
    6b64:	f840 3b04 	str.w	r3, [r0], #4
    6b68:	f851 3b04 	ldr.w	r3, [r1], #4
    6b6c:	f840 3b04 	str.w	r3, [r0], #4
    6b70:	f851 3b04 	ldr.w	r3, [r1], #4
    6b74:	f840 3b04 	str.w	r3, [r0], #4
    6b78:	f851 3b04 	ldr.w	r3, [r1], #4
    6b7c:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    6b80:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    6b82:	d2ed      	bcs.n	6b60 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    6b84:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    6b86:	d305      	bcc.n	6b94 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    6b88:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    6b8c:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    6b90:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    6b92:	d2f9      	bcs.n	6b88 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    6b94:	3204      	adds	r2, #4
	beq	.Ldone
    6b96:	d008      	beq.n	6baa <memcpy+0xe2>

	lsls	r2, r2, #31
    6b98:	07d2      	lsls	r2, r2, #31
	itt ne
    6b9a:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    6b9c:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6ba0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    6ba4:	d301      	bcc.n	6baa <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    6ba6:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    6ba8:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    6baa:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    6bac:	4770      	bx	lr
    6bae:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    6bb0:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    6bb2:	d313      	bcc.n	6bdc <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    6bb4:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    6bb6:	d08d      	beq.n	6ad4 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    6bb8:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    6bbc:	d08a      	beq.n	6ad4 <memcpy+0xc>

	rsb	r3, #4
    6bbe:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    6bc2:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    6bc4:	07db      	lsls	r3, r3, #31
	itt ne
    6bc6:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    6bc8:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    6bcc:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    6bd0:	d380      	bcc.n	6ad4 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    6bd2:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    6bd6:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    6bda:	e77b      	b.n	6ad4 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    6bdc:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    6bde:	d3d9      	bcc.n	6b94 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    6be0:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    6be2:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    6be6:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    6bea:	d2f9      	bcs.n	6be0 <memcpy+0x118>

	ldrb	r3, [r1]
    6bec:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    6bee:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    6bf0:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    6bf2:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    6bf4:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    6bf6:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    6bf8:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    6bfa:	4770      	bx	lr

00006bfc <fault_isr>:
void _init_Teensyduino_internal_(void) __attribute__((noinline));
void __libc_init_array(void);


void fault_isr(void)
{
    6bfc:	b508      	push	{r3, lr}
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    6bfe:	4c10      	ldr	r4, [pc, #64]	; (6c40 <fault_isr+0x44>)
    6c00:	e008      	b.n	6c14 <fault_isr+0x18>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    6c02:	6823      	ldr	r3, [r4, #0]
    6c04:	0559      	lsls	r1, r3, #21
    6c06:	d40d      	bmi.n	6c24 <fault_isr+0x28>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    6c08:	6823      	ldr	r3, [r4, #0]
    6c0a:	051a      	lsls	r2, r3, #20
    6c0c:	d40f      	bmi.n	6c2e <fault_isr+0x32>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    6c0e:	6823      	ldr	r3, [r4, #0]
    6c10:	04db      	lsls	r3, r3, #19
    6c12:	d411      	bmi.n	6c38 <fault_isr+0x3c>
        asm("ldr %0, [sp, #0]" : "=r" (addr) ::);
#endif
	while (1) {
		// keep polling some communication while in fault
		// mode, so we don't completely die.
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    6c14:	6823      	ldr	r3, [r4, #0]
    6c16:	0358      	lsls	r0, r3, #13
    6c18:	d5f3      	bpl.n	6c02 <fault_isr+0x6>
    6c1a:	f000 fb31 	bl	7280 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    6c1e:	6823      	ldr	r3, [r4, #0]
    6c20:	0559      	lsls	r1, r3, #21
    6c22:	d5f1      	bpl.n	6c08 <fault_isr+0xc>
    6c24:	f000 f80e 	bl	6c44 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    6c28:	6823      	ldr	r3, [r4, #0]
    6c2a:	051a      	lsls	r2, r3, #20
    6c2c:	d5ef      	bpl.n	6c0e <fault_isr+0x12>
    6c2e:	f000 f809 	bl	6c44 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    6c32:	6823      	ldr	r3, [r4, #0]
    6c34:	04db      	lsls	r3, r3, #19
    6c36:	d5ed      	bpl.n	6c14 <fault_isr+0x18>
    6c38:	f000 f804 	bl	6c44 <unused_isr>
    6c3c:	e7ea      	b.n	6c14 <fault_isr+0x18>
    6c3e:	bf00      	nop
    6c40:	40048034 	.word	0x40048034

00006c44 <unused_isr>:
	}
}

void unused_isr(void)
{
    6c44:	b508      	push	{r3, lr}
	fault_isr();
    6c46:	f7ff ffd9 	bl	6bfc <fault_isr>
    6c4a:	bf00      	nop

00006c4c <startup_early_hook>:
extern void rtc_set(unsigned long t);


static void startup_default_early_hook(void) {
#if defined(KINETISK)
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    6c4c:	4b01      	ldr	r3, [pc, #4]	; (6c54 <startup_early_hook+0x8>)
    6c4e:	2210      	movs	r2, #16
    6c50:	801a      	strh	r2, [r3, #0]
    6c52:	4770      	bx	lr
    6c54:	40052000 	.word	0x40052000

00006c58 <startup_late_hook>:
#elif defined(KINETISL)
	SIM_COPC = 0;  // disable the watchdog
#endif
}
static void startup_default_late_hook(void) {}
    6c58:	4770      	bx	lr
    6c5a:	bf00      	nop

00006c5c <_sbrk>:

void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    6c5c:	4909      	ldr	r1, [pc, #36]	; (6c84 <_sbrk+0x28>)

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"

void * _sbrk(int incr)
{
    6c5e:	b508      	push	{r3, lr}
	char *prev, *stack;

	prev = __brkval;
    6c60:	680b      	ldr	r3, [r1, #0]
	if (incr != 0) {
    6c62:	b130      	cbz	r0, 6c72 <_sbrk+0x16>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    6c64:	466a      	mov	r2, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    6c66:	4418      	add	r0, r3
    6c68:	f5a2 5280 	sub.w	r2, r2, #4096	; 0x1000
    6c6c:	4290      	cmp	r0, r2
    6c6e:	d202      	bcs.n	6c76 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    6c70:	6008      	str	r0, [r1, #0]
	}
	return prev;
    6c72:	4618      	mov	r0, r3
}
    6c74:	bd08      	pop	{r3, pc}

	prev = __brkval;
	if (incr != 0) {
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
		if (prev + incr >= stack - STACK_MARGIN) {
			errno = ENOMEM;
    6c76:	f002 fcb7 	bl	95e8 <__errno>
    6c7a:	230c      	movs	r3, #12
    6c7c:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    6c7e:	f04f 30ff 	mov.w	r0, #4294967295
    6c82:	bd08      	pop	{r3, pc}
    6c84:	1fff89a4 	.word	0x1fff89a4

00006c88 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    6c88:	b4f0      	push	{r4, r5, r6, r7}
    6c8a:	1e4d      	subs	r5, r1, #1
    6c8c:	462e      	mov	r6, r5
	unsigned digit;
	int i=0, j;
    6c8e:	2400      	movs	r4, #0
    6c90:	e000      	b.n	6c94 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    6c92:	3401      	adds	r4, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    6c94:	fbb0 f3f2 	udiv	r3, r0, r2
    6c98:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    6c9c:	2809      	cmp	r0, #9
    6c9e:	f100 0730 	add.w	r7, r0, #48	; 0x30
    6ca2:	bf8a      	itet	hi
    6ca4:	3037      	addhi	r0, #55	; 0x37
    6ca6:	b2f8      	uxtbls	r0, r7
    6ca8:	b2c0      	uxtbhi	r0, r0
    6caa:	f806 0f01 	strb.w	r0, [r6, #1]!
		val /= radix;
		if (val == 0) break;
    6cae:	4618      	mov	r0, r3
    6cb0:	2b00      	cmp	r3, #0
    6cb2:	d1ee      	bne.n	6c92 <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    6cb4:	190a      	adds	r2, r1, r4
    6cb6:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    6cb8:	b14c      	cbz	r4, 6cce <ultoa+0x46>
		t = buf[j];
		buf[j] = buf[i];
    6cba:	7810      	ldrb	r0, [r2, #0]
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
		t = buf[j];
    6cbc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
		buf[j] = buf[i];
    6cc0:	7028      	strb	r0, [r5, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6cc2:	3301      	adds	r3, #1
    6cc4:	1ae0      	subs	r0, r4, r3
    6cc6:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    6cc8:	f802 6901 	strb.w	r6, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    6ccc:	dbf5      	blt.n	6cba <ultoa+0x32>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    6cce:	4608      	mov	r0, r1
    6cd0:	bcf0      	pop	{r4, r5, r6, r7}
    6cd2:	4770      	bx	lr

00006cd4 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    6cd4:	4770      	bx	lr
    6cd6:	bf00      	nop

00006cd8 <digitalWrite.part.1>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    6cd8:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    6cda:	4b0f      	ldr	r3, [pc, #60]	; (6d18 <digitalWrite.part.1+0x40>)
    6cdc:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    6ce0:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    6ce4:	b12c      	cbz	r4, 6cf2 <digitalWrite.part.1+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    6ce6:	2301      	movs	r3, #1
void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
    6ce8:	b169      	cbz	r1, 6d06 <digitalWrite.part.1+0x2e>
			*portSetRegister(pin) = 1;
    6cea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    6cee:	bc10      	pop	{r4}
    6cf0:	4770      	bx	lr
		} else {
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
    6cf2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6cf6:	685b      	ldr	r3, [r3, #4]
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    6cf8:	681a      	ldr	r2, [r3, #0]
			*portClearRegister(pin) = digitalPinToBitMask(pin);
		}
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
    6cfa:	b941      	cbnz	r1, 6d0e <digitalWrite.part.1+0x36>
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
			//*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else {
			// TODO use bitband for atomic read-mod-write
			*config &= ~(PORT_PCR_PE);
    6cfc:	f022 0202 	bic.w	r2, r2, #2
    6d00:	601a      	str	r2, [r3, #0]
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    6d02:	bc10      	pop	{r4}
    6d04:	4770      	bx	lr
#ifdef KINETISK
	if (*portModeRegister(pin)) {
		if (val) {
			*portSetRegister(pin) = 1;
		} else {
			*portClearRegister(pin) = 1;
    6d06:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    6d0a:	bc10      	pop	{r4}
    6d0c:	4770      	bx	lr
#endif
	} else {
		volatile uint32_t *config = portConfigRegister(pin);
		if (val) {
			// TODO use bitband for atomic read-mod-write
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    6d0e:	f042 0203 	orr.w	r2, r2, #3
    6d12:	601a      	str	r2, [r3, #0]
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    6d14:	bc10      	pop	{r4}
    6d16:	4770      	bx	lr
    6d18:	0001b848 	.word	0x0001b848

00006d1c <pinMode.part.2>:
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6d1c:	4a1c      	ldr	r2, [pc, #112]	; (6d90 <pinMode.part.2+0x74>)
    6d1e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6d22:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);
    6d24:	685b      	ldr	r3, [r3, #4]

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    6d26:	d011      	beq.n	6d4c <pinMode.part.2+0x30>
    6d28:	2904      	cmp	r1, #4
    6d2a:	d01b      	beq.n	6d64 <pinMode.part.2+0x48>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    6d2c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    6d30:	2200      	movs	r2, #0
    6d32:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
    6d36:	b129      	cbz	r1, 6d44 <pinMode.part.2+0x28>
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
    6d38:	2902      	cmp	r1, #2
    6d3a:	d020      	beq.n	6d7e <pinMode.part.2+0x62>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    6d3c:	2903      	cmp	r1, #3
    6d3e:	d022      	beq.n	6d86 <pinMode.part.2+0x6a>
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    6d40:	601a      	str	r2, [r3, #0]
    6d42:	4770      	bx	lr
		*portModeRegister(pin) = 0;
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    6d44:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d48:	601a      	str	r2, [r3, #0]
    6d4a:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6d4c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d50:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6d54:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d58:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
		} else {
		    *config &= ~PORT_PCR_ODE;
    6d5a:	681a      	ldr	r2, [r3, #0]
    6d5c:	f022 0220 	bic.w	r2, r2, #32
    6d60:	601a      	str	r2, [r3, #0]
    6d62:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6d64:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d68:	f44f 72a2 	mov.w	r2, #324	; 0x144
	if (pin >= CORE_NUM_DIGITAL) return;
	config = portConfigRegister(pin);

	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
#ifdef KINETISK
		*portModeRegister(pin) = 1;
    6d6c:	2001      	movs	r0, #1
    6d6e:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
#else
		*portModeRegister(pin) |= digitalPinToBitMask(pin); // TODO: atomic
#endif
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    6d72:	601a      	str	r2, [r3, #0]
		if (mode == OUTPUT_OPENDRAIN) {
		    *config |= PORT_PCR_ODE;
    6d74:	681a      	ldr	r2, [r3, #0]
    6d76:	f042 0220 	orr.w	r2, r2, #32
    6d7a:	601a      	str	r2, [r3, #0]
    6d7c:	4770      	bx	lr
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
		} else if (mode == INPUT_PULLUP) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    6d7e:	f240 1203 	movw	r2, #259	; 0x103
    6d82:	601a      	str	r2, [r3, #0]
    6d84:	4770      	bx	lr
		} else if (mode == INPUT_PULLDOWN) {
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    6d86:	f44f 7281 	mov.w	r2, #258	; 0x102
    6d8a:	601a      	str	r2, [r3, #0]
    6d8c:	4770      	bx	lr
    6d8e:	bf00      	nop
    6d90:	0001b848 	.word	0x0001b848

00006d94 <attachInterrupt>:
void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    6d94:	2821      	cmp	r0, #33	; 0x21
    6d96:	d848      	bhi.n	6e2a <attachInterrupt+0x96>
{
	_VectorsRam[irq + 16] = function;
}

void attachInterrupt(uint8_t pin, void (*function)(void), int mode)
{
    6d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    6d9a:	2a04      	cmp	r2, #4
    6d9c:	d844      	bhi.n	6e28 <attachInterrupt+0x94>
    6d9e:	e8df f002 	tbb	[pc, r2]
    6da2:	4b48      	.short	0x4b48
    6da4:	034e      	.short	0x034e
    6da6:	45          	.byte	0x45
    6da7:	00          	.byte	0x00
    6da8:	f44f 2610 	mov.w	r6, #589824	; 0x90000
	  case LOW:	mask = 0x08; break;
	  case HIGH:	mask = 0x0C; break;
	  default: return;
	}
	mask = (mask << 16) | 0x01000000;
	config = portConfigRegister(pin);
    6dac:	4b2b      	ldr	r3, [pc, #172]	; (6e5c <attachInterrupt+0xc8>)
    6dae:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6db2:	460d      	mov	r5, r1
    6db4:	685c      	ldr	r4, [r3, #4]
	if ((*config & 0x00000700) == 0) {
    6db6:	6821      	ldr	r1, [r4, #0]
    6db8:	f411 61e0 	ands.w	r1, r1, #1792	; 0x700
    6dbc:	d048      	beq.n	6e50 <attachInterrupt+0xbc>
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    6dbe:	4b28      	ldr	r3, [pc, #160]	; (6e60 <attachInterrupt+0xcc>)
    6dc0:	4a28      	ldr	r2, [pc, #160]	; (6e64 <attachInterrupt+0xd0>)
    6dc2:	4929      	ldr	r1, [pc, #164]	; (6e68 <attachInterrupt+0xd4>)
    6dc4:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6dc8:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    6dcc:	4827      	ldr	r0, [pc, #156]	; (6e6c <attachInterrupt+0xd8>)
    6dce:	f8c3 11a4 	str.w	r1, [r3, #420]	; 0x1a4

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6dd2:	f5a2 2192 	sub.w	r1, r2, #299008	; 0x49000
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    6dd6:	4f26      	ldr	r7, [pc, #152]	; (6e70 <attachInterrupt+0xdc>)
    6dd8:	f8c3 01a0 	str.w	r0, [r3, #416]	; 0x1a0

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6ddc:	297c      	cmp	r1, #124	; 0x7c
static void portcd_interrupt(void);
#endif

void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void))
{
	_VectorsRam[irq + 16] = function;
    6dde:	4825      	ldr	r0, [pc, #148]	; (6e74 <attachInterrupt+0xe0>)
    6de0:	f8c3 71a8 	str.w	r7, [r3, #424]	; 0x1a8
    6de4:	f8c3 01ac 	str.w	r0, [r3, #428]	; 0x1ac

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6de8:	d92c      	bls.n	6e44 <attachInterrupt+0xb0>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    6dea:	f5a2 2394 	sub.w	r3, r2, #303104	; 0x4a000
    6dee:	2b7c      	cmp	r3, #124	; 0x7c
    6df0:	d92a      	bls.n	6e48 <attachInterrupt+0xb4>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    6df2:	f5a2 2396 	sub.w	r3, r2, #307200	; 0x4b000
    6df6:	2b7c      	cmp	r3, #124	; 0x7c
    6df8:	d928      	bls.n	6e4c <attachInterrupt+0xb8>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    6dfa:	f5a2 2398 	sub.w	r3, r2, #311296	; 0x4c000
    6dfe:	2b7c      	cmp	r3, #124	; 0x7c
    6e00:	d929      	bls.n	6e56 <attachInterrupt+0xc2>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    6e02:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    6e06:	2a7c      	cmp	r2, #124	; 0x7c
    6e08:	d827      	bhi.n	6e5a <attachInterrupt+0xc6>
    6e0a:	481b      	ldr	r0, [pc, #108]	; (6e78 <attachInterrupt+0xe4>)
	attachInterruptVector(IRQ_PORTD, port_D_isr);
	attachInterruptVector(IRQ_PORTE, port_E_isr);
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    6e0c:	b672      	cpsid	i
	cfg = *config;
    6e0e:	6823      	ldr	r3, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    6e10:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
    6e14:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
	*config = cfg;
	isr_table[pin_index] = function;	// set the function pointer
    6e18:	f3c4 0184 	ubfx	r1, r4, #2, #5
	cfg |= mask;
    6e1c:	4316      	orrs	r6, r2
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	cfg = *config;
	cfg &= ~0x000F0000;		// disable any previous interrupt
	*config = cfg;
    6e1e:	6023      	str	r3, [r4, #0]
	isr_table[pin_index] = function;	// set the function pointer
    6e20:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	cfg |= mask;
	*config = cfg;			// enable the new interrupt
    6e24:	6026      	str	r6, [r4, #0]
	__enable_irq();
    6e26:	b662      	cpsie	i
    6e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e2a:	4770      	bx	lr
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    6e2c:	f44f 2630 	mov.w	r6, #720896	; 0xb0000
    6e30:	e7bc      	b.n	6dac <attachInterrupt+0x18>
	  case CHANGE:	mask = 0x0B; break;
	  case RISING:	mask = 0x09; break;
	  case FALLING:	mask = 0x0A; break;
	  case LOW:	mask = 0x08; break;
    6e32:	f44f 2600 	mov.w	r6, #524288	; 0x80000
    6e36:	e7b9      	b.n	6dac <attachInterrupt+0x18>
	  case HIGH:	mask = 0x0C; break;
    6e38:	f44f 2640 	mov.w	r6, #786432	; 0xc0000
    6e3c:	e7b6      	b.n	6dac <attachInterrupt+0x18>
{
	volatile uint32_t *config;
	uint32_t cfg, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	switch (mode) {
    6e3e:	f44f 2620 	mov.w	r6, #655360	; 0xa0000
    6e42:	e7b3      	b.n	6dac <attachInterrupt+0x18>

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6e44:	480d      	ldr	r0, [pc, #52]	; (6e7c <attachInterrupt+0xe8>)
    6e46:	e7e1      	b.n	6e0c <attachInterrupt+0x78>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    6e48:	480d      	ldr	r0, [pc, #52]	; (6e80 <attachInterrupt+0xec>)
    6e4a:	e7df      	b.n	6e0c <attachInterrupt+0x78>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    6e4c:	480d      	ldr	r0, [pc, #52]	; (6e84 <attachInterrupt+0xf0>)
    6e4e:	e7dd      	b.n	6e0c <attachInterrupt+0x78>
    6e50:	f7ff ff64 	bl	6d1c <pinMode.part.2>
    6e54:	e7b3      	b.n	6dbe <attachInterrupt+0x2a>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    6e56:	480c      	ldr	r0, [pc, #48]	; (6e88 <attachInterrupt+0xf4>)
    6e58:	e7d8      	b.n	6e0c <attachInterrupt+0x78>
    6e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e5c:	0001b848 	.word	0x0001b848
    6e60:	1fff8200 	.word	0x1fff8200
    6e64:	1fff87d1 	.word	0x1fff87d1
    6e68:	1fff8779 	.word	0x1fff8779
    6e6c:	1fff87a5 	.word	0x1fff87a5
    6e70:	1fff874d 	.word	0x1fff874d
    6e74:	1fff8721 	.word	0x1fff8721
    6e78:	1fff8a80 	.word	0x1fff8a80
    6e7c:	1fff89a8 	.word	0x1fff89a8
    6e80:	1fff89e0 	.word	0x1fff89e0
    6e84:	1fff8a30 	.word	0x1fff8a30
    6e88:	1fff8a60 	.word	0x1fff8a60

00006e8c <detachInterrupt>:

void detachInterrupt(uint8_t pin)
{
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    6e8c:	4b1a      	ldr	r3, [pc, #104]	; (6ef8 <detachInterrupt+0x6c>)
    6e8e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
	__enable_irq();
#endif
}

void detachInterrupt(uint8_t pin)
{
    6e92:	b410      	push	{r4}
	volatile uint32_t *config;

	config = portConfigRegister(pin);
    6e94:	6842      	ldr	r2, [r0, #4]

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6e96:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
    6e9a:	f5a3 2192 	sub.w	r1, r3, #299008	; 0x49000
    6e9e:	297c      	cmp	r1, #124	; 0x7c
    6ea0:	d923      	bls.n	6eea <detachInterrupt+0x5e>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    6ea2:	f5a3 2194 	sub.w	r1, r3, #303104	; 0x4a000
    6ea6:	297c      	cmp	r1, #124	; 0x7c
    6ea8:	d90d      	bls.n	6ec6 <detachInterrupt+0x3a>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    6eaa:	f5a3 2196 	sub.w	r1, r3, #307200	; 0x4b000
    6eae:	297c      	cmp	r1, #124	; 0x7c
    6eb0:	d91f      	bls.n	6ef2 <detachInterrupt+0x66>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    6eb2:	f5a3 2198 	sub.w	r1, r3, #311296	; 0x4c000
    6eb6:	297c      	cmp	r1, #124	; 0x7c
    6eb8:	d919      	bls.n	6eee <detachInterrupt+0x62>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    6eba:	f5a3 239a 	sub.w	r3, r3, #315392	; 0x4d000
    6ebe:	2b7c      	cmp	r3, #124	; 0x7c
    6ec0:	d811      	bhi.n	6ee6 <detachInterrupt+0x5a>
    6ec2:	4c0e      	ldr	r4, [pc, #56]	; (6efc <detachInterrupt+0x70>)
    6ec4:	e000      	b.n	6ec8 <detachInterrupt+0x3c>
// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    6ec6:	4c0e      	ldr	r4, [pc, #56]	; (6f00 <detachInterrupt+0x74>)
	config = portConfigRegister(pin);
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
    6ec8:	b672      	cpsid	i
	*config = ((*config & ~0x000F0000) | 0x01000000);
    6eca:	6813      	ldr	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    6ecc:	480d      	ldr	r0, [pc, #52]	; (6f04 <detachInterrupt+0x78>)
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    6ece:	f023 7387 	bic.w	r3, r3, #17694720	; 0x10e0000
	isr_table[pin_index] = dummy_isr;
    6ed2:	f3c2 0184 	ubfx	r1, r2, #2, #5
#if defined(KINETISK)
	voidFuncPtr* isr_table = getIsrTable(config);
	if(!isr_table) return;
	uint32_t pin_index = getPinIndex(config);
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
    6ed6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    6eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    6ede:	6013      	str	r3, [r2, #0]
	isr_table[pin_index] = dummy_isr;
    6ee0:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
	__enable_irq();
    6ee4:	b662      	cpsie	i
	__disable_irq();
	*config = ((*config & ~0x000F0000) | 0x01000000);
	intFunc[pin] = dummy_isr;
	__enable_irq();
#endif
}
    6ee6:	bc10      	pop	{r4}
    6ee8:	4770      	bx	lr

// The Pin Config Register is used to look up the correct interrupt table
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    6eea:	4c07      	ldr	r4, [pc, #28]	; (6f08 <detachInterrupt+0x7c>)
    6eec:	e7ec      	b.n	6ec8 <detachInterrupt+0x3c>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    6eee:	4c07      	ldr	r4, [pc, #28]	; (6f0c <detachInterrupt+0x80>)
    6ef0:	e7ea      	b.n	6ec8 <detachInterrupt+0x3c>
// for the corresponding port.
static inline voidFuncPtr* getIsrTable(volatile uint32_t *config) {
	voidFuncPtr* isr_table = NULL;
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    6ef2:	4c07      	ldr	r4, [pc, #28]	; (6f10 <detachInterrupt+0x84>)
    6ef4:	e7e8      	b.n	6ec8 <detachInterrupt+0x3c>
    6ef6:	bf00      	nop
    6ef8:	0001b848 	.word	0x0001b848
    6efc:	1fff8a80 	.word	0x1fff8a80
    6f00:	1fff89e0 	.word	0x1fff89e0
    6f04:	00006cd5 	.word	0x00006cd5
    6f08:	1fff89a8 	.word	0x1fff89a8
    6f0c:	1fff8a60 	.word	0x1fff8a60
    6f10:	1fff8a30 	.word	0x1fff8a30

00006f14 <rtc_set>:
{
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
    6f14:	b430      	push	{r4, r5}
	RTC_SR = 0;
    6f16:	4b05      	ldr	r3, [pc, #20]	; (6f2c <rtc_set+0x18>)
	RTC_TPR = 0;
    6f18:	4d05      	ldr	r5, [pc, #20]	; (6f30 <rtc_set+0x1c>)
	RTC_TSR = t;
    6f1a:	4c06      	ldr	r4, [pc, #24]	; (6f34 <rtc_set+0x20>)
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    6f1c:	2200      	movs	r2, #0
	RTC_TPR = 0;
	RTC_TSR = t;
	RTC_SR = RTC_SR_TCE;
    6f1e:	2110      	movs	r1, #16
	return RTC_TSR;
}

void rtc_set(unsigned long t)
{
	RTC_SR = 0;
    6f20:	601a      	str	r2, [r3, #0]
	RTC_TPR = 0;
    6f22:	602a      	str	r2, [r5, #0]
	RTC_TSR = t;
    6f24:	6020      	str	r0, [r4, #0]
	RTC_SR = RTC_SR_TCE;
    6f26:	6019      	str	r1, [r3, #0]
}
    6f28:	bc30      	pop	{r4, r5}
    6f2a:	4770      	bx	lr
    6f2c:	4003d014 	.word	0x4003d014
    6f30:	4003d004 	.word	0x4003d004
    6f34:	4003d000 	.word	0x4003d000

00006f38 <digitalWrite>:

// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
{
	if (pin >= CORE_NUM_DIGITAL) return;
    6f38:	2821      	cmp	r0, #33	; 0x21
    6f3a:	d801      	bhi.n	6f40 <digitalWrite+0x8>
    6f3c:	f7ff becc 	b.w	6cd8 <digitalWrite.part.1>
    6f40:	4770      	bx	lr
    6f42:	bf00      	nop

00006f44 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	volatile uint32_t *config;

	if (pin >= CORE_NUM_DIGITAL) return;
    6f44:	2821      	cmp	r0, #33	; 0x21
    6f46:	d801      	bhi.n	6f4c <pinMode+0x8>
    6f48:	f7ff bee8 	b.w	6d1c <pinMode.part.2>
    6f4c:	4770      	bx	lr
    6f4e:	bf00      	nop

00006f50 <delay>:
#endif
	return count * 1000 + current / (F_CPU / 1000000);
}

void delay(uint32_t ms)
{
    6f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f54:	4605      	mov	r5, r0

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6f56:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    6f58:	4f20      	ldr	r7, [pc, #128]	; (6fdc <delay+0x8c>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6f5a:	4b21      	ldr	r3, [pc, #132]	; (6fe0 <delay+0x90>)
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6f5c:	4a21      	ldr	r2, [pc, #132]	; (6fe4 <delay+0x94>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6f5e:	681b      	ldr	r3, [r3, #0]
	count = systick_millis_count;
    6f60:	683c      	ldr	r4, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6f62:	6812      	ldr	r2, [r2, #0]
	__enable_irq();
    6f64:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6f66:	0152      	lsls	r2, r2, #5
    6f68:	d502      	bpl.n	6f70 <delay+0x20>
    6f6a:	2b32      	cmp	r3, #50	; 0x32
    6f6c:	bf88      	it	hi
    6f6e:	3401      	addhi	r4, #1

void delay(uint32_t ms)
{
	uint32_t start = micros();

	if (ms > 0) {
    6f70:	b395      	cbz	r5, 6fd8 <delay+0x88>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    6f72:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
    6f76:	4e1c      	ldr	r6, [pc, #112]	; (6fe8 <delay+0x98>)
uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
	current = SYST_CVR;
    6f78:	f8df 9064 	ldr.w	r9, [pc, #100]	; 6fe0 <delay+0x90>
	count = systick_millis_count;
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6f7c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 6fe4 <delay+0x94>
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    6f80:	33ff      	adds	r3, #255	; 0xff
    6f82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6f86:	fba6 1303 	umull	r1, r3, r6, r3
    6f8a:	fb02 f404 	mul.w	r4, r2, r4
    6f8e:	eb04 1493 	add.w	r4, r4, r3, lsr #6

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    6f92:	b672      	cpsid	i
	current = SYST_CVR;
    6f94:	f8d9 1000 	ldr.w	r1, [r9]
	count = systick_millis_count;
    6f98:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    6f9a:	f8d8 e000 	ldr.w	lr, [r8]
	__enable_irq();
    6f9e:	b662      	cpsie	i
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    6fa0:	f5c1 33bb 	rsb	r3, r1, #95744	; 0x17600
    6fa4:	33ff      	adds	r3, #255	; 0xff
    6fa6:	fba6 0303 	umull	r0, r3, r6, r3
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6faa:	f01e 6f80 	tst.w	lr, #67108864	; 0x4000000
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    6fae:	ebc4 1393 	rsb	r3, r4, r3, lsr #6
    6fb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
	__enable_irq();
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    6fb6:	d002      	beq.n	6fbe <delay+0x6e>
    6fb8:	2932      	cmp	r1, #50	; 0x32
    6fba:	bf88      	it	hi
    6fbc:	3201      	addhi	r2, #1
{
	uint32_t start = micros();

	if (ms > 0) {
		while (1) {
			while ((micros() - start) >= 1000) {
    6fbe:	fb00 3302 	mla	r3, r0, r2, r3
    6fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    6fc6:	d304      	bcc.n	6fd2 <delay+0x82>
				ms--;
				if (ms == 0) return;
    6fc8:	3d01      	subs	r5, #1
    6fca:	d005      	beq.n	6fd8 <delay+0x88>
				start += 1000;
    6fcc:	f504 747a 	add.w	r4, r4, #1000	; 0x3e8
    6fd0:	e7df      	b.n	6f92 <delay+0x42>
			}
			yield();
    6fd2:	f001 fa51 	bl	8478 <yield>
		}
    6fd6:	e7dc      	b.n	6f92 <delay+0x42>
    6fd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    6fdc:	1fff9724 	.word	0x1fff9724
    6fe0:	e000e018 	.word	0xe000e018
    6fe4:	e000ed04 	.word	0xe000ed04
    6fe8:	aaaaaaab 	.word	0xaaaaaaab

00006fec <_init_Teensyduino_internal_>:
#endif

//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
    6fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    6fee:	4b2d      	ldr	r3, [pc, #180]	; (70a4 <_init_Teensyduino_internal_+0xb8>)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    6ff0:	492d      	ldr	r1, [pc, #180]	; (70a8 <_init_Teensyduino_internal_+0xbc>)
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    6ff2:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 70c4 <_init_Teensyduino_internal_+0xd8>
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    6ff6:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 70c8 <_init_Teensyduino_internal_+0xdc>
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
    6ffa:	4e2c      	ldr	r6, [pc, #176]	; (70ac <_init_Teensyduino_internal_+0xc0>)
	FTM0_C2SC = 0x28;
	FTM0_C3SC = 0x28;
    6ffc:	4d2c      	ldr	r5, [pc, #176]	; (70b0 <_init_Teensyduino_internal_+0xc4>)
	FTM0_C4SC = 0x28;
    6ffe:	4c2d      	ldr	r4, [pc, #180]	; (70b4 <_init_Teensyduino_internal_+0xc8>)
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
	FTM0_C1SC = 0x28;
	FTM0_C2SC = 0x28;
    7000:	4a2d      	ldr	r2, [pc, #180]	; (70b8 <_init_Teensyduino_internal_+0xcc>)
	FTM0_C3SC = 0x28;
	FTM0_C4SC = 0x28;
	FTM0_C5SC = 0x28;
    7002:	4f2e      	ldr	r7, [pc, #184]	; (70bc <_init_Teensyduino_internal_+0xd0>)
//void init_pins(void)
__attribute__((noinline))
void _init_Teensyduino_internal_(void)
{
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    7004:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    7008:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    700a:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    700e:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    7010:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    7014:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    7016:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    701a:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    701c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    7020:	6018      	str	r0, [r3, #0]
	NVIC_ENABLE_IRQ(IRQ_PORTA);
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
    7022:	2000      	movs	r0, #0
    7024:	6008      	str	r0, [r1, #0]
	FTM0_MOD = DEFAULT_FTM_MOD;
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    7026:	2328      	movs	r3, #40	; 0x28
	NVIC_ENABLE_IRQ(IRQ_PORTCD);
#endif
	//SIM_SCGC6 |= SIM_SCGC6_FTM0;	// TODO: use bitband for atomic read-mod-write
	//SIM_SCGC6 |= SIM_SCGC6_FTM1;
	FTM0_CNT = 0;
	FTM0_MOD = DEFAULT_FTM_MOD;
    7028:	f64b 71ff 	movw	r1, #49151	; 0xbfff
    702c:	f8cc 1000 	str.w	r1, [ip]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    7030:	f8ce 3000 	str.w	r3, [lr]
	FTM0_C1SC = 0x28;
    7034:	6033      	str	r3, [r6, #0]
	FTM0_C2SC = 0x28;
    7036:	6013      	str	r3, [r2, #0]
	FTM0_C3SC = 0x28;
    7038:	602b      	str	r3, [r5, #0]
	FTM0_C4SC = 0x28;
    703a:	6023      	str	r3, [r4, #0]
	FTM0_C5SC = 0x28;
    703c:	603b      	str	r3, [r7, #0]
#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	FTM0_C6SC = 0x28;
    703e:	62b3      	str	r3, [r6, #40]	; 0x28
	FTM0_C7SC = 0x28;
    7040:	6293      	str	r3, [r2, #40]	; 0x28
	FTM3_C4SC = 0x28;
	FTM3_C5SC = 0x28;
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    7042:	2209      	movs	r2, #9
    7044:	f845 2c24 	str.w	r2, [r5, #-36]
	FTM1_CNT = 0;
    7048:	f8c4 0fd8 	str.w	r0, [r4, #4056]	; 0xfd8
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
    704c:	f505 657f 	add.w	r5, r5, #4080	; 0xff0
	FTM3_C6SC = 0x28;
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
    7050:	f8c7 1fd4 	str.w	r1, [r7, #4052]	; 0xfd4
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    7054:	f507 27ff 	add.w	r7, r7, #522240	; 0x7f800
    7058:	f507 67fa 	add.w	r7, r7, #2000	; 0x7d0
	FTM3_C7SC = 0x28;
#endif
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
    705c:	f8c6 3ff8 	str.w	r3, [r6, #4088]	; 0xff8
	FTM1_C1SC = 0x28;
    7060:	602b      	str	r3, [r5, #0]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    7062:	f506 26ff 	add.w	r6, r6, #522240	; 0x7f800
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
	FTM1_CNT = 0;
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    7066:	f8c4 2fd4 	str.w	r2, [r4, #4052]	; 0xfd4
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    706a:	f505 25fd 	add.w	r5, r5, #518144	; 0x7e800
	FTM2_C1SC = 0x28;
    706e:	f504 24ff 	add.w	r4, r4, #522240	; 0x7f800
	FTM1_MOD = DEFAULT_FTM_MOD;
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
    7072:	6038      	str	r0, [r7, #0]
	FTM2_MOD = DEFAULT_FTM_MOD;
    7074:	f206 76f4 	addw	r6, r6, #2036	; 0x7f4
	FTM2_C0SC = 0x28;
	FTM2_C1SC = 0x28;
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    7078:	4811      	ldr	r0, [pc, #68]	; (70c0 <_init_Teensyduino_internal_+0xd4>)
	FTM1_C0SC = 0x28;
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
    707a:	6031      	str	r1, [r6, #0]
	FTM2_C0SC = 0x28;
    707c:	f505 65ff 	add.w	r5, r5, #2040	; 0x7f8
	FTM2_C1SC = 0x28;
    7080:	f504 64fd 	add.w	r4, r4, #2024	; 0x7e8
	FTM1_C1SC = 0x28;
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__) || defined(__MKL26Z64__)
	FTM2_CNT = 0;
	FTM2_MOD = DEFAULT_FTM_MOD;
	FTM2_C0SC = 0x28;
    7084:	602b      	str	r3, [r5, #0]
	FTM2_C1SC = 0x28;
    7086:	6023      	str	r3, [r4, #0]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    7088:	6002      	str	r2, [r0, #0]
	TPM1_MOD = 32767;
	TPM1_C0SC = 0x28;
	TPM1_C1SC = 0x28;
	TPM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(0);
#endif
	analog_init();
    708a:	f001 fa6b 	bl	8564 <analog_init>

	// for background about this startup delay, please see these conversations
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
    708e:	2019      	movs	r0, #25
    7090:	f7ff ff5e 	bl	6f50 <delay>
	usb_init();
    7094:	f000 fe5a 	bl	7d4c <usb_init>
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    7098:	f240 1013 	movw	r0, #275	; 0x113
}
    709c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	// https://forum.pjrc.com/threads/36606-startup-time-(400ms)?p=113980&viewfull=1#post113980
	// https://forum.pjrc.com/threads/31290-Teensey-3-2-Teensey-Loader-1-24-Issues?p=87273&viewfull=1#post87273

	delay(TEENSY_INIT_USB_DELAY_BEFORE);
	usb_init();
	delay(TEENSY_INIT_USB_DELAY_AFTER);
    70a0:	f7ff bf56 	b.w	6f50 <delay>
    70a4:	e000e108 	.word	0xe000e108
    70a8:	40038004 	.word	0x40038004
    70ac:	40038014 	.word	0x40038014
    70b0:	40038024 	.word	0x40038024
    70b4:	4003802c 	.word	0x4003802c
    70b8:	4003801c 	.word	0x4003801c
    70bc:	40038034 	.word	0x40038034
    70c0:	400b8000 	.word	0x400b8000
    70c4:	4003800c 	.word	0x4003800c
    70c8:	40038008 	.word	0x40038008

000070cc <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    70cc:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    70ce:	2b03      	cmp	r3, #3
    70d0:	d814      	bhi.n	70fc <usb_rx+0x30>
	__disable_irq();
    70d2:	b672      	cpsid	i
	ret = rx_first[endpoint];
    70d4:	490a      	ldr	r1, [pc, #40]	; (7100 <usb_rx+0x34>)
    70d6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    70da:	b168      	cbz	r0, 70f8 <usb_rx+0x2c>




usb_packet_t *usb_rx(uint32_t endpoint)
{
    70dc:	b470      	push	{r4, r5, r6}
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    70de:	4c09      	ldr	r4, [pc, #36]	; (7104 <usb_rx+0x38>)
    70e0:	8805      	ldrh	r5, [r0, #0]
    70e2:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
	__disable_irq();
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
    70e6:	6846      	ldr	r6, [r0, #4]
    70e8:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    70ec:	1b52      	subs	r2, r2, r5
    70ee:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    70f2:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    70f4:	bc70      	pop	{r4, r5, r6}
    70f6:	4770      	bx	lr
	ret = rx_first[endpoint];
	if (ret) {
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
	}
	__enable_irq();
    70f8:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    70fa:	4770      	bx	lr

usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    70fc:	2000      	movs	r0, #0
    70fe:	4770      	bx	lr
    7100:	1fff9780 	.word	0x1fff9780
    7104:	1fff987c 	.word	0x1fff987c

00007108 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    7108:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    710a:	2803      	cmp	r0, #3
    710c:	d80b      	bhi.n	7126 <usb_tx_packet_count+0x1e>
	__disable_irq();
    710e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    7110:	4b07      	ldr	r3, [pc, #28]	; (7130 <usb_tx_packet_count+0x28>)
    7112:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7116:	b143      	cbz	r3, 712a <usb_tx_packet_count+0x22>
    7118:	2000      	movs	r0, #0
    711a:	685b      	ldr	r3, [r3, #4]
    711c:	3001      	adds	r0, #1
    711e:	2b00      	cmp	r3, #0
    7120:	d1fb      	bne.n	711a <usb_tx_packet_count+0x12>
	__enable_irq();
    7122:	b662      	cpsie	i
	return count;
    7124:	4770      	bx	lr
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return 0;
    7126:	2000      	movs	r0, #0
	__disable_irq();
	for (p = tx_first[endpoint]; p; p = p->next) count++;
	__enable_irq();
	return count;
}
    7128:	4770      	bx	lr
// https://forum.pjrc.com/threads/58663?p=223513&viewfull=1#post223513
//
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;
    712a:	4618      	mov	r0, r3
    712c:	e7f9      	b.n	7122 <usb_tx_packet_count+0x1a>
    712e:	bf00      	nop
    7130:	1fff97d4 	.word	0x1fff97d4

00007134 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    7134:	b430      	push	{r4, r5}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    7136:	b672      	cpsid	i
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    7138:	4a2b      	ldr	r2, [pc, #172]	; (71e8 <usb_rx_memory+0xb4>)
    713a:	7813      	ldrb	r3, [r2, #0]
    713c:	071d      	lsls	r5, r3, #28
    713e:	d506      	bpl.n	714e <usb_rx_memory+0x1a>
			if (table[index(i, RX, EVEN)].desc == 0) {
    7140:	4b2a      	ldr	r3, [pc, #168]	; (71ec <usb_rx_memory+0xb8>)
    7142:	6a19      	ldr	r1, [r3, #32]
    7144:	2900      	cmp	r1, #0
    7146:	d036      	beq.n	71b6 <usb_rx_memory+0x82>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    7148:	6a99      	ldr	r1, [r3, #40]	; 0x28
    714a:	2900      	cmp	r1, #0
    714c:	d041      	beq.n	71d2 <usb_rx_memory+0x9e>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    714e:	7853      	ldrb	r3, [r2, #1]
    7150:	071c      	lsls	r4, r3, #28
    7152:	d506      	bpl.n	7162 <usb_rx_memory+0x2e>
			if (table[index(i, RX, EVEN)].desc == 0) {
    7154:	4b25      	ldr	r3, [pc, #148]	; (71ec <usb_rx_memory+0xb8>)
    7156:	6c19      	ldr	r1, [r3, #64]	; 0x40
    7158:	2900      	cmp	r1, #0
    715a:	d03e      	beq.n	71da <usb_rx_memory+0xa6>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    715c:	6c99      	ldr	r1, [r3, #72]	; 0x48
    715e:	2900      	cmp	r1, #0
    7160:	d039      	beq.n	71d6 <usb_rx_memory+0xa2>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    7162:	7893      	ldrb	r3, [r2, #2]
    7164:	0719      	lsls	r1, r3, #28
    7166:	d505      	bpl.n	7174 <usb_rx_memory+0x40>
			if (table[index(i, RX, EVEN)].desc == 0) {
    7168:	4b20      	ldr	r3, [pc, #128]	; (71ec <usb_rx_memory+0xb8>)
    716a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    716c:	2900      	cmp	r1, #0
    716e:	d036      	beq.n	71de <usb_rx_memory+0xaa>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    7170:	6e99      	ldr	r1, [r3, #104]	; 0x68
    7172:	b189      	cbz	r1, 7198 <usb_rx_memory+0x64>
	__disable_irq();
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    7174:	78d3      	ldrb	r3, [r2, #3]
    7176:	071b      	lsls	r3, r3, #28
    7178:	d507      	bpl.n	718a <usb_rx_memory+0x56>
			if (table[index(i, RX, EVEN)].desc == 0) {
    717a:	4b1c      	ldr	r3, [pc, #112]	; (71ec <usb_rx_memory+0xb8>)
    717c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    7180:	b37a      	cbz	r2, 71e2 <usb_rx_memory+0xae>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    7182:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7186:	2111      	movs	r1, #17
    7188:	b13a      	cbz	r2, 719a <usb_rx_memory+0x66>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    718a:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    718c:	4b18      	ldr	r3, [pc, #96]	; (71f0 <usb_rx_memory+0xbc>)
    718e:	2200      	movs	r2, #0
    7190:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    7192:	bc30      	pop	{r4, r5}
	__enable_irq();
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
    7194:	f000 be56 	b.w	7e44 <usb_free>
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    7198:	210d      	movs	r1, #13
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    719a:	4c15      	ldr	r4, [pc, #84]	; (71f0 <usb_rx_memory+0xbc>)
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    719c:	4d15      	ldr	r5, [pc, #84]	; (71f4 <usb_rx_memory+0xc0>)
				usb_rx_memory_needed--;
    719e:	7822      	ldrb	r2, [r4, #0]
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    71a0:	f843 5031 	str.w	r5, [r3, r1, lsl #3]
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    71a4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    71a8:	3008      	adds	r0, #8
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    71aa:	3a01      	subs	r2, #1
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
				table[index(i, RX, ODD)].addr = packet->buf;
    71ac:	6058      	str	r0, [r3, #4]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				usb_rx_memory_needed--;
    71ae:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    71b0:	b662      	cpsie	i
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
	usb_free(packet);
	return;
}
    71b2:	bc30      	pop	{r4, r5}
    71b4:	4770      	bx	lr
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    71b6:	2204      	movs	r2, #4
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    71b8:	4c0d      	ldr	r4, [pc, #52]	; (71f0 <usb_rx_memory+0xbc>)
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    71ba:	4d0f      	ldr	r5, [pc, #60]	; (71f8 <usb_rx_memory+0xc4>)
				usb_rx_memory_needed--;
    71bc:	7821      	ldrb	r1, [r4, #0]
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    71be:	f843 5032 	str.w	r5, [r3, r2, lsl #3]
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    71c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    71c6:	3008      	adds	r0, #8
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    71c8:	1e4a      	subs	r2, r1, #1
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
				table[index(i, RX, EVEN)].addr = packet->buf;
    71ca:	6058      	str	r0, [r3, #4]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				usb_rx_memory_needed--;
    71cc:	7022      	strb	r2, [r4, #0]
				__enable_irq();
    71ce:	b662      	cpsie	i
				//serial_phex(i);
				//serial_print(",even\n");
				return;
    71d0:	e7ef      	b.n	71b2 <usb_rx_memory+0x7e>
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    71d2:	2105      	movs	r1, #5
    71d4:	e7e1      	b.n	719a <usb_rx_memory+0x66>
    71d6:	2109      	movs	r1, #9
    71d8:	e7df      	b.n	719a <usb_rx_memory+0x66>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    71da:	2208      	movs	r2, #8
    71dc:	e7ec      	b.n	71b8 <usb_rx_memory+0x84>
    71de:	220c      	movs	r2, #12
    71e0:	e7ea      	b.n	71b8 <usb_rx_memory+0x84>
    71e2:	2210      	movs	r2, #16
    71e4:	e7e8      	b.n	71b8 <usb_rx_memory+0x84>
    71e6:	bf00      	nop
    71e8:	0001b984 	.word	0x0001b984
    71ec:	1fff8000 	.word	0x1fff8000
    71f0:	1fff97fd 	.word	0x1fff97fd
    71f4:	004000c8 	.word	0x004000c8
    71f8:	00400088 	.word	0x00400088

000071fc <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    71fc:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    71fe:	2b03      	cmp	r3, #3
    7200:	d81d      	bhi.n	723e <usb_tx+0x42>
//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    7202:	4a1b      	ldr	r2, [pc, #108]	; (7270 <usb_tx+0x74>)
    7204:	0140      	lsls	r0, r0, #5
    7206:	f040 0010 	orr.w	r0, r0, #16

//#define index(endpoint, tx, odd) (((endpoint) << 2) | ((tx) << 1) | (odd))
//#define stat2bufferdescriptor(stat) (table + ((stat) >> 2))

void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
    720a:	b430      	push	{r4, r5}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    720c:	4410      	add	r0, r2
	uint8_t next;

	endpoint--;
	if (endpoint >= NUM_ENDPOINTS) return;
	__disable_irq();
    720e:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    7210:	4c18      	ldr	r4, [pc, #96]	; (7274 <usb_tx+0x78>)
    7212:	5ce2      	ldrb	r2, [r4, r3]
    7214:	2a03      	cmp	r2, #3
    7216:	d81b      	bhi.n	7250 <usb_tx+0x54>
    7218:	e8df f002 	tbb	[pc, r2]
    721c:	17151202 	.word	0x17151202
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
    7220:	2203      	movs	r2, #3
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    7222:	880d      	ldrh	r5, [r1, #0]
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    7224:	54e2      	strb	r2, [r4, r3]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    7226:	f010 0f08 	tst.w	r0, #8
    722a:	bf14      	ite	ne
    722c:	23c8      	movne	r3, #200	; 0xc8
    722e:	2388      	moveq	r3, #136	; 0x88
    7230:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    7234:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    7236:	6003      	str	r3, [r0, #0]
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
	b->addr = packet->buf;
    7238:	6041      	str	r1, [r0, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
	__enable_irq();
    723a:	b662      	cpsie	i
}
    723c:	bc30      	pop	{r4, r5}
    723e:	4770      	bx	lr
	switch (tx_state[endpoint]) {
	  case TX_STATE_BOTH_FREE_EVEN_FIRST:
		next = TX_STATE_ODD_FREE;
		break;
	  case TX_STATE_BOTH_FREE_ODD_FIRST:
		b++;
    7240:	3008      	adds	r0, #8
		next = TX_STATE_EVEN_FREE;
    7242:	2202      	movs	r2, #2
		break;
    7244:	e7ed      	b.n	7222 <usb_tx+0x26>
	  case TX_STATE_EVEN_FREE:
		next = TX_STATE_NONE_FREE_ODD_FIRST;
    7246:	2205      	movs	r2, #5
    7248:	e7eb      	b.n	7222 <usb_tx+0x26>
		break;
	  case TX_STATE_ODD_FREE:
		b++;
    724a:	3008      	adds	r0, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    724c:	2204      	movs	r2, #4
		break;
    724e:	e7e8      	b.n	7222 <usb_tx+0x26>
	  default:
		if (tx_first[endpoint] == NULL) {
    7250:	4a09      	ldr	r2, [pc, #36]	; (7278 <usb_tx+0x7c>)
    7252:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    7256:	b138      	cbz	r0, 7268 <usb_tx+0x6c>
			tx_first[endpoint] = packet;
		} else {
			tx_last[endpoint]->next = packet;
    7258:	4a08      	ldr	r2, [pc, #32]	; (727c <usb_tx+0x80>)
    725a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    725e:	6041      	str	r1, [r0, #4]
		}
		tx_last[endpoint] = packet;
    7260:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		__enable_irq();
    7264:	b662      	cpsie	i
		return;
    7266:	e7e9      	b.n	723c <usb_tx+0x40>
		b++;
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
		break;
	  default:
		if (tx_first[endpoint] == NULL) {
			tx_first[endpoint] = packet;
    7268:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    726c:	4a03      	ldr	r2, [pc, #12]	; (727c <usb_tx+0x80>)
    726e:	e7f7      	b.n	7260 <usb_tx+0x64>
    7270:	1fff8000 	.word	0x1fff8000
    7274:	1fff980c 	.word	0x1fff980c
    7278:	1fff97d4 	.word	0x1fff97d4
    727c:	1fff97e4 	.word	0x1fff97e4

00007280 <usb_isr>:
}



void usb_isr(void)
{
    7280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    7284:	f8df b318 	ldr.w	fp, [pc, #792]	; 75a0 <usb_isr+0x320>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
		uint8_t endpoint;
		stat = USB0_STAT;
    7288:	f8df a318 	ldr.w	sl, [pc, #792]	; 75a4 <usb_isr+0x324>
}



void usb_isr(void)
{
    728c:	b087      	sub	sp, #28
    728e:	e044      	b.n	731a <usb_isr+0x9a>
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
    7290:	4fae      	ldr	r7, [pc, #696]	; (754c <usb_isr+0x2cc>)
    7292:	ea4f 0893 	mov.w	r8, r3, lsr #2
    7296:	eb07 09c8 	add.w	r9, r7, r8, lsl #3
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    729a:	3e01      	subs	r6, #1
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    729c:	f8d9 2004 	ldr.w	r2, [r9, #4]
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    72a0:	f003 0308 	and.w	r3, r3, #8
			serial_print(((uint32_t)b & 8) ? ", odd" : ", even");
			serial_print(", count:");
			serial_phex(b->desc >> 16);
			serial_print("\n");
#endif
			endpoint--;	// endpoint is index to zero-based arrays
    72a4:	b2f6      	uxtb	r6, r6
		endpoint = stat >> 4;
		if (endpoint == 0) {
			usb_control(stat);
		} else {
			bdt_t *b = stat2bufferdescriptor(stat);
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    72a6:	f1a2 0008 	sub.w	r0, r2, #8
				b->addr = &usb_audio_sync_feedback;
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
    72aa:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    72ae:	2b00      	cmp	r3, #0
    72b0:	f040 8104 	bne.w	74bc <usb_isr+0x23c>
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
    72b4:	f857 3038 	ldr.w	r3, [r7, r8, lsl #3]
    72b8:	0c1b      	lsrs	r3, r3, #16
    72ba:	b299      	uxth	r1, r3
    72bc:	f822 1c08 	strh.w	r1, [r2, #-8]
				if (packet->len > 0) {
    72c0:	2b00      	cmp	r3, #0
    72c2:	f000 80f2 	beq.w	74aa <usb_isr+0x22a>
					packet->index = 0;
					packet->next = NULL;
					if (rx_first[endpoint] == NULL) {
    72c6:	4ba2      	ldr	r3, [pc, #648]	; (7550 <usb_isr+0x2d0>)
					}
				}
			} else { // receive
				packet->len = b->desc >> 16;
				if (packet->len > 0) {
					packet->index = 0;
    72c8:	f822 4c06 	strh.w	r4, [r2, #-6]
					packet->next = NULL;
    72cc:	f842 4c04 	str.w	r4, [r2, #-4]
					if (rx_first[endpoint] == NULL) {
    72d0:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
    72d4:	2a00      	cmp	r2, #0
    72d6:	f000 816e 	beq.w	75b6 <usb_isr+0x336>
						//serial_print("rx Nth, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
    72da:	4d9e      	ldr	r5, [pc, #632]	; (7554 <usb_isr+0x2d4>)
    72dc:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
    72e0:	6058      	str	r0, [r3, #4]
					}
					rx_last[endpoint] = packet;
					usb_rx_byte_count_data[endpoint] += packet->len;
    72e2:	4c9d      	ldr	r4, [pc, #628]	; (7558 <usb_isr+0x2d8>)
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_last[endpoint]->next = packet;
					}
					rx_last[endpoint] = packet;
    72e4:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    72e8:	f834 3016 	ldrh.w	r3, [r4, r6, lsl #1]
    72ec:	4419      	add	r1, r3
    72ee:	f824 1016 	strh.w	r1, [r4, r6, lsl #1]
					// TODO: implement a per-endpoint maximum # of allocated
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
    72f2:	f000 fd87 	bl	7e04 <usb_malloc>
					if (packet) {
    72f6:	2800      	cmp	r0, #0
    72f8:	f000 8156 	beq.w	75a8 <usb_isr+0x328>
						b->addr = packet->buf;
						b->desc = BDT_DESC(64,
    72fc:	4a97      	ldr	r2, [pc, #604]	; (755c <usb_isr+0x2dc>)
    72fe:	4b98      	ldr	r3, [pc, #608]	; (7560 <usb_isr+0x2e0>)
    7300:	f019 0f08 	tst.w	r9, #8
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    7304:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    7308:	bf18      	it	ne
    730a:	4613      	movne	r3, r2
					// packets, so a flood of incoming data on 1 endpoint
					// doesn't starve the others if the user isn't reading
					// it regularly
					packet = usb_malloc();
					if (packet) {
						b->addr = packet->buf;
    730c:	f8c9 0004 	str.w	r0, [r9, #4]
						b->desc = BDT_DESC(64,
    7310:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    7314:	2308      	movs	r3, #8
    7316:	f88b 3000 	strb.w	r3, [fp]
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    731a:	f89b 4000 	ldrb.w	r4, [fp]
    731e:	b2e4      	uxtb	r4, r4

	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    7320:	0761      	lsls	r1, r4, #29
    7322:	d51b      	bpl.n	735c <usb_isr+0xdc>
		if (usb_configuration) {
    7324:	4b8f      	ldr	r3, [pc, #572]	; (7564 <usb_isr+0x2e4>)
    7326:	781b      	ldrb	r3, [r3, #0]
    7328:	b1ab      	cbz	r3, 7356 <usb_isr+0xd6>
			t = usb_reboot_timer;
    732a:	498f      	ldr	r1, [pc, #572]	; (7568 <usb_isr+0x2e8>)
    732c:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    732e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    7332:	b12a      	cbz	r2, 7340 <usb_isr+0xc0>
				usb_reboot_timer = --t;
    7334:	3b01      	subs	r3, #1
    7336:	b2db      	uxtb	r3, r3
    7338:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    733a:	2b00      	cmp	r3, #0
    733c:	f000 84ef 	beq.w	7d1e <usb_isr+0xa9e>
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
    7340:	498a      	ldr	r1, [pc, #552]	; (756c <usb_isr+0x2ec>)
    7342:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    7344:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    7348:	b12a      	cbz	r2, 7356 <usb_isr+0xd6>
				usb_cdc_transmit_flush_timer = --t;
    734a:	3b01      	subs	r3, #1
    734c:	b2db      	uxtb	r3, r3
    734e:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    7350:	2b00      	cmp	r3, #0
    7352:	f000 80f7 	beq.w	7544 <usb_isr+0x2c4>
#endif
#ifdef MULTITOUCH_INTERFACE
			usb_touchscreen_update_callback();
#endif
		}
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    7356:	2304      	movs	r3, #4
    7358:	f88b 3000 	strb.w	r3, [fp]
	}

	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    735c:	f004 0308 	and.w	r3, r4, #8
    7360:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    7364:	2b00      	cmp	r3, #0
    7366:	f000 80d6 	beq.w	7516 <usb_isr+0x296>
		uint8_t endpoint;
		stat = USB0_STAT;
    736a:	f89a 3000 	ldrb.w	r3, [sl]
    736e:	b2db      	uxtb	r3, r3
		//serial_print("token: ep=");
		//serial_phex(stat >> 4);
		//serial_print(stat & 0x08 ? ",tx" : ",rx");
		//serial_print(stat & 0x04 ? ",odd\n" : ",even\n");
		endpoint = stat >> 4;
		if (endpoint == 0) {
    7370:	091e      	lsrs	r6, r3, #4
    7372:	d18d      	bne.n	7290 <usb_isr+0x10>
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    7374:	089c      	lsrs	r4, r3, #2
    7376:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 754c <usb_isr+0x2cc>
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    737a:	f859 2034 	ldr.w	r2, [r9, r4, lsl #3]
	bdt_t *b;
	uint32_t pid, size;
	uint8_t *buf;
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
    737e:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    7382:	f3c2 0283 	ubfx	r2, r2, #2, #4
    7386:	3a01      	subs	r2, #1
	const uint8_t *data;

	b = stat2bufferdescriptor(stat);
	pid = BDT_PID(b->desc);
	//count = b->desc >> 16;
	buf = b->addr;
    7388:	6849      	ldr	r1, [r1, #4]
	//serial_phex(pid);
	//serial_print(", count:");
	//serial_phex(count);
	//serial_print("\n");

	switch (pid) {
    738a:	2a0c      	cmp	r2, #12
    738c:	d87e      	bhi.n	748c <usb_isr+0x20c>
    738e:	e8df f002 	tbb	[pc, r2]
    7392:	8181      	.short	0x8181
    7394:	7d7d7d7d 	.word	0x7d7d7d7d
    7398:	7d477d7d 	.word	0x7d477d7d
    739c:	7d7d      	.short	0x7d7d
    739e:	07          	.byte	0x07
    739f:	00          	.byte	0x00
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    73a0:	6808      	ldr	r0, [r1, #0]
    73a2:	4d73      	ldr	r5, [pc, #460]	; (7570 <usb_isr+0x2f0>)
		setup.word2 = *(uint32_t *)(buf + 4);
    73a4:	684a      	ldr	r2, [r1, #4]
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    73a6:	4f73      	ldr	r7, [pc, #460]	; (7574 <usb_isr+0x2f4>)
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    73a8:	4e73      	ldr	r6, [pc, #460]	; (7578 <usb_isr+0x2f8>)
	switch (pid) {
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
    73aa:	6028      	str	r0, [r5, #0]
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    73ac:	b281      	uxth	r1, r0
    73ae:	f240 6081 	movw	r0, #1665	; 0x681
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    73b2:	4b6a      	ldr	r3, [pc, #424]	; (755c <usb_isr+0x2dc>)
	case 0x0D: // Setup received from host
		//serial_print("PID=Setup\n");
		//if (count != 8) ; // panic?
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);
    73b4:	606a      	str	r2, [r5, #4]
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    73b6:	f04f 0e01 	mov.w	lr, #1
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    73ba:	2200      	movs	r2, #0
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    73bc:	4281      	cmp	r1, r0
		// grab the 8 byte setup info
		setup.word1 = *(uint32_t *)(buf);
		setup.word2 = *(uint32_t *)(buf + 4);

		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    73be:	f849 3034 	str.w	r3, [r9, r4, lsl #3]
		//table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 1);
		//table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 1);

		// clear any leftover pending IN transactions
		ep0_tx_ptr = NULL;
    73c2:	603a      	str	r2, [r7, #0]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    73c4:	f8c9 2010 	str.w	r2, [r9, #16]
		table[index(0, TX, ODD)].desc = 0;
    73c8:	f8c9 2018 	str.w	r2, [r9, #24]
		// first IN after Setup is always DATA1
		ep0_tx_data_toggle = 1;
    73cc:	f886 e000 	strb.w	lr, [r6]
			//serial_print("leftover tx even\n");
		//}
		//if (table[index(0, TX, ODD)].desc & 0x80) {
			//serial_print("leftover tx odd\n");
		//}
		table[index(0, TX, EVEN)].desc = 0;
    73d0:	4c5e      	ldr	r4, [pc, #376]	; (754c <usb_isr+0x2cc>)
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    73d2:	f200 80f4 	bhi.w	75be <usb_isr+0x33e>
    73d6:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    73da:	f080 8378 	bcs.w	7ace <usb_isr+0x84e>
    73de:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    73e2:	f000 8362 	beq.w	7aaa <usb_isr+0x82a>
    73e6:	f200 8287 	bhi.w	78f8 <usb_isr+0x678>
    73ea:	2980      	cmp	r1, #128	; 0x80
    73ec:	f000 82ec 	beq.w	79c8 <usb_isr+0x748>
    73f0:	2982      	cmp	r1, #130	; 0x82
    73f2:	f040 831e 	bne.w	7a32 <usb_isr+0x7b2>
    73f6:	88a9      	ldrh	r1, [r5, #4]
    73f8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		datalen = 2;
		data = reply_buffer;
		break;
	  case 0x0082: // GET_STATUS (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS) {
    73fc:	2904      	cmp	r1, #4
    73fe:	f200 8318 	bhi.w	7a32 <usb_isr+0x7b2>
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    7402:	485e      	ldr	r0, [pc, #376]	; (757c <usb_isr+0x2fc>)
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    7404:	4c5e      	ldr	r4, [pc, #376]	; (7580 <usb_isr+0x300>)
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    7406:	0089      	lsls	r1, r1, #2
    7408:	4408      	add	r0, r1
		if (i > NUM_ENDPOINTS) {
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		reply_buffer[0] = 0;
    740a:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    740c:	7062      	strb	r2, [r4, #1]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    740e:	7802      	ldrb	r2, [r0, #0]
    7410:	0793      	lsls	r3, r2, #30
    7412:	f140 8379 	bpl.w	7b08 <usb_isr+0x888>
    7416:	f884 e000 	strb.w	lr, [r4]
		data = reply_buffer;
		datalen = 2;
    741a:	f04f 0e02 	mov.w	lr, #2
    741e:	e2d8      	b.n	79d2 <usb_isr+0x752>
		//serial_print("PID=IN:");
		//serial_phex(stat);
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
    7420:	4f54      	ldr	r7, [pc, #336]	; (7574 <usb_isr+0x2f4>)
    7422:	683a      	ldr	r2, [r7, #0]
		if (data) {
    7424:	b342      	cbz	r2, 7478 <usb_isr+0x1f8>
			size = ep0_tx_len;
    7426:	4b57      	ldr	r3, [pc, #348]	; (7584 <usb_isr+0x304>)
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7428:	4e53      	ldr	r6, [pc, #332]	; (7578 <usb_isr+0x2f8>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    742a:	4957      	ldr	r1, [pc, #348]	; (7588 <usb_isr+0x308>)
		//serial_print("\n");

		// send remaining data, if any...
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
    742c:	8818      	ldrh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    742e:	7834      	ldrb	r4, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7430:	780d      	ldrb	r5, [r1, #0]
    7432:	2840      	cmp	r0, #64	; 0x40
    7434:	4686      	mov	lr, r0
    7436:	f045 0802 	orr.w	r8, r5, #2
    743a:	bf28      	it	cs
    743c:	f04f 0e40 	movcs.w	lr, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7440:	2c00      	cmp	r4, #0
	ep0_tx_data_toggle ^= 1;
    7442:	f084 0401 	eor.w	r4, r4, #1
    7446:	7034      	strb	r4, [r6, #0]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    7448:	ebce 0000 	rsb	r0, lr, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    744c:	bf0c      	ite	eq
    744e:	2488      	moveq	r4, #136	; 0x88
    7450:	24c8      	movne	r4, #200	; 0xc8
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7452:	eb09 06c8 	add.w	r6, r9, r8, lsl #3
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    7456:	b280      	uxth	r0, r0
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7458:	f085 0501 	eor.w	r5, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    745c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7460:	6072      	str	r2, [r6, #4]
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
    7462:	8018      	strh	r0, [r3, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7464:	f849 4038 	str.w	r4, [r9, r8, lsl #3]
		data = ep0_tx_ptr;
		if (data) {
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
    7468:	4472      	add	r2, lr
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    746a:	700d      	strb	r5, [r1, #0]
			size = ep0_tx_len;
			if (size > EP0_SIZE) size = EP0_SIZE;
			endpoint0_transmit(data, size);
			data += size;
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    746c:	b918      	cbnz	r0, 7476 <usb_isr+0x1f6>
    746e:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    7472:	bf18      	it	ne
    7474:	2200      	movne	r2, #0
    7476:	603a      	str	r2, [r7, #0]
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    7478:	4b3d      	ldr	r3, [pc, #244]	; (7570 <usb_isr+0x2f0>)
    747a:	881a      	ldrh	r2, [r3, #0]
    747c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    7480:	d104      	bne.n	748c <usb_isr+0x20c>
			setup.bRequest = 0;
    7482:	2100      	movs	r1, #0
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    7484:	789a      	ldrb	r2, [r3, #2]
			ep0_tx_len -= size;
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
		}

		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
			setup.bRequest = 0;
    7486:	7059      	strb	r1, [r3, #1]
			//serial_print("set address: ");
			//serial_phex16(setup.wValue);
			//serial_print("\n");
			USB0_ADDR = setup.wValue;
    7488:	4b40      	ldr	r3, [pc, #256]	; (758c <usb_isr+0x30c>)
    748a:	701a      	strb	r2, [r3, #0]
	//default:
		//serial_print("PID=unknown:");
		//serial_phex(pid);
		//serial_print("\n");
	}
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    748c:	4a40      	ldr	r2, [pc, #256]	; (7590 <usb_isr+0x310>)
    748e:	2301      	movs	r3, #1
    7490:	7013      	strb	r3, [r2, #0]
    7492:	e73f      	b.n	7314 <usb_isr+0x94>
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
		break;
	case 0x01:  // OUT transaction received from host
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    7494:	4a36      	ldr	r2, [pc, #216]	; (7570 <usb_isr+0x2f0>)
    7496:	8815      	ldrh	r5, [r2, #0]
    7498:	f242 0021 	movw	r0, #8225	; 0x2021
    749c:	4285      	cmp	r5, r0
    749e:	f000 81ff 	beq.w	78a0 <usb_isr+0x620>
		if (usb_audio_set_feature(&setup, buf)) {
			endpoint0_transmit(NULL, 0);
		}
#endif
		// give the buffer back
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    74a2:	4a2e      	ldr	r2, [pc, #184]	; (755c <usb_isr+0x2dc>)
    74a4:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
    74a8:	e7f0      	b.n	748c <usb_isr+0x20c>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    74aa:	4a2c      	ldr	r2, [pc, #176]	; (755c <usb_isr+0x2dc>)
    74ac:	4b2c      	ldr	r3, [pc, #176]	; (7560 <usb_isr+0x2e0>)
    74ae:	f019 0f08 	tst.w	r9, #8
    74b2:	bf18      	it	ne
    74b4:	4613      	movne	r3, r2
    74b6:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    74ba:	e72b      	b.n	7314 <usb_isr+0x94>
				b->desc = (3 << 16) | BDT_OWN;
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
    74bc:	f000 fcc2 	bl	7e44 <usb_free>
				packet = tx_first[endpoint];
    74c0:	4a34      	ldr	r2, [pc, #208]	; (7594 <usb_isr+0x314>)
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    74c2:	4935      	ldr	r1, [pc, #212]	; (7598 <usb_isr+0x318>)
				tx_state[endpoint] ^= 1;
			} else
#endif
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
    74c4:	f852 3026 	ldr.w	r3, [r2, r6, lsl #2]
				if (packet) {
    74c8:	2b00      	cmp	r3, #0
    74ca:	f000 81b6 	beq.w	783a <usb_isr+0x5ba>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    74ce:	6858      	ldr	r0, [r3, #4]
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
    74d0:	5d8c      	ldrb	r4, [r1, r6]
			if (stat & 0x08) { // transmit
				usb_free(packet);
				packet = tx_first[endpoint];
				if (packet) {
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
    74d2:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
					b->addr = packet->buf;
    74d6:	f103 0208 	add.w	r2, r3, #8
    74da:	f8c9 2004 	str.w	r2, [r9, #4]
					switch (tx_state[endpoint]) {
    74de:	2c03      	cmp	r4, #3
    74e0:	d805      	bhi.n	74ee <usb_isr+0x26e>
    74e2:	e8df f004 	tbb	[pc, r4]
    74e6:	0f12      	.short	0x0f12
    74e8:	0215      	.short	0x0215
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    74ea:	2204      	movs	r2, #4
    74ec:	558a      	strb	r2, [r1, r6]
						break;
					  default:
						break;
					}
					b->desc = BDT_DESC(packet->len,
    74ee:	881a      	ldrh	r2, [r3, #0]
    74f0:	f019 0f08 	tst.w	r9, #8
    74f4:	bf0c      	ite	eq
    74f6:	2388      	moveq	r3, #136	; 0x88
    74f8:	23c8      	movne	r3, #200	; 0xc8
    74fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    74fe:	f847 3038 	str.w	r3, [r7, r8, lsl #3]
    7502:	e707      	b.n	7314 <usb_isr+0x94>
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
						break;
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    7504:	2202      	movs	r2, #2
    7506:	558a      	strb	r2, [r1, r6]
						break;
    7508:	e7f1      	b.n	74ee <usb_isr+0x26e>
					//serial_print("tx packet\n");
					tx_first[endpoint] = packet->next;
					b->addr = packet->buf;
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    750a:	2203      	movs	r2, #3
    750c:	558a      	strb	r2, [r1, r6]
						break;
    750e:	e7ee      	b.n	74ee <usb_isr+0x26e>
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    7510:	2205      	movs	r2, #5
    7512:	558a      	strb	r2, [r1, r6]
						break;
    7514:	e7eb      	b.n	74ee <usb_isr+0x26e>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    7516:	07e0      	lsls	r0, r4, #31
    7518:	f100 821a 	bmi.w	7950 <usb_isr+0x6d0>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    751c:	0621      	lsls	r1, r4, #24
    751e:	f100 8249 	bmi.w	79b4 <usb_isr+0x734>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    7522:	07a2      	lsls	r2, r4, #30
    7524:	d506      	bpl.n	7534 <usb_isr+0x2b4>
		uint8_t err = USB0_ERRSTAT;
    7526:	4a1d      	ldr	r2, [pc, #116]	; (759c <usb_isr+0x31c>)
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    7528:	491d      	ldr	r1, [pc, #116]	; (75a0 <usb_isr+0x320>)
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    752a:	7813      	ldrb	r3, [r2, #0]
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    752c:	2002      	movs	r0, #2
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
		uint8_t err = USB0_ERRSTAT;
    752e:	b2db      	uxtb	r3, r3
		USB0_ERRSTAT = err;
    7530:	7013      	strb	r3, [r2, #0]
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    7532:	7008      	strb	r0, [r1, #0]
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    7534:	06e3      	lsls	r3, r4, #27
    7536:	d502      	bpl.n	753e <usb_isr+0x2be>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    7538:	4b19      	ldr	r3, [pc, #100]	; (75a0 <usb_isr+0x320>)
    753a:	2210      	movs	r2, #16
    753c:	701a      	strb	r2, [r3, #0]
	}

}
    753e:	b007      	add	sp, #28
    7540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			}
#ifdef CDC_DATA_INTERFACE
			t = usb_cdc_transmit_flush_timer;
			if (t) {
				usb_cdc_transmit_flush_timer = --t;
				if (t == 0) usb_serial_flush_callback();
    7544:	f000 fdea 	bl	811c <usb_serial_flush_callback>
    7548:	e705      	b.n	7356 <usb_isr+0xd6>
    754a:	bf00      	nop
    754c:	1fff8000 	.word	0x1fff8000
    7550:	1fff9780 	.word	0x1fff9780
    7554:	1fff972c 	.word	0x1fff972c
    7558:	1fff987c 	.word	0x1fff987c
    755c:	004000c8 	.word	0x004000c8
    7560:	00400088 	.word	0x00400088
    7564:	1fff9808 	.word	0x1fff9808
    7568:	1fff9791 	.word	0x1fff9791
    756c:	1fff9810 	.word	0x1fff9810
    7570:	1fff97f4 	.word	0x1fff97f4
    7574:	1fff9728 	.word	0x1fff9728
    7578:	1fff9790 	.word	0x1fff9790
    757c:	400720c0 	.word	0x400720c0
    7580:	1fff9800 	.word	0x1fff9800
    7584:	1fff973c 	.word	0x1fff973c
    7588:	1fff97fc 	.word	0x1fff97fc
    758c:	40072098 	.word	0x40072098
    7590:	40072094 	.word	0x40072094
    7594:	1fff97d4 	.word	0x1fff97d4
    7598:	1fff980c 	.word	0x1fff980c
    759c:	40072088 	.word	0x40072088
    75a0:	40072080 	.word	0x40072080
    75a4:	40072090 	.word	0x40072090
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
    75a8:	4aab      	ldr	r2, [pc, #684]	; (7858 <usb_isr+0x5d8>)
						b->desc = BDT_DESC(64,
							((uint32_t)b & 8) ? DATA1 : DATA0);
					} else {
						//serial_print("starving ");
						//serial_phex(endpoint + 1);
						b->desc = 0;
    75aa:	f847 0038 	str.w	r0, [r7, r8, lsl #3]
						usb_rx_memory_needed++;
    75ae:	7813      	ldrb	r3, [r2, #0]
    75b0:	3301      	adds	r3, #1
    75b2:	7013      	strb	r3, [r2, #0]
    75b4:	e6ae      	b.n	7314 <usb_isr+0x94>
						//serial_print("rx 1st, epidx=");
						//serial_phex(endpoint);
						//serial_print(", packet=");
						//serial_phex32((uint32_t)packet);
						//serial_print("\n");
						rx_first[endpoint] = packet;
    75b6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
    75ba:	4da8      	ldr	r5, [pc, #672]	; (785c <usb_isr+0x5dc>)
    75bc:	e691      	b.n	72e2 <usb_isr+0x62>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    75be:	f242 0021 	movw	r0, #8225	; 0x2021
    75c2:	4281      	cmp	r1, r0
    75c4:	f000 8135 	beq.w	7832 <usb_isr+0x5b2>
    75c8:	f200 81af 	bhi.w	792a <usb_isr+0x6aa>
    75cc:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    75d0:	f000 821b 	beq.w	7a0a <usb_isr+0x78a>
    75d4:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    75d8:	f040 822b 	bne.w	7a32 <usb_isr+0x7b2>
		usb_configuration = setup.wValue;
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    75dc:	6a22      	ldr	r2, [r4, #32]
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		break;
	  case 0x0900: // SET_CONFIGURATION
		//serial_print("configure\n");
		usb_configuration = setup.wValue;
    75de:	49a0      	ldr	r1, [pc, #640]	; (7860 <usb_isr+0x5e0>)
    75e0:	78a8      	ldrb	r0, [r5, #2]
    75e2:	7008      	strb	r0, [r1, #0]
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
    75e4:	0612      	lsls	r2, r2, #24
    75e6:	f100 8345 	bmi.w	7c74 <usb_isr+0x9f4>
    75ea:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
    75ee:	499d      	ldr	r1, [pc, #628]	; (7864 <usb_isr+0x5e4>)
    75f0:	0613      	lsls	r3, r2, #24
    75f2:	f100 833a 	bmi.w	7c6a <usb_isr+0x9ea>
    75f6:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    75fa:	499a      	ldr	r1, [pc, #616]	; (7864 <usb_isr+0x5e4>)
    75fc:	0615      	lsls	r5, r2, #24
    75fe:	f100 832f 	bmi.w	7c60 <usb_isr+0x9e0>
    7602:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
    7606:	4997      	ldr	r1, [pc, #604]	; (7864 <usb_isr+0x5e4>)
    7608:	0614      	lsls	r4, r2, #24
    760a:	f100 8324 	bmi.w	7c56 <usb_isr+0x9d6>
    760e:	f8d9 2040 	ldr.w	r2, [r9, #64]	; 0x40
    7612:	4994      	ldr	r1, [pc, #592]	; (7864 <usb_isr+0x5e4>)
    7614:	0610      	lsls	r0, r2, #24
    7616:	f100 8319 	bmi.w	7c4c <usb_isr+0x9cc>
    761a:	f8d9 2048 	ldr.w	r2, [r9, #72]	; 0x48
    761e:	4991      	ldr	r1, [pc, #580]	; (7864 <usb_isr+0x5e4>)
    7620:	0612      	lsls	r2, r2, #24
    7622:	f100 830e 	bmi.w	7c42 <usb_isr+0x9c2>
    7626:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
    762a:	498e      	ldr	r1, [pc, #568]	; (7864 <usb_isr+0x5e4>)
    762c:	0613      	lsls	r3, r2, #24
    762e:	f100 8303 	bmi.w	7c38 <usb_isr+0x9b8>
    7632:	f8d9 2058 	ldr.w	r2, [r9, #88]	; 0x58
    7636:	498b      	ldr	r1, [pc, #556]	; (7864 <usb_isr+0x5e4>)
    7638:	0615      	lsls	r5, r2, #24
    763a:	f100 82f8 	bmi.w	7c2e <usb_isr+0x9ae>
    763e:	f8d9 2060 	ldr.w	r2, [r9, #96]	; 0x60
    7642:	4988      	ldr	r1, [pc, #544]	; (7864 <usb_isr+0x5e4>)
    7644:	0614      	lsls	r4, r2, #24
    7646:	f100 8329 	bmi.w	7c9c <usb_isr+0xa1c>
    764a:	f8d9 2068 	ldr.w	r2, [r9, #104]	; 0x68
    764e:	4985      	ldr	r1, [pc, #532]	; (7864 <usb_isr+0x5e4>)
    7650:	0610      	lsls	r0, r2, #24
    7652:	f100 831e 	bmi.w	7c92 <usb_isr+0xa12>
    7656:	f8d9 2070 	ldr.w	r2, [r9, #112]	; 0x70
    765a:	4982      	ldr	r1, [pc, #520]	; (7864 <usb_isr+0x5e4>)
    765c:	0612      	lsls	r2, r2, #24
    765e:	f100 8313 	bmi.w	7c88 <usb_isr+0xa08>
    7662:	f8d9 2078 	ldr.w	r2, [r9, #120]	; 0x78
    7666:	497f      	ldr	r1, [pc, #508]	; (7864 <usb_isr+0x5e4>)
    7668:	0613      	lsls	r3, r2, #24
    766a:	f100 8308 	bmi.w	7c7e <usb_isr+0x9fe>
    766e:	f8d9 2080 	ldr.w	r2, [r9, #128]	; 0x80
    7672:	497c      	ldr	r1, [pc, #496]	; (7864 <usb_isr+0x5e4>)
    7674:	0615      	lsls	r5, r2, #24
    7676:	f100 831c 	bmi.w	7cb2 <usb_isr+0xa32>
    767a:	f8d9 2088 	ldr.w	r2, [r9, #136]	; 0x88
    767e:	4979      	ldr	r1, [pc, #484]	; (7864 <usb_isr+0x5e4>)
    7680:	0614      	lsls	r4, r2, #24
    7682:	f100 8310 	bmi.w	7ca6 <usb_isr+0xa26>
    7686:	f8d9 2090 	ldr.w	r2, [r9, #144]	; 0x90
    768a:	4976      	ldr	r1, [pc, #472]	; (7864 <usb_isr+0x5e4>)
    768c:	0610      	lsls	r0, r2, #24
    768e:	f100 82c8 	bmi.w	7c22 <usb_isr+0x9a2>
    7692:	f8d9 2098 	ldr.w	r2, [r9, #152]	; 0x98
    7696:	4973      	ldr	r1, [pc, #460]	; (7864 <usb_isr+0x5e4>)
    7698:	0612      	lsls	r2, r2, #24
    769a:	f100 82bc 	bmi.w	7c16 <usb_isr+0x996>
    769e:	4872      	ldr	r0, [pc, #456]	; (7868 <usb_isr+0x5e8>)
    76a0:	4a72      	ldr	r2, [pc, #456]	; (786c <usb_isr+0x5ec>)
    76a2:	4973      	ldr	r1, [pc, #460]	; (7870 <usb_isr+0x5f0>)
    76a4:	9001      	str	r0, [sp, #4]
    76a6:	4873      	ldr	r0, [pc, #460]	; (7874 <usb_isr+0x5f4>)
    76a8:	4d6c      	ldr	r5, [pc, #432]	; (785c <usb_isr+0x5dc>)
    76aa:	4c73      	ldr	r4, [pc, #460]	; (7878 <usb_isr+0x5f8>)
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    76ac:	9704      	str	r7, [sp, #16]
}



void usb_isr(void)
{
    76ae:	2300      	movs	r3, #0
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    76b0:	9605      	str	r6, [sp, #20]
    76b2:	9502      	str	r5, [sp, #8]
    76b4:	4680      	mov	r8, r0
    76b6:	4617      	mov	r7, r2
    76b8:	460e      	mov	r6, r1
    76ba:	461d      	mov	r5, r3
    76bc:	9403      	str	r4, [sp, #12]
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
    76be:	6838      	ldr	r0, [r7, #0]
			while (p) {
    76c0:	b128      	cbz	r0, 76ce <usb_isr+0x44e>
				n = p->next;
    76c2:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    76c4:	f000 fbbe 	bl	7e44 <usb_free>
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
			usb_packet_t *p, *n;
			p = rx_first[i];
			while (p) {
    76c8:	4620      	mov	r0, r4
    76ca:	2c00      	cmp	r4, #0
    76cc:	d1f9      	bne.n	76c2 <usb_isr+0x442>
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
    76ce:	2300      	movs	r3, #0
    76d0:	603b      	str	r3, [r7, #0]
			rx_last[i] = NULL;
    76d2:	9b02      	ldr	r3, [sp, #8]
			p = tx_first[i];
    76d4:	6830      	ldr	r0, [r6, #0]
				n = p->next;
				usb_free(p);
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
    76d6:	461a      	mov	r2, r3
    76d8:	2300      	movs	r3, #0
    76da:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
			p = tx_first[i];
			while (p) {
    76de:	b128      	cbz	r0, 76ec <usb_isr+0x46c>
				n = p->next;
    76e0:	6844      	ldr	r4, [r0, #4]
				usb_free(p);
    76e2:	f000 fbaf 	bl	7e44 <usb_free>
				p = n;
			}
			rx_first[i] = NULL;
			rx_last[i] = NULL;
			p = tx_first[i];
			while (p) {
    76e6:	4620      	mov	r0, r4
    76e8:	2c00      	cmp	r4, #0
    76ea:	d1f9      	bne.n	76e0 <usb_isr+0x460>
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
    76ec:	2200      	movs	r2, #0
    76ee:	6032      	str	r2, [r6, #0]
			tx_last[i] = NULL;
    76f0:	9a01      	ldr	r2, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    76f2:	f898 3000 	ldrb.w	r3, [r8]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    76f6:	4611      	mov	r1, r2
    76f8:	2200      	movs	r2, #0
    76fa:	f841 2b04 	str.w	r2, [r1], #4
			usb_rx_byte_count_data[i] = 0;
    76fe:	9a03      	ldr	r2, [sp, #12]
				n = p->next;
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
    7700:	9101      	str	r1, [sp, #4]
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
    7702:	3b02      	subs	r3, #2
				usb_free(p);
				p = n;
			}
			tx_first[i] = NULL;
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
    7704:	f04f 0100 	mov.w	r1, #0
    7708:	f822 1015 	strh.w	r1, [r2, r5, lsl #1]
			switch (tx_state[i]) {
    770c:	2b03      	cmp	r3, #3
    770e:	d809      	bhi.n	7724 <usb_isr+0x4a4>
    7710:	e8df f013 	tbh	[pc, r3, lsl #1]
    7714:	0004014b 	.word	0x0004014b
    7718:	0004014b 	.word	0x0004014b
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
				break;
			  case TX_STATE_ODD_FREE:
			  case TX_STATE_NONE_FREE_ODD_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    771c:	f04f 0301 	mov.w	r3, #1
    7720:	f888 3000 	strb.w	r3, [r8]
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
			}
		}
		// free all queued packets
		for (i=0; i < NUM_ENDPOINTS; i++) {
    7724:	3501      	adds	r5, #1
    7726:	2d04      	cmp	r5, #4
    7728:	f107 0704 	add.w	r7, r7, #4
    772c:	f106 0604 	add.w	r6, r6, #4
    7730:	f108 0801 	add.w	r8, r8, #1
    7734:	d1c3      	bne.n	76be <usb_isr+0x43e>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    7736:	4c51      	ldr	r4, [pc, #324]	; (787c <usb_isr+0x5fc>)
			*reg = epconf;
    7738:	4b51      	ldr	r3, [pc, #324]	; (7880 <usb_isr+0x600>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    773a:	7822      	ldrb	r2, [r4, #0]
				break;
			  default:
				break;
			}
		}
		usb_rx_memory_needed = 0;
    773c:	4d46      	ldr	r5, [pc, #280]	; (7858 <usb_isr+0x5d8>)
    773e:	9f04      	ldr	r7, [sp, #16]
    7740:	9e05      	ldr	r6, [sp, #20]
    7742:	2100      	movs	r1, #0
    7744:	7029      	strb	r1, [r5, #0]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    7746:	701a      	strb	r2, [r3, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7748:	0713      	lsls	r3, r2, #28
    774a:	f100 824f 	bmi.w	7bec <usb_isr+0x96c>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    774e:	7862      	ldrb	r2, [r4, #1]
			*reg = epconf;
    7750:	494c      	ldr	r1, [pc, #304]	; (7884 <usb_isr+0x604>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7752:	f8df 8110 	ldr.w	r8, [pc, #272]	; 7864 <usb_isr+0x5e4>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    7756:	700a      	strb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7758:	0710      	lsls	r0, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    775a:	f04f 0100 	mov.w	r1, #0
    775e:	f8c9 1030 	str.w	r1, [r9, #48]	; 0x30
			table[index(i, TX, ODD)].desc = 0;
    7762:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7766:	f100 822b 	bmi.w	7bc0 <usb_isr+0x940>
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    776a:	4947      	ldr	r1, [pc, #284]	; (7888 <usb_isr+0x608>)
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    776c:	78a2      	ldrb	r2, [r4, #2]
			*reg = epconf;
    776e:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7770:	2100      	movs	r1, #0
    7772:	f8c9 1050 	str.w	r1, [r9, #80]	; 0x50
			table[index(i, TX, ODD)].desc = 0;
    7776:	f8c9 1058 	str.w	r1, [r9, #88]	; 0x58
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    777a:	0711      	lsls	r1, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    777c:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 7864 <usb_isr+0x5e4>
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7780:	f100 81dc 	bmi.w	7b3c <usb_isr+0x8bc>
				break;
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
    7784:	78e2      	ldrb	r2, [r4, #3]
			*reg = epconf;
    7786:	4941      	ldr	r1, [pc, #260]	; (788c <usb_isr+0x60c>)
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7788:	4c36      	ldr	r4, [pc, #216]	; (7864 <usb_isr+0x5e4>)
			}
		}
		usb_rx_memory_needed = 0;
		for (i=1; i <= NUM_ENDPOINTS; i++) {
			epconf = *cfg++;
			*reg = epconf;
    778a:	700a      	strb	r2, [r1, #0]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    778c:	2100      	movs	r1, #0
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    778e:	0712      	lsls	r2, r2, #28
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    7790:	f8c9 1070 	str.w	r1, [r9, #112]	; 0x70
			table[index(i, TX, ODD)].desc = 0;
    7794:	f8c9 1078 	str.w	r1, [r9, #120]	; 0x78
				table[index(i, RX, EVEN)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
				table[index(i, RX, ODD)].addr = usb_audio_receive_buffer;
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
    7798:	f100 81b9 	bmi.w	7b0e <usb_isr+0x88e>
    779c:	7833      	ldrb	r3, [r6, #0]
    779e:	9301      	str	r3, [sp, #4]
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
				}
			}
			table[index(i, TX, EVEN)].desc = 0;
    77a0:	2100      	movs	r1, #0
    77a2:	f083 0201 	eor.w	r2, r3, #1
    77a6:	f8c9 1090 	str.w	r1, [r9, #144]	; 0x90
			table[index(i, TX, ODD)].desc = 0;
    77aa:	f8c9 1098 	str.w	r1, [r9, #152]	; 0x98
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    77ae:	2000      	movs	r0, #0
    77b0:	9002      	str	r0, [sp, #8]
    77b2:	4680      	mov	r8, r0
    77b4:	4684      	mov	ip, r0
    77b6:	4604      	mov	r4, r0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    77b8:	4935      	ldr	r1, [pc, #212]	; (7890 <usb_isr+0x610>)
    77ba:	780d      	ldrb	r5, [r1, #0]
    77bc:	f045 0e02 	orr.w	lr, r5, #2
    77c0:	eb09 03ce 	add.w	r3, r9, lr, lsl #3
    77c4:	9303      	str	r3, [sp, #12]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    77c6:	9b01      	ldr	r3, [sp, #4]
    77c8:	2b00      	cmp	r3, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    77ca:	9b03      	ldr	r3, [sp, #12]
    77cc:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    77ce:	bf0c      	ite	eq
    77d0:	2488      	moveq	r4, #136	; 0x88
    77d2:	24c8      	movne	r4, #200	; 0xc8
    77d4:	ea44 0308 	orr.w	r3, r4, r8
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    77d8:	f085 0401 	eor.w	r4, r5, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    77dc:	f849 303e 	str.w	r3, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    77e0:	7032      	strb	r2, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    77e2:	700c      	strb	r4, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    77e4:	f8df e07c 	ldr.w	lr, [pc, #124]	; 7864 <usb_isr+0x5e4>
	ep0_tx_data_toggle ^= 1;
    77e8:	4b2a      	ldr	r3, [pc, #168]	; (7894 <usb_isr+0x614>)
	ep0_tx_bdt_bank ^= 1;
    77ea:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 7890 <usb_isr+0x610>
	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    77ee:	2800      	cmp	r0, #0
    77f0:	f040 8126 	bne.w	7a40 <usb_isr+0x7c0>
    77f4:	f1bc 0f40 	cmp.w	ip, #64	; 0x40
    77f8:	d11b      	bne.n	7832 <usb_isr+0x5b2>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    77fa:	f044 0c02 	orr.w	ip, r4, #2
    77fe:	eb09 03cc 	add.w	r3, r9, ip, lsl #3
    7802:	9c02      	ldr	r4, [sp, #8]
    7804:	f8df e05c 	ldr.w	lr, [pc, #92]	; 7864 <usb_isr+0x5e4>
    7808:	605c      	str	r4, [r3, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    780a:	2a00      	cmp	r2, #0
    780c:	f040 812e 	bne.w	7a6c <usb_isr+0x7ec>
    7810:	0402      	lsls	r2, r0, #16
    7812:	f042 0288 	orr.w	r2, r2, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    7816:	f89d 3004 	ldrb.w	r3, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    781a:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    781e:	4404      	add	r4, r0
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    7820:	7033      	strb	r3, [r6, #0]
	ep0_tx_bdt_bank ^= 1;
    7822:	700d      	strb	r5, [r1, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7824:	4623      	mov	r3, r4
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;
    7826:	2840      	cmp	r0, #64	; 0x40
    7828:	d103      	bne.n	7832 <usb_isr+0x5b2>
    782a:	2000      	movs	r0, #0

	ep0_tx_ptr = data;
	ep0_tx_len = datalen;
    782c:	4a1a      	ldr	r2, [pc, #104]	; (7898 <usb_isr+0x618>)
	endpoint0_transmit(data, size);
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	ep0_tx_ptr = data;
    782e:	603b      	str	r3, [r7, #0]
	ep0_tx_len = datalen;
    7830:	8010      	strh	r0, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    7832:	4a1a      	ldr	r2, [pc, #104]	; (789c <usb_isr+0x61c>)
    7834:	2301      	movs	r3, #1
    7836:	7013      	strb	r3, [r2, #0]
    7838:	e628      	b.n	748c <usb_isr+0x20c>
					}
					b->desc = BDT_DESC(packet->len,
						((uint32_t)b & 8) ? DATA1 : DATA0);
				} else {
					//serial_print("tx no packet\n");
					switch (tx_state[endpoint]) {
    783a:	5d8b      	ldrb	r3, [r1, r6]
    783c:	2b03      	cmp	r3, #3
    783e:	f200 812d 	bhi.w	7a9c <usb_isr+0x81c>
    7842:	a201      	add	r2, pc, #4	; (adr r2, 7848 <usb_isr+0x5c8>)
    7844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7848:	00007315 	.word	0x00007315
    784c:	00007315 	.word	0x00007315
    7850:	0000799f 	.word	0x0000799f
    7854:	000079a5 	.word	0x000079a5
    7858:	1fff97fd 	.word	0x1fff97fd
    785c:	1fff972c 	.word	0x1fff972c
    7860:	1fff9808 	.word	0x1fff9808
    7864:	1fff8000 	.word	0x1fff8000
    7868:	1fff97e4 	.word	0x1fff97e4
    786c:	1fff9780 	.word	0x1fff9780
    7870:	1fff97d4 	.word	0x1fff97d4
    7874:	1fff980c 	.word	0x1fff980c
    7878:	1fff987c 	.word	0x1fff987c
    787c:	0001b984 	.word	0x0001b984
    7880:	400720c4 	.word	0x400720c4
    7884:	400720c8 	.word	0x400720c8
    7888:	400720cc 	.word	0x400720cc
    788c:	400720d0 	.word	0x400720d0
    7890:	1fff97fc 	.word	0x1fff97fc
    7894:	1fff9790 	.word	0x1fff9790
    7898:	1fff973c 	.word	0x1fff973c
    789c:	40072094 	.word	0x40072094
	case 0x02:
		//serial_print("PID=OUT\n");
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
			int i;
			uint32_t *line_coding = NULL;
			switch (setup.wIndex) {
    78a0:	8892      	ldrh	r2, [r2, #4]
    78a2:	b992      	cbnz	r2, 78ca <usb_isr+0x64a>
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    78a4:	4ab1      	ldr	r2, [pc, #708]	; (7b6c <usb_isr+0x8ec>)
    78a6:	780d      	ldrb	r5, [r1, #0]
    78a8:	7848      	ldrb	r0, [r1, #1]
    78aa:	7015      	strb	r5, [r2, #0]
    78ac:	7050      	strb	r0, [r2, #1]
    78ae:	788d      	ldrb	r5, [r1, #2]
    78b0:	78c8      	ldrb	r0, [r1, #3]
    78b2:	7095      	strb	r5, [r2, #2]
    78b4:	70d0      	strb	r0, [r2, #3]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    78b6:	6810      	ldr	r0, [r2, #0]
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    78b8:	790d      	ldrb	r5, [r1, #4]
    78ba:	7115      	strb	r5, [r2, #4]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    78bc:	2886      	cmp	r0, #134	; 0x86
			if (line_coding) {
				uint8_t *dst = (uint8_t *)line_coding;
				//serial_print("set line coding ");
				for (i=0; i<7; i++) {
					//serial_phex(*buf);
					*dst++ = *buf++;
    78be:	794d      	ldrb	r5, [r1, #5]
    78c0:	7989      	ldrb	r1, [r1, #6]
    78c2:	7155      	strb	r5, [r2, #5]
    78c4:	7191      	strb	r1, [r2, #6]
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    78c6:	f000 80a5 	beq.w	7a14 <usb_isr+0x794>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    78ca:	49a9      	ldr	r1, [pc, #676]	; (7b70 <usb_isr+0x8f0>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    78cc:	4ea9      	ldr	r6, [pc, #676]	; (7b74 <usb_isr+0x8f4>)
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    78ce:	780a      	ldrb	r2, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    78d0:	7830      	ldrb	r0, [r6, #0]
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    78d2:	f082 0501 	eor.w	r5, r2, #1
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    78d6:	2800      	cmp	r0, #0
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    78d8:	f042 0202 	orr.w	r2, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    78dc:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    78de:	bf0c      	ite	eq
    78e0:	2188      	moveq	r1, #136	; 0x88
    78e2:	21c8      	movne	r1, #200	; 0xc8
    78e4:	f849 1032 	str.w	r1, [r9, r2, lsl #3]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    78e8:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    78ec:	f080 0001 	eor.w	r0, r0, #1
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    78f0:	2100      	movs	r1, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
    78f2:	7030      	strb	r0, [r6, #0]
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    78f4:	6051      	str	r1, [r2, #4]
    78f6:	e5d4      	b.n	74a2 <usb_isr+0x222>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    78f8:	f240 3202 	movw	r2, #770	; 0x302
    78fc:	4291      	cmp	r1, r2
    78fe:	f040 808d 	bne.w	7a1c <usb_isr+0x79c>
    7902:	88a9      	ldrh	r1, [r5, #4]
    7904:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
		// TODO: do we need to clear the data toggle here?
		break;
	  case 0x0302: // SET_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    7908:	2904      	cmp	r1, #4
    790a:	f200 8092 	bhi.w	7a32 <usb_isr+0x7b2>
    790e:	886a      	ldrh	r2, [r5, #2]
    7910:	2a00      	cmp	r2, #0
    7912:	f040 808e 	bne.w	7a32 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    7916:	4898      	ldr	r0, [pc, #608]	; (7b78 <usb_isr+0x8f8>)
    7918:	f8cd e004 	str.w	lr, [sp, #4]
    791c:	0089      	lsls	r1, r1, #2
    791e:	4408      	add	r0, r1
    7920:	7801      	ldrb	r1, [r0, #0]
    7922:	f041 0102 	orr.w	r1, r1, #2
    7926:	7001      	strb	r1, [r0, #0]
    7928:	e741      	b.n	77ae <usb_isr+0x52e>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    792a:	f242 2021 	movw	r0, #8737	; 0x2221
    792e:	4281      	cmp	r1, r0
    7930:	d17b      	bne.n	7a2a <usb_isr+0x7aa>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    7932:	88a9      	ldrh	r1, [r5, #4]
    7934:	2900      	cmp	r1, #0
    7936:	f040 80e4 	bne.w	7b02 <usb_isr+0x882>
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    793a:	4b90      	ldr	r3, [pc, #576]	; (7b7c <usb_isr+0x8fc>)
    793c:	4a90      	ldr	r2, [pc, #576]	; (7b80 <usb_isr+0x900>)
			usb_cdc_line_rtsdtr = setup.wValue;
    793e:	4891      	ldr	r0, [pc, #580]	; (7b84 <usb_isr+0x904>)
    7940:	78ac      	ldrb	r4, [r5, #2]
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
#ifdef CDC_STATUS_INTERFACE
		  case CDC_STATUS_INTERFACE:
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    7942:	681d      	ldr	r5, [r3, #0]
    7944:	6015      	str	r5, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    7946:	f8cd e004 	str.w	lr, [sp, #4]
    794a:	460a      	mov	r2, r1
    794c:	7004      	strb	r4, [r0, #0]
    794e:	e72e      	b.n	77ae <usb_isr+0x52e>
		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    7950:	4b8d      	ldr	r3, [pc, #564]	; (7b88 <usb_isr+0x908>)

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    7952:	488e      	ldr	r0, [pc, #568]	; (7b8c <usb_isr+0x90c>)
		ep0_tx_bdt_bank = 0;
    7954:	4986      	ldr	r1, [pc, #536]	; (7b70 <usb_isr+0x8f0>)
		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
    7956:	611a      	str	r2, [r3, #16]

	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
    7958:	f04f 0e02 	mov.w	lr, #2
    795c:	f880 e000 	strb.w	lr, [r0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    7960:	4f85      	ldr	r7, [pc, #532]	; (7b78 <usb_isr+0x8f8>)
	if (status & USB_ISTAT_USBRST /* 01 */ ) {
		//serial_print("reset\n");

		// initialize BDT toggle bits
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;
    7962:	700a      	strb	r2, [r1, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    7964:	498a      	ldr	r1, [pc, #552]	; (7b90 <usb_isr+0x910>)
    7966:	6019      	str	r1, [r3, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    7968:	6099      	str	r1, [r3, #8]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    796a:	4e8a      	ldr	r6, [pc, #552]	; (7b94 <usb_isr+0x914>)
		USB0_ISTAT = 0xFF;
    796c:	4d8a      	ldr	r5, [pc, #552]	; (7b98 <usb_isr+0x918>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    796e:	4c8b      	ldr	r4, [pc, #556]	; (7b9c <usb_isr+0x91c>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
		table[index(0, TX, EVEN)].desc = 0;
		table[index(0, TX, ODD)].desc = 0;
    7970:	619a      	str	r2, [r3, #24]

		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    7972:	210d      	movs	r1, #13
    7974:	7039      	strb	r1, [r7, #0]

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
    7976:	21ff      	movs	r1, #255	; 0xff
    7978:	7031      	strb	r1, [r6, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    797a:	f8df e240 	ldr.w	lr, [pc, #576]	; 7bbc <usb_isr+0x93c>
		// activate endpoint 0
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;

		// clear all ending interrupts
		USB0_ERRSTAT = 0xFF;
		USB0_ISTAT = 0xFF;
    797e:	7029      	strb	r1, [r5, #0]

		// set the address to zero during enumeration
		USB0_ADDR = 0;
    7980:	7022      	strb	r2, [r4, #0]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    7982:	4d87      	ldr	r5, [pc, #540]	; (7ba0 <usb_isr+0x920>)
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    7984:	4a87      	ldr	r2, [pc, #540]	; (7ba4 <usb_isr+0x924>)

		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
    7986:	f88e 1000 	strb.w	r1, [lr]
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    798a:	279f      	movs	r7, #159	; 0x9f
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    798c:	2401      	movs	r4, #1
		// set the address to zero during enumeration
		USB0_ADDR = 0;

		// enable other interrupts
		USB0_ERREN = 0xFF;
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    798e:	f806 7c04 	strb.w	r7, [r6, #-4]
		USB0_CTL = USB_CTL_ODDRST;
		ep0_tx_bdt_bank = 0;

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    7992:	605d      	str	r5, [r3, #4]
			USB_INTEN_ERROREN |
			USB_INTEN_USBRSTEN |
			USB_INTEN_SLEEPEN;

		// is this necessary?
		USB0_CTL = USB_CTL_USBENSOFEN;
    7994:	7004      	strb	r4, [r0, #0]

		// set up buffers to receive Setup and OUT packets
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    7996:	60da      	str	r2, [r3, #12]
	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
	}

}
    7998:	b007      	add	sp, #28
    799a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					switch (tx_state[endpoint]) {
					  case TX_STATE_BOTH_FREE_EVEN_FIRST:
					  case TX_STATE_BOTH_FREE_ODD_FIRST:
						break;
					  case TX_STATE_EVEN_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    799e:	2300      	movs	r3, #0
    79a0:	558b      	strb	r3, [r1, r6]
						break;
    79a2:	e4b7      	b.n	7314 <usb_isr+0x94>
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    79a4:	2301      	movs	r3, #1
    79a6:	558b      	strb	r3, [r1, r6]
						break;
    79a8:	e4b4      	b.n	7314 <usb_isr+0x94>
			tx_last[i] = NULL;
			usb_rx_byte_count_data[i] = 0;
			switch (tx_state[i]) {
			  case TX_STATE_EVEN_FREE:
			  case TX_STATE_NONE_FREE_EVEN_FIRST:
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    79aa:	f04f 0300 	mov.w	r3, #0
    79ae:	f888 3000 	strb.w	r3, [r8]
    79b2:	e6b7      	b.n	7724 <usb_isr+0x4a4>
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    79b4:	4970      	ldr	r1, [pc, #448]	; (7b78 <usb_isr+0x8f8>)
		USB0_ISTAT = USB_ISTAT_STALL;
    79b6:	4b78      	ldr	r3, [pc, #480]	; (7b98 <usb_isr+0x918>)
    79b8:	2280      	movs	r2, #128	; 0x80
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    79ba:	200d      	movs	r0, #13
    79bc:	7008      	strb	r0, [r1, #0]
		USB0_ISTAT = USB_ISTAT_STALL;
    79be:	701a      	strb	r2, [r3, #0]
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    79c0:	07a2      	lsls	r2, r4, #30
    79c2:	f57f adb7 	bpl.w	7534 <usb_isr+0x2b4>
    79c6:	e5ae      	b.n	7526 <usb_isr+0x2a6>
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    79c8:	4c77      	ldr	r4, [pc, #476]	; (7ba8 <usb_isr+0x928>)
		reply_buffer[1] = 0;
		datalen = 2;
    79ca:	f04f 0e02 	mov.w	lr, #2
		reply_buffer[0] = usb_configuration;
		datalen = 1;
		data = reply_buffer;
		break;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    79ce:	7022      	strb	r2, [r4, #0]
		reply_buffer[1] = 0;
    79d0:	7062      	strb	r2, [r4, #1]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    79d2:	88ea      	ldrh	r2, [r5, #6]
    79d4:	4572      	cmp	r2, lr
    79d6:	f080 81a3 	bcs.w	7d20 <usb_isr+0xaa0>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    79da:	4965      	ldr	r1, [pc, #404]	; (7b70 <usb_isr+0x8f0>)
    79dc:	780d      	ldrb	r5, [r1, #0]
    79de:	2a40      	cmp	r2, #64	; 0x40
    79e0:	4694      	mov	ip, r2
    79e2:	f045 0e02 	orr.w	lr, r5, #2
    79e6:	bf28      	it	cs
    79e8:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    79ec:	eb04 030c 	add.w	r3, r4, ip
    79f0:	eb09 00ce 	add.w	r0, r9, lr, lsl #3
    79f4:	9302      	str	r3, [sp, #8]
    79f6:	2301      	movs	r3, #1
    79f8:	6044      	str	r4, [r0, #4]
    79fa:	ea4f 480c 	mov.w	r8, ip, lsl #16
    79fe:	ebcc 0002 	rsb	r0, ip, r2
    7a02:	9301      	str	r3, [sp, #4]
    7a04:	2200      	movs	r2, #0
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a06:	24c8      	movs	r4, #200	; 0xc8
    7a08:	e6e4      	b.n	77d4 <usb_isr+0x554>
			}
#endif
		}
		break;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    7a0a:	4a68      	ldr	r2, [pc, #416]	; (7bac <usb_isr+0x92c>)
    7a0c:	4c66      	ldr	r4, [pc, #408]	; (7ba8 <usb_isr+0x928>)
    7a0e:	7812      	ldrb	r2, [r2, #0]
    7a10:	7022      	strb	r2, [r4, #0]
    7a12:	e7de      	b.n	79d2 <usb_isr+0x752>
					//serial_phex(*buf);
					*dst++ = *buf++;
				}
				//serial_phex32(line_coding[0]);
				//serial_print("\n");
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    7a14:	4a66      	ldr	r2, [pc, #408]	; (7bb0 <usb_isr+0x930>)
    7a16:	210f      	movs	r1, #15
    7a18:	7011      	strb	r1, [r2, #0]
    7a1a:	e756      	b.n	78ca <usb_isr+0x64a>
	volatile uint8_t *reg;
	uint8_t epconf;
	const uint8_t *cfg;
	int i;

	switch (setup.wRequestAndType) {
    7a1c:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    7a20:	d107      	bne.n	7a32 <usb_isr+0x7b2>
    7a22:	2301      	movs	r3, #1
    7a24:	2200      	movs	r2, #0
    7a26:	9301      	str	r3, [sp, #4]
    7a28:	e6c1      	b.n	77ae <usb_isr+0x52e>
    7a2a:	f242 3221 	movw	r2, #8993	; 0x2321
    7a2e:	4291      	cmp	r1, r2
    7a30:	d0f7      	beq.n	7a22 <usb_isr+0x7a2>
volatile uint8_t usb_reboot_timer = 0;


static void endpoint0_stall(void)
{
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    7a32:	4a51      	ldr	r2, [pc, #324]	; (7b78 <usb_isr+0x8f8>)
    7a34:	230f      	movs	r3, #15
    7a36:	7013      	strb	r3, [r2, #0]
		serial_print("\n");
#endif
		// actually "do" the setup request
		usb_setup();
		// unfreeze the USB, now that we're ready
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    7a38:	4a54      	ldr	r2, [pc, #336]	; (7b8c <usb_isr+0x90c>)
    7a3a:	2301      	movs	r3, #1
    7a3c:	7013      	strb	r3, [r2, #0]
    7a3e:	e525      	b.n	748c <usb_isr+0x20c>
	data += size;
	datalen -= size;
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
    7a40:	2840      	cmp	r0, #64	; 0x40
    7a42:	f67f aeda 	bls.w	77fa <usb_isr+0x57a>
	serial_print(",");
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    7a46:	f044 0402 	orr.w	r4, r4, #2
    7a4a:	eb0e 01c4 	add.w	r1, lr, r4, lsl #3
    7a4e:	9e02      	ldr	r6, [sp, #8]
    7a50:	604e      	str	r6, [r1, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a52:	b1ba      	cbz	r2, 7a84 <usb_isr+0x804>
	ep0_tx_data_toggle ^= 1;
    7a54:	f89d 1004 	ldrb.w	r1, [sp, #4]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a58:	4a56      	ldr	r2, [pc, #344]	; (7bb4 <usb_isr+0x934>)
	ep0_tx_data_toggle ^= 1;
    7a5a:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7a5c:	4633      	mov	r3, r6
    7a5e:	3840      	subs	r0, #64	; 0x40
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7a60:	f888 5000 	strb.w	r5, [r8]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7a64:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a66:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    7a6a:	e6df      	b.n	782c <usb_isr+0x5ac>
	ep0_tx_data_toggle ^= 1;
    7a6c:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7a70:	7033      	strb	r3, [r6, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a72:	0402      	lsls	r2, r0, #16
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7a74:	9b02      	ldr	r3, [sp, #8]
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7a76:	700d      	strb	r5, [r1, #0]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a78:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7a7c:	4403      	add	r3, r0
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a7e:	f84e 203c 	str.w	r2, [lr, ip, lsl #3]
    7a82:	e6d0      	b.n	7826 <usb_isr+0x5a6>
	ep0_tx_data_toggle ^= 1;
    7a84:	f89d 1004 	ldrb.w	r1, [sp, #4]
    7a88:	7019      	strb	r1, [r3, #0]
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7a8a:	9b02      	ldr	r3, [sp, #8]
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a8c:	4a40      	ldr	r2, [pc, #256]	; (7b90 <usb_isr+0x910>)
	ep0_tx_data_toggle ^= 1;
	ep0_tx_bdt_bank ^= 1;
    7a8e:	f888 5000 	strb.w	r5, [r8]
    7a92:	3840      	subs	r0, #64	; 0x40
	if (datalen == 0 && size < EP0_SIZE) return;

	size = datalen;
	if (size > EP0_SIZE) size = EP0_SIZE;
	endpoint0_transmit(data, size);
	data += size;
    7a94:	3340      	adds	r3, #64	; 0x40
	serial_phex16(len);
	serial_print(ep0_tx_bdt_bank ? ", odd" : ", even");
	serial_print(ep0_tx_data_toggle ? ", d1\n" : ", d0\n");
#endif
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    7a96:	f84e 2034 	str.w	r2, [lr, r4, lsl #3]
    7a9a:	e6c7      	b.n	782c <usb_isr+0x5ac>
						break;
					  case TX_STATE_ODD_FREE:
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
						break;
					  default:
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    7a9c:	f019 0f08 	tst.w	r9, #8
    7aa0:	bf0c      	ite	eq
    7aa2:	2302      	moveq	r3, #2
    7aa4:	2303      	movne	r3, #3
    7aa6:	558b      	strb	r3, [r1, r6]
						  TX_STATE_ODD_FREE : TX_STATE_EVEN_FREE;
						break;
    7aa8:	e434      	b.n	7314 <usb_isr+0x94>
    7aaa:	88a9      	ldrh	r1, [r5, #4]
    7aac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
		data = reply_buffer;
		datalen = 2;
		break;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		i = setup.wIndex & 0x7F;
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    7ab0:	2904      	cmp	r1, #4
    7ab2:	d8be      	bhi.n	7a32 <usb_isr+0x7b2>
    7ab4:	886a      	ldrh	r2, [r5, #2]
    7ab6:	2a00      	cmp	r2, #0
    7ab8:	d1bb      	bne.n	7a32 <usb_isr+0x7b2>
			// TODO: do we need to handle IN vs OUT here?
			endpoint0_stall();
			return;
		}
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    7aba:	482f      	ldr	r0, [pc, #188]	; (7b78 <usb_isr+0x8f8>)
    7abc:	f8cd e004 	str.w	lr, [sp, #4]
    7ac0:	0089      	lsls	r1, r1, #2
    7ac2:	4408      	add	r0, r1
    7ac4:	7801      	ldrb	r1, [r0, #0]
    7ac6:	f021 0102 	bic.w	r1, r1, #2
    7aca:	7001      	strb	r1, [r0, #0]
    7acc:	e66f      	b.n	77ae <usb_isr+0x52e>
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
			if (list->addr == NULL) break;
    7ace:	4a3a      	ldr	r2, [pc, #232]	; (7bb8 <usb_isr+0x938>)
    7ad0:	6854      	ldr	r4, [r2, #4]
    7ad2:	2c00      	cmp	r4, #0
    7ad4:	d0ad      	beq.n	7a32 <usb_isr+0x7b2>
    7ad6:	8868      	ldrh	r0, [r5, #2]
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    7ad8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
    7adc:	e003      	b.n	7ae6 <usb_isr+0x866>
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		//serial_print("desc:");
		//serial_phex16(setup.wValue);
		//serial_print("\n");
		for (list = usb_descriptor_list; 1; list++) {
    7ade:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    7ae0:	6854      	ldr	r4, [r2, #4]
    7ae2:	2c00      	cmp	r4, #0
    7ae4:	d0a5      	beq.n	7a32 <usb_isr+0x7b2>
			//if (setup.wValue == list->wValue &&
			//(setup.wIndex == list->wIndex) || ((setup.wValue >> 8) == 3)) {
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    7ae6:	8813      	ldrh	r3, [r2, #0]
    7ae8:	4283      	cmp	r3, r0
    7aea:	d1f8      	bne.n	7ade <usb_isr+0x85e>
    7aec:	8853      	ldrh	r3, [r2, #2]
    7aee:	4573      	cmp	r3, lr
    7af0:	d1f5      	bne.n	7ade <usb_isr+0x85e>
				data = list->addr;
				if ((setup.wValue >> 8) == 3) {
    7af2:	0a00      	lsrs	r0, r0, #8
    7af4:	2803      	cmp	r0, #3
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured
					// length.
					datalen = *(list->addr);
    7af6:	bf0c      	ite	eq
    7af8:	f894 e000 	ldrbeq.w	lr, [r4]
				} else {
					datalen = list->length;
    7afc:	f8b2 e008 	ldrhne.w	lr, [r2, #8]
    7b00:	e767      	b.n	79d2 <usb_isr+0x752>
		}
		//serial_print("desc: not found\n");
		endpoint0_stall();
		return;
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		switch (setup.wIndex) {
    7b02:	f8cd e004 	str.w	lr, [sp, #4]
    7b06:	e652      	b.n	77ae <usb_isr+0x52e>
		}
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
		data = reply_buffer;
		datalen = 2;
    7b08:	f04f 0e02 	mov.w	lr, #2
    7b0c:	e761      	b.n	79d2 <usb_isr+0x752>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7b0e:	f000 f979 	bl	7e04 <usb_malloc>
				if (p) {
    7b12:	2800      	cmp	r0, #0
    7b14:	f000 80f1 	beq.w	7cfa <usb_isr+0xa7a>
					table[index(i, RX, EVEN)].addr = p->buf;
    7b18:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7b1a:	4a1d      	ldr	r2, [pc, #116]	; (7b90 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7b1c:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7b20:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    7b24:	f000 f96e 	bl	7e04 <usb_malloc>
				if (p) {
    7b28:	2800      	cmp	r0, #0
    7b2a:	f000 80e0 	beq.w	7cee <usb_isr+0xa6e>
					table[index(i, RX, ODD)].addr = p->buf;
    7b2e:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7b30:	4a20      	ldr	r2, [pc, #128]	; (7bb4 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    7b32:	f8c9 008c 	str.w	r0, [r9, #140]	; 0x8c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7b36:	f8c9 2088 	str.w	r2, [r9, #136]	; 0x88
    7b3a:	e62f      	b.n	779c <usb_isr+0x51c>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7b3c:	f000 f962 	bl	7e04 <usb_malloc>
				if (p) {
    7b40:	2800      	cmp	r0, #0
    7b42:	f000 80e6 	beq.w	7d12 <usb_isr+0xa92>
					table[index(i, RX, EVEN)].addr = p->buf;
    7b46:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7b48:	4a11      	ldr	r2, [pc, #68]	; (7b90 <usb_isr+0x910>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7b4a:	f8c8 0064 	str.w	r0, [r8, #100]	; 0x64
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7b4e:	f8c8 2060 	str.w	r2, [r8, #96]	; 0x60
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    7b52:	f000 f957 	bl	7e04 <usb_malloc>
				if (p) {
    7b56:	2800      	cmp	r0, #0
    7b58:	f000 80d5 	beq.w	7d06 <usb_isr+0xa86>
					table[index(i, RX, ODD)].addr = p->buf;
    7b5c:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7b5e:	4a15      	ldr	r2, [pc, #84]	; (7bb4 <usb_isr+0x934>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    7b60:	f8c9 006c 	str.w	r0, [r9, #108]	; 0x6c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7b64:	f8c9 2068 	str.w	r2, [r9, #104]	; 0x68
    7b68:	e60c      	b.n	7784 <usb_isr+0x504>
    7b6a:	bf00      	nop
    7b6c:	1fff9884 	.word	0x1fff9884
    7b70:	1fff97fc 	.word	0x1fff97fc
    7b74:	1fff9790 	.word	0x1fff9790
    7b78:	400720c0 	.word	0x400720c0
    7b7c:	1fff9724 	.word	0x1fff9724
    7b80:	1fff988c 	.word	0x1fff988c
    7b84:	1fff9820 	.word	0x1fff9820
    7b88:	1fff8000 	.word	0x1fff8000
    7b8c:	40072094 	.word	0x40072094
    7b90:	00400088 	.word	0x00400088
    7b94:	40072088 	.word	0x40072088
    7b98:	40072080 	.word	0x40072080
    7b9c:	40072098 	.word	0x40072098
    7ba0:	1fff9740 	.word	0x1fff9740
    7ba4:	1fff9794 	.word	0x1fff9794
    7ba8:	1fff9800 	.word	0x1fff9800
    7bac:	1fff9808 	.word	0x1fff9808
    7bb0:	1fff9791 	.word	0x1fff9791
    7bb4:	004000c8 	.word	0x004000c8
    7bb8:	0001b988 	.word	0x0001b988
    7bbc:	4007208c 	.word	0x4007208c
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7bc0:	f000 f920 	bl	7e04 <usb_malloc>
				if (p) {
    7bc4:	2800      	cmp	r0, #0
    7bc6:	f000 808c 	beq.w	7ce2 <usb_isr+0xa62>
					table[index(i, RX, EVEN)].addr = p->buf;
    7bca:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7bcc:	4a5d      	ldr	r2, [pc, #372]	; (7d44 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7bce:	f8c8 0044 	str.w	r0, [r8, #68]	; 0x44
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7bd2:	f8c8 2040 	str.w	r2, [r8, #64]	; 0x40
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    7bd6:	f000 f915 	bl	7e04 <usb_malloc>
				if (p) {
    7bda:	2800      	cmp	r0, #0
    7bdc:	d07b      	beq.n	7cd6 <usb_isr+0xa56>
					table[index(i, RX, ODD)].addr = p->buf;
    7bde:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7be0:	4a59      	ldr	r2, [pc, #356]	; (7d48 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    7be2:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7be6:	f8c9 2048 	str.w	r2, [r9, #72]	; 0x48
    7bea:	e5be      	b.n	776a <usb_isr+0x4ea>
				table[index(i, RX, ODD)].desc = (AUDIO_RX_SIZE<<16) | BDT_OWN;
			} else
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
    7bec:	f000 f90a 	bl	7e04 <usb_malloc>
				if (p) {
    7bf0:	2800      	cmp	r0, #0
    7bf2:	d06a      	beq.n	7cca <usb_isr+0xa4a>
					table[index(i, RX, EVEN)].addr = p->buf;
    7bf4:	3008      	adds	r0, #8
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7bf6:	4a53      	ldr	r2, [pc, #332]	; (7d44 <usb_isr+0xac4>)
#endif
			if (epconf & USB_ENDPT_EPRXEN) {
				usb_packet_t *p;
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
    7bf8:	f8c9 0024 	str.w	r0, [r9, #36]	; 0x24
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    7bfc:	f8c9 2020 	str.w	r2, [r9, #32]
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
    7c00:	f000 f900 	bl	7e04 <usb_malloc>
				if (p) {
    7c04:	2800      	cmp	r0, #0
    7c06:	d05a      	beq.n	7cbe <usb_isr+0xa3e>
					table[index(i, RX, ODD)].addr = p->buf;
    7c08:	3008      	adds	r0, #8
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7c0a:	4a4f      	ldr	r2, [pc, #316]	; (7d48 <usb_isr+0xac8>)
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
				}
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
    7c0c:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    7c10:	f8c9 2028 	str.w	r2, [r9, #40]	; 0x28
    7c14:	e59b      	b.n	774e <usb_isr+0x4ce>
		reg = &USB0_ENDPT1;
		cfg = usb_endpoint_config_table;
		// clear all BDT entries, free any allocated memory...
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
			if (table[i].desc & BDT_OWN) {
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    7c16:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
    7c1a:	3808      	subs	r0, #8
    7c1c:	f000 f912 	bl	7e44 <usb_free>
    7c20:	e53d      	b.n	769e <usb_isr+0x41e>
    7c22:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
    7c26:	3808      	subs	r0, #8
    7c28:	f000 f90c 	bl	7e44 <usb_free>
    7c2c:	e531      	b.n	7692 <usb_isr+0x412>
    7c2e:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
    7c30:	3808      	subs	r0, #8
    7c32:	f000 f907 	bl	7e44 <usb_free>
    7c36:	e502      	b.n	763e <usb_isr+0x3be>
    7c38:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7c3a:	3808      	subs	r0, #8
    7c3c:	f000 f902 	bl	7e44 <usb_free>
    7c40:	e4f7      	b.n	7632 <usb_isr+0x3b2>
    7c42:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
    7c44:	3808      	subs	r0, #8
    7c46:	f000 f8fd 	bl	7e44 <usb_free>
    7c4a:	e4ec      	b.n	7626 <usb_isr+0x3a6>
    7c4c:	6c48      	ldr	r0, [r1, #68]	; 0x44
    7c4e:	3808      	subs	r0, #8
    7c50:	f000 f8f8 	bl	7e44 <usb_free>
    7c54:	e4e1      	b.n	761a <usb_isr+0x39a>
    7c56:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    7c58:	3808      	subs	r0, #8
    7c5a:	f000 f8f3 	bl	7e44 <usb_free>
    7c5e:	e4d6      	b.n	760e <usb_isr+0x38e>
    7c60:	6b48      	ldr	r0, [r1, #52]	; 0x34
    7c62:	3808      	subs	r0, #8
    7c64:	f000 f8ee 	bl	7e44 <usb_free>
    7c68:	e4cb      	b.n	7602 <usb_isr+0x382>
    7c6a:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
    7c6c:	3808      	subs	r0, #8
    7c6e:	f000 f8e9 	bl	7e44 <usb_free>
    7c72:	e4c0      	b.n	75f6 <usb_isr+0x376>
    7c74:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7c76:	3808      	subs	r0, #8
    7c78:	f000 f8e4 	bl	7e44 <usb_free>
    7c7c:	e4b5      	b.n	75ea <usb_isr+0x36a>
    7c7e:	6fc8      	ldr	r0, [r1, #124]	; 0x7c
    7c80:	3808      	subs	r0, #8
    7c82:	f000 f8df 	bl	7e44 <usb_free>
    7c86:	e4f2      	b.n	766e <usb_isr+0x3ee>
    7c88:	6f48      	ldr	r0, [r1, #116]	; 0x74
    7c8a:	3808      	subs	r0, #8
    7c8c:	f000 f8da 	bl	7e44 <usb_free>
    7c90:	e4e7      	b.n	7662 <usb_isr+0x3e2>
    7c92:	6ec8      	ldr	r0, [r1, #108]	; 0x6c
    7c94:	3808      	subs	r0, #8
    7c96:	f000 f8d5 	bl	7e44 <usb_free>
    7c9a:	e4dc      	b.n	7656 <usb_isr+0x3d6>
    7c9c:	6e48      	ldr	r0, [r1, #100]	; 0x64
    7c9e:	3808      	subs	r0, #8
    7ca0:	f000 f8d0 	bl	7e44 <usb_free>
    7ca4:	e4d1      	b.n	764a <usb_isr+0x3ca>
    7ca6:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
    7caa:	3808      	subs	r0, #8
    7cac:	f000 f8ca 	bl	7e44 <usb_free>
    7cb0:	e4e9      	b.n	7686 <usb_isr+0x406>
    7cb2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
    7cb6:	3808      	subs	r0, #8
    7cb8:	f000 f8c4 	bl	7e44 <usb_free>
    7cbc:	e4dd      	b.n	767a <usb_isr+0x3fa>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    7cbe:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    7cc0:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
					usb_rx_memory_needed++;
    7cc4:	3201      	adds	r2, #1
    7cc6:	702a      	strb	r2, [r5, #0]
    7cc8:	e541      	b.n	774e <usb_isr+0x4ce>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    7cca:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    7ccc:	f8c9 0020 	str.w	r0, [r9, #32]
					usb_rx_memory_needed++;
    7cd0:	3201      	adds	r2, #1
    7cd2:	702a      	strb	r2, [r5, #0]
    7cd4:	e794      	b.n	7c00 <usb_isr+0x980>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    7cd6:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    7cd8:	f8c9 0048 	str.w	r0, [r9, #72]	; 0x48
					usb_rx_memory_needed++;
    7cdc:	3201      	adds	r2, #1
    7cde:	702a      	strb	r2, [r5, #0]
    7ce0:	e543      	b.n	776a <usb_isr+0x4ea>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    7ce2:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    7ce4:	f8c8 0040 	str.w	r0, [r8, #64]	; 0x40
					usb_rx_memory_needed++;
    7ce8:	3201      	adds	r2, #1
    7cea:	702a      	strb	r2, [r5, #0]
    7cec:	e773      	b.n	7bd6 <usb_isr+0x956>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    7cee:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    7cf0:	f8c9 0088 	str.w	r0, [r9, #136]	; 0x88
					usb_rx_memory_needed++;
    7cf4:	3201      	adds	r2, #1
    7cf6:	702a      	strb	r2, [r5, #0]
    7cf8:	e550      	b.n	779c <usb_isr+0x51c>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    7cfa:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    7cfc:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
					usb_rx_memory_needed++;
    7d00:	3201      	adds	r2, #1
    7d02:	702a      	strb	r2, [r5, #0]
    7d04:	e70e      	b.n	7b24 <usb_isr+0x8a4>
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
					usb_rx_memory_needed++;
    7d06:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, ODD)].addr = p->buf;
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
				} else {
					table[index(i, RX, ODD)].desc = 0;
    7d08:	f8c9 0068 	str.w	r0, [r9, #104]	; 0x68
					usb_rx_memory_needed++;
    7d0c:	3201      	adds	r2, #1
    7d0e:	702a      	strb	r2, [r5, #0]
    7d10:	e538      	b.n	7784 <usb_isr+0x504>
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
					usb_rx_memory_needed++;
    7d12:	782a      	ldrb	r2, [r5, #0]
				p = usb_malloc();
				if (p) {
					table[index(i, RX, EVEN)].addr = p->buf;
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
				} else {
					table[index(i, RX, EVEN)].desc = 0;
    7d14:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
					usb_rx_memory_needed++;
    7d18:	3201      	adds	r2, #1
    7d1a:	702a      	strb	r2, [r5, #0]
    7d1c:	e719      	b.n	7b52 <usb_isr+0x8d2>


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    7d1e:	be00      	bkpt	0x0000
    7d20:	f1be 0f40 	cmp.w	lr, #64	; 0x40
    7d24:	46f4      	mov	ip, lr
    7d26:	bf28      	it	cs
    7d28:	f04f 0c40 	movcs.w	ip, #64	; 0x40
    7d2c:	eb04 030c 	add.w	r3, r4, ip
    7d30:	9302      	str	r3, [sp, #8]
	//serial_phex32(data);
	//serial_print(",");
	//serial_phex16(datalen);
	//serial_print("\n");

	if (datalen > setup.wLength) datalen = setup.wLength;
    7d32:	2301      	movs	r3, #1
    7d34:	ebcc 000e 	rsb	r0, ip, lr
    7d38:	ea4f 480c 	mov.w	r8, ip, lsl #16
    7d3c:	2200      	movs	r2, #0
    7d3e:	9301      	str	r3, [sp, #4]
    7d40:	e53a      	b.n	77b8 <usb_isr+0x538>
    7d42:	bf00      	nop
    7d44:	00400088 	.word	0x00400088
    7d48:	004000c8 	.word	0x004000c8

00007d4c <usb_init>:
}



void usb_init(void)
{
    7d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d50:	4c20      	ldr	r4, [pc, #128]	; (7dd4 <usb_init+0x88>)
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    7d52:	f000 fc77 	bl	8644 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    7d56:	2200      	movs	r2, #0
    7d58:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    7d5c:	4623      	mov	r3, r4

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
		table[i].desc = 0;
    7d5e:	601a      	str	r2, [r3, #0]
		table[i].addr = 0;
    7d60:	605a      	str	r2, [r3, #4]
    7d62:	3308      	adds	r3, #8
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    7d64:	4283      	cmp	r3, r0
		table[i].desc = 0;
    7d66:	f04f 0100 	mov.w	r1, #0
	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    7d6a:	d1f8      	bne.n	7d5e <usb_init+0x12>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7d6c:	4a1a      	ldr	r2, [pc, #104]	; (7dd8 <usb_init+0x8c>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    7d6e:	4f1b      	ldr	r7, [pc, #108]	; (7ddc <usb_init+0x90>)
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7d70:	6813      	ldr	r3, [r2, #0]
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7d72:	4d1b      	ldr	r5, [pc, #108]	; (7de0 <usb_init+0x94>)
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7d74:	481b      	ldr	r0, [pc, #108]	; (7de4 <usb_init+0x98>)

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    7d76:	4e1c      	ldr	r6, [pc, #112]	; (7de8 <usb_init+0x9c>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7d78:	f8df 8078 	ldr.w	r8, [pc, #120]	; 7df4 <usb_init+0xa8>
	USB0_ERRSTAT = 0xFF;
    7d7c:	f8df c078 	ldr.w	ip, [pc, #120]	; 7df8 <usb_init+0xac>
	USB0_OTGISTAT = 0xFF;

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    7d80:	f8df 9078 	ldr.w	r9, [pc, #120]	; 7dfc <usb_init+0xb0>
	USB0_USBCTRL = 0;
    7d84:	f8df e078 	ldr.w	lr, [pc, #120]	; 7e00 <usb_init+0xb4>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    7d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    7d8c:	6013      	str	r3, [r2, #0]
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    7d8e:	f3c4 2307 	ubfx	r3, r4, #8, #8
    7d92:	703b      	strb	r3, [r7, #0]
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    7d94:	f3c4 4307 	ubfx	r3, r4, #16, #8
    7d98:	702b      	strb	r3, [r5, #0]
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7d9a:	0e24      	lsrs	r4, r4, #24

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7d9c:	23ff      	movs	r3, #255	; 0xff
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    7d9e:	f502 3228 	add.w	r2, r2, #172032	; 0x2a000
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    7da2:	7004      	strb	r4, [r0, #0]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    7da4:	4d11      	ldr	r5, [pc, #68]	; (7dec <usb_init+0xa0>)
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
    7da6:	f888 3000 	strb.w	r3, [r8]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    7daa:	4811      	ldr	r0, [pc, #68]	; (7df0 <usb_init+0xa4>)
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
    7dac:	f88c 3000 	strb.w	r3, [ip]
	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    7db0:	32d4      	adds	r2, #212	; 0xd4
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;

	// clear all ISR flags
	USB0_ISTAT = 0xFF;
	USB0_ERRSTAT = 0xFF;
	USB0_OTGISTAT = 0xFF;
    7db2:	7033      	strb	r3, [r6, #0]

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
    7db4:	2301      	movs	r3, #1
    7db6:	f889 3000 	strb.w	r3, [r9]

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    7dba:	2670      	movs	r6, #112	; 0x70

	//USB0_USBTRC0 |= 0x40; // undocumented bit

	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;
    7dbc:	f88e 1000 	strb.w	r1, [lr]
	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    7dc0:	f44f 7400 	mov.w	r4, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    7dc4:	2110      	movs	r1, #16
	// enable USB
	USB0_CTL = USB_CTL_USBENSOFEN;
	USB0_USBCTRL = 0;

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;
    7dc6:	f807 3c18 	strb.w	r3, [r7, #-24]

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    7dca:	702e      	strb	r6, [r5, #0]
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    7dcc:	6004      	str	r4, [r0, #0]

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    7dce:	7011      	strb	r1, [r2, #0]
    7dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7dd4:	1fff8000 	.word	0x1fff8000
    7dd8:	40048034 	.word	0x40048034
    7ddc:	4007209c 	.word	0x4007209c
    7de0:	400720b0 	.word	0x400720b0
    7de4:	400720b4 	.word	0x400720b4
    7de8:	40072010 	.word	0x40072010
    7dec:	e000e449 	.word	0xe000e449
    7df0:	e000e108 	.word	0xe000e108
    7df4:	40072080 	.word	0x40072080
    7df8:	40072088 	.word	0x40072088
    7dfc:	40072094 	.word	0x40072094
    7e00:	40072100 	.word	0x40072100

00007e04 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    7e04:	b672      	cpsid	i
	avail = usb_buffer_available;
    7e06:	480d      	ldr	r0, [pc, #52]	; (7e3c <usb_malloc+0x38>)
    7e08:	6802      	ldr	r2, [r0, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    7e0a:	fab2 f382 	clz	r3, r2
	if (n >= NUM_USB_BUFFERS) {
    7e0e:	2b0b      	cmp	r3, #11
    7e10:	dc10      	bgt.n	7e34 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    7e12:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    7e16:	40d9      	lsrs	r1, r3
    7e18:	ea22 0201 	bic.w	r2, r2, r1
    7e1c:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7e1e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    7e20:	4807      	ldr	r0, [pc, #28]	; (7e40 <usb_malloc+0x3c>)
    7e22:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    7e26:	00db      	lsls	r3, r3, #3
    7e28:	18c2      	adds	r2, r0, r3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    7e2a:	2100      	movs	r1, #0
    7e2c:	50c1      	str	r1, [r0, r3]
	*(uint32_t *)(p + 4) = 0;
	return (usb_packet_t *)p;
    7e2e:	4610      	mov	r0, r2
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
	*(uint32_t *)(p + 4) = 0;
    7e30:	6051      	str	r1, [r2, #4]
	return (usb_packet_t *)p;
}
    7e32:	4770      	bx	lr

	__disable_irq();
	avail = usb_buffer_available;
	n = __builtin_clz(avail); // clz = count leading zeros
	if (n >= NUM_USB_BUFFERS) {
		__enable_irq();
    7e34:	b662      	cpsie	i
		return NULL;
    7e36:	2000      	movs	r0, #0
    7e38:	4770      	bx	lr
    7e3a:	bf00      	nop
    7e3c:	1fff8a88 	.word	0x1fff8a88
    7e40:	1fff83bc 	.word	0x1fff83bc

00007e44 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    7e44:	4b0d      	ldr	r3, [pc, #52]	; (7e7c <usb_free+0x38>)
    7e46:	4a0e      	ldr	r2, [pc, #56]	; (7e80 <usb_free+0x3c>)
    7e48:	1ac3      	subs	r3, r0, r3
    7e4a:	fba2 2303 	umull	r2, r3, r2, r3
    7e4e:	091b      	lsrs	r3, r3, #4
	if (n >= NUM_USB_BUFFERS) return;
    7e50:	2b0b      	cmp	r3, #11
    7e52:	d80c      	bhi.n	7e6e <usb_free+0x2a>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    7e54:	4a0b      	ldr	r2, [pc, #44]	; (7e84 <usb_free+0x40>)
    7e56:	7812      	ldrb	r2, [r2, #0]
    7e58:	b952      	cbnz	r2, 7e70 <usb_free+0x2c>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    7e5a:	b672      	cpsid	i
	usb_buffer_available |= mask;
    7e5c:	480a      	ldr	r0, [pc, #40]	; (7e88 <usb_free+0x44>)
    7e5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
    7e62:	6802      	ldr	r2, [r0, #0]
    7e64:	fa21 f303 	lsr.w	r3, r1, r3
    7e68:	431a      	orrs	r2, r3
    7e6a:	6002      	str	r2, [r0, #0]
	__enable_irq();
    7e6c:	b662      	cpsie	i
    7e6e:	4770      	bx	lr
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    7e70:	4a06      	ldr	r2, [pc, #24]	; (7e8c <usb_free+0x48>)
    7e72:	7812      	ldrb	r2, [r2, #0]
    7e74:	2a00      	cmp	r2, #0
    7e76:	d0f0      	beq.n	7e5a <usb_free+0x16>
		//serial_print("give to rx:");
		//serial_phex32((int)p);
		//serial_print("\n");
		usb_rx_memory(p);
    7e78:	f7ff b95c 	b.w	7134 <usb_rx_memory>
    7e7c:	1fff83bc 	.word	0x1fff83bc
    7e80:	38e38e39 	.word	0x38e38e39
    7e84:	1fff97fd 	.word	0x1fff97fd
    7e88:	1fff8a88 	.word	0x1fff8a88
    7e8c:	1fff9808 	.word	0x1fff9808

00007e90 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    7e90:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    7e92:	4d0f      	ldr	r5, [pc, #60]	; (7ed0 <usb_serial_getchar+0x40>)
    7e94:	6828      	ldr	r0, [r5, #0]
    7e96:	b178      	cbz	r0, 7eb8 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    7e98:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    7e9a:	8802      	ldrh	r2, [r0, #0]
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    7e9c:	18c1      	adds	r1, r0, r3
    7e9e:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    7ea0:	4293      	cmp	r3, r2
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
    7ea2:	7a0c      	ldrb	r4, [r1, #8]
	if (i >= rx_packet->len) {
    7ea4:	d202      	bcs.n	7eac <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    7ea6:	8043      	strh	r3, [r0, #2]
	}
	return c;
    7ea8:	4620      	mov	r0, r4
}
    7eaa:	bd38      	pop	{r3, r4, r5, pc}
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
    7eac:	f7ff ffca 	bl	7e44 <usb_free>
		rx_packet = NULL;
    7eb0:	2300      	movs	r3, #0
	} else {
		rx_packet->index = i;
	}
	return c;
    7eb2:	4620      	mov	r0, r4
	}
	i = rx_packet->index;
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
		usb_free(rx_packet);
		rx_packet = NULL;
    7eb4:	602b      	str	r3, [r5, #0]
    7eb6:	bd38      	pop	{r3, r4, r5, pc}
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7eb8:	4b06      	ldr	r3, [pc, #24]	; (7ed4 <usb_serial_getchar+0x44>)
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	b12b      	cbz	r3, 7eca <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    7ebe:	2003      	movs	r0, #3
    7ec0:	f7ff f904 	bl	70cc <usb_rx>
    7ec4:	6028      	str	r0, [r5, #0]
		if (!rx_packet) return -1;
    7ec6:	2800      	cmp	r0, #0
    7ec8:	d1e6      	bne.n	7e98 <usb_serial_getchar+0x8>
{
	unsigned int i;
	int c;

	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7eca:	f04f 30ff 	mov.w	r0, #4294967295
    7ece:	bd38      	pop	{r3, r4, r5, pc}
    7ed0:	1fff981c 	.word	0x1fff981c
    7ed4:	1fff9808 	.word	0x1fff9808

00007ed8 <usb_serial_peekchar>:
	return c;
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    7ed8:	b510      	push	{r4, lr}
	if (!rx_packet) {
    7eda:	4c09      	ldr	r4, [pc, #36]	; (7f00 <usb_serial_peekchar+0x28>)
    7edc:	6820      	ldr	r0, [r4, #0]
    7ede:	b118      	cbz	r0, 7ee8 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    7ee0:	8843      	ldrh	r3, [r0, #2]
    7ee2:	4418      	add	r0, r3
    7ee4:	7a00      	ldrb	r0, [r0, #8]
}
    7ee6:	bd10      	pop	{r4, pc}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7ee8:	4b06      	ldr	r3, [pc, #24]	; (7f04 <usb_serial_peekchar+0x2c>)
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	b12b      	cbz	r3, 7efa <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    7eee:	2003      	movs	r0, #3
    7ef0:	f7ff f8ec 	bl	70cc <usb_rx>
    7ef4:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    7ef6:	2800      	cmp	r0, #0
    7ef8:	d1f2      	bne.n	7ee0 <usb_serial_peekchar+0x8>

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	if (!rx_packet) {
		if (!usb_configuration) return -1;
    7efa:	f04f 30ff 	mov.w	r0, #4294967295
    7efe:	bd10      	pop	{r4, pc}
    7f00:	1fff981c 	.word	0x1fff981c
    7f04:	1fff9808 	.word	0x1fff9808

00007f08 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    7f08:	4b04      	ldr	r3, [pc, #16]	; (7f1c <usb_serial_available+0x14>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    7f0a:	4a05      	ldr	r2, [pc, #20]	; (7f20 <usb_serial_available+0x18>)
    7f0c:	681b      	ldr	r3, [r3, #0]

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    7f0e:	8890      	ldrh	r0, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    7f10:	b11b      	cbz	r3, 7f1a <usb_serial_available+0x12>
    7f12:	881a      	ldrh	r2, [r3, #0]
    7f14:	885b      	ldrh	r3, [r3, #2]
    7f16:	1ad3      	subs	r3, r2, r3
    7f18:	4418      	add	r0, r3
	return count;
}
    7f1a:	4770      	bx	lr
    7f1c:	1fff981c 	.word	0x1fff981c
    7f20:	1fff987c 	.word	0x1fff987c

00007f24 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    7f24:	4b0b      	ldr	r3, [pc, #44]	; (7f54 <usb_serial_flush_input+0x30>)
    7f26:	781b      	ldrb	r3, [r3, #0]
    7f28:	b19b      	cbz	r3, 7f52 <usb_serial_flush_input+0x2e>
	return count;
}

// discard any buffered input
void usb_serial_flush_input(void)
{
    7f2a:	b510      	push	{r4, lr}
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
    7f2c:	4c0a      	ldr	r4, [pc, #40]	; (7f58 <usb_serial_flush_input+0x34>)
    7f2e:	6820      	ldr	r0, [r4, #0]
    7f30:	b148      	cbz	r0, 7f46 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    7f32:	f7ff ff87 	bl	7e44 <usb_free>
		rx_packet = NULL;
    7f36:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7f38:	2003      	movs	r0, #3
	usb_packet_t *rx;

	if (!usb_configuration) return;
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
    7f3a:	6023      	str	r3, [r4, #0]
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7f3c:	f7ff f8c6 	bl	70cc <usb_rx>
		if (!rx) break;
    7f40:	b130      	cbz	r0, 7f50 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    7f42:	f7ff ff7f 	bl	7e44 <usb_free>
	if (rx_packet) {
		usb_free(rx_packet);
		rx_packet = NULL;
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    7f46:	2003      	movs	r0, #3
    7f48:	f7ff f8c0 	bl	70cc <usb_rx>
		if (!rx) break;
    7f4c:	2800      	cmp	r0, #0
    7f4e:	d1f8      	bne.n	7f42 <usb_serial_flush_input+0x1e>
    7f50:	bd10      	pop	{r4, pc}
    7f52:	4770      	bx	lr
    7f54:	1fff9808 	.word	0x1fff9808
    7f58:	1fff981c 	.word	0x1fff981c

00007f5c <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    7f5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7f60:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 805c <usb_serial_write+0x100>
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    7f64:	b083      	sub	sp, #12
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    7f66:	2201      	movs	r2, #1
    7f68:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    7f6c:	9101      	str	r1, [sp, #4]
    7f6e:	b369      	cbz	r1, 7fcc <usb_serial_write+0x70>
    7f70:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8060 <usb_serial_write+0x104>
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    7f74:	4f36      	ldr	r7, [pc, #216]	; (8050 <usb_serial_write+0xf4>)
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    7f76:	9e01      	ldr	r6, [sp, #4]
    7f78:	4683      	mov	fp, r0
		if (!tx_packet) {
    7f7a:	f8d8 0000 	ldr.w	r0, [r8]
    7f7e:	b3b0      	cbz	r0, 7fee <usb_serial_write+0x92>
    7f80:	4d34      	ldr	r5, [pc, #208]	; (8054 <usb_serial_write+0xf8>)
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
    7f82:	8844      	ldrh	r4, [r0, #2]
    7f84:	f1c4 0140 	rsb	r1, r4, #64	; 0x40
    7f88:	42b1      	cmp	r1, r6
    7f8a:	bf28      	it	cs
    7f8c:	4631      	movcs	r1, r6
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7f8e:	eb04 0e01 	add.w	lr, r4, r1
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    7f92:	2200      	movs	r2, #0
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7f94:	fa1f fe8e 	uxth.w	lr, lr
					return -1;
				}
				yield();
			}
		}
		transmit_previous_timeout = 0;
    7f98:	702a      	strb	r2, [r5, #0]
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
    7f9a:	1a76      	subs	r6, r6, r1
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
    7f9c:	f8a0 e002 	strh.w	lr, [r0, #2]
			}
		}
		transmit_previous_timeout = 0;
		len = CDC_TX_SIZE - tx_packet->index;
		if (len > size) len = size;
		dest = tx_packet->buf + tx_packet->index;
    7fa0:	f100 0208 	add.w	r2, r0, #8
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
    7fa4:	b151      	cbz	r1, 7fbc <usb_serial_write+0x60>
    7fa6:	3c01      	subs	r4, #1
    7fa8:	4422      	add	r2, r4
    7faa:	4459      	add	r1, fp
    7fac:	f81b 4b01 	ldrb.w	r4, [fp], #1
    7fb0:	f802 4f01 	strb.w	r4, [r2, #1]!
    7fb4:	458b      	cmp	fp, r1
    7fb6:	d1f9      	bne.n	7fac <usb_serial_write+0x50>
    7fb8:	f8b0 e002 	ldrh.w	lr, [r0, #2]
		if (tx_packet->index >= CDC_TX_SIZE) {
    7fbc:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
    7fc0:	d80b      	bhi.n	7fda <usb_serial_write+0x7e>
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    7fc2:	4a25      	ldr	r2, [pc, #148]	; (8058 <usb_serial_write+0xfc>)
    7fc4:	2105      	movs	r1, #5
    7fc6:	7011      	strb	r1, [r2, #0]
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
	while (size > 0) {
    7fc8:	2e00      	cmp	r6, #0
    7fca:	d1d6      	bne.n	7f7a <usb_serial_write+0x1e>
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
    7fcc:	9801      	ldr	r0, [sp, #4]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
    7fce:	2300      	movs	r3, #0
    7fd0:	f889 3000 	strb.w	r3, [r9]
	return ret;
}
    7fd4:	b003      	add	sp, #12
    7fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dest = tx_packet->buf + tx_packet->index;
		tx_packet->index += len;
		size -= len;
		while (len-- > 0) *dest++ = *src++;
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
    7fda:	2240      	movs	r2, #64	; 0x40
    7fdc:	8002      	strh	r2, [r0, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    7fde:	4601      	mov	r1, r0
    7fe0:	2004      	movs	r0, #4
    7fe2:	f7ff f90b 	bl	71fc <usb_tx>
			tx_packet = NULL;
    7fe6:	2200      	movs	r2, #0
    7fe8:	f8c8 2000 	str.w	r2, [r8]
    7fec:	e7e9      	b.n	7fc2 <usb_serial_write+0x66>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    7fee:	783a      	ldrb	r2, [r7, #0]
    7ff0:	b32a      	cbz	r2, 803e <usb_serial_write+0xe2>
    7ff2:	4d18      	ldr	r5, [pc, #96]	; (8054 <usb_serial_write+0xf8>)
    7ff4:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
    7ff8:	f04f 0a01 	mov.w	sl, #1
    7ffc:	e007      	b.n	800e <usb_serial_write+0xb2>
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    7ffe:	3c01      	subs	r4, #1
    8000:	d016      	beq.n	8030 <usb_serial_write+0xd4>
    8002:	782a      	ldrb	r2, [r5, #0]
    8004:	b9a2      	cbnz	r2, 8030 <usb_serial_write+0xd4>
					transmit_previous_timeout = 1;
					return -1;
				}
				yield();
    8006:	f000 fa37 	bl	8478 <yield>
	tx_noautoflush = 1;
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    800a:	783a      	ldrb	r2, [r7, #0]
    800c:	b1ba      	cbz	r2, 803e <usb_serial_write+0xe2>
					tx_noautoflush = 0;
					return -1;
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    800e:	2004      	movs	r0, #4
    8010:	f7ff f87a 	bl	7108 <usb_tx_packet_count>
    8014:	2807      	cmp	r0, #7
    8016:	d8f2      	bhi.n	7ffe <usb_serial_write+0xa2>
					tx_noautoflush = 1;
    8018:	f889 a000 	strb.w	sl, [r9]
					tx_packet = usb_malloc();
    801c:	f7ff fef2 	bl	7e04 <usb_malloc>
    8020:	f8c8 0000 	str.w	r0, [r8]
					if (tx_packet) break;
    8024:	2800      	cmp	r0, #0
    8026:	d1ac      	bne.n	7f82 <usb_serial_write+0x26>
					tx_noautoflush = 0;
    8028:	4b0c      	ldr	r3, [pc, #48]	; (805c <usb_serial_write+0x100>)
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    802a:	3c01      	subs	r4, #1
				}
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
					tx_noautoflush = 1;
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
    802c:	7018      	strb	r0, [r3, #0]
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    802e:	d1e8      	bne.n	8002 <usb_serial_write+0xa6>
					transmit_previous_timeout = 1;
    8030:	2301      	movs	r3, #1
					return -1;
    8032:	f04f 30ff 	mov.w	r0, #4294967295
					tx_packet = usb_malloc();
					if (tx_packet) break;
					tx_noautoflush = 0;
				}
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
					transmit_previous_timeout = 1;
    8036:	702b      	strb	r3, [r5, #0]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8038:	b003      	add	sp, #12
    803a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    803e:	2300      	movs	r3, #0
					return -1;
    8040:	f04f 30ff 	mov.w	r0, #4294967295
	while (size > 0) {
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
					tx_noautoflush = 0;
    8044:	f889 3000 	strb.w	r3, [r9]
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
	}
	tx_noautoflush = 0;
	return ret;
}
    8048:	b003      	add	sp, #12
    804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    804e:	bf00      	nop
    8050:	1fff9808 	.word	0x1fff9808
    8054:	1fff9818 	.word	0x1fff9818
    8058:	1fff9810 	.word	0x1fff9810
    805c:	1fff9811 	.word	0x1fff9811
    8060:	1fff9814 	.word	0x1fff9814

00008064 <usb_serial_putchar>:
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    8064:	b500      	push	{lr}
    8066:	b083      	sub	sp, #12
    8068:	ab02      	add	r3, sp, #8
	return usb_serial_write(&c, 1);
    806a:	2101      	movs	r1, #1
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    806c:	f803 0d01 	strb.w	r0, [r3, #-1]!
	return usb_serial_write(&c, 1);
    8070:	4618      	mov	r0, r3
    8072:	f7ff ff73 	bl	7f5c <usb_serial_write>
}
    8076:	b003      	add	sp, #12
    8078:	f85d fb04 	ldr.w	pc, [sp], #4

0000807c <usb_serial_write_buffer_free>:
	tx_noautoflush = 0;
	return ret;
}

int usb_serial_write_buffer_free(void)
{
    807c:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    807e:	4d0e      	ldr	r5, [pc, #56]	; (80b8 <usb_serial_write_buffer_free+0x3c>)

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8080:	4c0e      	ldr	r4, [pc, #56]	; (80bc <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    8082:	6828      	ldr	r0, [r5, #0]

int usb_serial_write_buffer_free(void)
{
	uint32_t len;

	tx_noautoflush = 1;
    8084:	2301      	movs	r3, #1
    8086:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    8088:	b128      	cbz	r0, 8096 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    808a:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    808c:	2300      	movs	r3, #0
    808e:	7023      	strb	r3, [r4, #0]
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    8090:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
	return len;
}
    8094:	bd38      	pop	{r3, r4, r5, pc}
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    8096:	4b0a      	ldr	r3, [pc, #40]	; (80c0 <usb_serial_write_buffer_free+0x44>)
    8098:	781b      	ldrb	r3, [r3, #0]
    809a:	b913      	cbnz	r3, 80a2 <usb_serial_write_buffer_free+0x26>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
    809c:	2000      	movs	r0, #0
    809e:	7020      	strb	r0, [r4, #0]
			return 0;
    80a0:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    80a2:	2004      	movs	r0, #4
    80a4:	f7ff f830 	bl	7108 <usb_tx_packet_count>
{
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
    80a8:	2807      	cmp	r0, #7
    80aa:	d8f7      	bhi.n	809c <usb_serial_write_buffer_free+0x20>
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
		  (tx_packet = usb_malloc()) == NULL) {
    80ac:	f7ff feaa 	bl	7e04 <usb_malloc>
    80b0:	6028      	str	r0, [r5, #0]
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
		if (!usb_configuration ||
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    80b2:	2800      	cmp	r0, #0
    80b4:	d1e9      	bne.n	808a <usb_serial_write_buffer_free+0xe>
    80b6:	e7f1      	b.n	809c <usb_serial_write_buffer_free+0x20>
    80b8:	1fff9814 	.word	0x1fff9814
    80bc:	1fff9811 	.word	0x1fff9811
    80c0:	1fff9808 	.word	0x1fff9808

000080c4 <usb_serial_flush_output>:
	tx_noautoflush = 0;
	return len;
}

void usb_serial_flush_output(void)
{
    80c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    80c6:	4b11      	ldr	r3, [pc, #68]	; (810c <usb_serial_flush_output+0x48>)
    80c8:	781b      	ldrb	r3, [r3, #0]
    80ca:	b18b      	cbz	r3, 80f0 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    80cc:	4e10      	ldr	r6, [pc, #64]	; (8110 <usb_serial_flush_output+0x4c>)
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    80ce:	4d11      	ldr	r5, [pc, #68]	; (8114 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    80d0:	6834      	ldr	r4, [r6, #0]
}

void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
    80d2:	2701      	movs	r7, #1
    80d4:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    80d6:	b164      	cbz	r4, 80f2 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    80d8:	4a0f      	ldr	r2, [pc, #60]	; (8118 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
    80da:	8863      	ldrh	r3, [r4, #2]
void usb_serial_flush_output(void)
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
    80dc:	2700      	movs	r7, #0
    80de:	7017      	strb	r7, [r2, #0]
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    80e0:	4621      	mov	r1, r4
{
	if (!usb_configuration) return;
	tx_noautoflush = 1;
	if (tx_packet) {
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
    80e2:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    80e4:	2004      	movs	r0, #4
    80e6:	f7ff f889 	bl	71fc <usb_tx>
		tx_packet = NULL;
    80ea:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    80ec:	2300      	movs	r3, #0
    80ee:	702b      	strb	r3, [r5, #0]
    80f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_cdc_transmit_flush_timer = 0;
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    80f2:	f7ff fe87 	bl	7e04 <usb_malloc>
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    80f6:	4b08      	ldr	r3, [pc, #32]	; (8118 <usb_serial_flush_output+0x54>)
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
    80f8:	b128      	cbz	r0, 8106 <usb_serial_flush_output+0x42>
			usb_cdc_transmit_flush_timer = 0;
			usb_tx(CDC_TX_ENDPOINT, tx);
    80fa:	4601      	mov	r1, r0
    80fc:	2004      	movs	r0, #4
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_cdc_transmit_flush_timer = 0;
    80fe:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    8100:	f7ff f87c 	bl	71fc <usb_tx>
    8104:	e7f2      	b.n	80ec <usb_serial_flush_output+0x28>
		} else {
			usb_cdc_transmit_flush_timer = 1;
    8106:	701f      	strb	r7, [r3, #0]
    8108:	e7f0      	b.n	80ec <usb_serial_flush_output+0x28>
    810a:	bf00      	nop
    810c:	1fff9808 	.word	0x1fff9808
    8110:	1fff9814 	.word	0x1fff9814
    8114:	1fff9811 	.word	0x1fff9811
    8118:	1fff9810 	.word	0x1fff9810

0000811c <usb_serial_flush_callback>:
	}
	tx_noautoflush = 0;
}

void usb_serial_flush_callback(void)
{
    811c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    811e:	4b0e      	ldr	r3, [pc, #56]	; (8158 <usb_serial_flush_callback+0x3c>)
    8120:	781b      	ldrb	r3, [r3, #0]
    8122:	b973      	cbnz	r3, 8142 <usb_serial_flush_callback+0x26>
	if (tx_packet) {
    8124:	4c0d      	ldr	r4, [pc, #52]	; (815c <usb_serial_flush_callback+0x40>)
    8126:	6821      	ldr	r1, [r4, #0]
    8128:	b161      	cbz	r1, 8144 <usb_serial_flush_callback+0x28>
    812a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    812e:	884b      	ldrh	r3, [r1, #2]
    8130:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    8132:	2004      	movs	r0, #4
    8134:	f7ff f862 	bl	71fc <usb_tx>
		tx_packet = NULL;
    8138:	6025      	str	r5, [r4, #0]
    813a:	bd38      	pop	{r3, r4, r5, pc}
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
    813c:	4b08      	ldr	r3, [pc, #32]	; (8160 <usb_serial_flush_callback+0x44>)
    813e:	2201      	movs	r2, #1
    8140:	701a      	strb	r2, [r3, #0]
    8142:	bd38      	pop	{r3, r4, r5, pc}
	if (tx_packet) {
		tx_packet->len = tx_packet->index;
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
    8144:	f7ff fe5e 	bl	7e04 <usb_malloc>
		if (tx) {
    8148:	2800      	cmp	r0, #0
    814a:	d0f7      	beq.n	813c <usb_serial_flush_callback+0x20>
			usb_tx(CDC_TX_ENDPOINT, tx);
    814c:	4601      	mov	r1, r0
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    814e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
		tx_packet = NULL;
	} else {
		usb_packet_t *tx = usb_malloc();
		if (tx) {
			usb_tx(CDC_TX_ENDPOINT, tx);
    8152:	2004      	movs	r0, #4
    8154:	f7ff b852 	b.w	71fc <usb_tx>
    8158:	1fff9811 	.word	0x1fff9811
    815c:	1fff9814 	.word	0x1fff9814
    8160:	1fff9810 	.word	0x1fff9810

00008164 <EventResponder::triggerEventNotImmediate()>:
uint8_t _serialEvent_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB1_default __attribute__((weak)) PROGMEM = 0 ;	
uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;	

void EventResponder::triggerEventNotImmediate()
{
    8164:	b410      	push	{r4}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8166:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    816a:	b672      	cpsid	i
	bool irq = disableInterrupts();
	if (_triggered == false) {
    816c:	7f43      	ldrb	r3, [r0, #29]
    816e:	b933      	cbnz	r3, 817e <EventResponder::triggerEventNotImmediate()+0x1a>
		// not already triggered
		if (_type == EventTypeYield) {
    8170:	7f01      	ldrb	r1, [r0, #28]
    8172:	2901      	cmp	r1, #1
    8174:	d007      	beq.n	8186 <EventResponder::triggerEventNotImmediate()+0x22>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    8176:	2903      	cmp	r1, #3
    8178:	d00f      	beq.n	819a <EventResponder::triggerEventNotImmediate()+0x36>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    817a:	2301      	movs	r3, #1
    817c:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    817e:	b902      	cbnz	r2, 8182 <EventResponder::triggerEventNotImmediate()+0x1e>
    8180:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    8182:	bc10      	pop	{r4}
    8184:	4770      	bx	lr
	bool irq = disableInterrupts();
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
    8186:	4c12      	ldr	r4, [pc, #72]	; (81d0 <EventResponder::triggerEventNotImmediate()+0x6c>)
    8188:	6821      	ldr	r1, [r4, #0]
    818a:	b1a1      	cbz	r1, 81b6 <EventResponder::triggerEventNotImmediate()+0x52>
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
    818c:	4911      	ldr	r1, [pc, #68]	; (81d4 <EventResponder::triggerEventNotImmediate()+0x70>)
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
    818e:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    8190:	680b      	ldr	r3, [r1, #0]
    8192:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastYield = this;
    8194:	6008      	str	r0, [r1, #0]
				firstYield = this;
				lastYield = this;
			} else {
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
    8196:	6158      	str	r0, [r3, #20]
    8198:	e7ef      	b.n	817a <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
    819a:	4c0f      	ldr	r4, [pc, #60]	; (81d8 <EventResponder::triggerEventNotImmediate()+0x74>)
    819c:	6821      	ldr	r1, [r4, #0]
    819e:	b181      	cbz	r1, 81c2 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
    81a0:	490e      	ldr	r1, [pc, #56]	; (81dc <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
    81a2:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    81a4:	680b      	ldr	r3, [r1, #0]
    81a6:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
				lastInterrupt = this;
    81a8:	6008      	str	r0, [r1, #0]
				firstInterrupt = this;
				lastInterrupt = this;
			} else {
				_next = nullptr;
				_prev = lastInterrupt;
				_prev->_next = this;
    81aa:	6158      	str	r0, [r3, #20]
				lastInterrupt = this;
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    81ac:	4b0c      	ldr	r3, [pc, #48]	; (81e0 <EventResponder::triggerEventNotImmediate()+0x7c>)
    81ae:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    81b2:	6019      	str	r1, [r3, #0]
    81b4:	e7e1      	b.n	817a <EventResponder::triggerEventNotImmediate()+0x16>
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstYield = this;
				lastYield = this;
    81b6:	4b07      	ldr	r3, [pc, #28]	; (81d4 <EventResponder::triggerEventNotImmediate()+0x70>)
	if (_triggered == false) {
		// not already triggered
		if (_type == EventTypeYield) {
			// normal type, called from yield()
			if (firstYield == nullptr) {
				_next = nullptr;
    81b8:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    81ba:	6181      	str	r1, [r0, #24]
				firstYield = this;
    81bc:	6020      	str	r0, [r4, #0]
				lastYield = this;
    81be:	6018      	str	r0, [r3, #0]
    81c0:	e7db      	b.n	817a <EventResponder::triggerEventNotImmediate()+0x16>
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
				_prev = nullptr;
				firstInterrupt = this;
				lastInterrupt = this;
    81c2:	4b06      	ldr	r3, [pc, #24]	; (81dc <EventResponder::triggerEventNotImmediate()+0x78>)
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
			// interrupt, called from software interrupt
			if (firstInterrupt == nullptr) {
				_next = nullptr;
    81c4:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    81c6:	6181      	str	r1, [r0, #24]
				firstInterrupt = this;
    81c8:	6020      	str	r0, [r4, #0]
				lastInterrupt = this;
    81ca:	6018      	str	r0, [r3, #0]
    81cc:	e7ee      	b.n	81ac <EventResponder::triggerEventNotImmediate()+0x48>
    81ce:	bf00      	nop
    81d0:	1fff9830 	.word	0x1fff9830
    81d4:	1fff982c 	.word	0x1fff982c
    81d8:	1fff9824 	.word	0x1fff9824
    81dc:	1fff9828 	.word	0x1fff9828
    81e0:	e000ed04 	.word	0xe000ed04

000081e4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    81e4:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    81e6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    81ea:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    81ec:	4c0c      	ldr	r4, [pc, #48]	; (8220 <EventResponder::runFromInterrupt()+0x3c>)
    81ee:	6820      	ldr	r0, [r4, #0]
		if (first) {
    81f0:	b180      	cbz	r0, 8214 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    81f2:	4e0c      	ldr	r6, [pc, #48]	; (8224 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    81f4:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    81f6:	6943      	ldr	r3, [r0, #20]
    81f8:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    81fa:	b173      	cbz	r3, 821a <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    81fc:	619d      	str	r5, [r3, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    81fe:	b902      	cbnz	r2, 8202 <EventResponder::runFromInterrupt()+0x1e>
    8200:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    8202:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    8204:	6883      	ldr	r3, [r0, #8]
    8206:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    8208:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    820c:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    820e:	6820      	ldr	r0, [r4, #0]
		if (first) {
    8210:	2800      	cmp	r0, #0
    8212:	d1f0      	bne.n	81f6 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8214:	b902      	cbnz	r2, 8218 <EventResponder::runFromInterrupt()+0x34>
    8216:	b662      	cpsie	i
    8218:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    821a:	6033      	str	r3, [r6, #0]
    821c:	e7ef      	b.n	81fe <EventResponder::runFromInterrupt()+0x1a>
    821e:	bf00      	nop
    8220:	1fff9824 	.word	0x1fff9824
    8224:	1fff9828 	.word	0x1fff9828

00008228 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    8228:	f7ff bfdc 	b.w	81e4 <EventResponder::runFromInterrupt()>

0000822c <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    822c:	4a02      	ldr	r2, [pc, #8]	; (8238 <systick_isr+0xc>)
    822e:	6813      	ldr	r3, [r2, #0]
    8230:	3301      	adds	r3, #1
    8232:	6013      	str	r3, [r2, #0]
    8234:	4770      	bx	lr
    8236:	bf00      	nop
    8238:	1fff9724 	.word	0x1fff9724

0000823c <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    823c:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    823e:	f7f9 fc4b 	bl	1ad8 <setup>
	while (1) {
		loop();
    8242:	f7f9 faf3 	bl	182c <loop>
		yield();
    8246:	f000 f917 	bl	8478 <yield>
    824a:	e7fa      	b.n	8242 <main+0x6>

0000824c <Print::print(String const&)>:
	return count;
}


size_t Print::print(const String &s)
{
    824c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8250:	688c      	ldr	r4, [r1, #8]
    8252:	b08b      	sub	sp, #44	; 0x2c
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    8254:	b1ec      	cbz	r4, 8292 <Print::print(String const&)+0x46>
    8256:	2500      	movs	r5, #0
    8258:	4606      	mov	r6, r0
    825a:	4689      	mov	r9, r1
    825c:	462f      	mov	r7, r5
		s.getBytes(buffer, sizeof(buffer), index);
    825e:	462b      	mov	r3, r5
    8260:	2221      	movs	r2, #33	; 0x21
    8262:	a901      	add	r1, sp, #4
    8264:	4648      	mov	r0, r9
    8266:	f000 f8ed 	bl	8444 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
    826a:	6832      	ldr	r2, [r6, #0]
    826c:	2c20      	cmp	r4, #32
    826e:	4623      	mov	r3, r4
    8270:	bf28      	it	cs
    8272:	2320      	movcs	r3, #32
    8274:	f8d2 8004 	ldr.w	r8, [r2, #4]
    8278:	a901      	add	r1, sp, #4
    827a:	461a      	mov	r2, r3
    827c:	4630      	mov	r0, r6
	unsigned int len = s.length();
	while (len > 0) {
		s.getBytes(buffer, sizeof(buffer), index);
		unsigned int nbytes = len;
		if (nbytes > sizeof(buffer)-1) nbytes = sizeof(buffer)-1;
		index += nbytes;
    827e:	441d      	add	r5, r3
		len -= nbytes;
    8280:	1ae4      	subs	r4, r4, r3
		count += write(buffer, nbytes);
    8282:	47c0      	blx	r8
    8284:	4407      	add	r7, r0
{
	uint8_t buffer[33];
	size_t count = 0;
	unsigned int index = 0;
	unsigned int len = s.length();
	while (len > 0) {
    8286:	2c00      	cmp	r4, #0
    8288:	d1e9      	bne.n	825e <Print::print(String const&)+0x12>
		index += nbytes;
		len -= nbytes;
		count += write(buffer, nbytes);
	}
	return count;
}
    828a:	4638      	mov	r0, r7
    828c:	b00b      	add	sp, #44	; 0x2c
    828e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}


size_t Print::print(const String &s)
{
	uint8_t buffer[33];
	size_t count = 0;
    8292:	4627      	mov	r7, r4
    8294:	e7f9      	b.n	828a <Print::print(String const&)+0x3e>
    8296:	bf00      	nop

00008298 <Print::println()>:
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    8298:	b500      	push	{lr}
	uint8_t buf[2]={'\r', '\n'};
    829a:	4a06      	ldr	r2, [pc, #24]	; (82b4 <Print::println()+0x1c>)
	return write(buf, 2);
    829c:	6803      	ldr	r3, [r0, #0]
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    829e:	8812      	ldrh	r2, [r2, #0]
	return write(buf, 2);
    82a0:	685b      	ldr	r3, [r3, #4]
	return printNumber(n, 10, sign);
}


size_t Print::println(void)
{
    82a2:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    82a4:	a901      	add	r1, sp, #4
}


size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    82a6:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    82aa:	2202      	movs	r2, #2
    82ac:	4798      	blx	r3
}
    82ae:	b003      	add	sp, #12
    82b0:	f85d fb04 	ldr.w	pc, [sp], #4
    82b4:	0001b958 	.word	0x0001b958

000082b8 <_write>:

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    82b8:	b510      	push	{r4, lr}
	((class Print *)file)->write((uint8_t *)ptr, len);
    82ba:	6803      	ldr	r3, [r0, #0]
}

extern "C" {
__attribute__((weak))
int _write(int file, char *ptr, int len)
{
    82bc:	4614      	mov	r4, r2
	((class Print *)file)->write((uint8_t *)ptr, len);
    82be:	685b      	ldr	r3, [r3, #4]
    82c0:	4798      	blx	r3
	return len;
}
    82c2:	4620      	mov	r0, r4
    82c4:	bd10      	pop	{r4, pc}
    82c6:	bf00      	nop

000082c8 <Print::printf(char const*, ...)>:
}

int Print::printf(const char *format, ...)
{
    82c8:	b40e      	push	{r1, r2, r3}
    82ca:	b500      	push	{lr}
    82cc:	b082      	sub	sp, #8
    82ce:	aa03      	add	r2, sp, #12
    82d0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_list ap;
	va_start(ap, format);
    82d4:	9201      	str	r2, [sp, #4]
#ifdef __STRICT_ANSI__
	return 0;  // TODO: make this work with -std=c++0x
#else
	return vdprintf((int)this, format, ap);
    82d6:	f003 fc13 	bl	bb00 <vdprintf>
#endif
}
    82da:	b002      	add	sp, #8
    82dc:	f85d eb04 	ldr.w	lr, [sp], #4
    82e0:	b003      	add	sp, #12
    82e2:	4770      	bx	lr

000082e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    82e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    82e6:	4607      	mov	r7, r0
    82e8:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    82ea:	2a00      	cmp	r2, #0
    82ec:	d033      	beq.n	8356 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    82ee:	2a01      	cmp	r2, #1
    82f0:	bf08      	it	eq
    82f2:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    82f4:	b351      	cbz	r1, 834c <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    82f6:	2421      	movs	r4, #33	; 0x21
    82f8:	e000      	b.n	82fc <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    82fa:	b2f4      	uxtb	r4, r6
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    82fc:	fbb1 f5f2 	udiv	r5, r1, r2
    8300:	fb02 1115 	mls	r1, r2, r5, r1
    8304:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    8306:	2909      	cmp	r1, #9
    8308:	f100 0130 	add.w	r1, r0, #48	; 0x30
    830c:	bf98      	it	ls
    830e:	b2c8      	uxtbls	r0, r1
    8310:	a90a      	add	r1, sp, #40	; 0x28
    8312:	bf88      	it	hi
    8314:	3037      	addhi	r0, #55	; 0x37
    8316:	4421      	add	r1, r4
    8318:	bf88      	it	hi
    831a:	b2c0      	uxtbhi	r0, r0
    831c:	f801 0c24 	strb.w	r0, [r1, #-36]
			n /= base;
			if (n == 0) break;
			i--;
    8320:	1e66      	subs	r6, r4, #1
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
    8322:	4629      	mov	r1, r5
    8324:	2d00      	cmp	r5, #0
    8326:	d1e8      	bne.n	82fa <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    8328:	b133      	cbz	r3, 8338 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    832a:	3c01      	subs	r4, #1
    832c:	b2e4      	uxtb	r4, r4
		buf[i] = '-';
    832e:	ab0a      	add	r3, sp, #40	; 0x28
    8330:	4423      	add	r3, r4
    8332:	222d      	movs	r2, #45	; 0x2d
    8334:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    8338:	683b      	ldr	r3, [r7, #0]
    833a:	aa01      	add	r2, sp, #4
    833c:	1911      	adds	r1, r2, r4
    833e:	685b      	ldr	r3, [r3, #4]
    8340:	4638      	mov	r0, r7
    8342:	f1c4 0222 	rsb	r2, r4, #34	; 0x22
    8346:	4798      	blx	r3
}
    8348:	b00b      	add	sp, #44	; 0x2c
    834a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    834c:	2230      	movs	r2, #48	; 0x30
    834e:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    8352:	2421      	movs	r4, #33	; 0x21
    8354:	e7e8      	b.n	8328 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    8356:	6803      	ldr	r3, [r0, #0]
    8358:	b2c9      	uxtb	r1, r1
    835a:	681b      	ldr	r3, [r3, #0]
    835c:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    835e:	b00b      	add	sp, #44	; 0x2c
    8360:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8362:	bf00      	nop

00008364 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    8364:	2900      	cmp	r1, #0
		sign = '-';
		n = -n;
    8366:	bfba      	itte	lt
    8368:	4249      	neglt	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    836a:	232d      	movlt	r3, #45	; 0x2d
}


size_t Print::print(long n)
{
	uint8_t sign=0;
    836c:	2300      	movge	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    836e:	220a      	movs	r2, #10
    8370:	f7ff bfb8 	b.w	82e4 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

00008374 <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    8374:	f7ff bdd6 	b.w	7f24 <usb_serial_flush_input>

00008378 <usb_serial_class::peek()>:
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    8378:	f7ff bdae 	b.w	7ed8 <usb_serial_peekchar>

0000837c <usb_serial_class::read()>:
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    837c:	f7ff bd88 	b.w	7e90 <usb_serial_getchar>

00008380 <usb_serial_class::available()>:
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    8380:	f7ff bdc2 	b.w	7f08 <usb_serial_available>

00008384 <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    8384:	f7ff be9e 	b.w	80c4 <usb_serial_flush_output>

00008388 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    8388:	f7ff be78 	b.w	807c <usb_serial_write_buffer_free>

0000838c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    838c:	4608      	mov	r0, r1
    838e:	4611      	mov	r1, r2
    8390:	f7ff bde4 	b.w	7f5c <usb_serial_write>

00008394 <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    8394:	4608      	mov	r0, r1
    8396:	f7ff be65 	b.w	8064 <usb_serial_putchar>
    839a:	bf00      	nop

0000839c <String::~String()>:
	init();
	char buf[40];
	*this = dtostrf(num, digits + 2, digits, buf);
}

String::~String()
    839c:	b510      	push	{r4, lr}
    839e:	4604      	mov	r4, r0
{
	free(buffer);
    83a0:	6800      	ldr	r0, [r0, #0]
    83a2:	f001 f957 	bl	9654 <free>
}
    83a6:	4620      	mov	r0, r4
    83a8:	bd10      	pop	{r4, pc}
    83aa:	bf00      	nop

000083ac <String::reserve(unsigned int)>:
	len = 0;
	flags = 0;
}

unsigned char String::reserve(unsigned int size)
{
    83ac:	b538      	push	{r3, r4, r5, lr}
	if (capacity >= size) return 1;
    83ae:	6843      	ldr	r3, [r0, #4]
    83b0:	428b      	cmp	r3, r1
    83b2:	d301      	bcc.n	83b8 <String::reserve(unsigned int)+0xc>
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    83b4:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
    83b6:	bd38      	pop	{r3, r4, r5, pc}
    83b8:	460d      	mov	r5, r1
    83ba:	4604      	mov	r4, r0

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    83bc:	3101      	adds	r1, #1
    83be:	6800      	ldr	r0, [r0, #0]
    83c0:	f001 fcd4 	bl	9d6c <realloc>
	if (newbuffer) {
    83c4:	2800      	cmp	r0, #0
    83c6:	d0f6      	beq.n	83b6 <String::reserve(unsigned int)+0xa>

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    83c8:	68a3      	ldr	r3, [r4, #8]
unsigned char String::changeBuffer(unsigned int maxStrLen)
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
	if (newbuffer) {
		buffer = newbuffer;
		capacity = maxStrLen;
    83ca:	e884 0021 	stmia.w	r4, {r0, r5}

unsigned char String::reserve(unsigned int size)
{
	if (capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
    83ce:	2b00      	cmp	r3, #0
    83d0:	d1f0      	bne.n	83b4 <String::reserve(unsigned int)+0x8>
    83d2:	7003      	strb	r3, [r0, #0]
    83d4:	e7ee      	b.n	83b4 <String::reserve(unsigned int)+0x8>
    83d6:	bf00      	nop

000083d8 <String::copy(char const*, unsigned int)>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    83d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    83da:	4604      	mov	r4, r0
	if (length == 0) {
    83dc:	4615      	mov	r5, r2
    83de:	b932      	cbnz	r2, 83ee <String::copy(char const*, unsigned int)+0x16>
		if (buffer) buffer[0] = 0;
    83e0:	6803      	ldr	r3, [r0, #0]
    83e2:	b103      	cbz	r3, 83e6 <String::copy(char const*, unsigned int)+0xe>
    83e4:	701a      	strb	r2, [r3, #0]
		len = 0;
    83e6:	2300      	movs	r3, #0
    83e8:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    83ea:	4620      	mov	r0, r4
    83ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83ee:	460e      	mov	r6, r1
	if (length == 0) {
		if (buffer) buffer[0] = 0;
		len = 0;
		return *this;
	}
	if (!reserve(length)) {
    83f0:	4611      	mov	r1, r2
    83f2:	f7ff ffdb 	bl	83ac <String::reserve(unsigned int)>
    83f6:	4607      	mov	r7, r0
    83f8:	b948      	cbnz	r0, 840e <String::copy(char const*, unsigned int)+0x36>
		if (buffer) {
    83fa:	6820      	ldr	r0, [r4, #0]
    83fc:	b110      	cbz	r0, 8404 <String::copy(char const*, unsigned int)+0x2c>
			free(buffer);
    83fe:	f001 f929 	bl	9654 <free>
			buffer = NULL;
    8402:	6027      	str	r7, [r4, #0]
		}
		len = capacity = 0;
    8404:	2300      	movs	r3, #0
    8406:	6063      	str	r3, [r4, #4]
    8408:	60a3      	str	r3, [r4, #8]
		return *this;
	}
	len = length;
	strcpy(buffer, cstr);
	return *this;
}
    840a:	4620      	mov	r0, r4
    840c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			buffer = NULL;
		}
		len = capacity = 0;
		return *this;
	}
	len = length;
    840e:	60a5      	str	r5, [r4, #8]
	strcpy(buffer, cstr);
    8410:	4631      	mov	r1, r6
    8412:	6820      	ldr	r0, [r4, #0]
    8414:	f001 feda 	bl	a1cc <strcpy>
	return *this;
    8418:	e7e7      	b.n	83ea <String::copy(char const*, unsigned int)+0x12>
    841a:	bf00      	nop

0000841c <String::String(char const*)>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    841c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    841e:	2300      	movs	r3, #0

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    8420:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    8422:	6003      	str	r3, [r0, #0]
	capacity = 0;
    8424:	6043      	str	r3, [r0, #4]
	len = 0;
    8426:	6083      	str	r3, [r0, #8]
	flags = 0;
    8428:	7303      	strb	r3, [r0, #12]
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    842a:	b141      	cbz	r1, 843e <String::String(char const*)+0x22>
    842c:	4608      	mov	r0, r1
    842e:	460d      	mov	r5, r1
    8430:	f001 ff46 	bl	a2c0 <strlen>
    8434:	4629      	mov	r1, r5
    8436:	4602      	mov	r2, r0
    8438:	4620      	mov	r0, r4
    843a:	f7ff ffcd 	bl	83d8 <String::copy(char const*, unsigned int)>
}
    843e:	4620      	mov	r0, r4
    8440:	bd38      	pop	{r3, r4, r5, pc}
    8442:	bf00      	nop

00008444 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
    8444:	b1b2      	cbz	r2, 8474 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
    8446:	b1a9      	cbz	r1, 8474 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x30>
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    8448:	b538      	push	{r3, r4, r5, lr}
	if (!bufsize || !buf) return;
	if (index >= len) {
    844a:	6884      	ldr	r4, [r0, #8]
    844c:	429c      	cmp	r4, r3
    844e:	d90e      	bls.n	846e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2a>
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
    8450:	1ae4      	subs	r4, r4, r3
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    8452:	3a01      	subs	r2, #1
    8454:	460d      	mov	r5, r1
    8456:	4294      	cmp	r4, r2
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    8458:	6801      	ldr	r1, [r0, #0]
    845a:	bf28      	it	cs
    845c:	4614      	movcs	r4, r2
    845e:	4419      	add	r1, r3
    8460:	4622      	mov	r2, r4
    8462:	4628      	mov	r0, r5
    8464:	f001 ff9a 	bl	a39c <strncpy>
	buf[n] = 0;
    8468:	2300      	movs	r3, #0
    846a:	552b      	strb	r3, [r5, r4]
    846c:	bd38      	pop	{r3, r4, r5, pc}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
    846e:	2300      	movs	r3, #0
    8470:	700b      	strb	r3, [r1, #0]
		return;
    8472:	bd38      	pop	{r3, r4, r5, pc}
    8474:	4770      	bx	lr
    8476:	bf00      	nop

00008478 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    8478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    847c:	4e31      	ldr	r6, [pc, #196]	; (8544 <yield+0xcc>)
    847e:	7833      	ldrb	r3, [r6, #0]
    8480:	b193      	cbz	r3, 84a8 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    8482:	4f31      	ldr	r7, [pc, #196]	; (8548 <yield+0xd0>)
    8484:	783a      	ldrb	r2, [r7, #0]
    8486:	b97a      	cbnz	r2, 84a8 <yield+0x30>
	running = 1;
    8488:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    848a:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    848c:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    848e:	d436      	bmi.n	84fe <yield+0x86>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    8490:	079a      	lsls	r2, r3, #30
    8492:	d419      	bmi.n	84c8 <yield+0x50>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    8494:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    8496:	075b      	lsls	r3, r3, #29
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    8498:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    849a:	d505      	bpl.n	84a8 <yield+0x30>
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);

	static void runFromYield() {
		if (!firstYield) return;  
    849c:	4b2b      	ldr	r3, [pc, #172]	; (854c <yield+0xd4>)
    849e:	681a      	ldr	r2, [r3, #0]
    84a0:	b112      	cbz	r2, 84a8 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    84a2:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    84a6:	b10a      	cbz	r2, 84ac <yield+0x34>
    84a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    84ac:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    84b0:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    84b2:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    84b4:	b118      	cbz	r0, 84be <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    84b6:	4c26      	ldr	r4, [pc, #152]	; (8550 <yield+0xd8>)
    84b8:	7822      	ldrb	r2, [r4, #0]
    84ba:	2a00      	cmp	r2, #0
    84bc:	d02e      	beq.n	851c <yield+0xa4>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    84be:	2900      	cmp	r1, #0
    84c0:	d1f2      	bne.n	84a8 <yield+0x30>
    84c2:	b662      	cpsie	i
    84c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial_putchar(c); return 1; }
	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    84c8:	f8df 8090 	ldr.w	r8, [pc, #144]	; 855c <yield+0xe4>
    84cc:	f898 2000 	ldrb.w	r2, [r8]
    84d0:	2a00      	cmp	r2, #0
    84d2:	d0df      	beq.n	8494 <yield+0x1c>
    84d4:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8560 <yield+0xe8>
    84d8:	2400      	movs	r4, #0
    84da:	e005      	b.n	84e8 <yield+0x70>
    84dc:	3401      	adds	r4, #1
    84de:	f898 3000 	ldrb.w	r3, [r8]
    84e2:	b2e4      	uxtb	r4, r4
    84e4:	42a3      	cmp	r3, r4
    84e6:	d912      	bls.n	850e <yield+0x96>
			s_serials_with_serial_events[i]->doYieldCode();
    84e8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
	static uint8_t 			s_count_serials_with_serial_events;
	void 		(* const _serialEvent)(); 
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*_serialEvent)();
    84ec:	682b      	ldr	r3, [r5, #0]
    84ee:	4628      	mov	r0, r5
    84f0:	691b      	ldr	r3, [r3, #16]
    84f2:	4798      	blx	r3
    84f4:	2800      	cmp	r0, #0
    84f6:	d0f1      	beq.n	84dc <yield+0x64>
    84f8:	692b      	ldr	r3, [r5, #16]
    84fa:	4798      	blx	r3
    84fc:	e7ee      	b.n	84dc <yield+0x64>
			// sketch still gets to run normally after this wait time.
			//if ((uint32_t)(systick_millis_count - millis_begin) > 2500) break;
		//}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    84fe:	f7ff fd03 	bl	7f08 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    8502:	b9c8      	cbnz	r0, 8538 <yield+0xc0>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    8504:	4b13      	ldr	r3, [pc, #76]	; (8554 <yield+0xdc>)
    8506:	781b      	ldrb	r3, [r3, #0]
    8508:	b91b      	cbnz	r3, 8512 <yield+0x9a>
    850a:	7833      	ldrb	r3, [r6, #0]
    850c:	e7c0      	b.n	8490 <yield+0x18>
    850e:	7833      	ldrb	r3, [r6, #0]
    8510:	e7c0      	b.n	8494 <yield+0x1c>
    8512:	7833      	ldrb	r3, [r6, #0]
    8514:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    8518:	7033      	strb	r3, [r6, #0]
    851a:	e7b9      	b.n	8490 <yield+0x18>
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
		firstYield = first->_next;
    851c:	6945      	ldr	r5, [r0, #20]
    851e:	601d      	str	r5, [r3, #0]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    8520:	2301      	movs	r3, #1
    8522:	7023      	strb	r3, [r4, #0]
		firstYield = first->_next;
		if (firstYield) {
    8524:	b15d      	cbz	r5, 853e <yield+0xc6>
			firstYield->_prev = nullptr;
    8526:	61aa      	str	r2, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    8528:	b901      	cbnz	r1, 852c <yield+0xb4>
    852a:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    852c:	2500      	movs	r5, #0
    852e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    8530:	6883      	ldr	r3, [r0, #8]
    8532:	4798      	blx	r3
		runningFromYield = false;
    8534:	7025      	strb	r5, [r4, #0]
    8536:	e7b7      	b.n	84a8 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    8538:	f000 f8c6 	bl	86c8 <serialEvent()>
    853c:	e7e2      	b.n	8504 <yield+0x8c>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    853e:	4b06      	ldr	r3, [pc, #24]	; (8558 <yield+0xe0>)
    8540:	601d      	str	r5, [r3, #0]
    8542:	e7f1      	b.n	8528 <yield+0xb0>
    8544:	1fff8a9c 	.word	0x1fff8a9c
    8548:	1fff9835 	.word	0x1fff9835
    854c:	1fff9830 	.word	0x1fff9830
    8550:	1fff9834 	.word	0x1fff9834
    8554:	1fff8b42 	.word	0x1fff8b42
    8558:	1fff982c 	.word	0x1fff982c
    855c:	1fff9844 	.word	0x1fff9844
    8560:	1fff9838 	.word	0x1fff9838

00008564 <analog_init>:
#else
#error "F_BUS must be 128, 120, 108, 96, 90, 80, 72, 64, 60, 56, 54, 48, 40, 36, 24, 4 or 2 MHz"
#endif

void analog_init(void)
{
    8564:	b430      	push	{r4, r5}
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8566:	4829      	ldr	r0, [pc, #164]	; (860c <analog_init+0xa8>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8568:	4a29      	ldr	r2, [pc, #164]	; (8610 <analog_init+0xac>)
	#endif

	if (analog_config_bits == 8) {
    856a:	4b2a      	ldr	r3, [pc, #168]	; (8614 <analog_init+0xb0>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    856c:	4d2a      	ldr	r5, [pc, #168]	; (8618 <analog_init+0xb4>)
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    856e:	2460      	movs	r4, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8570:	21e1      	movs	r1, #225	; 0xe1
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    8572:	7004      	strb	r4, [r0, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    8574:	7011      	strb	r1, [r2, #0]
	#endif

	if (analog_config_bits == 8) {
    8576:	781b      	ldrb	r3, [r3, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8578:	4c28      	ldr	r4, [pc, #160]	; (861c <analog_init+0xb8>)
	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    857a:	2b08      	cmp	r3, #8
    857c:	d030      	beq.n	85e0 <analog_init+0x7c>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    857e:	2b0a      	cmp	r3, #10
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    8580:	4827      	ldr	r0, [pc, #156]	; (8620 <analog_init+0xbc>)
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    8582:	4928      	ldr	r1, [pc, #160]	; (8624 <analog_init+0xc0>)
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    8584:	d037      	beq.n	85f6 <analog_init+0x92>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    8586:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    8588:	bf0c      	ite	eq
    858a:	2235      	moveq	r2, #53	; 0x35
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    858c:	223d      	movne	r2, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    858e:	2312      	movs	r3, #18
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8590:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8592:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    8594:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    8596:	600b      	str	r3, [r1, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    8598:	4b23      	ldr	r3, [pc, #140]	; (8628 <analog_init+0xc4>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    859a:	4924      	ldr	r1, [pc, #144]	; (862c <analog_init+0xc8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    859c:	781b      	ldrb	r3, [r3, #0]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    859e:	4a24      	ldr	r2, [pc, #144]	; (8630 <analog_init+0xcc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    85a0:	b1bb      	cbz	r3, 85d2 <analog_init+0x6e>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    85a2:	2301      	movs	r3, #1
    85a4:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    85a6:	6013      	str	r3, [r2, #0]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    85a8:	4b22      	ldr	r3, [pc, #136]	; (8634 <analog_init+0xd0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    85aa:	4923      	ldr	r1, [pc, #140]	; (8638 <analog_init+0xd4>)
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    85ac:	781b      	ldrb	r3, [r3, #0]
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    85ae:	4a23      	ldr	r2, [pc, #140]	; (863c <analog_init+0xd8>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
    85b0:	2b01      	cmp	r3, #1
    85b2:	d926      	bls.n	8602 <analog_init+0x9e>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
    85b4:	2b04      	cmp	r3, #4
    85b6:	d90f      	bls.n	85d8 <analog_init+0x74>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
    85b8:	2b08      	cmp	r3, #8
    85ba:	d91e      	bls.n	85fa <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
		#endif
	} else if (num <= 16) {
    85bc:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    85be:	bf94      	ite	ls
    85c0:	2386      	movls	r3, #134	; 0x86
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
		#endif
	} else {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    85c2:	2387      	movhi	r3, #135	; 0x87
    85c4:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    85c6:	6013      	str	r3, [r2, #0]
		#endif
	}
	calibrating = 1;
    85c8:	4b1d      	ldr	r3, [pc, #116]	; (8640 <analog_init+0xdc>)
    85ca:	2201      	movs	r2, #1
    85cc:	701a      	strb	r2, [r3, #0]
}
    85ce:	bc30      	pop	{r4, r5}
    85d0:	4770      	bx	lr
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    85d2:	600b      	str	r3, [r1, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    85d4:	6013      	str	r3, [r2, #0]
    85d6:	e7e7      	b.n	85a8 <analog_init+0x44>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
		#endif
	} else if (num <= 4) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    85d8:	2384      	movs	r3, #132	; 0x84
    85da:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    85dc:	6013      	str	r3, [r2, #0]
    85de:	e7f3      	b.n	85c8 <analog_init+0x64>

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    85e0:	f500 208e 	add.w	r0, r0, #290816	; 0x47000
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    85e4:	490f      	ldr	r1, [pc, #60]	; (8624 <analog_init+0xc0>)

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    85e6:	3008      	adds	r0, #8
	VREF_TRM = 0x60;
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    85e8:	2201      	movs	r2, #1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    85ea:	2313      	movs	r3, #19
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    85ec:	602a      	str	r2, [r5, #0]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    85ee:	6023      	str	r3, [r4, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    85f0:	6002      	str	r2, [r0, #0]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    85f2:	600b      	str	r3, [r1, #0]
    85f4:	e7d0      	b.n	8598 <analog_init+0x34>
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    85f6:	2239      	movs	r2, #57	; 0x39
    85f8:	e7f7      	b.n	85ea <analog_init+0x86>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
		#endif
	} else if (num <= 8) {
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    85fa:	2385      	movs	r3, #133	; 0x85
    85fc:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    85fe:	6013      	str	r3, [r2, #0]
    8600:	e7e2      	b.n	85c8 <analog_init+0x64>
	}
	#endif

	num = analog_num_average;
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    8602:	2380      	movs	r3, #128	; 0x80
    8604:	600b      	str	r3, [r1, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    8606:	6013      	str	r3, [r2, #0]
    8608:	e7de      	b.n	85c8 <analog_init+0x64>
    860a:	bf00      	nop
    860c:	40074000 	.word	0x40074000
    8610:	40074001 	.word	0x40074001
    8614:	1fff8a9d 	.word	0x1fff8a9d
    8618:	4003b008 	.word	0x4003b008
    861c:	4003b00c 	.word	0x4003b00c
    8620:	400bb008 	.word	0x400bb008
    8624:	400bb00c 	.word	0x400bb00c
    8628:	1fff9837 	.word	0x1fff9837
    862c:	4003b020 	.word	0x4003b020
    8630:	400bb020 	.word	0x400bb020
    8634:	1fff8a9e 	.word	0x1fff8a9e
    8638:	4003b024 	.word	0x4003b024
    863c:	400bb024 	.word	0x400bb024
    8640:	1fff9836 	.word	0x1fff9836

00008644 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    8644:	b570      	push	{r4, r5, r6, lr}
    8646:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    8648:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    864a:	4b19      	ldr	r3, [pc, #100]	; (86b0 <usb_init_serialnumber+0x6c>)
	FTFL_FCCOB0 = 0x41;
    864c:	4d19      	ldr	r5, [pc, #100]	; (86b4 <usb_init_serialnumber+0x70>)
	FTFL_FCCOB1 = 15;
    864e:	481a      	ldr	r0, [pc, #104]	; (86b8 <usb_init_serialnumber+0x74>)
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    8650:	2270      	movs	r2, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    8652:	2641      	movs	r6, #65	; 0x41
	FTFL_FCCOB1 = 15;
    8654:	240f      	movs	r4, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    8656:	2180      	movs	r1, #128	; 0x80
	char buf[11];
	uint32_t i, num;

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    8658:	701a      	strb	r2, [r3, #0]
	FTFL_FCCOB0 = 0x41;
    865a:	702e      	strb	r6, [r5, #0]
	FTFL_FCCOB1 = 15;
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    865c:	461a      	mov	r2, r3

	__disable_irq();
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
	FTFL_FCCOB0 = 0x41;
	FTFL_FCCOB1 = 15;
    865e:	7004      	strb	r4, [r0, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    8660:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    8662:	7813      	ldrb	r3, [r2, #0]
    8664:	061b      	lsls	r3, r3, #24
    8666:	d5fc      	bpl.n	8662 <usb_init_serialnumber+0x1e>
	num = *(uint32_t *)&FTFL_FCCOB7;
    8668:	4b14      	ldr	r3, [pc, #80]	; (86bc <usb_init_serialnumber+0x78>)
    866a:	6818      	ldr	r0, [r3, #0]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    866c:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    866e:	4b14      	ldr	r3, [pc, #80]	; (86c0 <usb_init_serialnumber+0x7c>)
    8670:	4c14      	ldr	r4, [pc, #80]	; (86c4 <usb_init_serialnumber+0x80>)
    8672:	4298      	cmp	r0, r3
    8674:	bf98      	it	ls
    8676:	eb00 0080 	addls.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    867a:	a901      	add	r1, sp, #4
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    867c:	bf98      	it	ls
    867e:	0040      	lslls	r0, r0, #1
	ultoa(num, buf, 10);
    8680:	220a      	movs	r2, #10
    8682:	f7fe fb01 	bl	6c88 <ultoa>
    8686:	a901      	add	r1, sp, #4
    8688:	4620      	mov	r0, r4
	for (i=0; i<10; i++) {
    868a:	2300      	movs	r3, #0
		char c = buf[i];
    868c:	f811 2b01 	ldrb.w	r2, [r1], #1
    8690:	3301      	adds	r3, #1
		if (!c) break;
    8692:	b13a      	cbz	r2, 86a4 <usb_init_serialnumber+0x60>
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    8694:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    8696:	f820 2f02 	strh.w	r2, [r0, #2]!
#endif
	__enable_irq();
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    869a:	d1f7      	bne.n	868c <usb_init_serialnumber+0x48>
    869c:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    869e:	7023      	strb	r3, [r4, #0]
}
    86a0:	b004      	add	sp, #16
    86a2:	bd70      	pop	{r4, r5, r6, pc}
    86a4:	005b      	lsls	r3, r3, #1
    86a6:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    86a8:	7023      	strb	r3, [r4, #0]
}
    86aa:	b004      	add	sp, #16
    86ac:	bd70      	pop	{r4, r5, r6, pc}
    86ae:	bf00      	nop
    86b0:	40020000 	.word	0x40020000
    86b4:	40020007 	.word	0x40020007
    86b8:	40020006 	.word	0x40020006
    86bc:	40020008 	.word	0x40020008
    86c0:	0098967f 	.word	0x0098967f
    86c4:	1fff8b2c 	.word	0x1fff8b2c

000086c8 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    86c8:	4770      	bx	lr
    86ca:	bf00      	nop

000086cc <__aeabi_atexit>:
    86cc:	460b      	mov	r3, r1
    86ce:	4601      	mov	r1, r0
    86d0:	4618      	mov	r0, r3
    86d2:	f000 bf83 	b.w	95dc <__cxa_atexit>
    86d6:	bf00      	nop

000086d8 <__aeabi_drsub>:
    86d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    86dc:	e002      	b.n	86e4 <__adddf3>
    86de:	bf00      	nop

000086e0 <__aeabi_dsub>:
    86e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000086e4 <__adddf3>:
    86e4:	b530      	push	{r4, r5, lr}
    86e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    86ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
    86ee:	ea94 0f05 	teq	r4, r5
    86f2:	bf08      	it	eq
    86f4:	ea90 0f02 	teqeq	r0, r2
    86f8:	bf1f      	itttt	ne
    86fa:	ea54 0c00 	orrsne.w	ip, r4, r0
    86fe:	ea55 0c02 	orrsne.w	ip, r5, r2
    8702:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    8706:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    870a:	f000 80e2 	beq.w	88d2 <__adddf3+0x1ee>
    870e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    8712:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    8716:	bfb8      	it	lt
    8718:	426d      	neglt	r5, r5
    871a:	dd0c      	ble.n	8736 <__adddf3+0x52>
    871c:	442c      	add	r4, r5
    871e:	ea80 0202 	eor.w	r2, r0, r2
    8722:	ea81 0303 	eor.w	r3, r1, r3
    8726:	ea82 0000 	eor.w	r0, r2, r0
    872a:	ea83 0101 	eor.w	r1, r3, r1
    872e:	ea80 0202 	eor.w	r2, r0, r2
    8732:	ea81 0303 	eor.w	r3, r1, r3
    8736:	2d36      	cmp	r5, #54	; 0x36
    8738:	bf88      	it	hi
    873a:	bd30      	pophi	{r4, r5, pc}
    873c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8740:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8744:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    8748:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    874c:	d002      	beq.n	8754 <__adddf3+0x70>
    874e:	4240      	negs	r0, r0
    8750:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8754:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    8758:	ea4f 3303 	mov.w	r3, r3, lsl #12
    875c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    8760:	d002      	beq.n	8768 <__adddf3+0x84>
    8762:	4252      	negs	r2, r2
    8764:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    8768:	ea94 0f05 	teq	r4, r5
    876c:	f000 80a7 	beq.w	88be <__adddf3+0x1da>
    8770:	f1a4 0401 	sub.w	r4, r4, #1
    8774:	f1d5 0e20 	rsbs	lr, r5, #32
    8778:	db0d      	blt.n	8796 <__adddf3+0xb2>
    877a:	fa02 fc0e 	lsl.w	ip, r2, lr
    877e:	fa22 f205 	lsr.w	r2, r2, r5
    8782:	1880      	adds	r0, r0, r2
    8784:	f141 0100 	adc.w	r1, r1, #0
    8788:	fa03 f20e 	lsl.w	r2, r3, lr
    878c:	1880      	adds	r0, r0, r2
    878e:	fa43 f305 	asr.w	r3, r3, r5
    8792:	4159      	adcs	r1, r3
    8794:	e00e      	b.n	87b4 <__adddf3+0xd0>
    8796:	f1a5 0520 	sub.w	r5, r5, #32
    879a:	f10e 0e20 	add.w	lr, lr, #32
    879e:	2a01      	cmp	r2, #1
    87a0:	fa03 fc0e 	lsl.w	ip, r3, lr
    87a4:	bf28      	it	cs
    87a6:	f04c 0c02 	orrcs.w	ip, ip, #2
    87aa:	fa43 f305 	asr.w	r3, r3, r5
    87ae:	18c0      	adds	r0, r0, r3
    87b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    87b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    87b8:	d507      	bpl.n	87ca <__adddf3+0xe6>
    87ba:	f04f 0e00 	mov.w	lr, #0
    87be:	f1dc 0c00 	rsbs	ip, ip, #0
    87c2:	eb7e 0000 	sbcs.w	r0, lr, r0
    87c6:	eb6e 0101 	sbc.w	r1, lr, r1
    87ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    87ce:	d31b      	bcc.n	8808 <__adddf3+0x124>
    87d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    87d4:	d30c      	bcc.n	87f0 <__adddf3+0x10c>
    87d6:	0849      	lsrs	r1, r1, #1
    87d8:	ea5f 0030 	movs.w	r0, r0, rrx
    87dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    87e0:	f104 0401 	add.w	r4, r4, #1
    87e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    87e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    87ec:	f080 809a 	bcs.w	8924 <__adddf3+0x240>
    87f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    87f4:	bf08      	it	eq
    87f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    87fa:	f150 0000 	adcs.w	r0, r0, #0
    87fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8802:	ea41 0105 	orr.w	r1, r1, r5
    8806:	bd30      	pop	{r4, r5, pc}
    8808:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    880c:	4140      	adcs	r0, r0
    880e:	eb41 0101 	adc.w	r1, r1, r1
    8812:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8816:	f1a4 0401 	sub.w	r4, r4, #1
    881a:	d1e9      	bne.n	87f0 <__adddf3+0x10c>
    881c:	f091 0f00 	teq	r1, #0
    8820:	bf04      	itt	eq
    8822:	4601      	moveq	r1, r0
    8824:	2000      	moveq	r0, #0
    8826:	fab1 f381 	clz	r3, r1
    882a:	bf08      	it	eq
    882c:	3320      	addeq	r3, #32
    882e:	f1a3 030b 	sub.w	r3, r3, #11
    8832:	f1b3 0220 	subs.w	r2, r3, #32
    8836:	da0c      	bge.n	8852 <__adddf3+0x16e>
    8838:	320c      	adds	r2, #12
    883a:	dd08      	ble.n	884e <__adddf3+0x16a>
    883c:	f102 0c14 	add.w	ip, r2, #20
    8840:	f1c2 020c 	rsb	r2, r2, #12
    8844:	fa01 f00c 	lsl.w	r0, r1, ip
    8848:	fa21 f102 	lsr.w	r1, r1, r2
    884c:	e00c      	b.n	8868 <__adddf3+0x184>
    884e:	f102 0214 	add.w	r2, r2, #20
    8852:	bfd8      	it	le
    8854:	f1c2 0c20 	rsble	ip, r2, #32
    8858:	fa01 f102 	lsl.w	r1, r1, r2
    885c:	fa20 fc0c 	lsr.w	ip, r0, ip
    8860:	bfdc      	itt	le
    8862:	ea41 010c 	orrle.w	r1, r1, ip
    8866:	4090      	lslle	r0, r2
    8868:	1ae4      	subs	r4, r4, r3
    886a:	bfa2      	ittt	ge
    886c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    8870:	4329      	orrge	r1, r5
    8872:	bd30      	popge	{r4, r5, pc}
    8874:	ea6f 0404 	mvn.w	r4, r4
    8878:	3c1f      	subs	r4, #31
    887a:	da1c      	bge.n	88b6 <__adddf3+0x1d2>
    887c:	340c      	adds	r4, #12
    887e:	dc0e      	bgt.n	889e <__adddf3+0x1ba>
    8880:	f104 0414 	add.w	r4, r4, #20
    8884:	f1c4 0220 	rsb	r2, r4, #32
    8888:	fa20 f004 	lsr.w	r0, r0, r4
    888c:	fa01 f302 	lsl.w	r3, r1, r2
    8890:	ea40 0003 	orr.w	r0, r0, r3
    8894:	fa21 f304 	lsr.w	r3, r1, r4
    8898:	ea45 0103 	orr.w	r1, r5, r3
    889c:	bd30      	pop	{r4, r5, pc}
    889e:	f1c4 040c 	rsb	r4, r4, #12
    88a2:	f1c4 0220 	rsb	r2, r4, #32
    88a6:	fa20 f002 	lsr.w	r0, r0, r2
    88aa:	fa01 f304 	lsl.w	r3, r1, r4
    88ae:	ea40 0003 	orr.w	r0, r0, r3
    88b2:	4629      	mov	r1, r5
    88b4:	bd30      	pop	{r4, r5, pc}
    88b6:	fa21 f004 	lsr.w	r0, r1, r4
    88ba:	4629      	mov	r1, r5
    88bc:	bd30      	pop	{r4, r5, pc}
    88be:	f094 0f00 	teq	r4, #0
    88c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    88c6:	bf06      	itte	eq
    88c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    88cc:	3401      	addeq	r4, #1
    88ce:	3d01      	subne	r5, #1
    88d0:	e74e      	b.n	8770 <__adddf3+0x8c>
    88d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    88d6:	bf18      	it	ne
    88d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    88dc:	d029      	beq.n	8932 <__adddf3+0x24e>
    88de:	ea94 0f05 	teq	r4, r5
    88e2:	bf08      	it	eq
    88e4:	ea90 0f02 	teqeq	r0, r2
    88e8:	d005      	beq.n	88f6 <__adddf3+0x212>
    88ea:	ea54 0c00 	orrs.w	ip, r4, r0
    88ee:	bf04      	itt	eq
    88f0:	4619      	moveq	r1, r3
    88f2:	4610      	moveq	r0, r2
    88f4:	bd30      	pop	{r4, r5, pc}
    88f6:	ea91 0f03 	teq	r1, r3
    88fa:	bf1e      	ittt	ne
    88fc:	2100      	movne	r1, #0
    88fe:	2000      	movne	r0, #0
    8900:	bd30      	popne	{r4, r5, pc}
    8902:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    8906:	d105      	bne.n	8914 <__adddf3+0x230>
    8908:	0040      	lsls	r0, r0, #1
    890a:	4149      	adcs	r1, r1
    890c:	bf28      	it	cs
    890e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    8912:	bd30      	pop	{r4, r5, pc}
    8914:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    8918:	bf3c      	itt	cc
    891a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    891e:	bd30      	popcc	{r4, r5, pc}
    8920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    8924:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    8928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    892c:	f04f 0000 	mov.w	r0, #0
    8930:	bd30      	pop	{r4, r5, pc}
    8932:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    8936:	bf1a      	itte	ne
    8938:	4619      	movne	r1, r3
    893a:	4610      	movne	r0, r2
    893c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    8940:	bf1c      	itt	ne
    8942:	460b      	movne	r3, r1
    8944:	4602      	movne	r2, r0
    8946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    894a:	bf06      	itte	eq
    894c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    8950:	ea91 0f03 	teqeq	r1, r3
    8954:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    8958:	bd30      	pop	{r4, r5, pc}
    895a:	bf00      	nop

0000895c <__aeabi_ui2d>:
    895c:	f090 0f00 	teq	r0, #0
    8960:	bf04      	itt	eq
    8962:	2100      	moveq	r1, #0
    8964:	4770      	bxeq	lr
    8966:	b530      	push	{r4, r5, lr}
    8968:	f44f 6480 	mov.w	r4, #1024	; 0x400
    896c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8970:	f04f 0500 	mov.w	r5, #0
    8974:	f04f 0100 	mov.w	r1, #0
    8978:	e750      	b.n	881c <__adddf3+0x138>
    897a:	bf00      	nop

0000897c <__aeabi_i2d>:
    897c:	f090 0f00 	teq	r0, #0
    8980:	bf04      	itt	eq
    8982:	2100      	moveq	r1, #0
    8984:	4770      	bxeq	lr
    8986:	b530      	push	{r4, r5, lr}
    8988:	f44f 6480 	mov.w	r4, #1024	; 0x400
    898c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8990:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    8994:	bf48      	it	mi
    8996:	4240      	negmi	r0, r0
    8998:	f04f 0100 	mov.w	r1, #0
    899c:	e73e      	b.n	881c <__adddf3+0x138>
    899e:	bf00      	nop

000089a0 <__aeabi_f2d>:
    89a0:	0042      	lsls	r2, r0, #1
    89a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    89a6:	ea4f 0131 	mov.w	r1, r1, rrx
    89aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
    89ae:	bf1f      	itttt	ne
    89b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    89b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    89b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    89bc:	4770      	bxne	lr
    89be:	f092 0f00 	teq	r2, #0
    89c2:	bf14      	ite	ne
    89c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    89c8:	4770      	bxeq	lr
    89ca:	b530      	push	{r4, r5, lr}
    89cc:	f44f 7460 	mov.w	r4, #896	; 0x380
    89d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    89d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    89d8:	e720      	b.n	881c <__adddf3+0x138>
    89da:	bf00      	nop

000089dc <__aeabi_ul2d>:
    89dc:	ea50 0201 	orrs.w	r2, r0, r1
    89e0:	bf08      	it	eq
    89e2:	4770      	bxeq	lr
    89e4:	b530      	push	{r4, r5, lr}
    89e6:	f04f 0500 	mov.w	r5, #0
    89ea:	e00a      	b.n	8a02 <__aeabi_l2d+0x16>

000089ec <__aeabi_l2d>:
    89ec:	ea50 0201 	orrs.w	r2, r0, r1
    89f0:	bf08      	it	eq
    89f2:	4770      	bxeq	lr
    89f4:	b530      	push	{r4, r5, lr}
    89f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    89fa:	d502      	bpl.n	8a02 <__aeabi_l2d+0x16>
    89fc:	4240      	negs	r0, r0
    89fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    8a02:	f44f 6480 	mov.w	r4, #1024	; 0x400
    8a06:	f104 0432 	add.w	r4, r4, #50	; 0x32
    8a0a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    8a0e:	f43f aedc 	beq.w	87ca <__adddf3+0xe6>
    8a12:	f04f 0203 	mov.w	r2, #3
    8a16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8a1a:	bf18      	it	ne
    8a1c:	3203      	addne	r2, #3
    8a1e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    8a22:	bf18      	it	ne
    8a24:	3203      	addne	r2, #3
    8a26:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    8a2a:	f1c2 0320 	rsb	r3, r2, #32
    8a2e:	fa00 fc03 	lsl.w	ip, r0, r3
    8a32:	fa20 f002 	lsr.w	r0, r0, r2
    8a36:	fa01 fe03 	lsl.w	lr, r1, r3
    8a3a:	ea40 000e 	orr.w	r0, r0, lr
    8a3e:	fa21 f102 	lsr.w	r1, r1, r2
    8a42:	4414      	add	r4, r2
    8a44:	e6c1      	b.n	87ca <__adddf3+0xe6>
    8a46:	bf00      	nop

00008a48 <__aeabi_dmul>:
    8a48:	b570      	push	{r4, r5, r6, lr}
    8a4a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8a4e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8a52:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8a56:	bf1d      	ittte	ne
    8a58:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8a5c:	ea94 0f0c 	teqne	r4, ip
    8a60:	ea95 0f0c 	teqne	r5, ip
    8a64:	f000 f8de 	bleq	8c24 <__aeabi_dmul+0x1dc>
    8a68:	442c      	add	r4, r5
    8a6a:	ea81 0603 	eor.w	r6, r1, r3
    8a6e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    8a72:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    8a76:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    8a7a:	bf18      	it	ne
    8a7c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    8a80:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    8a88:	d038      	beq.n	8afc <__aeabi_dmul+0xb4>
    8a8a:	fba0 ce02 	umull	ip, lr, r0, r2
    8a8e:	f04f 0500 	mov.w	r5, #0
    8a92:	fbe1 e502 	umlal	lr, r5, r1, r2
    8a96:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    8a9a:	fbe0 e503 	umlal	lr, r5, r0, r3
    8a9e:	f04f 0600 	mov.w	r6, #0
    8aa2:	fbe1 5603 	umlal	r5, r6, r1, r3
    8aa6:	f09c 0f00 	teq	ip, #0
    8aaa:	bf18      	it	ne
    8aac:	f04e 0e01 	orrne.w	lr, lr, #1
    8ab0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    8ab4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    8ab8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    8abc:	d204      	bcs.n	8ac8 <__aeabi_dmul+0x80>
    8abe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    8ac2:	416d      	adcs	r5, r5
    8ac4:	eb46 0606 	adc.w	r6, r6, r6
    8ac8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    8acc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    8ad0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    8ad4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    8ad8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    8adc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8ae0:	bf88      	it	hi
    8ae2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8ae6:	d81e      	bhi.n	8b26 <__aeabi_dmul+0xde>
    8ae8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    8aec:	bf08      	it	eq
    8aee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    8af2:	f150 0000 	adcs.w	r0, r0, #0
    8af6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8afa:	bd70      	pop	{r4, r5, r6, pc}
    8afc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    8b00:	ea46 0101 	orr.w	r1, r6, r1
    8b04:	ea40 0002 	orr.w	r0, r0, r2
    8b08:	ea81 0103 	eor.w	r1, r1, r3
    8b0c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    8b10:	bfc2      	ittt	gt
    8b12:	ebd4 050c 	rsbsgt	r5, r4, ip
    8b16:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8b1a:	bd70      	popgt	{r4, r5, r6, pc}
    8b1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8b20:	f04f 0e00 	mov.w	lr, #0
    8b24:	3c01      	subs	r4, #1
    8b26:	f300 80ab 	bgt.w	8c80 <__aeabi_dmul+0x238>
    8b2a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    8b2e:	bfde      	ittt	le
    8b30:	2000      	movle	r0, #0
    8b32:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    8b36:	bd70      	pople	{r4, r5, r6, pc}
    8b38:	f1c4 0400 	rsb	r4, r4, #0
    8b3c:	3c20      	subs	r4, #32
    8b3e:	da35      	bge.n	8bac <__aeabi_dmul+0x164>
    8b40:	340c      	adds	r4, #12
    8b42:	dc1b      	bgt.n	8b7c <__aeabi_dmul+0x134>
    8b44:	f104 0414 	add.w	r4, r4, #20
    8b48:	f1c4 0520 	rsb	r5, r4, #32
    8b4c:	fa00 f305 	lsl.w	r3, r0, r5
    8b50:	fa20 f004 	lsr.w	r0, r0, r4
    8b54:	fa01 f205 	lsl.w	r2, r1, r5
    8b58:	ea40 0002 	orr.w	r0, r0, r2
    8b5c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    8b60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    8b64:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8b68:	fa21 f604 	lsr.w	r6, r1, r4
    8b6c:	eb42 0106 	adc.w	r1, r2, r6
    8b70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8b74:	bf08      	it	eq
    8b76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8b7a:	bd70      	pop	{r4, r5, r6, pc}
    8b7c:	f1c4 040c 	rsb	r4, r4, #12
    8b80:	f1c4 0520 	rsb	r5, r4, #32
    8b84:	fa00 f304 	lsl.w	r3, r0, r4
    8b88:	fa20 f005 	lsr.w	r0, r0, r5
    8b8c:	fa01 f204 	lsl.w	r2, r1, r4
    8b90:	ea40 0002 	orr.w	r0, r0, r2
    8b94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8b98:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    8b9c:	f141 0100 	adc.w	r1, r1, #0
    8ba0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8ba4:	bf08      	it	eq
    8ba6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8baa:	bd70      	pop	{r4, r5, r6, pc}
    8bac:	f1c4 0520 	rsb	r5, r4, #32
    8bb0:	fa00 f205 	lsl.w	r2, r0, r5
    8bb4:	ea4e 0e02 	orr.w	lr, lr, r2
    8bb8:	fa20 f304 	lsr.w	r3, r0, r4
    8bbc:	fa01 f205 	lsl.w	r2, r1, r5
    8bc0:	ea43 0302 	orr.w	r3, r3, r2
    8bc4:	fa21 f004 	lsr.w	r0, r1, r4
    8bc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8bcc:	fa21 f204 	lsr.w	r2, r1, r4
    8bd0:	ea20 0002 	bic.w	r0, r0, r2
    8bd4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    8bd8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    8bdc:	bf08      	it	eq
    8bde:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    8be2:	bd70      	pop	{r4, r5, r6, pc}
    8be4:	f094 0f00 	teq	r4, #0
    8be8:	d10f      	bne.n	8c0a <__aeabi_dmul+0x1c2>
    8bea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    8bee:	0040      	lsls	r0, r0, #1
    8bf0:	eb41 0101 	adc.w	r1, r1, r1
    8bf4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8bf8:	bf08      	it	eq
    8bfa:	3c01      	subeq	r4, #1
    8bfc:	d0f7      	beq.n	8bee <__aeabi_dmul+0x1a6>
    8bfe:	ea41 0106 	orr.w	r1, r1, r6
    8c02:	f095 0f00 	teq	r5, #0
    8c06:	bf18      	it	ne
    8c08:	4770      	bxne	lr
    8c0a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    8c0e:	0052      	lsls	r2, r2, #1
    8c10:	eb43 0303 	adc.w	r3, r3, r3
    8c14:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    8c18:	bf08      	it	eq
    8c1a:	3d01      	subeq	r5, #1
    8c1c:	d0f7      	beq.n	8c0e <__aeabi_dmul+0x1c6>
    8c1e:	ea43 0306 	orr.w	r3, r3, r6
    8c22:	4770      	bx	lr
    8c24:	ea94 0f0c 	teq	r4, ip
    8c28:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8c2c:	bf18      	it	ne
    8c2e:	ea95 0f0c 	teqne	r5, ip
    8c32:	d00c      	beq.n	8c4e <__aeabi_dmul+0x206>
    8c34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8c38:	bf18      	it	ne
    8c3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8c3e:	d1d1      	bne.n	8be4 <__aeabi_dmul+0x19c>
    8c40:	ea81 0103 	eor.w	r1, r1, r3
    8c44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8c48:	f04f 0000 	mov.w	r0, #0
    8c4c:	bd70      	pop	{r4, r5, r6, pc}
    8c4e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8c52:	bf06      	itte	eq
    8c54:	4610      	moveq	r0, r2
    8c56:	4619      	moveq	r1, r3
    8c58:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8c5c:	d019      	beq.n	8c92 <__aeabi_dmul+0x24a>
    8c5e:	ea94 0f0c 	teq	r4, ip
    8c62:	d102      	bne.n	8c6a <__aeabi_dmul+0x222>
    8c64:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    8c68:	d113      	bne.n	8c92 <__aeabi_dmul+0x24a>
    8c6a:	ea95 0f0c 	teq	r5, ip
    8c6e:	d105      	bne.n	8c7c <__aeabi_dmul+0x234>
    8c70:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    8c74:	bf1c      	itt	ne
    8c76:	4610      	movne	r0, r2
    8c78:	4619      	movne	r1, r3
    8c7a:	d10a      	bne.n	8c92 <__aeabi_dmul+0x24a>
    8c7c:	ea81 0103 	eor.w	r1, r1, r3
    8c80:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    8c84:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8c88:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    8c8c:	f04f 0000 	mov.w	r0, #0
    8c90:	bd70      	pop	{r4, r5, r6, pc}
    8c92:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    8c96:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    8c9a:	bd70      	pop	{r4, r5, r6, pc}

00008c9c <__aeabi_ddiv>:
    8c9c:	b570      	push	{r4, r5, r6, lr}
    8c9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    8ca2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    8ca6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    8caa:	bf1d      	ittte	ne
    8cac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    8cb0:	ea94 0f0c 	teqne	r4, ip
    8cb4:	ea95 0f0c 	teqne	r5, ip
    8cb8:	f000 f8a7 	bleq	8e0a <__aeabi_ddiv+0x16e>
    8cbc:	eba4 0405 	sub.w	r4, r4, r5
    8cc0:	ea81 0e03 	eor.w	lr, r1, r3
    8cc4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8cc8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    8ccc:	f000 8088 	beq.w	8de0 <__aeabi_ddiv+0x144>
    8cd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    8cd4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8cd8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    8cdc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    8ce0:	ea4f 2202 	mov.w	r2, r2, lsl #8
    8ce4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    8ce8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    8cec:	ea4f 2600 	mov.w	r6, r0, lsl #8
    8cf0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    8cf4:	429d      	cmp	r5, r3
    8cf6:	bf08      	it	eq
    8cf8:	4296      	cmpeq	r6, r2
    8cfa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    8cfe:	f504 7440 	add.w	r4, r4, #768	; 0x300
    8d02:	d202      	bcs.n	8d0a <__aeabi_ddiv+0x6e>
    8d04:	085b      	lsrs	r3, r3, #1
    8d06:	ea4f 0232 	mov.w	r2, r2, rrx
    8d0a:	1ab6      	subs	r6, r6, r2
    8d0c:	eb65 0503 	sbc.w	r5, r5, r3
    8d10:	085b      	lsrs	r3, r3, #1
    8d12:	ea4f 0232 	mov.w	r2, r2, rrx
    8d16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    8d1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    8d1e:	ebb6 0e02 	subs.w	lr, r6, r2
    8d22:	eb75 0e03 	sbcs.w	lr, r5, r3
    8d26:	bf22      	ittt	cs
    8d28:	1ab6      	subcs	r6, r6, r2
    8d2a:	4675      	movcs	r5, lr
    8d2c:	ea40 000c 	orrcs.w	r0, r0, ip
    8d30:	085b      	lsrs	r3, r3, #1
    8d32:	ea4f 0232 	mov.w	r2, r2, rrx
    8d36:	ebb6 0e02 	subs.w	lr, r6, r2
    8d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
    8d3e:	bf22      	ittt	cs
    8d40:	1ab6      	subcs	r6, r6, r2
    8d42:	4675      	movcs	r5, lr
    8d44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    8d48:	085b      	lsrs	r3, r3, #1
    8d4a:	ea4f 0232 	mov.w	r2, r2, rrx
    8d4e:	ebb6 0e02 	subs.w	lr, r6, r2
    8d52:	eb75 0e03 	sbcs.w	lr, r5, r3
    8d56:	bf22      	ittt	cs
    8d58:	1ab6      	subcs	r6, r6, r2
    8d5a:	4675      	movcs	r5, lr
    8d5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    8d60:	085b      	lsrs	r3, r3, #1
    8d62:	ea4f 0232 	mov.w	r2, r2, rrx
    8d66:	ebb6 0e02 	subs.w	lr, r6, r2
    8d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
    8d6e:	bf22      	ittt	cs
    8d70:	1ab6      	subcs	r6, r6, r2
    8d72:	4675      	movcs	r5, lr
    8d74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    8d78:	ea55 0e06 	orrs.w	lr, r5, r6
    8d7c:	d018      	beq.n	8db0 <__aeabi_ddiv+0x114>
    8d7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
    8d82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    8d86:	ea4f 1606 	mov.w	r6, r6, lsl #4
    8d8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    8d8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    8d92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    8d96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    8d9a:	d1c0      	bne.n	8d1e <__aeabi_ddiv+0x82>
    8d9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8da0:	d10b      	bne.n	8dba <__aeabi_ddiv+0x11e>
    8da2:	ea41 0100 	orr.w	r1, r1, r0
    8da6:	f04f 0000 	mov.w	r0, #0
    8daa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    8dae:	e7b6      	b.n	8d1e <__aeabi_ddiv+0x82>
    8db0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    8db4:	bf04      	itt	eq
    8db6:	4301      	orreq	r1, r0
    8db8:	2000      	moveq	r0, #0
    8dba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    8dbe:	bf88      	it	hi
    8dc0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    8dc4:	f63f aeaf 	bhi.w	8b26 <__aeabi_dmul+0xde>
    8dc8:	ebb5 0c03 	subs.w	ip, r5, r3
    8dcc:	bf04      	itt	eq
    8dce:	ebb6 0c02 	subseq.w	ip, r6, r2
    8dd2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    8dd6:	f150 0000 	adcs.w	r0, r0, #0
    8dda:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    8dde:	bd70      	pop	{r4, r5, r6, pc}
    8de0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    8de4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    8de8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    8dec:	bfc2      	ittt	gt
    8dee:	ebd4 050c 	rsbsgt	r5, r4, ip
    8df2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    8df6:	bd70      	popgt	{r4, r5, r6, pc}
    8df8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    8dfc:	f04f 0e00 	mov.w	lr, #0
    8e00:	3c01      	subs	r4, #1
    8e02:	e690      	b.n	8b26 <__aeabi_dmul+0xde>
    8e04:	ea45 0e06 	orr.w	lr, r5, r6
    8e08:	e68d      	b.n	8b26 <__aeabi_dmul+0xde>
    8e0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    8e0e:	ea94 0f0c 	teq	r4, ip
    8e12:	bf08      	it	eq
    8e14:	ea95 0f0c 	teqeq	r5, ip
    8e18:	f43f af3b 	beq.w	8c92 <__aeabi_dmul+0x24a>
    8e1c:	ea94 0f0c 	teq	r4, ip
    8e20:	d10a      	bne.n	8e38 <__aeabi_ddiv+0x19c>
    8e22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    8e26:	f47f af34 	bne.w	8c92 <__aeabi_dmul+0x24a>
    8e2a:	ea95 0f0c 	teq	r5, ip
    8e2e:	f47f af25 	bne.w	8c7c <__aeabi_dmul+0x234>
    8e32:	4610      	mov	r0, r2
    8e34:	4619      	mov	r1, r3
    8e36:	e72c      	b.n	8c92 <__aeabi_dmul+0x24a>
    8e38:	ea95 0f0c 	teq	r5, ip
    8e3c:	d106      	bne.n	8e4c <__aeabi_ddiv+0x1b0>
    8e3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    8e42:	f43f aefd 	beq.w	8c40 <__aeabi_dmul+0x1f8>
    8e46:	4610      	mov	r0, r2
    8e48:	4619      	mov	r1, r3
    8e4a:	e722      	b.n	8c92 <__aeabi_dmul+0x24a>
    8e4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    8e50:	bf18      	it	ne
    8e52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    8e56:	f47f aec5 	bne.w	8be4 <__aeabi_dmul+0x19c>
    8e5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    8e5e:	f47f af0d 	bne.w	8c7c <__aeabi_dmul+0x234>
    8e62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    8e66:	f47f aeeb 	bne.w	8c40 <__aeabi_dmul+0x1f8>
    8e6a:	e712      	b.n	8c92 <__aeabi_dmul+0x24a>

00008e6c <__gedf2>:
    8e6c:	f04f 3cff 	mov.w	ip, #4294967295
    8e70:	e006      	b.n	8e80 <__cmpdf2+0x4>
    8e72:	bf00      	nop

00008e74 <__ledf2>:
    8e74:	f04f 0c01 	mov.w	ip, #1
    8e78:	e002      	b.n	8e80 <__cmpdf2+0x4>
    8e7a:	bf00      	nop

00008e7c <__cmpdf2>:
    8e7c:	f04f 0c01 	mov.w	ip, #1
    8e80:	f84d cd04 	str.w	ip, [sp, #-4]!
    8e84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8e88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8e90:	bf18      	it	ne
    8e92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    8e96:	d01b      	beq.n	8ed0 <__cmpdf2+0x54>
    8e98:	b001      	add	sp, #4
    8e9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    8e9e:	bf0c      	ite	eq
    8ea0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    8ea4:	ea91 0f03 	teqne	r1, r3
    8ea8:	bf02      	ittt	eq
    8eaa:	ea90 0f02 	teqeq	r0, r2
    8eae:	2000      	moveq	r0, #0
    8eb0:	4770      	bxeq	lr
    8eb2:	f110 0f00 	cmn.w	r0, #0
    8eb6:	ea91 0f03 	teq	r1, r3
    8eba:	bf58      	it	pl
    8ebc:	4299      	cmppl	r1, r3
    8ebe:	bf08      	it	eq
    8ec0:	4290      	cmpeq	r0, r2
    8ec2:	bf2c      	ite	cs
    8ec4:	17d8      	asrcs	r0, r3, #31
    8ec6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    8eca:	f040 0001 	orr.w	r0, r0, #1
    8ece:	4770      	bx	lr
    8ed0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8ed4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ed8:	d102      	bne.n	8ee0 <__cmpdf2+0x64>
    8eda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8ede:	d107      	bne.n	8ef0 <__cmpdf2+0x74>
    8ee0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8ee4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8ee8:	d1d6      	bne.n	8e98 <__cmpdf2+0x1c>
    8eea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8eee:	d0d3      	beq.n	8e98 <__cmpdf2+0x1c>
    8ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
    8ef4:	4770      	bx	lr
    8ef6:	bf00      	nop

00008ef8 <__aeabi_cdrcmple>:
    8ef8:	4684      	mov	ip, r0
    8efa:	4610      	mov	r0, r2
    8efc:	4662      	mov	r2, ip
    8efe:	468c      	mov	ip, r1
    8f00:	4619      	mov	r1, r3
    8f02:	4663      	mov	r3, ip
    8f04:	e000      	b.n	8f08 <__aeabi_cdcmpeq>
    8f06:	bf00      	nop

00008f08 <__aeabi_cdcmpeq>:
    8f08:	b501      	push	{r0, lr}
    8f0a:	f7ff ffb7 	bl	8e7c <__cmpdf2>
    8f0e:	2800      	cmp	r0, #0
    8f10:	bf48      	it	mi
    8f12:	f110 0f00 	cmnmi.w	r0, #0
    8f16:	bd01      	pop	{r0, pc}

00008f18 <__aeabi_dcmpeq>:
    8f18:	f84d ed08 	str.w	lr, [sp, #-8]!
    8f1c:	f7ff fff4 	bl	8f08 <__aeabi_cdcmpeq>
    8f20:	bf0c      	ite	eq
    8f22:	2001      	moveq	r0, #1
    8f24:	2000      	movne	r0, #0
    8f26:	f85d fb08 	ldr.w	pc, [sp], #8
    8f2a:	bf00      	nop

00008f2c <__aeabi_dcmplt>:
    8f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
    8f30:	f7ff ffea 	bl	8f08 <__aeabi_cdcmpeq>
    8f34:	bf34      	ite	cc
    8f36:	2001      	movcc	r0, #1
    8f38:	2000      	movcs	r0, #0
    8f3a:	f85d fb08 	ldr.w	pc, [sp], #8
    8f3e:	bf00      	nop

00008f40 <__aeabi_dcmple>:
    8f40:	f84d ed08 	str.w	lr, [sp, #-8]!
    8f44:	f7ff ffe0 	bl	8f08 <__aeabi_cdcmpeq>
    8f48:	bf94      	ite	ls
    8f4a:	2001      	movls	r0, #1
    8f4c:	2000      	movhi	r0, #0
    8f4e:	f85d fb08 	ldr.w	pc, [sp], #8
    8f52:	bf00      	nop

00008f54 <__aeabi_dcmpge>:
    8f54:	f84d ed08 	str.w	lr, [sp, #-8]!
    8f58:	f7ff ffce 	bl	8ef8 <__aeabi_cdrcmple>
    8f5c:	bf94      	ite	ls
    8f5e:	2001      	movls	r0, #1
    8f60:	2000      	movhi	r0, #0
    8f62:	f85d fb08 	ldr.w	pc, [sp], #8
    8f66:	bf00      	nop

00008f68 <__aeabi_dcmpgt>:
    8f68:	f84d ed08 	str.w	lr, [sp, #-8]!
    8f6c:	f7ff ffc4 	bl	8ef8 <__aeabi_cdrcmple>
    8f70:	bf34      	ite	cc
    8f72:	2001      	movcc	r0, #1
    8f74:	2000      	movcs	r0, #0
    8f76:	f85d fb08 	ldr.w	pc, [sp], #8
    8f7a:	bf00      	nop

00008f7c <__aeabi_dcmpun>:
    8f7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    8f80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f84:	d102      	bne.n	8f8c <__aeabi_dcmpun+0x10>
    8f86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    8f8a:	d10a      	bne.n	8fa2 <__aeabi_dcmpun+0x26>
    8f8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    8f90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    8f94:	d102      	bne.n	8f9c <__aeabi_dcmpun+0x20>
    8f96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    8f9a:	d102      	bne.n	8fa2 <__aeabi_dcmpun+0x26>
    8f9c:	f04f 0000 	mov.w	r0, #0
    8fa0:	4770      	bx	lr
    8fa2:	f04f 0001 	mov.w	r0, #1
    8fa6:	4770      	bx	lr

00008fa8 <__aeabi_frsub>:
    8fa8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    8fac:	e002      	b.n	8fb4 <__addsf3>
    8fae:	bf00      	nop

00008fb0 <__aeabi_fsub>:
    8fb0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00008fb4 <__addsf3>:
    8fb4:	0042      	lsls	r2, r0, #1
    8fb6:	bf1f      	itttt	ne
    8fb8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    8fbc:	ea92 0f03 	teqne	r2, r3
    8fc0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    8fc4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    8fc8:	d06a      	beq.n	90a0 <__addsf3+0xec>
    8fca:	ea4f 6212 	mov.w	r2, r2, lsr #24
    8fce:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    8fd2:	bfc1      	itttt	gt
    8fd4:	18d2      	addgt	r2, r2, r3
    8fd6:	4041      	eorgt	r1, r0
    8fd8:	4048      	eorgt	r0, r1
    8fda:	4041      	eorgt	r1, r0
    8fdc:	bfb8      	it	lt
    8fde:	425b      	neglt	r3, r3
    8fe0:	2b19      	cmp	r3, #25
    8fe2:	bf88      	it	hi
    8fe4:	4770      	bxhi	lr
    8fe6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    8fea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    8fee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    8ff2:	bf18      	it	ne
    8ff4:	4240      	negne	r0, r0
    8ff6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    8ffa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    8ffe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    9002:	bf18      	it	ne
    9004:	4249      	negne	r1, r1
    9006:	ea92 0f03 	teq	r2, r3
    900a:	d03f      	beq.n	908c <__addsf3+0xd8>
    900c:	f1a2 0201 	sub.w	r2, r2, #1
    9010:	fa41 fc03 	asr.w	ip, r1, r3
    9014:	eb10 000c 	adds.w	r0, r0, ip
    9018:	f1c3 0320 	rsb	r3, r3, #32
    901c:	fa01 f103 	lsl.w	r1, r1, r3
    9020:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    9024:	d502      	bpl.n	902c <__addsf3+0x78>
    9026:	4249      	negs	r1, r1
    9028:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    902c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    9030:	d313      	bcc.n	905a <__addsf3+0xa6>
    9032:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    9036:	d306      	bcc.n	9046 <__addsf3+0x92>
    9038:	0840      	lsrs	r0, r0, #1
    903a:	ea4f 0131 	mov.w	r1, r1, rrx
    903e:	f102 0201 	add.w	r2, r2, #1
    9042:	2afe      	cmp	r2, #254	; 0xfe
    9044:	d251      	bcs.n	90ea <__addsf3+0x136>
    9046:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    904a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    904e:	bf08      	it	eq
    9050:	f020 0001 	biceq.w	r0, r0, #1
    9054:	ea40 0003 	orr.w	r0, r0, r3
    9058:	4770      	bx	lr
    905a:	0049      	lsls	r1, r1, #1
    905c:	eb40 0000 	adc.w	r0, r0, r0
    9060:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    9064:	f1a2 0201 	sub.w	r2, r2, #1
    9068:	d1ed      	bne.n	9046 <__addsf3+0x92>
    906a:	fab0 fc80 	clz	ip, r0
    906e:	f1ac 0c08 	sub.w	ip, ip, #8
    9072:	ebb2 020c 	subs.w	r2, r2, ip
    9076:	fa00 f00c 	lsl.w	r0, r0, ip
    907a:	bfaa      	itet	ge
    907c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    9080:	4252      	neglt	r2, r2
    9082:	4318      	orrge	r0, r3
    9084:	bfbc      	itt	lt
    9086:	40d0      	lsrlt	r0, r2
    9088:	4318      	orrlt	r0, r3
    908a:	4770      	bx	lr
    908c:	f092 0f00 	teq	r2, #0
    9090:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    9094:	bf06      	itte	eq
    9096:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    909a:	3201      	addeq	r2, #1
    909c:	3b01      	subne	r3, #1
    909e:	e7b5      	b.n	900c <__addsf3+0x58>
    90a0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    90a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    90a8:	bf18      	it	ne
    90aa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    90ae:	d021      	beq.n	90f4 <__addsf3+0x140>
    90b0:	ea92 0f03 	teq	r2, r3
    90b4:	d004      	beq.n	90c0 <__addsf3+0x10c>
    90b6:	f092 0f00 	teq	r2, #0
    90ba:	bf08      	it	eq
    90bc:	4608      	moveq	r0, r1
    90be:	4770      	bx	lr
    90c0:	ea90 0f01 	teq	r0, r1
    90c4:	bf1c      	itt	ne
    90c6:	2000      	movne	r0, #0
    90c8:	4770      	bxne	lr
    90ca:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    90ce:	d104      	bne.n	90da <__addsf3+0x126>
    90d0:	0040      	lsls	r0, r0, #1
    90d2:	bf28      	it	cs
    90d4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    90d8:	4770      	bx	lr
    90da:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    90de:	bf3c      	itt	cc
    90e0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    90e4:	4770      	bxcc	lr
    90e6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    90ea:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    90ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    90f2:	4770      	bx	lr
    90f4:	ea7f 6222 	mvns.w	r2, r2, asr #24
    90f8:	bf16      	itet	ne
    90fa:	4608      	movne	r0, r1
    90fc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    9100:	4601      	movne	r1, r0
    9102:	0242      	lsls	r2, r0, #9
    9104:	bf06      	itte	eq
    9106:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    910a:	ea90 0f01 	teqeq	r0, r1
    910e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    9112:	4770      	bx	lr

00009114 <__aeabi_ui2f>:
    9114:	f04f 0300 	mov.w	r3, #0
    9118:	e004      	b.n	9124 <__aeabi_i2f+0x8>
    911a:	bf00      	nop

0000911c <__aeabi_i2f>:
    911c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    9120:	bf48      	it	mi
    9122:	4240      	negmi	r0, r0
    9124:	ea5f 0c00 	movs.w	ip, r0
    9128:	bf08      	it	eq
    912a:	4770      	bxeq	lr
    912c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    9130:	4601      	mov	r1, r0
    9132:	f04f 0000 	mov.w	r0, #0
    9136:	e01c      	b.n	9172 <__aeabi_l2f+0x2a>

00009138 <__aeabi_ul2f>:
    9138:	ea50 0201 	orrs.w	r2, r0, r1
    913c:	bf08      	it	eq
    913e:	4770      	bxeq	lr
    9140:	f04f 0300 	mov.w	r3, #0
    9144:	e00a      	b.n	915c <__aeabi_l2f+0x14>
    9146:	bf00      	nop

00009148 <__aeabi_l2f>:
    9148:	ea50 0201 	orrs.w	r2, r0, r1
    914c:	bf08      	it	eq
    914e:	4770      	bxeq	lr
    9150:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    9154:	d502      	bpl.n	915c <__aeabi_l2f+0x14>
    9156:	4240      	negs	r0, r0
    9158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    915c:	ea5f 0c01 	movs.w	ip, r1
    9160:	bf02      	ittt	eq
    9162:	4684      	moveq	ip, r0
    9164:	4601      	moveq	r1, r0
    9166:	2000      	moveq	r0, #0
    9168:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    916c:	bf08      	it	eq
    916e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    9172:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    9176:	fabc f28c 	clz	r2, ip
    917a:	3a08      	subs	r2, #8
    917c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    9180:	db10      	blt.n	91a4 <__aeabi_l2f+0x5c>
    9182:	fa01 fc02 	lsl.w	ip, r1, r2
    9186:	4463      	add	r3, ip
    9188:	fa00 fc02 	lsl.w	ip, r0, r2
    918c:	f1c2 0220 	rsb	r2, r2, #32
    9190:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    9194:	fa20 f202 	lsr.w	r2, r0, r2
    9198:	eb43 0002 	adc.w	r0, r3, r2
    919c:	bf08      	it	eq
    919e:	f020 0001 	biceq.w	r0, r0, #1
    91a2:	4770      	bx	lr
    91a4:	f102 0220 	add.w	r2, r2, #32
    91a8:	fa01 fc02 	lsl.w	ip, r1, r2
    91ac:	f1c2 0220 	rsb	r2, r2, #32
    91b0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    91b4:	fa21 f202 	lsr.w	r2, r1, r2
    91b8:	eb43 0002 	adc.w	r0, r3, r2
    91bc:	bf08      	it	eq
    91be:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    91c2:	4770      	bx	lr

000091c4 <__aeabi_fmul>:
    91c4:	f04f 0cff 	mov.w	ip, #255	; 0xff
    91c8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    91cc:	bf1e      	ittt	ne
    91ce:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    91d2:	ea92 0f0c 	teqne	r2, ip
    91d6:	ea93 0f0c 	teqne	r3, ip
    91da:	d06f      	beq.n	92bc <__aeabi_fmul+0xf8>
    91dc:	441a      	add	r2, r3
    91de:	ea80 0c01 	eor.w	ip, r0, r1
    91e2:	0240      	lsls	r0, r0, #9
    91e4:	bf18      	it	ne
    91e6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    91ea:	d01e      	beq.n	922a <__aeabi_fmul+0x66>
    91ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    91f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    91f4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    91f8:	fba0 3101 	umull	r3, r1, r0, r1
    91fc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    9200:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    9204:	bf3e      	ittt	cc
    9206:	0049      	lslcc	r1, r1, #1
    9208:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    920c:	005b      	lslcc	r3, r3, #1
    920e:	ea40 0001 	orr.w	r0, r0, r1
    9212:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    9216:	2afd      	cmp	r2, #253	; 0xfd
    9218:	d81d      	bhi.n	9256 <__aeabi_fmul+0x92>
    921a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    921e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    9222:	bf08      	it	eq
    9224:	f020 0001 	biceq.w	r0, r0, #1
    9228:	4770      	bx	lr
    922a:	f090 0f00 	teq	r0, #0
    922e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    9232:	bf08      	it	eq
    9234:	0249      	lsleq	r1, r1, #9
    9236:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    923a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    923e:	3a7f      	subs	r2, #127	; 0x7f
    9240:	bfc2      	ittt	gt
    9242:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    9246:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    924a:	4770      	bxgt	lr
    924c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    9250:	f04f 0300 	mov.w	r3, #0
    9254:	3a01      	subs	r2, #1
    9256:	dc5d      	bgt.n	9314 <__aeabi_fmul+0x150>
    9258:	f112 0f19 	cmn.w	r2, #25
    925c:	bfdc      	itt	le
    925e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    9262:	4770      	bxle	lr
    9264:	f1c2 0200 	rsb	r2, r2, #0
    9268:	0041      	lsls	r1, r0, #1
    926a:	fa21 f102 	lsr.w	r1, r1, r2
    926e:	f1c2 0220 	rsb	r2, r2, #32
    9272:	fa00 fc02 	lsl.w	ip, r0, r2
    9276:	ea5f 0031 	movs.w	r0, r1, rrx
    927a:	f140 0000 	adc.w	r0, r0, #0
    927e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    9282:	bf08      	it	eq
    9284:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    9288:	4770      	bx	lr
    928a:	f092 0f00 	teq	r2, #0
    928e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    9292:	bf02      	ittt	eq
    9294:	0040      	lsleq	r0, r0, #1
    9296:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    929a:	3a01      	subeq	r2, #1
    929c:	d0f9      	beq.n	9292 <__aeabi_fmul+0xce>
    929e:	ea40 000c 	orr.w	r0, r0, ip
    92a2:	f093 0f00 	teq	r3, #0
    92a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    92aa:	bf02      	ittt	eq
    92ac:	0049      	lsleq	r1, r1, #1
    92ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    92b2:	3b01      	subeq	r3, #1
    92b4:	d0f9      	beq.n	92aa <__aeabi_fmul+0xe6>
    92b6:	ea41 010c 	orr.w	r1, r1, ip
    92ba:	e78f      	b.n	91dc <__aeabi_fmul+0x18>
    92bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    92c0:	ea92 0f0c 	teq	r2, ip
    92c4:	bf18      	it	ne
    92c6:	ea93 0f0c 	teqne	r3, ip
    92ca:	d00a      	beq.n	92e2 <__aeabi_fmul+0x11e>
    92cc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    92d0:	bf18      	it	ne
    92d2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    92d6:	d1d8      	bne.n	928a <__aeabi_fmul+0xc6>
    92d8:	ea80 0001 	eor.w	r0, r0, r1
    92dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    92e0:	4770      	bx	lr
    92e2:	f090 0f00 	teq	r0, #0
    92e6:	bf17      	itett	ne
    92e8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    92ec:	4608      	moveq	r0, r1
    92ee:	f091 0f00 	teqne	r1, #0
    92f2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    92f6:	d014      	beq.n	9322 <__aeabi_fmul+0x15e>
    92f8:	ea92 0f0c 	teq	r2, ip
    92fc:	d101      	bne.n	9302 <__aeabi_fmul+0x13e>
    92fe:	0242      	lsls	r2, r0, #9
    9300:	d10f      	bne.n	9322 <__aeabi_fmul+0x15e>
    9302:	ea93 0f0c 	teq	r3, ip
    9306:	d103      	bne.n	9310 <__aeabi_fmul+0x14c>
    9308:	024b      	lsls	r3, r1, #9
    930a:	bf18      	it	ne
    930c:	4608      	movne	r0, r1
    930e:	d108      	bne.n	9322 <__aeabi_fmul+0x15e>
    9310:	ea80 0001 	eor.w	r0, r0, r1
    9314:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    9318:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    931c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    9320:	4770      	bx	lr
    9322:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    9326:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    932a:	4770      	bx	lr

0000932c <__aeabi_fdiv>:
    932c:	f04f 0cff 	mov.w	ip, #255	; 0xff
    9330:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    9334:	bf1e      	ittt	ne
    9336:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    933a:	ea92 0f0c 	teqne	r2, ip
    933e:	ea93 0f0c 	teqne	r3, ip
    9342:	d069      	beq.n	9418 <__aeabi_fdiv+0xec>
    9344:	eba2 0203 	sub.w	r2, r2, r3
    9348:	ea80 0c01 	eor.w	ip, r0, r1
    934c:	0249      	lsls	r1, r1, #9
    934e:	ea4f 2040 	mov.w	r0, r0, lsl #9
    9352:	d037      	beq.n	93c4 <__aeabi_fdiv+0x98>
    9354:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    9358:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    935c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    9360:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    9364:	428b      	cmp	r3, r1
    9366:	bf38      	it	cc
    9368:	005b      	lslcc	r3, r3, #1
    936a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    936e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    9372:	428b      	cmp	r3, r1
    9374:	bf24      	itt	cs
    9376:	1a5b      	subcs	r3, r3, r1
    9378:	ea40 000c 	orrcs.w	r0, r0, ip
    937c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    9380:	bf24      	itt	cs
    9382:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    9386:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    938a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    938e:	bf24      	itt	cs
    9390:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    9394:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    9398:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    939c:	bf24      	itt	cs
    939e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    93a2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    93a6:	011b      	lsls	r3, r3, #4
    93a8:	bf18      	it	ne
    93aa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    93ae:	d1e0      	bne.n	9372 <__aeabi_fdiv+0x46>
    93b0:	2afd      	cmp	r2, #253	; 0xfd
    93b2:	f63f af50 	bhi.w	9256 <__aeabi_fmul+0x92>
    93b6:	428b      	cmp	r3, r1
    93b8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    93bc:	bf08      	it	eq
    93be:	f020 0001 	biceq.w	r0, r0, #1
    93c2:	4770      	bx	lr
    93c4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    93c8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    93cc:	327f      	adds	r2, #127	; 0x7f
    93ce:	bfc2      	ittt	gt
    93d0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    93d4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    93d8:	4770      	bxgt	lr
    93da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    93de:	f04f 0300 	mov.w	r3, #0
    93e2:	3a01      	subs	r2, #1
    93e4:	e737      	b.n	9256 <__aeabi_fmul+0x92>
    93e6:	f092 0f00 	teq	r2, #0
    93ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    93ee:	bf02      	ittt	eq
    93f0:	0040      	lsleq	r0, r0, #1
    93f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    93f6:	3a01      	subeq	r2, #1
    93f8:	d0f9      	beq.n	93ee <__aeabi_fdiv+0xc2>
    93fa:	ea40 000c 	orr.w	r0, r0, ip
    93fe:	f093 0f00 	teq	r3, #0
    9402:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    9406:	bf02      	ittt	eq
    9408:	0049      	lsleq	r1, r1, #1
    940a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    940e:	3b01      	subeq	r3, #1
    9410:	d0f9      	beq.n	9406 <__aeabi_fdiv+0xda>
    9412:	ea41 010c 	orr.w	r1, r1, ip
    9416:	e795      	b.n	9344 <__aeabi_fdiv+0x18>
    9418:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    941c:	ea92 0f0c 	teq	r2, ip
    9420:	d108      	bne.n	9434 <__aeabi_fdiv+0x108>
    9422:	0242      	lsls	r2, r0, #9
    9424:	f47f af7d 	bne.w	9322 <__aeabi_fmul+0x15e>
    9428:	ea93 0f0c 	teq	r3, ip
    942c:	f47f af70 	bne.w	9310 <__aeabi_fmul+0x14c>
    9430:	4608      	mov	r0, r1
    9432:	e776      	b.n	9322 <__aeabi_fmul+0x15e>
    9434:	ea93 0f0c 	teq	r3, ip
    9438:	d104      	bne.n	9444 <__aeabi_fdiv+0x118>
    943a:	024b      	lsls	r3, r1, #9
    943c:	f43f af4c 	beq.w	92d8 <__aeabi_fmul+0x114>
    9440:	4608      	mov	r0, r1
    9442:	e76e      	b.n	9322 <__aeabi_fmul+0x15e>
    9444:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    9448:	bf18      	it	ne
    944a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    944e:	d1ca      	bne.n	93e6 <__aeabi_fdiv+0xba>
    9450:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    9454:	f47f af5c 	bne.w	9310 <__aeabi_fmul+0x14c>
    9458:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    945c:	f47f af3c 	bne.w	92d8 <__aeabi_fmul+0x114>
    9460:	e75f      	b.n	9322 <__aeabi_fmul+0x15e>
    9462:	bf00      	nop

00009464 <__gesf2>:
    9464:	f04f 3cff 	mov.w	ip, #4294967295
    9468:	e006      	b.n	9478 <__cmpsf2+0x4>
    946a:	bf00      	nop

0000946c <__lesf2>:
    946c:	f04f 0c01 	mov.w	ip, #1
    9470:	e002      	b.n	9478 <__cmpsf2+0x4>
    9472:	bf00      	nop

00009474 <__cmpsf2>:
    9474:	f04f 0c01 	mov.w	ip, #1
    9478:	f84d cd04 	str.w	ip, [sp, #-4]!
    947c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    9480:	ea4f 0341 	mov.w	r3, r1, lsl #1
    9484:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    9488:	bf18      	it	ne
    948a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    948e:	d011      	beq.n	94b4 <__cmpsf2+0x40>
    9490:	b001      	add	sp, #4
    9492:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    9496:	bf18      	it	ne
    9498:	ea90 0f01 	teqne	r0, r1
    949c:	bf58      	it	pl
    949e:	ebb2 0003 	subspl.w	r0, r2, r3
    94a2:	bf88      	it	hi
    94a4:	17c8      	asrhi	r0, r1, #31
    94a6:	bf38      	it	cc
    94a8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    94ac:	bf18      	it	ne
    94ae:	f040 0001 	orrne.w	r0, r0, #1
    94b2:	4770      	bx	lr
    94b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    94b8:	d102      	bne.n	94c0 <__cmpsf2+0x4c>
    94ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    94be:	d105      	bne.n	94cc <__cmpsf2+0x58>
    94c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    94c4:	d1e4      	bne.n	9490 <__cmpsf2+0x1c>
    94c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    94ca:	d0e1      	beq.n	9490 <__cmpsf2+0x1c>
    94cc:	f85d 0b04 	ldr.w	r0, [sp], #4
    94d0:	4770      	bx	lr
    94d2:	bf00      	nop

000094d4 <__aeabi_cfrcmple>:
    94d4:	4684      	mov	ip, r0
    94d6:	4608      	mov	r0, r1
    94d8:	4661      	mov	r1, ip
    94da:	e7ff      	b.n	94dc <__aeabi_cfcmpeq>

000094dc <__aeabi_cfcmpeq>:
    94dc:	b50f      	push	{r0, r1, r2, r3, lr}
    94de:	f7ff ffc9 	bl	9474 <__cmpsf2>
    94e2:	2800      	cmp	r0, #0
    94e4:	bf48      	it	mi
    94e6:	f110 0f00 	cmnmi.w	r0, #0
    94ea:	bd0f      	pop	{r0, r1, r2, r3, pc}

000094ec <__aeabi_fcmpeq>:
    94ec:	f84d ed08 	str.w	lr, [sp, #-8]!
    94f0:	f7ff fff4 	bl	94dc <__aeabi_cfcmpeq>
    94f4:	bf0c      	ite	eq
    94f6:	2001      	moveq	r0, #1
    94f8:	2000      	movne	r0, #0
    94fa:	f85d fb08 	ldr.w	pc, [sp], #8
    94fe:	bf00      	nop

00009500 <__aeabi_fcmplt>:
    9500:	f84d ed08 	str.w	lr, [sp, #-8]!
    9504:	f7ff ffea 	bl	94dc <__aeabi_cfcmpeq>
    9508:	bf34      	ite	cc
    950a:	2001      	movcc	r0, #1
    950c:	2000      	movcs	r0, #0
    950e:	f85d fb08 	ldr.w	pc, [sp], #8
    9512:	bf00      	nop

00009514 <__aeabi_fcmple>:
    9514:	f84d ed08 	str.w	lr, [sp, #-8]!
    9518:	f7ff ffe0 	bl	94dc <__aeabi_cfcmpeq>
    951c:	bf94      	ite	ls
    951e:	2001      	movls	r0, #1
    9520:	2000      	movhi	r0, #0
    9522:	f85d fb08 	ldr.w	pc, [sp], #8
    9526:	bf00      	nop

00009528 <__aeabi_fcmpge>:
    9528:	f84d ed08 	str.w	lr, [sp, #-8]!
    952c:	f7ff ffd2 	bl	94d4 <__aeabi_cfrcmple>
    9530:	bf94      	ite	ls
    9532:	2001      	movls	r0, #1
    9534:	2000      	movhi	r0, #0
    9536:	f85d fb08 	ldr.w	pc, [sp], #8
    953a:	bf00      	nop

0000953c <__aeabi_fcmpgt>:
    953c:	f84d ed08 	str.w	lr, [sp, #-8]!
    9540:	f7ff ffc8 	bl	94d4 <__aeabi_cfrcmple>
    9544:	bf34      	ite	cc
    9546:	2001      	movcc	r0, #1
    9548:	2000      	movcs	r0, #0
    954a:	f85d fb08 	ldr.w	pc, [sp], #8
    954e:	bf00      	nop

00009550 <__aeabi_f2iz>:
    9550:	ea4f 0240 	mov.w	r2, r0, lsl #1
    9554:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    9558:	d30f      	bcc.n	957a <__aeabi_f2iz+0x2a>
    955a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    955e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    9562:	d90d      	bls.n	9580 <__aeabi_f2iz+0x30>
    9564:	ea4f 2300 	mov.w	r3, r0, lsl #8
    9568:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    956c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    9570:	fa23 f002 	lsr.w	r0, r3, r2
    9574:	bf18      	it	ne
    9576:	4240      	negne	r0, r0
    9578:	4770      	bx	lr
    957a:	f04f 0000 	mov.w	r0, #0
    957e:	4770      	bx	lr
    9580:	f112 0f61 	cmn.w	r2, #97	; 0x61
    9584:	d101      	bne.n	958a <__aeabi_f2iz+0x3a>
    9586:	0242      	lsls	r2, r0, #9
    9588:	d105      	bne.n	9596 <__aeabi_f2iz+0x46>
    958a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    958e:	bf08      	it	eq
    9590:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    9594:	4770      	bx	lr
    9596:	f04f 0000 	mov.w	r0, #0
    959a:	4770      	bx	lr

0000959c <__aeabi_f2uiz>:
    959c:	0042      	lsls	r2, r0, #1
    959e:	d20e      	bcs.n	95be <__aeabi_f2uiz+0x22>
    95a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    95a4:	d30b      	bcc.n	95be <__aeabi_f2uiz+0x22>
    95a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    95aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    95ae:	d409      	bmi.n	95c4 <__aeabi_f2uiz+0x28>
    95b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    95b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    95b8:	fa23 f002 	lsr.w	r0, r3, r2
    95bc:	4770      	bx	lr
    95be:	f04f 0000 	mov.w	r0, #0
    95c2:	4770      	bx	lr
    95c4:	f112 0f61 	cmn.w	r2, #97	; 0x61
    95c8:	d101      	bne.n	95ce <__aeabi_f2uiz+0x32>
    95ca:	0242      	lsls	r2, r0, #9
    95cc:	d102      	bne.n	95d4 <__aeabi_f2uiz+0x38>
    95ce:	f04f 30ff 	mov.w	r0, #4294967295
    95d2:	4770      	bx	lr
    95d4:	f04f 0000 	mov.w	r0, #0
    95d8:	4770      	bx	lr
    95da:	bf00      	nop

000095dc <__cxa_atexit>:
    95dc:	4613      	mov	r3, r2
    95de:	460a      	mov	r2, r1
    95e0:	4601      	mov	r1, r0
    95e2:	2002      	movs	r0, #2
    95e4:	f002 babc 	b.w	bb60 <__register_exitproc>

000095e8 <__errno>:
    95e8:	4b01      	ldr	r3, [pc, #4]	; (95f0 <__errno+0x8>)
    95ea:	6818      	ldr	r0, [r3, #0]
    95ec:	4770      	bx	lr
    95ee:	bf00      	nop
    95f0:	1fff8f70 	.word	0x1fff8f70

000095f4 <__libc_init_array>:
    95f4:	b570      	push	{r4, r5, r6, lr}
    95f6:	4e0f      	ldr	r6, [pc, #60]	; (9634 <__libc_init_array+0x40>)
    95f8:	4d0f      	ldr	r5, [pc, #60]	; (9638 <__libc_init_array+0x44>)
    95fa:	1b76      	subs	r6, r6, r5
    95fc:	10b6      	asrs	r6, r6, #2
    95fe:	bf18      	it	ne
    9600:	2400      	movne	r4, #0
    9602:	d005      	beq.n	9610 <__libc_init_array+0x1c>
    9604:	3401      	adds	r4, #1
    9606:	f855 3b04 	ldr.w	r3, [r5], #4
    960a:	4798      	blx	r3
    960c:	42a6      	cmp	r6, r4
    960e:	d1f9      	bne.n	9604 <__libc_init_array+0x10>
    9610:	4e0a      	ldr	r6, [pc, #40]	; (963c <__libc_init_array+0x48>)
    9612:	4d0b      	ldr	r5, [pc, #44]	; (9640 <__libc_init_array+0x4c>)
    9614:	1b76      	subs	r6, r6, r5
    9616:	f012 fb23 	bl	1bc60 <_init>
    961a:	10b6      	asrs	r6, r6, #2
    961c:	bf18      	it	ne
    961e:	2400      	movne	r4, #0
    9620:	d006      	beq.n	9630 <__libc_init_array+0x3c>
    9622:	3401      	adds	r4, #1
    9624:	f855 3b04 	ldr.w	r3, [r5], #4
    9628:	4798      	blx	r3
    962a:	42a6      	cmp	r6, r4
    962c:	d1f9      	bne.n	9622 <__libc_init_array+0x2e>
    962e:	bd70      	pop	{r4, r5, r6, pc}
    9630:	bd70      	pop	{r4, r5, r6, pc}
    9632:	bf00      	nop
    9634:	0001bc6c 	.word	0x0001bc6c
    9638:	0001bc6c 	.word	0x0001bc6c
    963c:	0001bc78 	.word	0x0001bc78
    9640:	0001bc6c 	.word	0x0001bc6c

00009644 <malloc>:
    9644:	4b02      	ldr	r3, [pc, #8]	; (9650 <malloc+0xc>)
    9646:	4601      	mov	r1, r0
    9648:	6818      	ldr	r0, [r3, #0]
    964a:	f000 b80b 	b.w	9664 <_malloc_r>
    964e:	bf00      	nop
    9650:	1fff8f70 	.word	0x1fff8f70

00009654 <free>:
    9654:	4b02      	ldr	r3, [pc, #8]	; (9660 <free+0xc>)
    9656:	4601      	mov	r1, r0
    9658:	6818      	ldr	r0, [r3, #0]
    965a:	f003 bb07 	b.w	cc6c <_free_r>
    965e:	bf00      	nop
    9660:	1fff8f70 	.word	0x1fff8f70

00009664 <_malloc_r>:
    9664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9668:	f101 050b 	add.w	r5, r1, #11
    966c:	2d16      	cmp	r5, #22
    966e:	b083      	sub	sp, #12
    9670:	4606      	mov	r6, r0
    9672:	f240 809f 	bls.w	97b4 <_malloc_r+0x150>
    9676:	f035 0507 	bics.w	r5, r5, #7
    967a:	f100 80bf 	bmi.w	97fc <_malloc_r+0x198>
    967e:	42a9      	cmp	r1, r5
    9680:	f200 80bc 	bhi.w	97fc <_malloc_r+0x198>
    9684:	f000 fb6e 	bl	9d64 <__malloc_lock>
    9688:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    968c:	f0c0 829c 	bcc.w	9bc8 <_malloc_r+0x564>
    9690:	0a6b      	lsrs	r3, r5, #9
    9692:	f000 80ba 	beq.w	980a <_malloc_r+0x1a6>
    9696:	2b04      	cmp	r3, #4
    9698:	f200 8183 	bhi.w	99a2 <_malloc_r+0x33e>
    969c:	09a8      	lsrs	r0, r5, #6
    969e:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    96a2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    96a6:	3038      	adds	r0, #56	; 0x38
    96a8:	4fc4      	ldr	r7, [pc, #784]	; (99bc <_malloc_r+0x358>)
    96aa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    96ae:	f1a3 0108 	sub.w	r1, r3, #8
    96b2:	685c      	ldr	r4, [r3, #4]
    96b4:	42a1      	cmp	r1, r4
    96b6:	d107      	bne.n	96c8 <_malloc_r+0x64>
    96b8:	e0ac      	b.n	9814 <_malloc_r+0x1b0>
    96ba:	2a00      	cmp	r2, #0
    96bc:	f280 80ac 	bge.w	9818 <_malloc_r+0x1b4>
    96c0:	68e4      	ldr	r4, [r4, #12]
    96c2:	42a1      	cmp	r1, r4
    96c4:	f000 80a6 	beq.w	9814 <_malloc_r+0x1b0>
    96c8:	6863      	ldr	r3, [r4, #4]
    96ca:	f023 0303 	bic.w	r3, r3, #3
    96ce:	1b5a      	subs	r2, r3, r5
    96d0:	2a0f      	cmp	r2, #15
    96d2:	ddf2      	ble.n	96ba <_malloc_r+0x56>
    96d4:	49b9      	ldr	r1, [pc, #740]	; (99bc <_malloc_r+0x358>)
    96d6:	693c      	ldr	r4, [r7, #16]
    96d8:	f101 0e08 	add.w	lr, r1, #8
    96dc:	4574      	cmp	r4, lr
    96de:	f000 81b3 	beq.w	9a48 <_malloc_r+0x3e4>
    96e2:	6863      	ldr	r3, [r4, #4]
    96e4:	f023 0303 	bic.w	r3, r3, #3
    96e8:	1b5a      	subs	r2, r3, r5
    96ea:	2a0f      	cmp	r2, #15
    96ec:	f300 8199 	bgt.w	9a22 <_malloc_r+0x3be>
    96f0:	2a00      	cmp	r2, #0
    96f2:	f8c1 e014 	str.w	lr, [r1, #20]
    96f6:	f8c1 e010 	str.w	lr, [r1, #16]
    96fa:	f280 809e 	bge.w	983a <_malloc_r+0x1d6>
    96fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    9702:	f080 8167 	bcs.w	99d4 <_malloc_r+0x370>
    9706:	08db      	lsrs	r3, r3, #3
    9708:	f103 0c01 	add.w	ip, r3, #1
    970c:	2201      	movs	r2, #1
    970e:	109b      	asrs	r3, r3, #2
    9710:	fa02 f303 	lsl.w	r3, r2, r3
    9714:	684a      	ldr	r2, [r1, #4]
    9716:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    971a:	f8c4 8008 	str.w	r8, [r4, #8]
    971e:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    9722:	431a      	orrs	r2, r3
    9724:	f1a9 0308 	sub.w	r3, r9, #8
    9728:	60e3      	str	r3, [r4, #12]
    972a:	604a      	str	r2, [r1, #4]
    972c:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    9730:	f8c8 400c 	str.w	r4, [r8, #12]
    9734:	1083      	asrs	r3, r0, #2
    9736:	2401      	movs	r4, #1
    9738:	409c      	lsls	r4, r3
    973a:	4294      	cmp	r4, r2
    973c:	f200 808a 	bhi.w	9854 <_malloc_r+0x1f0>
    9740:	4214      	tst	r4, r2
    9742:	d106      	bne.n	9752 <_malloc_r+0xee>
    9744:	f020 0003 	bic.w	r0, r0, #3
    9748:	0064      	lsls	r4, r4, #1
    974a:	4214      	tst	r4, r2
    974c:	f100 0004 	add.w	r0, r0, #4
    9750:	d0fa      	beq.n	9748 <_malloc_r+0xe4>
    9752:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    9756:	46cc      	mov	ip, r9
    9758:	4680      	mov	r8, r0
    975a:	f8dc 100c 	ldr.w	r1, [ip, #12]
    975e:	458c      	cmp	ip, r1
    9760:	d107      	bne.n	9772 <_malloc_r+0x10e>
    9762:	e173      	b.n	9a4c <_malloc_r+0x3e8>
    9764:	2a00      	cmp	r2, #0
    9766:	f280 8181 	bge.w	9a6c <_malloc_r+0x408>
    976a:	68c9      	ldr	r1, [r1, #12]
    976c:	458c      	cmp	ip, r1
    976e:	f000 816d 	beq.w	9a4c <_malloc_r+0x3e8>
    9772:	684b      	ldr	r3, [r1, #4]
    9774:	f023 0303 	bic.w	r3, r3, #3
    9778:	1b5a      	subs	r2, r3, r5
    977a:	2a0f      	cmp	r2, #15
    977c:	ddf2      	ble.n	9764 <_malloc_r+0x100>
    977e:	460c      	mov	r4, r1
    9780:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9784:	f854 8f08 	ldr.w	r8, [r4, #8]!
    9788:	194b      	adds	r3, r1, r5
    978a:	f045 0501 	orr.w	r5, r5, #1
    978e:	604d      	str	r5, [r1, #4]
    9790:	f042 0101 	orr.w	r1, r2, #1
    9794:	f8c8 c00c 	str.w	ip, [r8, #12]
    9798:	4630      	mov	r0, r6
    979a:	f8cc 8008 	str.w	r8, [ip, #8]
    979e:	617b      	str	r3, [r7, #20]
    97a0:	613b      	str	r3, [r7, #16]
    97a2:	f8c3 e00c 	str.w	lr, [r3, #12]
    97a6:	f8c3 e008 	str.w	lr, [r3, #8]
    97aa:	6059      	str	r1, [r3, #4]
    97ac:	509a      	str	r2, [r3, r2]
    97ae:	f000 fadb 	bl	9d68 <__malloc_unlock>
    97b2:	e01f      	b.n	97f4 <_malloc_r+0x190>
    97b4:	2910      	cmp	r1, #16
    97b6:	d821      	bhi.n	97fc <_malloc_r+0x198>
    97b8:	f000 fad4 	bl	9d64 <__malloc_lock>
    97bc:	2510      	movs	r5, #16
    97be:	2306      	movs	r3, #6
    97c0:	2002      	movs	r0, #2
    97c2:	4f7e      	ldr	r7, [pc, #504]	; (99bc <_malloc_r+0x358>)
    97c4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    97c8:	f1a3 0208 	sub.w	r2, r3, #8
    97cc:	685c      	ldr	r4, [r3, #4]
    97ce:	4294      	cmp	r4, r2
    97d0:	f000 8145 	beq.w	9a5e <_malloc_r+0x3fa>
    97d4:	6863      	ldr	r3, [r4, #4]
    97d6:	68e1      	ldr	r1, [r4, #12]
    97d8:	68a5      	ldr	r5, [r4, #8]
    97da:	f023 0303 	bic.w	r3, r3, #3
    97de:	4423      	add	r3, r4
    97e0:	4630      	mov	r0, r6
    97e2:	685a      	ldr	r2, [r3, #4]
    97e4:	60e9      	str	r1, [r5, #12]
    97e6:	f042 0201 	orr.w	r2, r2, #1
    97ea:	608d      	str	r5, [r1, #8]
    97ec:	605a      	str	r2, [r3, #4]
    97ee:	f000 fabb 	bl	9d68 <__malloc_unlock>
    97f2:	3408      	adds	r4, #8
    97f4:	4620      	mov	r0, r4
    97f6:	b003      	add	sp, #12
    97f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    97fc:	2400      	movs	r4, #0
    97fe:	230c      	movs	r3, #12
    9800:	4620      	mov	r0, r4
    9802:	6033      	str	r3, [r6, #0]
    9804:	b003      	add	sp, #12
    9806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    980a:	2380      	movs	r3, #128	; 0x80
    980c:	f04f 0e40 	mov.w	lr, #64	; 0x40
    9810:	203f      	movs	r0, #63	; 0x3f
    9812:	e749      	b.n	96a8 <_malloc_r+0x44>
    9814:	4670      	mov	r0, lr
    9816:	e75d      	b.n	96d4 <_malloc_r+0x70>
    9818:	4423      	add	r3, r4
    981a:	68e1      	ldr	r1, [r4, #12]
    981c:	685a      	ldr	r2, [r3, #4]
    981e:	68a5      	ldr	r5, [r4, #8]
    9820:	f042 0201 	orr.w	r2, r2, #1
    9824:	60e9      	str	r1, [r5, #12]
    9826:	4630      	mov	r0, r6
    9828:	608d      	str	r5, [r1, #8]
    982a:	605a      	str	r2, [r3, #4]
    982c:	f000 fa9c 	bl	9d68 <__malloc_unlock>
    9830:	3408      	adds	r4, #8
    9832:	4620      	mov	r0, r4
    9834:	b003      	add	sp, #12
    9836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    983a:	4423      	add	r3, r4
    983c:	4630      	mov	r0, r6
    983e:	685a      	ldr	r2, [r3, #4]
    9840:	f042 0201 	orr.w	r2, r2, #1
    9844:	605a      	str	r2, [r3, #4]
    9846:	f000 fa8f 	bl	9d68 <__malloc_unlock>
    984a:	3408      	adds	r4, #8
    984c:	4620      	mov	r0, r4
    984e:	b003      	add	sp, #12
    9850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9854:	68bc      	ldr	r4, [r7, #8]
    9856:	6863      	ldr	r3, [r4, #4]
    9858:	f023 0803 	bic.w	r8, r3, #3
    985c:	45a8      	cmp	r8, r5
    985e:	d304      	bcc.n	986a <_malloc_r+0x206>
    9860:	ebc5 0308 	rsb	r3, r5, r8
    9864:	2b0f      	cmp	r3, #15
    9866:	f300 808c 	bgt.w	9982 <_malloc_r+0x31e>
    986a:	4b55      	ldr	r3, [pc, #340]	; (99c0 <_malloc_r+0x35c>)
    986c:	f8df 9160 	ldr.w	r9, [pc, #352]	; 99d0 <_malloc_r+0x36c>
    9870:	681a      	ldr	r2, [r3, #0]
    9872:	f8d9 3000 	ldr.w	r3, [r9]
    9876:	3301      	adds	r3, #1
    9878:	442a      	add	r2, r5
    987a:	eb04 0a08 	add.w	sl, r4, r8
    987e:	f000 8160 	beq.w	9b42 <_malloc_r+0x4de>
    9882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    9886:	320f      	adds	r2, #15
    9888:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    988c:	f022 020f 	bic.w	r2, r2, #15
    9890:	4611      	mov	r1, r2
    9892:	4630      	mov	r0, r6
    9894:	9201      	str	r2, [sp, #4]
    9896:	f000 fc61 	bl	a15c <_sbrk_r>
    989a:	f1b0 3fff 	cmp.w	r0, #4294967295
    989e:	4683      	mov	fp, r0
    98a0:	9a01      	ldr	r2, [sp, #4]
    98a2:	f000 8158 	beq.w	9b56 <_malloc_r+0x4f2>
    98a6:	4582      	cmp	sl, r0
    98a8:	f200 80fc 	bhi.w	9aa4 <_malloc_r+0x440>
    98ac:	4b45      	ldr	r3, [pc, #276]	; (99c4 <_malloc_r+0x360>)
    98ae:	6819      	ldr	r1, [r3, #0]
    98b0:	45da      	cmp	sl, fp
    98b2:	4411      	add	r1, r2
    98b4:	6019      	str	r1, [r3, #0]
    98b6:	f000 8153 	beq.w	9b60 <_malloc_r+0x4fc>
    98ba:	f8d9 0000 	ldr.w	r0, [r9]
    98be:	f8df e110 	ldr.w	lr, [pc, #272]	; 99d0 <_malloc_r+0x36c>
    98c2:	3001      	adds	r0, #1
    98c4:	bf1b      	ittet	ne
    98c6:	ebca 0a0b 	rsbne	sl, sl, fp
    98ca:	4451      	addne	r1, sl
    98cc:	f8ce b000 	streq.w	fp, [lr]
    98d0:	6019      	strne	r1, [r3, #0]
    98d2:	f01b 0107 	ands.w	r1, fp, #7
    98d6:	f000 8117 	beq.w	9b08 <_malloc_r+0x4a4>
    98da:	f1c1 0008 	rsb	r0, r1, #8
    98de:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    98e2:	4483      	add	fp, r0
    98e4:	3108      	adds	r1, #8
    98e6:	445a      	add	r2, fp
    98e8:	f3c2 020b 	ubfx	r2, r2, #0, #12
    98ec:	ebc2 0901 	rsb	r9, r2, r1
    98f0:	4649      	mov	r1, r9
    98f2:	4630      	mov	r0, r6
    98f4:	9301      	str	r3, [sp, #4]
    98f6:	f000 fc31 	bl	a15c <_sbrk_r>
    98fa:	1c43      	adds	r3, r0, #1
    98fc:	9b01      	ldr	r3, [sp, #4]
    98fe:	f000 813f 	beq.w	9b80 <_malloc_r+0x51c>
    9902:	ebcb 0200 	rsb	r2, fp, r0
    9906:	444a      	add	r2, r9
    9908:	f042 0201 	orr.w	r2, r2, #1
    990c:	6819      	ldr	r1, [r3, #0]
    990e:	f8c7 b008 	str.w	fp, [r7, #8]
    9912:	4449      	add	r1, r9
    9914:	42bc      	cmp	r4, r7
    9916:	f8cb 2004 	str.w	r2, [fp, #4]
    991a:	6019      	str	r1, [r3, #0]
    991c:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 99c4 <_malloc_r+0x360>
    9920:	d016      	beq.n	9950 <_malloc_r+0x2ec>
    9922:	f1b8 0f0f 	cmp.w	r8, #15
    9926:	f240 80fd 	bls.w	9b24 <_malloc_r+0x4c0>
    992a:	6862      	ldr	r2, [r4, #4]
    992c:	f1a8 030c 	sub.w	r3, r8, #12
    9930:	f023 0307 	bic.w	r3, r3, #7
    9934:	18e0      	adds	r0, r4, r3
    9936:	f002 0201 	and.w	r2, r2, #1
    993a:	f04f 0e05 	mov.w	lr, #5
    993e:	431a      	orrs	r2, r3
    9940:	2b0f      	cmp	r3, #15
    9942:	6062      	str	r2, [r4, #4]
    9944:	f8c0 e004 	str.w	lr, [r0, #4]
    9948:	f8c0 e008 	str.w	lr, [r0, #8]
    994c:	f200 811c 	bhi.w	9b88 <_malloc_r+0x524>
    9950:	4b1d      	ldr	r3, [pc, #116]	; (99c8 <_malloc_r+0x364>)
    9952:	68bc      	ldr	r4, [r7, #8]
    9954:	681a      	ldr	r2, [r3, #0]
    9956:	4291      	cmp	r1, r2
    9958:	bf88      	it	hi
    995a:	6019      	strhi	r1, [r3, #0]
    995c:	4b1b      	ldr	r3, [pc, #108]	; (99cc <_malloc_r+0x368>)
    995e:	681a      	ldr	r2, [r3, #0]
    9960:	4291      	cmp	r1, r2
    9962:	6862      	ldr	r2, [r4, #4]
    9964:	bf88      	it	hi
    9966:	6019      	strhi	r1, [r3, #0]
    9968:	f022 0203 	bic.w	r2, r2, #3
    996c:	4295      	cmp	r5, r2
    996e:	eba2 0305 	sub.w	r3, r2, r5
    9972:	d801      	bhi.n	9978 <_malloc_r+0x314>
    9974:	2b0f      	cmp	r3, #15
    9976:	dc04      	bgt.n	9982 <_malloc_r+0x31e>
    9978:	4630      	mov	r0, r6
    997a:	f000 f9f5 	bl	9d68 <__malloc_unlock>
    997e:	2400      	movs	r4, #0
    9980:	e738      	b.n	97f4 <_malloc_r+0x190>
    9982:	1962      	adds	r2, r4, r5
    9984:	f043 0301 	orr.w	r3, r3, #1
    9988:	f045 0501 	orr.w	r5, r5, #1
    998c:	6065      	str	r5, [r4, #4]
    998e:	4630      	mov	r0, r6
    9990:	60ba      	str	r2, [r7, #8]
    9992:	6053      	str	r3, [r2, #4]
    9994:	f000 f9e8 	bl	9d68 <__malloc_unlock>
    9998:	3408      	adds	r4, #8
    999a:	4620      	mov	r0, r4
    999c:	b003      	add	sp, #12
    999e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99a2:	2b14      	cmp	r3, #20
    99a4:	d971      	bls.n	9a8a <_malloc_r+0x426>
    99a6:	2b54      	cmp	r3, #84	; 0x54
    99a8:	f200 80a4 	bhi.w	9af4 <_malloc_r+0x490>
    99ac:	0b28      	lsrs	r0, r5, #12
    99ae:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    99b2:	ea4f 034e 	mov.w	r3, lr, lsl #1
    99b6:	306e      	adds	r0, #110	; 0x6e
    99b8:	e676      	b.n	96a8 <_malloc_r+0x44>
    99ba:	bf00      	nop
    99bc:	1fff90e0 	.word	0x1fff90e0
    99c0:	1fff9850 	.word	0x1fff9850
    99c4:	1fff9854 	.word	0x1fff9854
    99c8:	1fff984c 	.word	0x1fff984c
    99cc:	1fff9848 	.word	0x1fff9848
    99d0:	1fff94ec 	.word	0x1fff94ec
    99d4:	0a5a      	lsrs	r2, r3, #9
    99d6:	2a04      	cmp	r2, #4
    99d8:	d95e      	bls.n	9a98 <_malloc_r+0x434>
    99da:	2a14      	cmp	r2, #20
    99dc:	f200 80b3 	bhi.w	9b46 <_malloc_r+0x4e2>
    99e0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    99e4:	0049      	lsls	r1, r1, #1
    99e6:	325b      	adds	r2, #91	; 0x5b
    99e8:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    99ec:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    99f0:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 9bd0 <_malloc_r+0x56c>
    99f4:	f1ac 0c08 	sub.w	ip, ip, #8
    99f8:	458c      	cmp	ip, r1
    99fa:	f000 8088 	beq.w	9b0e <_malloc_r+0x4aa>
    99fe:	684a      	ldr	r2, [r1, #4]
    9a00:	f022 0203 	bic.w	r2, r2, #3
    9a04:	4293      	cmp	r3, r2
    9a06:	d202      	bcs.n	9a0e <_malloc_r+0x3aa>
    9a08:	6889      	ldr	r1, [r1, #8]
    9a0a:	458c      	cmp	ip, r1
    9a0c:	d1f7      	bne.n	99fe <_malloc_r+0x39a>
    9a0e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9a12:	687a      	ldr	r2, [r7, #4]
    9a14:	f8c4 c00c 	str.w	ip, [r4, #12]
    9a18:	60a1      	str	r1, [r4, #8]
    9a1a:	f8cc 4008 	str.w	r4, [ip, #8]
    9a1e:	60cc      	str	r4, [r1, #12]
    9a20:	e688      	b.n	9734 <_malloc_r+0xd0>
    9a22:	1963      	adds	r3, r4, r5
    9a24:	f042 0701 	orr.w	r7, r2, #1
    9a28:	f045 0501 	orr.w	r5, r5, #1
    9a2c:	6065      	str	r5, [r4, #4]
    9a2e:	4630      	mov	r0, r6
    9a30:	614b      	str	r3, [r1, #20]
    9a32:	610b      	str	r3, [r1, #16]
    9a34:	f8c3 e00c 	str.w	lr, [r3, #12]
    9a38:	f8c3 e008 	str.w	lr, [r3, #8]
    9a3c:	605f      	str	r7, [r3, #4]
    9a3e:	509a      	str	r2, [r3, r2]
    9a40:	3408      	adds	r4, #8
    9a42:	f000 f991 	bl	9d68 <__malloc_unlock>
    9a46:	e6d5      	b.n	97f4 <_malloc_r+0x190>
    9a48:	684a      	ldr	r2, [r1, #4]
    9a4a:	e673      	b.n	9734 <_malloc_r+0xd0>
    9a4c:	f108 0801 	add.w	r8, r8, #1
    9a50:	f018 0f03 	tst.w	r8, #3
    9a54:	f10c 0c08 	add.w	ip, ip, #8
    9a58:	f47f ae7f 	bne.w	975a <_malloc_r+0xf6>
    9a5c:	e030      	b.n	9ac0 <_malloc_r+0x45c>
    9a5e:	68dc      	ldr	r4, [r3, #12]
    9a60:	42a3      	cmp	r3, r4
    9a62:	bf08      	it	eq
    9a64:	3002      	addeq	r0, #2
    9a66:	f43f ae35 	beq.w	96d4 <_malloc_r+0x70>
    9a6a:	e6b3      	b.n	97d4 <_malloc_r+0x170>
    9a6c:	440b      	add	r3, r1
    9a6e:	460c      	mov	r4, r1
    9a70:	685a      	ldr	r2, [r3, #4]
    9a72:	68c9      	ldr	r1, [r1, #12]
    9a74:	f854 5f08 	ldr.w	r5, [r4, #8]!
    9a78:	f042 0201 	orr.w	r2, r2, #1
    9a7c:	605a      	str	r2, [r3, #4]
    9a7e:	4630      	mov	r0, r6
    9a80:	60e9      	str	r1, [r5, #12]
    9a82:	608d      	str	r5, [r1, #8]
    9a84:	f000 f970 	bl	9d68 <__malloc_unlock>
    9a88:	e6b4      	b.n	97f4 <_malloc_r+0x190>
    9a8a:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    9a8e:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    9a92:	ea4f 034e 	mov.w	r3, lr, lsl #1
    9a96:	e607      	b.n	96a8 <_malloc_r+0x44>
    9a98:	099a      	lsrs	r2, r3, #6
    9a9a:	f102 0139 	add.w	r1, r2, #57	; 0x39
    9a9e:	0049      	lsls	r1, r1, #1
    9aa0:	3238      	adds	r2, #56	; 0x38
    9aa2:	e7a1      	b.n	99e8 <_malloc_r+0x384>
    9aa4:	42bc      	cmp	r4, r7
    9aa6:	4b4a      	ldr	r3, [pc, #296]	; (9bd0 <_malloc_r+0x56c>)
    9aa8:	f43f af00 	beq.w	98ac <_malloc_r+0x248>
    9aac:	689c      	ldr	r4, [r3, #8]
    9aae:	6862      	ldr	r2, [r4, #4]
    9ab0:	f022 0203 	bic.w	r2, r2, #3
    9ab4:	e75a      	b.n	996c <_malloc_r+0x308>
    9ab6:	f859 3908 	ldr.w	r3, [r9], #-8
    9aba:	4599      	cmp	r9, r3
    9abc:	f040 8082 	bne.w	9bc4 <_malloc_r+0x560>
    9ac0:	f010 0f03 	tst.w	r0, #3
    9ac4:	f100 30ff 	add.w	r0, r0, #4294967295
    9ac8:	d1f5      	bne.n	9ab6 <_malloc_r+0x452>
    9aca:	687b      	ldr	r3, [r7, #4]
    9acc:	ea23 0304 	bic.w	r3, r3, r4
    9ad0:	607b      	str	r3, [r7, #4]
    9ad2:	0064      	lsls	r4, r4, #1
    9ad4:	429c      	cmp	r4, r3
    9ad6:	f63f aebd 	bhi.w	9854 <_malloc_r+0x1f0>
    9ada:	2c00      	cmp	r4, #0
    9adc:	f43f aeba 	beq.w	9854 <_malloc_r+0x1f0>
    9ae0:	421c      	tst	r4, r3
    9ae2:	4640      	mov	r0, r8
    9ae4:	f47f ae35 	bne.w	9752 <_malloc_r+0xee>
    9ae8:	0064      	lsls	r4, r4, #1
    9aea:	421c      	tst	r4, r3
    9aec:	f100 0004 	add.w	r0, r0, #4
    9af0:	d0fa      	beq.n	9ae8 <_malloc_r+0x484>
    9af2:	e62e      	b.n	9752 <_malloc_r+0xee>
    9af4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    9af8:	d818      	bhi.n	9b2c <_malloc_r+0x4c8>
    9afa:	0be8      	lsrs	r0, r5, #15
    9afc:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    9b00:	ea4f 034e 	mov.w	r3, lr, lsl #1
    9b04:	3077      	adds	r0, #119	; 0x77
    9b06:	e5cf      	b.n	96a8 <_malloc_r+0x44>
    9b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9b0c:	e6eb      	b.n	98e6 <_malloc_r+0x282>
    9b0e:	2101      	movs	r1, #1
    9b10:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9b14:	1092      	asrs	r2, r2, #2
    9b16:	fa01 f202 	lsl.w	r2, r1, r2
    9b1a:	431a      	orrs	r2, r3
    9b1c:	f8c8 2004 	str.w	r2, [r8, #4]
    9b20:	4661      	mov	r1, ip
    9b22:	e777      	b.n	9a14 <_malloc_r+0x3b0>
    9b24:	2301      	movs	r3, #1
    9b26:	f8cb 3004 	str.w	r3, [fp, #4]
    9b2a:	e725      	b.n	9978 <_malloc_r+0x314>
    9b2c:	f240 5254 	movw	r2, #1364	; 0x554
    9b30:	4293      	cmp	r3, r2
    9b32:	d820      	bhi.n	9b76 <_malloc_r+0x512>
    9b34:	0ca8      	lsrs	r0, r5, #18
    9b36:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    9b3a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    9b3e:	307c      	adds	r0, #124	; 0x7c
    9b40:	e5b2      	b.n	96a8 <_malloc_r+0x44>
    9b42:	3210      	adds	r2, #16
    9b44:	e6a4      	b.n	9890 <_malloc_r+0x22c>
    9b46:	2a54      	cmp	r2, #84	; 0x54
    9b48:	d826      	bhi.n	9b98 <_malloc_r+0x534>
    9b4a:	0b1a      	lsrs	r2, r3, #12
    9b4c:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    9b50:	0049      	lsls	r1, r1, #1
    9b52:	326e      	adds	r2, #110	; 0x6e
    9b54:	e748      	b.n	99e8 <_malloc_r+0x384>
    9b56:	68bc      	ldr	r4, [r7, #8]
    9b58:	6862      	ldr	r2, [r4, #4]
    9b5a:	f022 0203 	bic.w	r2, r2, #3
    9b5e:	e705      	b.n	996c <_malloc_r+0x308>
    9b60:	f3ca 000b 	ubfx	r0, sl, #0, #12
    9b64:	2800      	cmp	r0, #0
    9b66:	f47f aea8 	bne.w	98ba <_malloc_r+0x256>
    9b6a:	4442      	add	r2, r8
    9b6c:	68bb      	ldr	r3, [r7, #8]
    9b6e:	f042 0201 	orr.w	r2, r2, #1
    9b72:	605a      	str	r2, [r3, #4]
    9b74:	e6ec      	b.n	9950 <_malloc_r+0x2ec>
    9b76:	23fe      	movs	r3, #254	; 0xfe
    9b78:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    9b7c:	207e      	movs	r0, #126	; 0x7e
    9b7e:	e593      	b.n	96a8 <_malloc_r+0x44>
    9b80:	2201      	movs	r2, #1
    9b82:	f04f 0900 	mov.w	r9, #0
    9b86:	e6c1      	b.n	990c <_malloc_r+0x2a8>
    9b88:	f104 0108 	add.w	r1, r4, #8
    9b8c:	4630      	mov	r0, r6
    9b8e:	f003 f86d 	bl	cc6c <_free_r>
    9b92:	f8d9 1000 	ldr.w	r1, [r9]
    9b96:	e6db      	b.n	9950 <_malloc_r+0x2ec>
    9b98:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    9b9c:	d805      	bhi.n	9baa <_malloc_r+0x546>
    9b9e:	0bda      	lsrs	r2, r3, #15
    9ba0:	f102 0178 	add.w	r1, r2, #120	; 0x78
    9ba4:	0049      	lsls	r1, r1, #1
    9ba6:	3277      	adds	r2, #119	; 0x77
    9ba8:	e71e      	b.n	99e8 <_malloc_r+0x384>
    9baa:	f240 5154 	movw	r1, #1364	; 0x554
    9bae:	428a      	cmp	r2, r1
    9bb0:	d805      	bhi.n	9bbe <_malloc_r+0x55a>
    9bb2:	0c9a      	lsrs	r2, r3, #18
    9bb4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    9bb8:	0049      	lsls	r1, r1, #1
    9bba:	327c      	adds	r2, #124	; 0x7c
    9bbc:	e714      	b.n	99e8 <_malloc_r+0x384>
    9bbe:	21fe      	movs	r1, #254	; 0xfe
    9bc0:	227e      	movs	r2, #126	; 0x7e
    9bc2:	e711      	b.n	99e8 <_malloc_r+0x384>
    9bc4:	687b      	ldr	r3, [r7, #4]
    9bc6:	e784      	b.n	9ad2 <_malloc_r+0x46e>
    9bc8:	08e8      	lsrs	r0, r5, #3
    9bca:	1c43      	adds	r3, r0, #1
    9bcc:	005b      	lsls	r3, r3, #1
    9bce:	e5f8      	b.n	97c2 <_malloc_r+0x15e>
    9bd0:	1fff90e0 	.word	0x1fff90e0

00009bd4 <__ascii_mbtowc>:
    9bd4:	b082      	sub	sp, #8
    9bd6:	b149      	cbz	r1, 9bec <__ascii_mbtowc+0x18>
    9bd8:	b15a      	cbz	r2, 9bf2 <__ascii_mbtowc+0x1e>
    9bda:	b16b      	cbz	r3, 9bf8 <__ascii_mbtowc+0x24>
    9bdc:	7813      	ldrb	r3, [r2, #0]
    9bde:	600b      	str	r3, [r1, #0]
    9be0:	7812      	ldrb	r2, [r2, #0]
    9be2:	1c10      	adds	r0, r2, #0
    9be4:	bf18      	it	ne
    9be6:	2001      	movne	r0, #1
    9be8:	b002      	add	sp, #8
    9bea:	4770      	bx	lr
    9bec:	a901      	add	r1, sp, #4
    9bee:	2a00      	cmp	r2, #0
    9bf0:	d1f3      	bne.n	9bda <__ascii_mbtowc+0x6>
    9bf2:	4610      	mov	r0, r2
    9bf4:	b002      	add	sp, #8
    9bf6:	4770      	bx	lr
    9bf8:	f06f 0001 	mvn.w	r0, #1
    9bfc:	e7f4      	b.n	9be8 <__ascii_mbtowc+0x14>
    9bfe:	bf00      	nop

00009c00 <memmove>:
    9c00:	4288      	cmp	r0, r1
    9c02:	b5f0      	push	{r4, r5, r6, r7, lr}
    9c04:	d90d      	bls.n	9c22 <memmove+0x22>
    9c06:	188b      	adds	r3, r1, r2
    9c08:	4298      	cmp	r0, r3
    9c0a:	d20a      	bcs.n	9c22 <memmove+0x22>
    9c0c:	1881      	adds	r1, r0, r2
    9c0e:	2a00      	cmp	r2, #0
    9c10:	d051      	beq.n	9cb6 <memmove+0xb6>
    9c12:	1a9a      	subs	r2, r3, r2
    9c14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    9c18:	f801 4d01 	strb.w	r4, [r1, #-1]!
    9c1c:	4293      	cmp	r3, r2
    9c1e:	d1f9      	bne.n	9c14 <memmove+0x14>
    9c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c22:	2a0f      	cmp	r2, #15
    9c24:	d948      	bls.n	9cb8 <memmove+0xb8>
    9c26:	ea41 0300 	orr.w	r3, r1, r0
    9c2a:	079b      	lsls	r3, r3, #30
    9c2c:	d146      	bne.n	9cbc <memmove+0xbc>
    9c2e:	f100 0410 	add.w	r4, r0, #16
    9c32:	f101 0310 	add.w	r3, r1, #16
    9c36:	4615      	mov	r5, r2
    9c38:	f853 6c10 	ldr.w	r6, [r3, #-16]
    9c3c:	f844 6c10 	str.w	r6, [r4, #-16]
    9c40:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    9c44:	f844 6c0c 	str.w	r6, [r4, #-12]
    9c48:	f853 6c08 	ldr.w	r6, [r3, #-8]
    9c4c:	f844 6c08 	str.w	r6, [r4, #-8]
    9c50:	3d10      	subs	r5, #16
    9c52:	f853 6c04 	ldr.w	r6, [r3, #-4]
    9c56:	f844 6c04 	str.w	r6, [r4, #-4]
    9c5a:	2d0f      	cmp	r5, #15
    9c5c:	f103 0310 	add.w	r3, r3, #16
    9c60:	f104 0410 	add.w	r4, r4, #16
    9c64:	d8e8      	bhi.n	9c38 <memmove+0x38>
    9c66:	f1a2 0310 	sub.w	r3, r2, #16
    9c6a:	f023 030f 	bic.w	r3, r3, #15
    9c6e:	f002 0e0f 	and.w	lr, r2, #15
    9c72:	3310      	adds	r3, #16
    9c74:	f1be 0f03 	cmp.w	lr, #3
    9c78:	4419      	add	r1, r3
    9c7a:	4403      	add	r3, r0
    9c7c:	d921      	bls.n	9cc2 <memmove+0xc2>
    9c7e:	1f1e      	subs	r6, r3, #4
    9c80:	460d      	mov	r5, r1
    9c82:	4674      	mov	r4, lr
    9c84:	3c04      	subs	r4, #4
    9c86:	f855 7b04 	ldr.w	r7, [r5], #4
    9c8a:	f846 7f04 	str.w	r7, [r6, #4]!
    9c8e:	2c03      	cmp	r4, #3
    9c90:	d8f8      	bhi.n	9c84 <memmove+0x84>
    9c92:	f1ae 0404 	sub.w	r4, lr, #4
    9c96:	f024 0403 	bic.w	r4, r4, #3
    9c9a:	3404      	adds	r4, #4
    9c9c:	4423      	add	r3, r4
    9c9e:	4421      	add	r1, r4
    9ca0:	f002 0203 	and.w	r2, r2, #3
    9ca4:	b162      	cbz	r2, 9cc0 <memmove+0xc0>
    9ca6:	3b01      	subs	r3, #1
    9ca8:	440a      	add	r2, r1
    9caa:	f811 4b01 	ldrb.w	r4, [r1], #1
    9cae:	f803 4f01 	strb.w	r4, [r3, #1]!
    9cb2:	428a      	cmp	r2, r1
    9cb4:	d1f9      	bne.n	9caa <memmove+0xaa>
    9cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cb8:	4603      	mov	r3, r0
    9cba:	e7f3      	b.n	9ca4 <memmove+0xa4>
    9cbc:	4603      	mov	r3, r0
    9cbe:	e7f2      	b.n	9ca6 <memmove+0xa6>
    9cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cc2:	4672      	mov	r2, lr
    9cc4:	e7ee      	b.n	9ca4 <memmove+0xa4>
    9cc6:	bf00      	nop

00009cc8 <memset>:
    9cc8:	b470      	push	{r4, r5, r6}
    9cca:	0784      	lsls	r4, r0, #30
    9ccc:	d046      	beq.n	9d5c <memset+0x94>
    9cce:	1e54      	subs	r4, r2, #1
    9cd0:	2a00      	cmp	r2, #0
    9cd2:	d041      	beq.n	9d58 <memset+0x90>
    9cd4:	b2cd      	uxtb	r5, r1
    9cd6:	4603      	mov	r3, r0
    9cd8:	e002      	b.n	9ce0 <memset+0x18>
    9cda:	1e62      	subs	r2, r4, #1
    9cdc:	b3e4      	cbz	r4, 9d58 <memset+0x90>
    9cde:	4614      	mov	r4, r2
    9ce0:	f803 5b01 	strb.w	r5, [r3], #1
    9ce4:	079a      	lsls	r2, r3, #30
    9ce6:	d1f8      	bne.n	9cda <memset+0x12>
    9ce8:	2c03      	cmp	r4, #3
    9cea:	d92e      	bls.n	9d4a <memset+0x82>
    9cec:	b2cd      	uxtb	r5, r1
    9cee:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    9cf2:	2c0f      	cmp	r4, #15
    9cf4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    9cf8:	d919      	bls.n	9d2e <memset+0x66>
    9cfa:	f103 0210 	add.w	r2, r3, #16
    9cfe:	4626      	mov	r6, r4
    9d00:	3e10      	subs	r6, #16
    9d02:	2e0f      	cmp	r6, #15
    9d04:	f842 5c10 	str.w	r5, [r2, #-16]
    9d08:	f842 5c0c 	str.w	r5, [r2, #-12]
    9d0c:	f842 5c08 	str.w	r5, [r2, #-8]
    9d10:	f842 5c04 	str.w	r5, [r2, #-4]
    9d14:	f102 0210 	add.w	r2, r2, #16
    9d18:	d8f2      	bhi.n	9d00 <memset+0x38>
    9d1a:	f1a4 0210 	sub.w	r2, r4, #16
    9d1e:	f022 020f 	bic.w	r2, r2, #15
    9d22:	f004 040f 	and.w	r4, r4, #15
    9d26:	3210      	adds	r2, #16
    9d28:	2c03      	cmp	r4, #3
    9d2a:	4413      	add	r3, r2
    9d2c:	d90d      	bls.n	9d4a <memset+0x82>
    9d2e:	461e      	mov	r6, r3
    9d30:	4622      	mov	r2, r4
    9d32:	3a04      	subs	r2, #4
    9d34:	2a03      	cmp	r2, #3
    9d36:	f846 5b04 	str.w	r5, [r6], #4
    9d3a:	d8fa      	bhi.n	9d32 <memset+0x6a>
    9d3c:	1f22      	subs	r2, r4, #4
    9d3e:	f022 0203 	bic.w	r2, r2, #3
    9d42:	3204      	adds	r2, #4
    9d44:	4413      	add	r3, r2
    9d46:	f004 0403 	and.w	r4, r4, #3
    9d4a:	b12c      	cbz	r4, 9d58 <memset+0x90>
    9d4c:	b2c9      	uxtb	r1, r1
    9d4e:	441c      	add	r4, r3
    9d50:	f803 1b01 	strb.w	r1, [r3], #1
    9d54:	42a3      	cmp	r3, r4
    9d56:	d1fb      	bne.n	9d50 <memset+0x88>
    9d58:	bc70      	pop	{r4, r5, r6}
    9d5a:	4770      	bx	lr
    9d5c:	4614      	mov	r4, r2
    9d5e:	4603      	mov	r3, r0
    9d60:	e7c2      	b.n	9ce8 <memset+0x20>
    9d62:	bf00      	nop

00009d64 <__malloc_lock>:
    9d64:	4770      	bx	lr
    9d66:	bf00      	nop

00009d68 <__malloc_unlock>:
    9d68:	4770      	bx	lr
    9d6a:	bf00      	nop

00009d6c <realloc>:
    9d6c:	4b02      	ldr	r3, [pc, #8]	; (9d78 <realloc+0xc>)
    9d6e:	460a      	mov	r2, r1
    9d70:	4601      	mov	r1, r0
    9d72:	6818      	ldr	r0, [r3, #0]
    9d74:	f000 b802 	b.w	9d7c <_realloc_r>
    9d78:	1fff8f70 	.word	0x1fff8f70

00009d7c <_realloc_r>:
    9d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9d80:	4617      	mov	r7, r2
    9d82:	b083      	sub	sp, #12
    9d84:	2900      	cmp	r1, #0
    9d86:	f000 80c1 	beq.w	9f0c <_realloc_r+0x190>
    9d8a:	460e      	mov	r6, r1
    9d8c:	4681      	mov	r9, r0
    9d8e:	f107 050b 	add.w	r5, r7, #11
    9d92:	f7ff ffe7 	bl	9d64 <__malloc_lock>
    9d96:	f856 ec04 	ldr.w	lr, [r6, #-4]
    9d9a:	2d16      	cmp	r5, #22
    9d9c:	f02e 0403 	bic.w	r4, lr, #3
    9da0:	f1a6 0808 	sub.w	r8, r6, #8
    9da4:	d840      	bhi.n	9e28 <_realloc_r+0xac>
    9da6:	2210      	movs	r2, #16
    9da8:	4615      	mov	r5, r2
    9daa:	42af      	cmp	r7, r5
    9dac:	d841      	bhi.n	9e32 <_realloc_r+0xb6>
    9dae:	4294      	cmp	r4, r2
    9db0:	da75      	bge.n	9e9e <_realloc_r+0x122>
    9db2:	4bc9      	ldr	r3, [pc, #804]	; (a0d8 <_realloc_r+0x35c>)
    9db4:	6899      	ldr	r1, [r3, #8]
    9db6:	eb08 0004 	add.w	r0, r8, r4
    9dba:	4288      	cmp	r0, r1
    9dbc:	6841      	ldr	r1, [r0, #4]
    9dbe:	f000 80d9 	beq.w	9f74 <_realloc_r+0x1f8>
    9dc2:	f021 0301 	bic.w	r3, r1, #1
    9dc6:	4403      	add	r3, r0
    9dc8:	685b      	ldr	r3, [r3, #4]
    9dca:	07db      	lsls	r3, r3, #31
    9dcc:	d57d      	bpl.n	9eca <_realloc_r+0x14e>
    9dce:	f01e 0f01 	tst.w	lr, #1
    9dd2:	d035      	beq.n	9e40 <_realloc_r+0xc4>
    9dd4:	4639      	mov	r1, r7
    9dd6:	4648      	mov	r0, r9
    9dd8:	f7ff fc44 	bl	9664 <_malloc_r>
    9ddc:	4607      	mov	r7, r0
    9dde:	b1e0      	cbz	r0, 9e1a <_realloc_r+0x9e>
    9de0:	f856 3c04 	ldr.w	r3, [r6, #-4]
    9de4:	f023 0301 	bic.w	r3, r3, #1
    9de8:	4443      	add	r3, r8
    9dea:	f1a0 0208 	sub.w	r2, r0, #8
    9dee:	429a      	cmp	r2, r3
    9df0:	f000 8144 	beq.w	a07c <_realloc_r+0x300>
    9df4:	1f22      	subs	r2, r4, #4
    9df6:	2a24      	cmp	r2, #36	; 0x24
    9df8:	f200 8131 	bhi.w	a05e <_realloc_r+0x2e2>
    9dfc:	2a13      	cmp	r2, #19
    9dfe:	f200 8104 	bhi.w	a00a <_realloc_r+0x28e>
    9e02:	4603      	mov	r3, r0
    9e04:	4632      	mov	r2, r6
    9e06:	6811      	ldr	r1, [r2, #0]
    9e08:	6019      	str	r1, [r3, #0]
    9e0a:	6851      	ldr	r1, [r2, #4]
    9e0c:	6059      	str	r1, [r3, #4]
    9e0e:	6892      	ldr	r2, [r2, #8]
    9e10:	609a      	str	r2, [r3, #8]
    9e12:	4631      	mov	r1, r6
    9e14:	4648      	mov	r0, r9
    9e16:	f002 ff29 	bl	cc6c <_free_r>
    9e1a:	4648      	mov	r0, r9
    9e1c:	f7ff ffa4 	bl	9d68 <__malloc_unlock>
    9e20:	4638      	mov	r0, r7
    9e22:	b003      	add	sp, #12
    9e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e28:	f025 0507 	bic.w	r5, r5, #7
    9e2c:	2d00      	cmp	r5, #0
    9e2e:	462a      	mov	r2, r5
    9e30:	dabb      	bge.n	9daa <_realloc_r+0x2e>
    9e32:	230c      	movs	r3, #12
    9e34:	2000      	movs	r0, #0
    9e36:	f8c9 3000 	str.w	r3, [r9]
    9e3a:	b003      	add	sp, #12
    9e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9e40:	f856 3c08 	ldr.w	r3, [r6, #-8]
    9e44:	ebc3 0a08 	rsb	sl, r3, r8
    9e48:	f8da 3004 	ldr.w	r3, [sl, #4]
    9e4c:	f023 0c03 	bic.w	ip, r3, #3
    9e50:	eb04 030c 	add.w	r3, r4, ip
    9e54:	4293      	cmp	r3, r2
    9e56:	dbbd      	blt.n	9dd4 <_realloc_r+0x58>
    9e58:	4657      	mov	r7, sl
    9e5a:	f8da 100c 	ldr.w	r1, [sl, #12]
    9e5e:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9e62:	1f22      	subs	r2, r4, #4
    9e64:	2a24      	cmp	r2, #36	; 0x24
    9e66:	60c1      	str	r1, [r0, #12]
    9e68:	6088      	str	r0, [r1, #8]
    9e6a:	f200 8117 	bhi.w	a09c <_realloc_r+0x320>
    9e6e:	2a13      	cmp	r2, #19
    9e70:	f240 8112 	bls.w	a098 <_realloc_r+0x31c>
    9e74:	6831      	ldr	r1, [r6, #0]
    9e76:	f8ca 1008 	str.w	r1, [sl, #8]
    9e7a:	6871      	ldr	r1, [r6, #4]
    9e7c:	f8ca 100c 	str.w	r1, [sl, #12]
    9e80:	2a1b      	cmp	r2, #27
    9e82:	f200 812b 	bhi.w	a0dc <_realloc_r+0x360>
    9e86:	3608      	adds	r6, #8
    9e88:	f10a 0210 	add.w	r2, sl, #16
    9e8c:	6831      	ldr	r1, [r6, #0]
    9e8e:	6011      	str	r1, [r2, #0]
    9e90:	6871      	ldr	r1, [r6, #4]
    9e92:	6051      	str	r1, [r2, #4]
    9e94:	68b1      	ldr	r1, [r6, #8]
    9e96:	6091      	str	r1, [r2, #8]
    9e98:	463e      	mov	r6, r7
    9e9a:	461c      	mov	r4, r3
    9e9c:	46d0      	mov	r8, sl
    9e9e:	1b63      	subs	r3, r4, r5
    9ea0:	2b0f      	cmp	r3, #15
    9ea2:	d81d      	bhi.n	9ee0 <_realloc_r+0x164>
    9ea4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    9ea8:	f003 0301 	and.w	r3, r3, #1
    9eac:	4323      	orrs	r3, r4
    9eae:	4444      	add	r4, r8
    9eb0:	f8c8 3004 	str.w	r3, [r8, #4]
    9eb4:	6863      	ldr	r3, [r4, #4]
    9eb6:	f043 0301 	orr.w	r3, r3, #1
    9eba:	6063      	str	r3, [r4, #4]
    9ebc:	4648      	mov	r0, r9
    9ebe:	f7ff ff53 	bl	9d68 <__malloc_unlock>
    9ec2:	4630      	mov	r0, r6
    9ec4:	b003      	add	sp, #12
    9ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9eca:	f021 0103 	bic.w	r1, r1, #3
    9ece:	4421      	add	r1, r4
    9ed0:	4291      	cmp	r1, r2
    9ed2:	db21      	blt.n	9f18 <_realloc_r+0x19c>
    9ed4:	68c3      	ldr	r3, [r0, #12]
    9ed6:	6882      	ldr	r2, [r0, #8]
    9ed8:	460c      	mov	r4, r1
    9eda:	60d3      	str	r3, [r2, #12]
    9edc:	609a      	str	r2, [r3, #8]
    9ede:	e7de      	b.n	9e9e <_realloc_r+0x122>
    9ee0:	f8d8 2004 	ldr.w	r2, [r8, #4]
    9ee4:	eb08 0105 	add.w	r1, r8, r5
    9ee8:	f002 0201 	and.w	r2, r2, #1
    9eec:	4315      	orrs	r5, r2
    9eee:	f043 0201 	orr.w	r2, r3, #1
    9ef2:	440b      	add	r3, r1
    9ef4:	f8c8 5004 	str.w	r5, [r8, #4]
    9ef8:	604a      	str	r2, [r1, #4]
    9efa:	685a      	ldr	r2, [r3, #4]
    9efc:	f042 0201 	orr.w	r2, r2, #1
    9f00:	3108      	adds	r1, #8
    9f02:	605a      	str	r2, [r3, #4]
    9f04:	4648      	mov	r0, r9
    9f06:	f002 feb1 	bl	cc6c <_free_r>
    9f0a:	e7d7      	b.n	9ebc <_realloc_r+0x140>
    9f0c:	4611      	mov	r1, r2
    9f0e:	b003      	add	sp, #12
    9f10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9f14:	f7ff bba6 	b.w	9664 <_malloc_r>
    9f18:	f01e 0f01 	tst.w	lr, #1
    9f1c:	f47f af5a 	bne.w	9dd4 <_realloc_r+0x58>
    9f20:	f856 3c08 	ldr.w	r3, [r6, #-8]
    9f24:	ebc3 0a08 	rsb	sl, r3, r8
    9f28:	f8da 3004 	ldr.w	r3, [sl, #4]
    9f2c:	f023 0c03 	bic.w	ip, r3, #3
    9f30:	eb01 0e0c 	add.w	lr, r1, ip
    9f34:	4596      	cmp	lr, r2
    9f36:	db8b      	blt.n	9e50 <_realloc_r+0xd4>
    9f38:	68c3      	ldr	r3, [r0, #12]
    9f3a:	6882      	ldr	r2, [r0, #8]
    9f3c:	4657      	mov	r7, sl
    9f3e:	60d3      	str	r3, [r2, #12]
    9f40:	609a      	str	r2, [r3, #8]
    9f42:	f857 1f08 	ldr.w	r1, [r7, #8]!
    9f46:	f8da 300c 	ldr.w	r3, [sl, #12]
    9f4a:	60cb      	str	r3, [r1, #12]
    9f4c:	1f22      	subs	r2, r4, #4
    9f4e:	2a24      	cmp	r2, #36	; 0x24
    9f50:	6099      	str	r1, [r3, #8]
    9f52:	f200 8099 	bhi.w	a088 <_realloc_r+0x30c>
    9f56:	2a13      	cmp	r2, #19
    9f58:	d962      	bls.n	a020 <_realloc_r+0x2a4>
    9f5a:	6833      	ldr	r3, [r6, #0]
    9f5c:	f8ca 3008 	str.w	r3, [sl, #8]
    9f60:	6873      	ldr	r3, [r6, #4]
    9f62:	f8ca 300c 	str.w	r3, [sl, #12]
    9f66:	2a1b      	cmp	r2, #27
    9f68:	f200 80a0 	bhi.w	a0ac <_realloc_r+0x330>
    9f6c:	3608      	adds	r6, #8
    9f6e:	f10a 0310 	add.w	r3, sl, #16
    9f72:	e056      	b.n	a022 <_realloc_r+0x2a6>
    9f74:	f021 0b03 	bic.w	fp, r1, #3
    9f78:	44a3      	add	fp, r4
    9f7a:	f105 0010 	add.w	r0, r5, #16
    9f7e:	4583      	cmp	fp, r0
    9f80:	da59      	bge.n	a036 <_realloc_r+0x2ba>
    9f82:	f01e 0f01 	tst.w	lr, #1
    9f86:	f47f af25 	bne.w	9dd4 <_realloc_r+0x58>
    9f8a:	f856 1c08 	ldr.w	r1, [r6, #-8]
    9f8e:	ebc1 0a08 	rsb	sl, r1, r8
    9f92:	f8da 1004 	ldr.w	r1, [sl, #4]
    9f96:	f021 0c03 	bic.w	ip, r1, #3
    9f9a:	44e3      	add	fp, ip
    9f9c:	4558      	cmp	r0, fp
    9f9e:	f73f af57 	bgt.w	9e50 <_realloc_r+0xd4>
    9fa2:	4657      	mov	r7, sl
    9fa4:	f8da 100c 	ldr.w	r1, [sl, #12]
    9fa8:	f857 0f08 	ldr.w	r0, [r7, #8]!
    9fac:	1f22      	subs	r2, r4, #4
    9fae:	2a24      	cmp	r2, #36	; 0x24
    9fb0:	60c1      	str	r1, [r0, #12]
    9fb2:	6088      	str	r0, [r1, #8]
    9fb4:	f200 80b4 	bhi.w	a120 <_realloc_r+0x3a4>
    9fb8:	2a13      	cmp	r2, #19
    9fba:	f240 80a5 	bls.w	a108 <_realloc_r+0x38c>
    9fbe:	6831      	ldr	r1, [r6, #0]
    9fc0:	f8ca 1008 	str.w	r1, [sl, #8]
    9fc4:	6871      	ldr	r1, [r6, #4]
    9fc6:	f8ca 100c 	str.w	r1, [sl, #12]
    9fca:	2a1b      	cmp	r2, #27
    9fcc:	f200 80af 	bhi.w	a12e <_realloc_r+0x3b2>
    9fd0:	3608      	adds	r6, #8
    9fd2:	f10a 0210 	add.w	r2, sl, #16
    9fd6:	6831      	ldr	r1, [r6, #0]
    9fd8:	6011      	str	r1, [r2, #0]
    9fda:	6871      	ldr	r1, [r6, #4]
    9fdc:	6051      	str	r1, [r2, #4]
    9fde:	68b1      	ldr	r1, [r6, #8]
    9fe0:	6091      	str	r1, [r2, #8]
    9fe2:	eb0a 0105 	add.w	r1, sl, r5
    9fe6:	ebc5 020b 	rsb	r2, r5, fp
    9fea:	f042 0201 	orr.w	r2, r2, #1
    9fee:	6099      	str	r1, [r3, #8]
    9ff0:	604a      	str	r2, [r1, #4]
    9ff2:	f8da 3004 	ldr.w	r3, [sl, #4]
    9ff6:	f003 0301 	and.w	r3, r3, #1
    9ffa:	431d      	orrs	r5, r3
    9ffc:	4648      	mov	r0, r9
    9ffe:	f8ca 5004 	str.w	r5, [sl, #4]
    a002:	f7ff feb1 	bl	9d68 <__malloc_unlock>
    a006:	4638      	mov	r0, r7
    a008:	e75c      	b.n	9ec4 <_realloc_r+0x148>
    a00a:	6833      	ldr	r3, [r6, #0]
    a00c:	6003      	str	r3, [r0, #0]
    a00e:	6873      	ldr	r3, [r6, #4]
    a010:	6043      	str	r3, [r0, #4]
    a012:	2a1b      	cmp	r2, #27
    a014:	d827      	bhi.n	a066 <_realloc_r+0x2ea>
    a016:	f100 0308 	add.w	r3, r0, #8
    a01a:	f106 0208 	add.w	r2, r6, #8
    a01e:	e6f2      	b.n	9e06 <_realloc_r+0x8a>
    a020:	463b      	mov	r3, r7
    a022:	6832      	ldr	r2, [r6, #0]
    a024:	601a      	str	r2, [r3, #0]
    a026:	6872      	ldr	r2, [r6, #4]
    a028:	605a      	str	r2, [r3, #4]
    a02a:	68b2      	ldr	r2, [r6, #8]
    a02c:	609a      	str	r2, [r3, #8]
    a02e:	463e      	mov	r6, r7
    a030:	4674      	mov	r4, lr
    a032:	46d0      	mov	r8, sl
    a034:	e733      	b.n	9e9e <_realloc_r+0x122>
    a036:	eb08 0105 	add.w	r1, r8, r5
    a03a:	ebc5 0b0b 	rsb	fp, r5, fp
    a03e:	f04b 0201 	orr.w	r2, fp, #1
    a042:	6099      	str	r1, [r3, #8]
    a044:	604a      	str	r2, [r1, #4]
    a046:	f856 3c04 	ldr.w	r3, [r6, #-4]
    a04a:	f003 0301 	and.w	r3, r3, #1
    a04e:	431d      	orrs	r5, r3
    a050:	4648      	mov	r0, r9
    a052:	f846 5c04 	str.w	r5, [r6, #-4]
    a056:	f7ff fe87 	bl	9d68 <__malloc_unlock>
    a05a:	4630      	mov	r0, r6
    a05c:	e732      	b.n	9ec4 <_realloc_r+0x148>
    a05e:	4631      	mov	r1, r6
    a060:	f7ff fdce 	bl	9c00 <memmove>
    a064:	e6d5      	b.n	9e12 <_realloc_r+0x96>
    a066:	68b3      	ldr	r3, [r6, #8]
    a068:	6083      	str	r3, [r0, #8]
    a06a:	68f3      	ldr	r3, [r6, #12]
    a06c:	60c3      	str	r3, [r0, #12]
    a06e:	2a24      	cmp	r2, #36	; 0x24
    a070:	d028      	beq.n	a0c4 <_realloc_r+0x348>
    a072:	f100 0310 	add.w	r3, r0, #16
    a076:	f106 0210 	add.w	r2, r6, #16
    a07a:	e6c4      	b.n	9e06 <_realloc_r+0x8a>
    a07c:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a080:	f023 0303 	bic.w	r3, r3, #3
    a084:	441c      	add	r4, r3
    a086:	e70a      	b.n	9e9e <_realloc_r+0x122>
    a088:	4631      	mov	r1, r6
    a08a:	4638      	mov	r0, r7
    a08c:	4674      	mov	r4, lr
    a08e:	46d0      	mov	r8, sl
    a090:	f7ff fdb6 	bl	9c00 <memmove>
    a094:	463e      	mov	r6, r7
    a096:	e702      	b.n	9e9e <_realloc_r+0x122>
    a098:	463a      	mov	r2, r7
    a09a:	e6f7      	b.n	9e8c <_realloc_r+0x110>
    a09c:	4631      	mov	r1, r6
    a09e:	4638      	mov	r0, r7
    a0a0:	461c      	mov	r4, r3
    a0a2:	46d0      	mov	r8, sl
    a0a4:	f7ff fdac 	bl	9c00 <memmove>
    a0a8:	463e      	mov	r6, r7
    a0aa:	e6f8      	b.n	9e9e <_realloc_r+0x122>
    a0ac:	68b3      	ldr	r3, [r6, #8]
    a0ae:	f8ca 3010 	str.w	r3, [sl, #16]
    a0b2:	68f3      	ldr	r3, [r6, #12]
    a0b4:	f8ca 3014 	str.w	r3, [sl, #20]
    a0b8:	2a24      	cmp	r2, #36	; 0x24
    a0ba:	d01b      	beq.n	a0f4 <_realloc_r+0x378>
    a0bc:	3610      	adds	r6, #16
    a0be:	f10a 0318 	add.w	r3, sl, #24
    a0c2:	e7ae      	b.n	a022 <_realloc_r+0x2a6>
    a0c4:	6933      	ldr	r3, [r6, #16]
    a0c6:	6103      	str	r3, [r0, #16]
    a0c8:	6973      	ldr	r3, [r6, #20]
    a0ca:	6143      	str	r3, [r0, #20]
    a0cc:	f106 0218 	add.w	r2, r6, #24
    a0d0:	f100 0318 	add.w	r3, r0, #24
    a0d4:	e697      	b.n	9e06 <_realloc_r+0x8a>
    a0d6:	bf00      	nop
    a0d8:	1fff90e0 	.word	0x1fff90e0
    a0dc:	68b1      	ldr	r1, [r6, #8]
    a0de:	f8ca 1010 	str.w	r1, [sl, #16]
    a0e2:	68f1      	ldr	r1, [r6, #12]
    a0e4:	f8ca 1014 	str.w	r1, [sl, #20]
    a0e8:	2a24      	cmp	r2, #36	; 0x24
    a0ea:	d00f      	beq.n	a10c <_realloc_r+0x390>
    a0ec:	3610      	adds	r6, #16
    a0ee:	f10a 0218 	add.w	r2, sl, #24
    a0f2:	e6cb      	b.n	9e8c <_realloc_r+0x110>
    a0f4:	6933      	ldr	r3, [r6, #16]
    a0f6:	f8ca 3018 	str.w	r3, [sl, #24]
    a0fa:	6973      	ldr	r3, [r6, #20]
    a0fc:	f8ca 301c 	str.w	r3, [sl, #28]
    a100:	3618      	adds	r6, #24
    a102:	f10a 0320 	add.w	r3, sl, #32
    a106:	e78c      	b.n	a022 <_realloc_r+0x2a6>
    a108:	463a      	mov	r2, r7
    a10a:	e764      	b.n	9fd6 <_realloc_r+0x25a>
    a10c:	6932      	ldr	r2, [r6, #16]
    a10e:	f8ca 2018 	str.w	r2, [sl, #24]
    a112:	6972      	ldr	r2, [r6, #20]
    a114:	f8ca 201c 	str.w	r2, [sl, #28]
    a118:	3618      	adds	r6, #24
    a11a:	f10a 0220 	add.w	r2, sl, #32
    a11e:	e6b5      	b.n	9e8c <_realloc_r+0x110>
    a120:	4631      	mov	r1, r6
    a122:	4638      	mov	r0, r7
    a124:	9301      	str	r3, [sp, #4]
    a126:	f7ff fd6b 	bl	9c00 <memmove>
    a12a:	9b01      	ldr	r3, [sp, #4]
    a12c:	e759      	b.n	9fe2 <_realloc_r+0x266>
    a12e:	68b1      	ldr	r1, [r6, #8]
    a130:	f8ca 1010 	str.w	r1, [sl, #16]
    a134:	68f1      	ldr	r1, [r6, #12]
    a136:	f8ca 1014 	str.w	r1, [sl, #20]
    a13a:	2a24      	cmp	r2, #36	; 0x24
    a13c:	d003      	beq.n	a146 <_realloc_r+0x3ca>
    a13e:	3610      	adds	r6, #16
    a140:	f10a 0218 	add.w	r2, sl, #24
    a144:	e747      	b.n	9fd6 <_realloc_r+0x25a>
    a146:	6932      	ldr	r2, [r6, #16]
    a148:	f8ca 2018 	str.w	r2, [sl, #24]
    a14c:	6972      	ldr	r2, [r6, #20]
    a14e:	f8ca 201c 	str.w	r2, [sl, #28]
    a152:	3618      	adds	r6, #24
    a154:	f10a 0220 	add.w	r2, sl, #32
    a158:	e73d      	b.n	9fd6 <_realloc_r+0x25a>
    a15a:	bf00      	nop

0000a15c <_sbrk_r>:
    a15c:	b538      	push	{r3, r4, r5, lr}
    a15e:	4c07      	ldr	r4, [pc, #28]	; (a17c <_sbrk_r+0x20>)
    a160:	2300      	movs	r3, #0
    a162:	4605      	mov	r5, r0
    a164:	4608      	mov	r0, r1
    a166:	6023      	str	r3, [r4, #0]
    a168:	f7fc fd78 	bl	6c5c <_sbrk>
    a16c:	1c43      	adds	r3, r0, #1
    a16e:	d000      	beq.n	a172 <_sbrk_r+0x16>
    a170:	bd38      	pop	{r3, r4, r5, pc}
    a172:	6823      	ldr	r3, [r4, #0]
    a174:	2b00      	cmp	r3, #0
    a176:	d0fb      	beq.n	a170 <_sbrk_r+0x14>
    a178:	602b      	str	r3, [r5, #0]
    a17a:	bd38      	pop	{r3, r4, r5, pc}
    a17c:	1fff9890 	.word	0x1fff9890

0000a180 <sprintf>:
    a180:	b40e      	push	{r1, r2, r3}
    a182:	b5f0      	push	{r4, r5, r6, r7, lr}
    a184:	b09c      	sub	sp, #112	; 0x70
    a186:	ab21      	add	r3, sp, #132	; 0x84
    a188:	490f      	ldr	r1, [pc, #60]	; (a1c8 <sprintf+0x48>)
    a18a:	f853 2b04 	ldr.w	r2, [r3], #4
    a18e:	9301      	str	r3, [sp, #4]
    a190:	4605      	mov	r5, r0
    a192:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    a196:	6808      	ldr	r0, [r1, #0]
    a198:	9502      	str	r5, [sp, #8]
    a19a:	f44f 7702 	mov.w	r7, #520	; 0x208
    a19e:	f64f 76ff 	movw	r6, #65535	; 0xffff
    a1a2:	a902      	add	r1, sp, #8
    a1a4:	9506      	str	r5, [sp, #24]
    a1a6:	f8ad 7014 	strh.w	r7, [sp, #20]
    a1aa:	9404      	str	r4, [sp, #16]
    a1ac:	9407      	str	r4, [sp, #28]
    a1ae:	f8ad 6016 	strh.w	r6, [sp, #22]
    a1b2:	f000 f927 	bl	a404 <_svfprintf_r>
    a1b6:	9b02      	ldr	r3, [sp, #8]
    a1b8:	2200      	movs	r2, #0
    a1ba:	701a      	strb	r2, [r3, #0]
    a1bc:	b01c      	add	sp, #112	; 0x70
    a1be:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1c2:	b003      	add	sp, #12
    a1c4:	4770      	bx	lr
    a1c6:	bf00      	nop
    a1c8:	1fff8f70 	.word	0x1fff8f70

0000a1cc <strcpy>:
    a1cc:	ea80 0201 	eor.w	r2, r0, r1
    a1d0:	4684      	mov	ip, r0
    a1d2:	f012 0f03 	tst.w	r2, #3
    a1d6:	d14f      	bne.n	a278 <strcpy+0xac>
    a1d8:	f011 0f03 	tst.w	r1, #3
    a1dc:	d132      	bne.n	a244 <strcpy+0x78>
    a1de:	f84d 4d04 	str.w	r4, [sp, #-4]!
    a1e2:	f011 0f04 	tst.w	r1, #4
    a1e6:	f851 3b04 	ldr.w	r3, [r1], #4
    a1ea:	d00b      	beq.n	a204 <strcpy+0x38>
    a1ec:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a1f0:	439a      	bics	r2, r3
    a1f2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a1f6:	bf04      	itt	eq
    a1f8:	f84c 3b04 	streq.w	r3, [ip], #4
    a1fc:	f851 3b04 	ldreq.w	r3, [r1], #4
    a200:	d116      	bne.n	a230 <strcpy+0x64>
    a202:	bf00      	nop
    a204:	f851 4b04 	ldr.w	r4, [r1], #4
    a208:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
    a20c:	439a      	bics	r2, r3
    a20e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a212:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
    a216:	d10b      	bne.n	a230 <strcpy+0x64>
    a218:	f84c 3b04 	str.w	r3, [ip], #4
    a21c:	43a2      	bics	r2, r4
    a21e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
    a222:	bf04      	itt	eq
    a224:	f851 3b04 	ldreq.w	r3, [r1], #4
    a228:	f84c 4b04 	streq.w	r4, [ip], #4
    a22c:	d0ea      	beq.n	a204 <strcpy+0x38>
    a22e:	4623      	mov	r3, r4
    a230:	f80c 3b01 	strb.w	r3, [ip], #1
    a234:	f013 0fff 	tst.w	r3, #255	; 0xff
    a238:	ea4f 2333 	mov.w	r3, r3, ror #8
    a23c:	d1f8      	bne.n	a230 <strcpy+0x64>
    a23e:	f85d 4b04 	ldr.w	r4, [sp], #4
    a242:	4770      	bx	lr
    a244:	f011 0f01 	tst.w	r1, #1
    a248:	d006      	beq.n	a258 <strcpy+0x8c>
    a24a:	f811 2b01 	ldrb.w	r2, [r1], #1
    a24e:	f80c 2b01 	strb.w	r2, [ip], #1
    a252:	2a00      	cmp	r2, #0
    a254:	bf08      	it	eq
    a256:	4770      	bxeq	lr
    a258:	f011 0f02 	tst.w	r1, #2
    a25c:	d0bf      	beq.n	a1de <strcpy+0x12>
    a25e:	f831 2b02 	ldrh.w	r2, [r1], #2
    a262:	f012 0fff 	tst.w	r2, #255	; 0xff
    a266:	bf16      	itet	ne
    a268:	f82c 2b02 	strhne.w	r2, [ip], #2
    a26c:	f88c 2000 	strbeq.w	r2, [ip]
    a270:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
    a274:	d1b3      	bne.n	a1de <strcpy+0x12>
    a276:	4770      	bx	lr
    a278:	f811 2b01 	ldrb.w	r2, [r1], #1
    a27c:	f80c 2b01 	strb.w	r2, [ip], #1
    a280:	2a00      	cmp	r2, #0
    a282:	d1f9      	bne.n	a278 <strcpy+0xac>
    a284:	4770      	bx	lr
    a286:	bf00      	nop
    a288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a28c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a29c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    a2bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000a2c0 <strlen>:
    a2c0:	f890 f000 	pld	[r0]
    a2c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    a2c8:	f020 0107 	bic.w	r1, r0, #7
    a2cc:	f06f 0c00 	mvn.w	ip, #0
    a2d0:	f010 0407 	ands.w	r4, r0, #7
    a2d4:	f891 f020 	pld	[r1, #32]
    a2d8:	f040 8049 	bne.w	a36e <strlen+0xae>
    a2dc:	f04f 0400 	mov.w	r4, #0
    a2e0:	f06f 0007 	mvn.w	r0, #7
    a2e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    a2e8:	f891 f040 	pld	[r1, #64]	; 0x40
    a2ec:	f100 0008 	add.w	r0, r0, #8
    a2f0:	fa82 f24c 	uadd8	r2, r2, ip
    a2f4:	faa4 f28c 	sel	r2, r4, ip
    a2f8:	fa83 f34c 	uadd8	r3, r3, ip
    a2fc:	faa2 f38c 	sel	r3, r2, ip
    a300:	bb4b      	cbnz	r3, a356 <strlen+0x96>
    a302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    a306:	fa82 f24c 	uadd8	r2, r2, ip
    a30a:	f100 0008 	add.w	r0, r0, #8
    a30e:	faa4 f28c 	sel	r2, r4, ip
    a312:	fa83 f34c 	uadd8	r3, r3, ip
    a316:	faa2 f38c 	sel	r3, r2, ip
    a31a:	b9e3      	cbnz	r3, a356 <strlen+0x96>
    a31c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    a320:	fa82 f24c 	uadd8	r2, r2, ip
    a324:	f100 0008 	add.w	r0, r0, #8
    a328:	faa4 f28c 	sel	r2, r4, ip
    a32c:	fa83 f34c 	uadd8	r3, r3, ip
    a330:	faa2 f38c 	sel	r3, r2, ip
    a334:	b97b      	cbnz	r3, a356 <strlen+0x96>
    a336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    a33a:	f101 0120 	add.w	r1, r1, #32
    a33e:	fa82 f24c 	uadd8	r2, r2, ip
    a342:	f100 0008 	add.w	r0, r0, #8
    a346:	faa4 f28c 	sel	r2, r4, ip
    a34a:	fa83 f34c 	uadd8	r3, r3, ip
    a34e:	faa2 f38c 	sel	r3, r2, ip
    a352:	2b00      	cmp	r3, #0
    a354:	d0c6      	beq.n	a2e4 <strlen+0x24>
    a356:	2a00      	cmp	r2, #0
    a358:	bf04      	itt	eq
    a35a:	3004      	addeq	r0, #4
    a35c:	461a      	moveq	r2, r3
    a35e:	ba12      	rev	r2, r2
    a360:	fab2 f282 	clz	r2, r2
    a364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    a368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    a36c:	4770      	bx	lr
    a36e:	e9d1 2300 	ldrd	r2, r3, [r1]
    a372:	f004 0503 	and.w	r5, r4, #3
    a376:	f1c4 0000 	rsb	r0, r4, #0
    a37a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    a37e:	f014 0f04 	tst.w	r4, #4
    a382:	f891 f040 	pld	[r1, #64]	; 0x40
    a386:	fa0c f505 	lsl.w	r5, ip, r5
    a38a:	ea62 0205 	orn	r2, r2, r5
    a38e:	bf1c      	itt	ne
    a390:	ea63 0305 	ornne	r3, r3, r5
    a394:	4662      	movne	r2, ip
    a396:	f04f 0400 	mov.w	r4, #0
    a39a:	e7a9      	b.n	a2f0 <strlen+0x30>

0000a39c <strncpy>:
    a39c:	ea40 0301 	orr.w	r3, r0, r1
    a3a0:	079b      	lsls	r3, r3, #30
    a3a2:	b470      	push	{r4, r5, r6}
    a3a4:	d12b      	bne.n	a3fe <strncpy+0x62>
    a3a6:	2a03      	cmp	r2, #3
    a3a8:	d929      	bls.n	a3fe <strncpy+0x62>
    a3aa:	460c      	mov	r4, r1
    a3ac:	4603      	mov	r3, r0
    a3ae:	4621      	mov	r1, r4
    a3b0:	f854 6b04 	ldr.w	r6, [r4], #4
    a3b4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    a3b8:	ea25 0506 	bic.w	r5, r5, r6
    a3bc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    a3c0:	d106      	bne.n	a3d0 <strncpy+0x34>
    a3c2:	3a04      	subs	r2, #4
    a3c4:	2a03      	cmp	r2, #3
    a3c6:	f843 6b04 	str.w	r6, [r3], #4
    a3ca:	4621      	mov	r1, r4
    a3cc:	d8ef      	bhi.n	a3ae <strncpy+0x12>
    a3ce:	b1a2      	cbz	r2, a3fa <strncpy+0x5e>
    a3d0:	780c      	ldrb	r4, [r1, #0]
    a3d2:	701c      	strb	r4, [r3, #0]
    a3d4:	3a01      	subs	r2, #1
    a3d6:	3301      	adds	r3, #1
    a3d8:	3101      	adds	r1, #1
    a3da:	b13c      	cbz	r4, a3ec <strncpy+0x50>
    a3dc:	b16a      	cbz	r2, a3fa <strncpy+0x5e>
    a3de:	f811 4b01 	ldrb.w	r4, [r1], #1
    a3e2:	f803 4b01 	strb.w	r4, [r3], #1
    a3e6:	3a01      	subs	r2, #1
    a3e8:	2c00      	cmp	r4, #0
    a3ea:	d1f7      	bne.n	a3dc <strncpy+0x40>
    a3ec:	b12a      	cbz	r2, a3fa <strncpy+0x5e>
    a3ee:	441a      	add	r2, r3
    a3f0:	2100      	movs	r1, #0
    a3f2:	f803 1b01 	strb.w	r1, [r3], #1
    a3f6:	429a      	cmp	r2, r3
    a3f8:	d1fb      	bne.n	a3f2 <strncpy+0x56>
    a3fa:	bc70      	pop	{r4, r5, r6}
    a3fc:	4770      	bx	lr
    a3fe:	4603      	mov	r3, r0
    a400:	e7e5      	b.n	a3ce <strncpy+0x32>
    a402:	bf00      	nop

0000a404 <_svfprintf_r>:
    a404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a408:	b0c1      	sub	sp, #260	; 0x104
    a40a:	460c      	mov	r4, r1
    a40c:	9109      	str	r1, [sp, #36]	; 0x24
    a40e:	4615      	mov	r5, r2
    a410:	930e      	str	r3, [sp, #56]	; 0x38
    a412:	900a      	str	r0, [sp, #40]	; 0x28
    a414:	f002 fd12 	bl	ce3c <_localeconv_r>
    a418:	6803      	ldr	r3, [r0, #0]
    a41a:	9317      	str	r3, [sp, #92]	; 0x5c
    a41c:	4618      	mov	r0, r3
    a41e:	f7ff ff4f 	bl	a2c0 <strlen>
    a422:	89a3      	ldrh	r3, [r4, #12]
    a424:	9016      	str	r0, [sp, #88]	; 0x58
    a426:	061e      	lsls	r6, r3, #24
    a428:	d503      	bpl.n	a432 <_svfprintf_r+0x2e>
    a42a:	6923      	ldr	r3, [r4, #16]
    a42c:	2b00      	cmp	r3, #0
    a42e:	f001 811a 	beq.w	b666 <_svfprintf_r+0x1262>
    a432:	2300      	movs	r3, #0
    a434:	461a      	mov	r2, r3
    a436:	9312      	str	r3, [sp, #72]	; 0x48
    a438:	9325      	str	r3, [sp, #148]	; 0x94
    a43a:	9324      	str	r3, [sp, #144]	; 0x90
    a43c:	9319      	str	r3, [sp, #100]	; 0x64
    a43e:	930b      	str	r3, [sp, #44]	; 0x2c
    a440:	f8df a464 	ldr.w	sl, [pc, #1124]	; a8a8 <_svfprintf_r+0x4a4>
    a444:	9214      	str	r2, [sp, #80]	; 0x50
    a446:	ab30      	add	r3, sp, #192	; 0xc0
    a448:	9323      	str	r3, [sp, #140]	; 0x8c
    a44a:	4699      	mov	r9, r3
    a44c:	9215      	str	r2, [sp, #84]	; 0x54
    a44e:	46a8      	mov	r8, r5
    a450:	f898 3000 	ldrb.w	r3, [r8]
    a454:	4644      	mov	r4, r8
    a456:	b1eb      	cbz	r3, a494 <_svfprintf_r+0x90>
    a458:	2b25      	cmp	r3, #37	; 0x25
    a45a:	d102      	bne.n	a462 <_svfprintf_r+0x5e>
    a45c:	e01a      	b.n	a494 <_svfprintf_r+0x90>
    a45e:	2b25      	cmp	r3, #37	; 0x25
    a460:	d003      	beq.n	a46a <_svfprintf_r+0x66>
    a462:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    a466:	2b00      	cmp	r3, #0
    a468:	d1f9      	bne.n	a45e <_svfprintf_r+0x5a>
    a46a:	ebc8 0504 	rsb	r5, r8, r4
    a46e:	b18d      	cbz	r5, a494 <_svfprintf_r+0x90>
    a470:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a472:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a474:	f8c9 8000 	str.w	r8, [r9]
    a478:	3301      	adds	r3, #1
    a47a:	442a      	add	r2, r5
    a47c:	2b07      	cmp	r3, #7
    a47e:	f8c9 5004 	str.w	r5, [r9, #4]
    a482:	9225      	str	r2, [sp, #148]	; 0x94
    a484:	9324      	str	r3, [sp, #144]	; 0x90
    a486:	f300 80a6 	bgt.w	a5d6 <_svfprintf_r+0x1d2>
    a48a:	f109 0908 	add.w	r9, r9, #8
    a48e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a490:	442b      	add	r3, r5
    a492:	930b      	str	r3, [sp, #44]	; 0x2c
    a494:	7823      	ldrb	r3, [r4, #0]
    a496:	2b00      	cmp	r3, #0
    a498:	f000 80a6 	beq.w	a5e8 <_svfprintf_r+0x1e4>
    a49c:	2300      	movs	r3, #0
    a49e:	461a      	mov	r2, r3
    a4a0:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    a4a4:	4619      	mov	r1, r3
    a4a6:	930c      	str	r3, [sp, #48]	; 0x30
    a4a8:	9307      	str	r3, [sp, #28]
    a4aa:	f04f 3bff 	mov.w	fp, #4294967295
    a4ae:	7863      	ldrb	r3, [r4, #1]
    a4b0:	f104 0801 	add.w	r8, r4, #1
    a4b4:	465d      	mov	r5, fp
    a4b6:	f108 0801 	add.w	r8, r8, #1
    a4ba:	f1a3 0020 	sub.w	r0, r3, #32
    a4be:	2858      	cmp	r0, #88	; 0x58
    a4c0:	f200 8425 	bhi.w	ad0e <_svfprintf_r+0x90a>
    a4c4:	e8df f010 	tbh	[pc, r0, lsl #1]
    a4c8:	04230388 	.word	0x04230388
    a4cc:	03900423 	.word	0x03900423
    a4d0:	04230423 	.word	0x04230423
    a4d4:	04230423 	.word	0x04230423
    a4d8:	04230423 	.word	0x04230423
    a4dc:	03a50397 	.word	0x03a50397
    a4e0:	005d0423 	.word	0x005d0423
    a4e4:	042300e2 	.word	0x042300e2
    a4e8:	010500fe 	.word	0x010500fe
    a4ec:	01050105 	.word	0x01050105
    a4f0:	01050105 	.word	0x01050105
    a4f4:	01050105 	.word	0x01050105
    a4f8:	01050105 	.word	0x01050105
    a4fc:	04230423 	.word	0x04230423
    a500:	04230423 	.word	0x04230423
    a504:	04230423 	.word	0x04230423
    a508:	04230423 	.word	0x04230423
    a50c:	04230423 	.word	0x04230423
    a510:	02810115 	.word	0x02810115
    a514:	02810423 	.word	0x02810423
    a518:	04230423 	.word	0x04230423
    a51c:	04230423 	.word	0x04230423
    a520:	042302c6 	.word	0x042302c6
    a524:	02cd0423 	.word	0x02cd0423
    a528:	04230423 	.word	0x04230423
    a52c:	04230423 	.word	0x04230423
    a530:	02f70423 	.word	0x02f70423
    a534:	04230423 	.word	0x04230423
    a538:	04230325 	.word	0x04230325
    a53c:	04230423 	.word	0x04230423
    a540:	04230423 	.word	0x04230423
    a544:	04230423 	.word	0x04230423
    a548:	04230423 	.word	0x04230423
    a54c:	03660423 	.word	0x03660423
    a550:	02810379 	.word	0x02810379
    a554:	02810281 	.word	0x02810281
    a558:	03790381 	.word	0x03790381
    a55c:	04230423 	.word	0x04230423
    a560:	042303d1 	.word	0x042303d1
    a564:	00a303db 	.word	0x00a303db
    a568:	03ee0064 	.word	0x03ee0064
    a56c:	03f50423 	.word	0x03f50423
    a570:	03aa0423 	.word	0x03aa0423
    a574:	04230423 	.word	0x04230423
    a578:	03bc      	.short	0x03bc
    a57a:	980c      	ldr	r0, [sp, #48]	; 0x30
    a57c:	930e      	str	r3, [sp, #56]	; 0x38
    a57e:	4240      	negs	r0, r0
    a580:	900c      	str	r0, [sp, #48]	; 0x30
    a582:	9b07      	ldr	r3, [sp, #28]
    a584:	f043 0304 	orr.w	r3, r3, #4
    a588:	9307      	str	r3, [sp, #28]
    a58a:	f898 3000 	ldrb.w	r3, [r8]
    a58e:	e792      	b.n	a4b6 <_svfprintf_r+0xb2>
    a590:	980e      	ldr	r0, [sp, #56]	; 0x38
    a592:	46ab      	mov	fp, r5
    a594:	2100      	movs	r1, #0
    a596:	6804      	ldr	r4, [r0, #0]
    a598:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    a59c:	1d07      	adds	r7, r0, #4
    a59e:	9807      	ldr	r0, [sp, #28]
    a5a0:	2330      	movs	r3, #48	; 0x30
    a5a2:	2278      	movs	r2, #120	; 0x78
    a5a4:	458b      	cmp	fp, r1
    a5a6:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    a5aa:	f04f 0500 	mov.w	r5, #0
    a5ae:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    a5b2:	f040 0302 	orr.w	r3, r0, #2
    a5b6:	f2c0 83c7 	blt.w	ad48 <_svfprintf_r+0x944>
    a5ba:	f020 0380 	bic.w	r3, r0, #128	; 0x80
    a5be:	f043 0302 	orr.w	r3, r3, #2
    a5c2:	9307      	str	r3, [sp, #28]
    a5c4:	ea54 0305 	orrs.w	r3, r4, r5
    a5c8:	970e      	str	r7, [sp, #56]	; 0x38
    a5ca:	f000 8393 	beq.w	acf4 <_svfprintf_r+0x8f0>
    a5ce:	460f      	mov	r7, r1
    a5d0:	9211      	str	r2, [sp, #68]	; 0x44
    a5d2:	48b3      	ldr	r0, [pc, #716]	; (a8a0 <_svfprintf_r+0x49c>)
    a5d4:	e2ce      	b.n	ab74 <_svfprintf_r+0x770>
    a5d6:	aa23      	add	r2, sp, #140	; 0x8c
    a5d8:	9909      	ldr	r1, [sp, #36]	; 0x24
    a5da:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5dc:	f002 ff9e 	bl	d51c <__ssprint_r>
    a5e0:	b948      	cbnz	r0, a5f6 <_svfprintf_r+0x1f2>
    a5e2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    a5e6:	e752      	b.n	a48e <_svfprintf_r+0x8a>
    a5e8:	9b25      	ldr	r3, [sp, #148]	; 0x94
    a5ea:	b123      	cbz	r3, a5f6 <_svfprintf_r+0x1f2>
    a5ec:	980a      	ldr	r0, [sp, #40]	; 0x28
    a5ee:	9909      	ldr	r1, [sp, #36]	; 0x24
    a5f0:	aa23      	add	r2, sp, #140	; 0x8c
    a5f2:	f002 ff93 	bl	d51c <__ssprint_r>
    a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a5f8:	899b      	ldrh	r3, [r3, #12]
    a5fa:	f013 0f40 	tst.w	r3, #64	; 0x40
    a5fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a600:	bf18      	it	ne
    a602:	f04f 33ff 	movne.w	r3, #4294967295
    a606:	4618      	mov	r0, r3
    a608:	b041      	add	sp, #260	; 0x104
    a60a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a60e:	9311      	str	r3, [sp, #68]	; 0x44
    a610:	46ab      	mov	fp, r5
    a612:	2a00      	cmp	r2, #0
    a614:	f041 8233 	bne.w	ba7e <_svfprintf_r+0x167a>
    a618:	9a07      	ldr	r2, [sp, #28]
    a61a:	f012 0320 	ands.w	r3, r2, #32
    a61e:	f000 822e 	beq.w	aa7e <_svfprintf_r+0x67a>
    a622:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    a624:	3707      	adds	r7, #7
    a626:	f027 0307 	bic.w	r3, r7, #7
    a62a:	2700      	movs	r7, #0
    a62c:	f103 0108 	add.w	r1, r3, #8
    a630:	45bb      	cmp	fp, r7
    a632:	910e      	str	r1, [sp, #56]	; 0x38
    a634:	e9d3 4500 	ldrd	r4, r5, [r3]
    a638:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    a63c:	f2c0 8779 	blt.w	b532 <_svfprintf_r+0x112e>
    a640:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    a644:	9307      	str	r3, [sp, #28]
    a646:	ea54 0305 	orrs.w	r3, r4, r5
    a64a:	f000 8375 	beq.w	ad38 <_svfprintf_r+0x934>
    a64e:	ae30      	add	r6, sp, #192	; 0xc0
    a650:	08e2      	lsrs	r2, r4, #3
    a652:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    a656:	08e9      	lsrs	r1, r5, #3
    a658:	f004 0307 	and.w	r3, r4, #7
    a65c:	460d      	mov	r5, r1
    a65e:	4614      	mov	r4, r2
    a660:	3330      	adds	r3, #48	; 0x30
    a662:	ea54 0205 	orrs.w	r2, r4, r5
    a666:	f806 3d01 	strb.w	r3, [r6, #-1]!
    a66a:	d1f1      	bne.n	a650 <_svfprintf_r+0x24c>
    a66c:	9a07      	ldr	r2, [sp, #28]
    a66e:	07d1      	lsls	r1, r2, #31
    a670:	f140 8084 	bpl.w	a77c <_svfprintf_r+0x378>
    a674:	2b30      	cmp	r3, #48	; 0x30
    a676:	f000 8081 	beq.w	a77c <_svfprintf_r+0x378>
    a67a:	2230      	movs	r2, #48	; 0x30
    a67c:	1e73      	subs	r3, r6, #1
    a67e:	f806 2c01 	strb.w	r2, [r6, #-1]
    a682:	aa30      	add	r2, sp, #192	; 0xc0
    a684:	1ad2      	subs	r2, r2, r3
    a686:	920d      	str	r2, [sp, #52]	; 0x34
    a688:	461e      	mov	r6, r3
    a68a:	e07a      	b.n	a782 <_svfprintf_r+0x37e>
    a68c:	f898 3000 	ldrb.w	r3, [r8]
    a690:	2b2a      	cmp	r3, #42	; 0x2a
    a692:	f108 0401 	add.w	r4, r8, #1
    a696:	f001 81b9 	beq.w	ba0c <_svfprintf_r+0x1608>
    a69a:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a69e:	2809      	cmp	r0, #9
    a6a0:	bf98      	it	ls
    a6a2:	2500      	movls	r5, #0
    a6a4:	f201 816c 	bhi.w	b980 <_svfprintf_r+0x157c>
    a6a8:	f814 3b01 	ldrb.w	r3, [r4], #1
    a6ac:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    a6b0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    a6b4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a6b8:	2809      	cmp	r0, #9
    a6ba:	d9f5      	bls.n	a6a8 <_svfprintf_r+0x2a4>
    a6bc:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    a6c0:	46a0      	mov	r8, r4
    a6c2:	e6fa      	b.n	a4ba <_svfprintf_r+0xb6>
    a6c4:	9b07      	ldr	r3, [sp, #28]
    a6c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    a6ca:	9307      	str	r3, [sp, #28]
    a6cc:	f898 3000 	ldrb.w	r3, [r8]
    a6d0:	e6f1      	b.n	a4b6 <_svfprintf_r+0xb2>
    a6d2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a6d6:	2300      	movs	r3, #0
    a6d8:	461c      	mov	r4, r3
    a6da:	f818 3b01 	ldrb.w	r3, [r8], #1
    a6de:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    a6e2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    a6e6:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    a6ea:	2809      	cmp	r0, #9
    a6ec:	d9f5      	bls.n	a6da <_svfprintf_r+0x2d6>
    a6ee:	940c      	str	r4, [sp, #48]	; 0x30
    a6f0:	e6e3      	b.n	a4ba <_svfprintf_r+0xb6>
    a6f2:	9311      	str	r3, [sp, #68]	; 0x44
    a6f4:	46ab      	mov	fp, r5
    a6f6:	2a00      	cmp	r2, #0
    a6f8:	f041 81ab 	bne.w	ba52 <_svfprintf_r+0x164e>
    a6fc:	9b07      	ldr	r3, [sp, #28]
    a6fe:	f043 0310 	orr.w	r3, r3, #16
    a702:	9307      	str	r3, [sp, #28]
    a704:	9b07      	ldr	r3, [sp, #28]
    a706:	0698      	lsls	r0, r3, #26
    a708:	f140 8530 	bpl.w	b16c <_svfprintf_r+0xd68>
    a70c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    a70e:	3707      	adds	r7, #7
    a710:	f027 0707 	bic.w	r7, r7, #7
    a714:	e9d7 2300 	ldrd	r2, r3, [r7]
    a718:	f107 0108 	add.w	r1, r7, #8
    a71c:	910e      	str	r1, [sp, #56]	; 0x38
    a71e:	4614      	mov	r4, r2
    a720:	461d      	mov	r5, r3
    a722:	2a00      	cmp	r2, #0
    a724:	f173 0300 	sbcs.w	r3, r3, #0
    a728:	f2c0 855b 	blt.w	b1e2 <_svfprintf_r+0xdde>
    a72c:	f1bb 0f00 	cmp.w	fp, #0
    a730:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    a734:	f2c0 8538 	blt.w	b1a8 <_svfprintf_r+0xda4>
    a738:	9b07      	ldr	r3, [sp, #28]
    a73a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    a73e:	9307      	str	r3, [sp, #28]
    a740:	ea54 0305 	orrs.w	r3, r4, r5
    a744:	f000 81db 	beq.w	aafe <_svfprintf_r+0x6fa>
    a748:	2d00      	cmp	r5, #0
    a74a:	bf08      	it	eq
    a74c:	2c0a      	cmpeq	r4, #10
    a74e:	f0c0 81db 	bcc.w	ab08 <_svfprintf_r+0x704>
    a752:	ae30      	add	r6, sp, #192	; 0xc0
    a754:	4620      	mov	r0, r4
    a756:	4629      	mov	r1, r5
    a758:	220a      	movs	r2, #10
    a75a:	2300      	movs	r3, #0
    a75c:	f002 ffe6 	bl	d72c <__aeabi_uldivmod>
    a760:	3230      	adds	r2, #48	; 0x30
    a762:	f806 2d01 	strb.w	r2, [r6, #-1]!
    a766:	4620      	mov	r0, r4
    a768:	4629      	mov	r1, r5
    a76a:	2300      	movs	r3, #0
    a76c:	220a      	movs	r2, #10
    a76e:	f002 ffdd 	bl	d72c <__aeabi_uldivmod>
    a772:	4604      	mov	r4, r0
    a774:	460d      	mov	r5, r1
    a776:	ea54 0305 	orrs.w	r3, r4, r5
    a77a:	d1eb      	bne.n	a754 <_svfprintf_r+0x350>
    a77c:	ab30      	add	r3, sp, #192	; 0xc0
    a77e:	1b9b      	subs	r3, r3, r6
    a780:	930d      	str	r3, [sp, #52]	; 0x34
    a782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a784:	455b      	cmp	r3, fp
    a786:	bfb8      	it	lt
    a788:	465b      	movlt	r3, fp
    a78a:	9308      	str	r3, [sp, #32]
    a78c:	2300      	movs	r3, #0
    a78e:	9313      	str	r3, [sp, #76]	; 0x4c
    a790:	b117      	cbz	r7, a798 <_svfprintf_r+0x394>
    a792:	9b08      	ldr	r3, [sp, #32]
    a794:	3301      	adds	r3, #1
    a796:	9308      	str	r3, [sp, #32]
    a798:	9b07      	ldr	r3, [sp, #28]
    a79a:	f013 0302 	ands.w	r3, r3, #2
    a79e:	930f      	str	r3, [sp, #60]	; 0x3c
    a7a0:	d002      	beq.n	a7a8 <_svfprintf_r+0x3a4>
    a7a2:	9b08      	ldr	r3, [sp, #32]
    a7a4:	3302      	adds	r3, #2
    a7a6:	9308      	str	r3, [sp, #32]
    a7a8:	9b07      	ldr	r3, [sp, #28]
    a7aa:	f013 0384 	ands.w	r3, r3, #132	; 0x84
    a7ae:	9310      	str	r3, [sp, #64]	; 0x40
    a7b0:	f040 82d7 	bne.w	ad62 <_svfprintf_r+0x95e>
    a7b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a7b6:	9a08      	ldr	r2, [sp, #32]
    a7b8:	1a9d      	subs	r5, r3, r2
    a7ba:	2d00      	cmp	r5, #0
    a7bc:	f340 82d1 	ble.w	ad62 <_svfprintf_r+0x95e>
    a7c0:	2d10      	cmp	r5, #16
    a7c2:	9925      	ldr	r1, [sp, #148]	; 0x94
    a7c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a7c6:	4f37      	ldr	r7, [pc, #220]	; (a8a4 <_svfprintf_r+0x4a0>)
    a7c8:	dd27      	ble.n	a81a <_svfprintf_r+0x416>
    a7ca:	9618      	str	r6, [sp, #96]	; 0x60
    a7cc:	4648      	mov	r0, r9
    a7ce:	2410      	movs	r4, #16
    a7d0:	46b9      	mov	r9, r7
    a7d2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    a7d4:	462f      	mov	r7, r5
    a7d6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a7d8:	e004      	b.n	a7e4 <_svfprintf_r+0x3e0>
    a7da:	3f10      	subs	r7, #16
    a7dc:	2f10      	cmp	r7, #16
    a7de:	f100 0008 	add.w	r0, r0, #8
    a7e2:	dd16      	ble.n	a812 <_svfprintf_r+0x40e>
    a7e4:	3201      	adds	r2, #1
    a7e6:	4b2f      	ldr	r3, [pc, #188]	; (a8a4 <_svfprintf_r+0x4a0>)
    a7e8:	9224      	str	r2, [sp, #144]	; 0x90
    a7ea:	3110      	adds	r1, #16
    a7ec:	2a07      	cmp	r2, #7
    a7ee:	9125      	str	r1, [sp, #148]	; 0x94
    a7f0:	e880 0018 	stmia.w	r0, {r3, r4}
    a7f4:	ddf1      	ble.n	a7da <_svfprintf_r+0x3d6>
    a7f6:	aa23      	add	r2, sp, #140	; 0x8c
    a7f8:	4631      	mov	r1, r6
    a7fa:	4628      	mov	r0, r5
    a7fc:	f002 fe8e 	bl	d51c <__ssprint_r>
    a800:	2800      	cmp	r0, #0
    a802:	f47f aef8 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    a806:	3f10      	subs	r7, #16
    a808:	2f10      	cmp	r7, #16
    a80a:	9925      	ldr	r1, [sp, #148]	; 0x94
    a80c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    a80e:	a830      	add	r0, sp, #192	; 0xc0
    a810:	dce8      	bgt.n	a7e4 <_svfprintf_r+0x3e0>
    a812:	9e18      	ldr	r6, [sp, #96]	; 0x60
    a814:	463d      	mov	r5, r7
    a816:	464f      	mov	r7, r9
    a818:	4681      	mov	r9, r0
    a81a:	3201      	adds	r2, #1
    a81c:	186c      	adds	r4, r5, r1
    a81e:	2a07      	cmp	r2, #7
    a820:	9425      	str	r4, [sp, #148]	; 0x94
    a822:	9224      	str	r2, [sp, #144]	; 0x90
    a824:	f8c9 7000 	str.w	r7, [r9]
    a828:	f8c9 5004 	str.w	r5, [r9, #4]
    a82c:	f300 8428 	bgt.w	b080 <_svfprintf_r+0xc7c>
    a830:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    a834:	f109 0908 	add.w	r9, r9, #8
    a838:	b177      	cbz	r7, a858 <_svfprintf_r+0x454>
    a83a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a83c:	3301      	adds	r3, #1
    a83e:	3401      	adds	r4, #1
    a840:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
    a844:	2201      	movs	r2, #1
    a846:	2b07      	cmp	r3, #7
    a848:	9425      	str	r4, [sp, #148]	; 0x94
    a84a:	9324      	str	r3, [sp, #144]	; 0x90
    a84c:	e889 0006 	stmia.w	r9, {r1, r2}
    a850:	f300 83a0 	bgt.w	af94 <_svfprintf_r+0xb90>
    a854:	f109 0908 	add.w	r9, r9, #8
    a858:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    a85a:	b16b      	cbz	r3, a878 <_svfprintf_r+0x474>
    a85c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a85e:	3301      	adds	r3, #1
    a860:	3402      	adds	r4, #2
    a862:	a91c      	add	r1, sp, #112	; 0x70
    a864:	2202      	movs	r2, #2
    a866:	2b07      	cmp	r3, #7
    a868:	9425      	str	r4, [sp, #148]	; 0x94
    a86a:	9324      	str	r3, [sp, #144]	; 0x90
    a86c:	e889 0006 	stmia.w	r9, {r1, r2}
    a870:	f300 839c 	bgt.w	afac <_svfprintf_r+0xba8>
    a874:	f109 0908 	add.w	r9, r9, #8
    a878:	9b10      	ldr	r3, [sp, #64]	; 0x40
    a87a:	2b80      	cmp	r3, #128	; 0x80
    a87c:	f000 82d5 	beq.w	ae2a <_svfprintf_r+0xa26>
    a880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    a882:	ebc3 070b 	rsb	r7, r3, fp
    a886:	2f00      	cmp	r7, #0
    a888:	dd39      	ble.n	a8fe <_svfprintf_r+0x4fa>
    a88a:	4a07      	ldr	r2, [pc, #28]	; (a8a8 <_svfprintf_r+0x4a4>)
    a88c:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a88e:	920f      	str	r2, [sp, #60]	; 0x3c
    a890:	2f10      	cmp	r7, #16
    a892:	dd28      	ble.n	a8e6 <_svfprintf_r+0x4e2>
    a894:	4622      	mov	r2, r4
    a896:	f04f 0b10 	mov.w	fp, #16
    a89a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    a89c:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a89e:	e00a      	b.n	a8b6 <_svfprintf_r+0x4b2>
    a8a0:	0001ba1c 	.word	0x0001ba1c
    a8a4:	0001ba3c 	.word	0x0001ba3c
    a8a8:	0001b9e8 	.word	0x0001b9e8
    a8ac:	3f10      	subs	r7, #16
    a8ae:	2f10      	cmp	r7, #16
    a8b0:	f109 0908 	add.w	r9, r9, #8
    a8b4:	dd16      	ble.n	a8e4 <_svfprintf_r+0x4e0>
    a8b6:	3301      	adds	r3, #1
    a8b8:	3210      	adds	r2, #16
    a8ba:	2b07      	cmp	r3, #7
    a8bc:	9225      	str	r2, [sp, #148]	; 0x94
    a8be:	9324      	str	r3, [sp, #144]	; 0x90
    a8c0:	e889 0c00 	stmia.w	r9, {sl, fp}
    a8c4:	ddf2      	ble.n	a8ac <_svfprintf_r+0x4a8>
    a8c6:	aa23      	add	r2, sp, #140	; 0x8c
    a8c8:	4621      	mov	r1, r4
    a8ca:	4628      	mov	r0, r5
    a8cc:	f002 fe26 	bl	d51c <__ssprint_r>
    a8d0:	2800      	cmp	r0, #0
    a8d2:	f47f ae90 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    a8d6:	3f10      	subs	r7, #16
    a8d8:	2f10      	cmp	r7, #16
    a8da:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a8dc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a8de:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    a8e2:	dce8      	bgt.n	a8b6 <_svfprintf_r+0x4b2>
    a8e4:	4614      	mov	r4, r2
    a8e6:	3301      	adds	r3, #1
    a8e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    a8ea:	9324      	str	r3, [sp, #144]	; 0x90
    a8ec:	443c      	add	r4, r7
    a8ee:	2b07      	cmp	r3, #7
    a8f0:	9425      	str	r4, [sp, #148]	; 0x94
    a8f2:	e889 0084 	stmia.w	r9, {r2, r7}
    a8f6:	f300 8341 	bgt.w	af7c <_svfprintf_r+0xb78>
    a8fa:	f109 0908 	add.w	r9, r9, #8
    a8fe:	9b07      	ldr	r3, [sp, #28]
    a900:	05da      	lsls	r2, r3, #23
    a902:	f100 8230 	bmi.w	ad66 <_svfprintf_r+0x962>
    a906:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a908:	990d      	ldr	r1, [sp, #52]	; 0x34
    a90a:	f8c9 6000 	str.w	r6, [r9]
    a90e:	3301      	adds	r3, #1
    a910:	440c      	add	r4, r1
    a912:	2b07      	cmp	r3, #7
    a914:	9425      	str	r4, [sp, #148]	; 0x94
    a916:	f8c9 1004 	str.w	r1, [r9, #4]
    a91a:	9324      	str	r3, [sp, #144]	; 0x90
    a91c:	f300 8318 	bgt.w	af50 <_svfprintf_r+0xb4c>
    a920:	f109 0908 	add.w	r9, r9, #8
    a924:	9b07      	ldr	r3, [sp, #28]
    a926:	0759      	lsls	r1, r3, #29
    a928:	d53f      	bpl.n	a9aa <_svfprintf_r+0x5a6>
    a92a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    a92c:	9a08      	ldr	r2, [sp, #32]
    a92e:	1a9d      	subs	r5, r3, r2
    a930:	2d00      	cmp	r5, #0
    a932:	dd3a      	ble.n	a9aa <_svfprintf_r+0x5a6>
    a934:	2d10      	cmp	r5, #16
    a936:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a938:	4fbc      	ldr	r7, [pc, #752]	; (ac2c <_svfprintf_r+0x828>)
    a93a:	dd23      	ble.n	a984 <_svfprintf_r+0x580>
    a93c:	4622      	mov	r2, r4
    a93e:	2610      	movs	r6, #16
    a940:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    a944:	9c09      	ldr	r4, [sp, #36]	; 0x24
    a946:	e004      	b.n	a952 <_svfprintf_r+0x54e>
    a948:	3d10      	subs	r5, #16
    a94a:	2d10      	cmp	r5, #16
    a94c:	f109 0908 	add.w	r9, r9, #8
    a950:	dd17      	ble.n	a982 <_svfprintf_r+0x57e>
    a952:	3301      	adds	r3, #1
    a954:	49b5      	ldr	r1, [pc, #724]	; (ac2c <_svfprintf_r+0x828>)
    a956:	9324      	str	r3, [sp, #144]	; 0x90
    a958:	3210      	adds	r2, #16
    a95a:	2b07      	cmp	r3, #7
    a95c:	9225      	str	r2, [sp, #148]	; 0x94
    a95e:	e889 0042 	stmia.w	r9, {r1, r6}
    a962:	ddf1      	ble.n	a948 <_svfprintf_r+0x544>
    a964:	aa23      	add	r2, sp, #140	; 0x8c
    a966:	4621      	mov	r1, r4
    a968:	4658      	mov	r0, fp
    a96a:	f002 fdd7 	bl	d51c <__ssprint_r>
    a96e:	2800      	cmp	r0, #0
    a970:	f47f ae41 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    a974:	3d10      	subs	r5, #16
    a976:	2d10      	cmp	r5, #16
    a978:	9a25      	ldr	r2, [sp, #148]	; 0x94
    a97a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    a97c:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    a980:	dce7      	bgt.n	a952 <_svfprintf_r+0x54e>
    a982:	4614      	mov	r4, r2
    a984:	3301      	adds	r3, #1
    a986:	442c      	add	r4, r5
    a988:	2b07      	cmp	r3, #7
    a98a:	9425      	str	r4, [sp, #148]	; 0x94
    a98c:	9324      	str	r3, [sp, #144]	; 0x90
    a98e:	f8c9 7000 	str.w	r7, [r9]
    a992:	f8c9 5004 	str.w	r5, [r9, #4]
    a996:	dd08      	ble.n	a9aa <_svfprintf_r+0x5a6>
    a998:	aa23      	add	r2, sp, #140	; 0x8c
    a99a:	9909      	ldr	r1, [sp, #36]	; 0x24
    a99c:	980a      	ldr	r0, [sp, #40]	; 0x28
    a99e:	f002 fdbd 	bl	d51c <__ssprint_r>
    a9a2:	2800      	cmp	r0, #0
    a9a4:	f47f ae27 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    a9a8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    a9aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    a9ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    a9ae:	9908      	ldr	r1, [sp, #32]
    a9b0:	428a      	cmp	r2, r1
    a9b2:	bfac      	ite	ge
    a9b4:	189b      	addge	r3, r3, r2
    a9b6:	185b      	addlt	r3, r3, r1
    a9b8:	930b      	str	r3, [sp, #44]	; 0x2c
    a9ba:	2c00      	cmp	r4, #0
    a9bc:	f040 82d4 	bne.w	af68 <_svfprintf_r+0xb64>
    a9c0:	2300      	movs	r3, #0
    a9c2:	9324      	str	r3, [sp, #144]	; 0x90
    a9c4:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    a9c8:	e542      	b.n	a450 <_svfprintf_r+0x4c>
    a9ca:	9311      	str	r3, [sp, #68]	; 0x44
    a9cc:	46ab      	mov	fp, r5
    a9ce:	2a00      	cmp	r2, #0
    a9d0:	f041 8051 	bne.w	ba76 <_svfprintf_r+0x1672>
    a9d4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    a9d6:	3707      	adds	r7, #7
    a9d8:	f027 0307 	bic.w	r3, r7, #7
    a9dc:	f103 0208 	add.w	r2, r3, #8
    a9e0:	920e      	str	r2, [sp, #56]	; 0x38
    a9e2:	681a      	ldr	r2, [r3, #0]
    a9e4:	9214      	str	r2, [sp, #80]	; 0x50
    a9e6:	685b      	ldr	r3, [r3, #4]
    a9e8:	9315      	str	r3, [sp, #84]	; 0x54
    a9ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
    a9ec:	9d14      	ldr	r5, [sp, #80]	; 0x50
    a9ee:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
    a9f2:	4628      	mov	r0, r5
    a9f4:	4621      	mov	r1, r4
    a9f6:	f04f 32ff 	mov.w	r2, #4294967295
    a9fa:	4b8d      	ldr	r3, [pc, #564]	; (ac30 <_svfprintf_r+0x82c>)
    a9fc:	f7fe fabe 	bl	8f7c <__aeabi_dcmpun>
    aa00:	2800      	cmp	r0, #0
    aa02:	f040 84c2 	bne.w	b38a <_svfprintf_r+0xf86>
    aa06:	4628      	mov	r0, r5
    aa08:	4621      	mov	r1, r4
    aa0a:	f04f 32ff 	mov.w	r2, #4294967295
    aa0e:	4b88      	ldr	r3, [pc, #544]	; (ac30 <_svfprintf_r+0x82c>)
    aa10:	f7fe fa96 	bl	8f40 <__aeabi_dcmple>
    aa14:	2800      	cmp	r0, #0
    aa16:	f040 84b8 	bne.w	b38a <_svfprintf_r+0xf86>
    aa1a:	9814      	ldr	r0, [sp, #80]	; 0x50
    aa1c:	9915      	ldr	r1, [sp, #84]	; 0x54
    aa1e:	2200      	movs	r2, #0
    aa20:	2300      	movs	r3, #0
    aa22:	f7fe fa83 	bl	8f2c <__aeabi_dcmplt>
    aa26:	2800      	cmp	r0, #0
    aa28:	f040 874f 	bne.w	b8ca <_svfprintf_r+0x14c6>
    aa2c:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    aa30:	4e80      	ldr	r6, [pc, #512]	; (ac34 <_svfprintf_r+0x830>)
    aa32:	4b81      	ldr	r3, [pc, #516]	; (ac38 <_svfprintf_r+0x834>)
    aa34:	9907      	ldr	r1, [sp, #28]
    aa36:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    aa3a:	9107      	str	r1, [sp, #28]
    aa3c:	9911      	ldr	r1, [sp, #68]	; 0x44
    aa3e:	2203      	movs	r2, #3
    aa40:	f04f 0b00 	mov.w	fp, #0
    aa44:	9208      	str	r2, [sp, #32]
    aa46:	2947      	cmp	r1, #71	; 0x47
    aa48:	bfd8      	it	le
    aa4a:	461e      	movle	r6, r3
    aa4c:	920d      	str	r2, [sp, #52]	; 0x34
    aa4e:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    aa52:	e69d      	b.n	a790 <_svfprintf_r+0x38c>
    aa54:	9b07      	ldr	r3, [sp, #28]
    aa56:	f043 0308 	orr.w	r3, r3, #8
    aa5a:	9307      	str	r3, [sp, #28]
    aa5c:	f898 3000 	ldrb.w	r3, [r8]
    aa60:	e529      	b.n	a4b6 <_svfprintf_r+0xb2>
    aa62:	9311      	str	r3, [sp, #68]	; 0x44
    aa64:	46ab      	mov	fp, r5
    aa66:	2a00      	cmp	r2, #0
    aa68:	f041 8011 	bne.w	ba8e <_svfprintf_r+0x168a>
    aa6c:	9b07      	ldr	r3, [sp, #28]
    aa6e:	f043 0310 	orr.w	r3, r3, #16
    aa72:	9307      	str	r3, [sp, #28]
    aa74:	9a07      	ldr	r2, [sp, #28]
    aa76:	f012 0320 	ands.w	r3, r2, #32
    aa7a:	f47f add2 	bne.w	a622 <_svfprintf_r+0x21e>
    aa7e:	9907      	ldr	r1, [sp, #28]
    aa80:	f011 0210 	ands.w	r2, r1, #16
    aa84:	f000 852c 	beq.w	b4e0 <_svfprintf_r+0x10dc>
    aa88:	980e      	ldr	r0, [sp, #56]	; 0x38
    aa8a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    aa8e:	f1bb 0f00 	cmp.w	fp, #0
    aa92:	6804      	ldr	r4, [r0, #0]
    aa94:	f100 0704 	add.w	r7, r0, #4
    aa98:	f04f 0500 	mov.w	r5, #0
    aa9c:	f2c0 8548 	blt.w	b530 <_svfprintf_r+0x112c>
    aaa0:	460a      	mov	r2, r1
    aaa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    aaa6:	9207      	str	r2, [sp, #28]
    aaa8:	ea54 0205 	orrs.w	r2, r4, r5
    aaac:	970e      	str	r7, [sp, #56]	; 0x38
    aaae:	f000 8143 	beq.w	ad38 <_svfprintf_r+0x934>
    aab2:	461f      	mov	r7, r3
    aab4:	e5cb      	b.n	a64e <_svfprintf_r+0x24a>
    aab6:	9311      	str	r3, [sp, #68]	; 0x44
    aab8:	46ab      	mov	fp, r5
    aaba:	2a00      	cmp	r2, #0
    aabc:	f040 87e3 	bne.w	ba86 <_svfprintf_r+0x1682>
    aac0:	9b07      	ldr	r3, [sp, #28]
    aac2:	f043 0310 	orr.w	r3, r3, #16
    aac6:	9307      	str	r3, [sp, #28]
    aac8:	9a07      	ldr	r2, [sp, #28]
    aaca:	f012 0320 	ands.w	r3, r2, #32
    aace:	f000 8332 	beq.w	b136 <_svfprintf_r+0xd32>
    aad2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    aad4:	3707      	adds	r7, #7
    aad6:	f027 0307 	bic.w	r3, r7, #7
    aada:	2700      	movs	r7, #0
    aadc:	f103 0108 	add.w	r1, r3, #8
    aae0:	45bb      	cmp	fp, r7
    aae2:	910e      	str	r1, [sp, #56]	; 0x38
    aae4:	e9d3 4500 	ldrd	r4, r5, [r3]
    aae8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    aaec:	f2c0 835c 	blt.w	b1a8 <_svfprintf_r+0xda4>
    aaf0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    aaf4:	9307      	str	r3, [sp, #28]
    aaf6:	ea54 0305 	orrs.w	r3, r4, r5
    aafa:	f47f ae25 	bne.w	a748 <_svfprintf_r+0x344>
    aafe:	f1bb 0f00 	cmp.w	fp, #0
    ab02:	f000 80fe 	beq.w	ad02 <_svfprintf_r+0x8fe>
    ab06:	2400      	movs	r4, #0
    ab08:	ae40      	add	r6, sp, #256	; 0x100
    ab0a:	3430      	adds	r4, #48	; 0x30
    ab0c:	f806 4d41 	strb.w	r4, [r6, #-65]!
    ab10:	e634      	b.n	a77c <_svfprintf_r+0x378>
    ab12:	9311      	str	r3, [sp, #68]	; 0x44
    ab14:	46ab      	mov	fp, r5
    ab16:	2a00      	cmp	r2, #0
    ab18:	f040 8797 	bne.w	ba4a <_svfprintf_r+0x1646>
    ab1c:	9b07      	ldr	r3, [sp, #28]
    ab1e:	4847      	ldr	r0, [pc, #284]	; (ac3c <_svfprintf_r+0x838>)
    ab20:	069d      	lsls	r5, r3, #26
    ab22:	f140 8097 	bpl.w	ac54 <_svfprintf_r+0x850>
    ab26:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    ab28:	3707      	adds	r7, #7
    ab2a:	f027 0307 	bic.w	r3, r7, #7
    ab2e:	e9d3 4500 	ldrd	r4, r5, [r3]
    ab32:	f103 0208 	add.w	r2, r3, #8
    ab36:	920e      	str	r2, [sp, #56]	; 0x38
    ab38:	9a07      	ldr	r2, [sp, #28]
    ab3a:	f012 0701 	ands.w	r7, r2, #1
    ab3e:	f000 8241 	beq.w	afc4 <_svfprintf_r+0xbc0>
    ab42:	ea54 0305 	orrs.w	r3, r4, r5
    ab46:	f000 8505 	beq.w	b554 <_svfprintf_r+0x1150>
    ab4a:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    ab4e:	f88d 2071 	strb.w	r2, [sp, #113]	; 0x71
    ab52:	2700      	movs	r7, #0
    ab54:	9a07      	ldr	r2, [sp, #28]
    ab56:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    ab5a:	2330      	movs	r3, #48	; 0x30
    ab5c:	45bb      	cmp	fp, r7
    ab5e:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
    ab62:	f042 0302 	orr.w	r3, r2, #2
    ab66:	f2c0 86b5 	blt.w	b8d4 <_svfprintf_r+0x14d0>
    ab6a:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    ab6e:	f043 0302 	orr.w	r3, r3, #2
    ab72:	9307      	str	r3, [sp, #28]
    ab74:	ae30      	add	r6, sp, #192	; 0xc0
    ab76:	0923      	lsrs	r3, r4, #4
    ab78:	f004 010f 	and.w	r1, r4, #15
    ab7c:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    ab80:	092a      	lsrs	r2, r5, #4
    ab82:	461c      	mov	r4, r3
    ab84:	4615      	mov	r5, r2
    ab86:	5c43      	ldrb	r3, [r0, r1]
    ab88:	f806 3d01 	strb.w	r3, [r6, #-1]!
    ab8c:	ea54 0305 	orrs.w	r3, r4, r5
    ab90:	d1f1      	bne.n	ab76 <_svfprintf_r+0x772>
    ab92:	e5f3      	b.n	a77c <_svfprintf_r+0x378>
    ab94:	990e      	ldr	r1, [sp, #56]	; 0x38
    ab96:	9311      	str	r3, [sp, #68]	; 0x44
    ab98:	680a      	ldr	r2, [r1, #0]
    ab9a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    ab9e:	2300      	movs	r3, #0
    aba0:	460a      	mov	r2, r1
    aba2:	461f      	mov	r7, r3
    aba4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    aba8:	3204      	adds	r2, #4
    abaa:	2301      	movs	r3, #1
    abac:	9308      	str	r3, [sp, #32]
    abae:	46bb      	mov	fp, r7
    abb0:	9713      	str	r7, [sp, #76]	; 0x4c
    abb2:	920e      	str	r2, [sp, #56]	; 0x38
    abb4:	930d      	str	r3, [sp, #52]	; 0x34
    abb6:	ae26      	add	r6, sp, #152	; 0x98
    abb8:	e5ee      	b.n	a798 <_svfprintf_r+0x394>
    abba:	9311      	str	r3, [sp, #68]	; 0x44
    abbc:	46ab      	mov	fp, r5
    abbe:	2a00      	cmp	r2, #0
    abc0:	f43f ada0 	beq.w	a704 <_svfprintf_r+0x300>
    abc4:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    abc8:	e59c      	b.n	a704 <_svfprintf_r+0x300>
    abca:	9b07      	ldr	r3, [sp, #28]
    abcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    abd0:	9307      	str	r3, [sp, #28]
    abd2:	f898 3000 	ldrb.w	r3, [r8]
    abd6:	e46e      	b.n	a4b6 <_svfprintf_r+0xb2>
    abd8:	f898 3000 	ldrb.w	r3, [r8]
    abdc:	2900      	cmp	r1, #0
    abde:	f47f ac6a 	bne.w	a4b6 <_svfprintf_r+0xb2>
    abe2:	2201      	movs	r2, #1
    abe4:	2120      	movs	r1, #32
    abe6:	e466      	b.n	a4b6 <_svfprintf_r+0xb2>
    abe8:	9b07      	ldr	r3, [sp, #28]
    abea:	f043 0301 	orr.w	r3, r3, #1
    abee:	9307      	str	r3, [sp, #28]
    abf0:	f898 3000 	ldrb.w	r3, [r8]
    abf4:	e45f      	b.n	a4b6 <_svfprintf_r+0xb2>
    abf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    abf8:	6823      	ldr	r3, [r4, #0]
    abfa:	930c      	str	r3, [sp, #48]	; 0x30
    abfc:	4618      	mov	r0, r3
    abfe:	2800      	cmp	r0, #0
    ac00:	4623      	mov	r3, r4
    ac02:	f103 0304 	add.w	r3, r3, #4
    ac06:	f6ff acb8 	blt.w	a57a <_svfprintf_r+0x176>
    ac0a:	930e      	str	r3, [sp, #56]	; 0x38
    ac0c:	f898 3000 	ldrb.w	r3, [r8]
    ac10:	e451      	b.n	a4b6 <_svfprintf_r+0xb2>
    ac12:	f898 3000 	ldrb.w	r3, [r8]
    ac16:	2201      	movs	r2, #1
    ac18:	212b      	movs	r1, #43	; 0x2b
    ac1a:	e44c      	b.n	a4b6 <_svfprintf_r+0xb2>
    ac1c:	9311      	str	r3, [sp, #68]	; 0x44
    ac1e:	46ab      	mov	fp, r5
    ac20:	2a00      	cmp	r2, #0
    ac22:	f43f af51 	beq.w	aac8 <_svfprintf_r+0x6c4>
    ac26:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ac2a:	e74d      	b.n	aac8 <_svfprintf_r+0x6c4>
    ac2c:	0001ba3c 	.word	0x0001ba3c
    ac30:	7fefffff 	.word	0x7fefffff
    ac34:	0001b9fc 	.word	0x0001b9fc
    ac38:	0001b9f8 	.word	0x0001b9f8
    ac3c:	0001ba08 	.word	0x0001ba08
    ac40:	9311      	str	r3, [sp, #68]	; 0x44
    ac42:	46ab      	mov	fp, r5
    ac44:	2a00      	cmp	r2, #0
    ac46:	f040 872a 	bne.w	ba9e <_svfprintf_r+0x169a>
    ac4a:	9b07      	ldr	r3, [sp, #28]
    ac4c:	4899      	ldr	r0, [pc, #612]	; (aeb4 <_svfprintf_r+0xab0>)
    ac4e:	069d      	lsls	r5, r3, #26
    ac50:	f53f af69 	bmi.w	ab26 <_svfprintf_r+0x722>
    ac54:	9b07      	ldr	r3, [sp, #28]
    ac56:	06dc      	lsls	r4, r3, #27
    ac58:	f140 8435 	bpl.w	b4c6 <_svfprintf_r+0x10c2>
    ac5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ac5e:	4613      	mov	r3, r2
    ac60:	3304      	adds	r3, #4
    ac62:	6814      	ldr	r4, [r2, #0]
    ac64:	930e      	str	r3, [sp, #56]	; 0x38
    ac66:	2500      	movs	r5, #0
    ac68:	e766      	b.n	ab38 <_svfprintf_r+0x734>
    ac6a:	f898 3000 	ldrb.w	r3, [r8]
    ac6e:	2b6c      	cmp	r3, #108	; 0x6c
    ac70:	f000 84e2 	beq.w	b638 <_svfprintf_r+0x1234>
    ac74:	9807      	ldr	r0, [sp, #28]
    ac76:	f040 0010 	orr.w	r0, r0, #16
    ac7a:	9007      	str	r0, [sp, #28]
    ac7c:	e41b      	b.n	a4b6 <_svfprintf_r+0xb2>
    ac7e:	2a00      	cmp	r2, #0
    ac80:	f040 8709 	bne.w	ba96 <_svfprintf_r+0x1692>
    ac84:	9b07      	ldr	r3, [sp, #28]
    ac86:	069b      	lsls	r3, r3, #26
    ac88:	f140 8406 	bpl.w	b498 <_svfprintf_r+0x1094>
    ac8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ac8e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ac90:	6813      	ldr	r3, [r2, #0]
    ac92:	17cd      	asrs	r5, r1, #31
    ac94:	4608      	mov	r0, r1
    ac96:	3204      	adds	r2, #4
    ac98:	4629      	mov	r1, r5
    ac9a:	920e      	str	r2, [sp, #56]	; 0x38
    ac9c:	e9c3 0100 	strd	r0, r1, [r3]
    aca0:	f7ff bbd6 	b.w	a450 <_svfprintf_r+0x4c>
    aca4:	9b07      	ldr	r3, [sp, #28]
    aca6:	f043 0320 	orr.w	r3, r3, #32
    acaa:	9307      	str	r3, [sp, #28]
    acac:	f898 3000 	ldrb.w	r3, [r8]
    acb0:	e401      	b.n	a4b6 <_svfprintf_r+0xb2>
    acb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    acb4:	9311      	str	r3, [sp, #68]	; 0x44
    acb6:	6816      	ldr	r6, [r2, #0]
    acb8:	2400      	movs	r4, #0
    acba:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
    acbe:	1d17      	adds	r7, r2, #4
    acc0:	2e00      	cmp	r6, #0
    acc2:	f000 85cd 	beq.w	b860 <_svfprintf_r+0x145c>
    acc6:	2d00      	cmp	r5, #0
    acc8:	f2c0 8518 	blt.w	b6fc <_svfprintf_r+0x12f8>
    accc:	462a      	mov	r2, r5
    acce:	4621      	mov	r1, r4
    acd0:	4630      	mov	r0, r6
    acd2:	f002 f8c5 	bl	ce60 <memchr>
    acd6:	2800      	cmp	r0, #0
    acd8:	f000 862a 	beq.w	b930 <_svfprintf_r+0x152c>
    acdc:	1b83      	subs	r3, r0, r6
    acde:	930d      	str	r3, [sp, #52]	; 0x34
    ace0:	46a3      	mov	fp, r4
    ace2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ace6:	970e      	str	r7, [sp, #56]	; 0x38
    ace8:	9308      	str	r3, [sp, #32]
    acea:	f8cd b04c 	str.w	fp, [sp, #76]	; 0x4c
    acee:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    acf2:	e54d      	b.n	a790 <_svfprintf_r+0x38c>
    acf4:	486f      	ldr	r0, [pc, #444]	; (aeb4 <_svfprintf_r+0xab0>)
    acf6:	9211      	str	r2, [sp, #68]	; 0x44
    acf8:	f1bb 0f00 	cmp.w	fp, #0
    acfc:	f040 8173 	bne.w	afe6 <_svfprintf_r+0xbe2>
    ad00:	465f      	mov	r7, fp
    ad02:	f04f 0b00 	mov.w	fp, #0
    ad06:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ad0a:	ae30      	add	r6, sp, #192	; 0xc0
    ad0c:	e539      	b.n	a782 <_svfprintf_r+0x37e>
    ad0e:	9311      	str	r3, [sp, #68]	; 0x44
    ad10:	2a00      	cmp	r2, #0
    ad12:	f040 86ac 	bne.w	ba6e <_svfprintf_r+0x166a>
    ad16:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ad18:	2a00      	cmp	r2, #0
    ad1a:	f43f ac65 	beq.w	a5e8 <_svfprintf_r+0x1e4>
    ad1e:	2300      	movs	r3, #0
    ad20:	2101      	movs	r1, #1
    ad22:	461f      	mov	r7, r3
    ad24:	9108      	str	r1, [sp, #32]
    ad26:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
    ad2a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    ad2e:	469b      	mov	fp, r3
    ad30:	9313      	str	r3, [sp, #76]	; 0x4c
    ad32:	910d      	str	r1, [sp, #52]	; 0x34
    ad34:	ae26      	add	r6, sp, #152	; 0x98
    ad36:	e52f      	b.n	a798 <_svfprintf_r+0x394>
    ad38:	f1bb 0f00 	cmp.w	fp, #0
    ad3c:	f000 8603 	beq.w	b946 <_svfprintf_r+0x1542>
    ad40:	2700      	movs	r7, #0
    ad42:	2400      	movs	r4, #0
    ad44:	2500      	movs	r5, #0
    ad46:	e482      	b.n	a64e <_svfprintf_r+0x24a>
    ad48:	485a      	ldr	r0, [pc, #360]	; (aeb4 <_svfprintf_r+0xab0>)
    ad4a:	9307      	str	r3, [sp, #28]
    ad4c:	9211      	str	r2, [sp, #68]	; 0x44
    ad4e:	ea54 0305 	orrs.w	r3, r4, r5
    ad52:	970e      	str	r7, [sp, #56]	; 0x38
    ad54:	f04f 0700 	mov.w	r7, #0
    ad58:	f47f af0c 	bne.w	ab74 <_svfprintf_r+0x770>
    ad5c:	2400      	movs	r4, #0
    ad5e:	2500      	movs	r5, #0
    ad60:	e708      	b.n	ab74 <_svfprintf_r+0x770>
    ad62:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ad64:	e568      	b.n	a838 <_svfprintf_r+0x434>
    ad66:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ad68:	2b65      	cmp	r3, #101	; 0x65
    ad6a:	f340 80a9 	ble.w	aec0 <_svfprintf_r+0xabc>
    ad6e:	9814      	ldr	r0, [sp, #80]	; 0x50
    ad70:	9915      	ldr	r1, [sp, #84]	; 0x54
    ad72:	2200      	movs	r2, #0
    ad74:	2300      	movs	r3, #0
    ad76:	f7fe f8cf 	bl	8f18 <__aeabi_dcmpeq>
    ad7a:	2800      	cmp	r0, #0
    ad7c:	f000 8135 	beq.w	afea <_svfprintf_r+0xbe6>
    ad80:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ad82:	4a4d      	ldr	r2, [pc, #308]	; (aeb8 <_svfprintf_r+0xab4>)
    ad84:	f8c9 2000 	str.w	r2, [r9]
    ad88:	3301      	adds	r3, #1
    ad8a:	3401      	adds	r4, #1
    ad8c:	2201      	movs	r2, #1
    ad8e:	2b07      	cmp	r3, #7
    ad90:	9425      	str	r4, [sp, #148]	; 0x94
    ad92:	9324      	str	r3, [sp, #144]	; 0x90
    ad94:	f8c9 2004 	str.w	r2, [r9, #4]
    ad98:	f300 83e8 	bgt.w	b56c <_svfprintf_r+0x1168>
    ad9c:	f109 0908 	add.w	r9, r9, #8
    ada0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ada2:	9a12      	ldr	r2, [sp, #72]	; 0x48
    ada4:	4293      	cmp	r3, r2
    ada6:	db03      	blt.n	adb0 <_svfprintf_r+0x9ac>
    ada8:	9b07      	ldr	r3, [sp, #28]
    adaa:	07db      	lsls	r3, r3, #31
    adac:	f57f adba 	bpl.w	a924 <_svfprintf_r+0x520>
    adb0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    adb2:	9916      	ldr	r1, [sp, #88]	; 0x58
    adb4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    adb6:	f8c9 2000 	str.w	r2, [r9]
    adba:	3301      	adds	r3, #1
    adbc:	440c      	add	r4, r1
    adbe:	2b07      	cmp	r3, #7
    adc0:	9425      	str	r4, [sp, #148]	; 0x94
    adc2:	f8c9 1004 	str.w	r1, [r9, #4]
    adc6:	9324      	str	r3, [sp, #144]	; 0x90
    adc8:	f300 8440 	bgt.w	b64c <_svfprintf_r+0x1248>
    adcc:	f109 0908 	add.w	r9, r9, #8
    add0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    add2:	1e5d      	subs	r5, r3, #1
    add4:	2d00      	cmp	r5, #0
    add6:	f77f ada5 	ble.w	a924 <_svfprintf_r+0x520>
    adda:	4a38      	ldr	r2, [pc, #224]	; (aebc <_svfprintf_r+0xab8>)
    addc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    adde:	920f      	str	r2, [sp, #60]	; 0x3c
    ade0:	2d10      	cmp	r5, #16
    ade2:	f340 81e6 	ble.w	b1b2 <_svfprintf_r+0xdae>
    ade6:	2610      	movs	r6, #16
    ade8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    adea:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    adee:	e005      	b.n	adfc <_svfprintf_r+0x9f8>
    adf0:	f109 0908 	add.w	r9, r9, #8
    adf4:	3d10      	subs	r5, #16
    adf6:	2d10      	cmp	r5, #16
    adf8:	f340 81db 	ble.w	b1b2 <_svfprintf_r+0xdae>
    adfc:	3301      	adds	r3, #1
    adfe:	3410      	adds	r4, #16
    ae00:	2b07      	cmp	r3, #7
    ae02:	9425      	str	r4, [sp, #148]	; 0x94
    ae04:	9324      	str	r3, [sp, #144]	; 0x90
    ae06:	f8c9 a000 	str.w	sl, [r9]
    ae0a:	f8c9 6004 	str.w	r6, [r9, #4]
    ae0e:	ddef      	ble.n	adf0 <_svfprintf_r+0x9ec>
    ae10:	aa23      	add	r2, sp, #140	; 0x8c
    ae12:	4659      	mov	r1, fp
    ae14:	4638      	mov	r0, r7
    ae16:	f002 fb81 	bl	d51c <__ssprint_r>
    ae1a:	2800      	cmp	r0, #0
    ae1c:	f47f abeb 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    ae20:	9c25      	ldr	r4, [sp, #148]	; 0x94
    ae22:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ae24:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    ae28:	e7e4      	b.n	adf4 <_svfprintf_r+0x9f0>
    ae2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ae2c:	9a08      	ldr	r2, [sp, #32]
    ae2e:	1a9f      	subs	r7, r3, r2
    ae30:	2f00      	cmp	r7, #0
    ae32:	f77f ad25 	ble.w	a880 <_svfprintf_r+0x47c>
    ae36:	4a21      	ldr	r2, [pc, #132]	; (aebc <_svfprintf_r+0xab8>)
    ae38:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ae3a:	920f      	str	r2, [sp, #60]	; 0x3c
    ae3c:	2f10      	cmp	r7, #16
    ae3e:	dd2b      	ble.n	ae98 <_svfprintf_r+0xa94>
    ae40:	464a      	mov	r2, r9
    ae42:	4621      	mov	r1, r4
    ae44:	46b9      	mov	r9, r7
    ae46:	2510      	movs	r5, #16
    ae48:	4637      	mov	r7, r6
    ae4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    ae4c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    ae4e:	e006      	b.n	ae5e <_svfprintf_r+0xa5a>
    ae50:	f1a9 0910 	sub.w	r9, r9, #16
    ae54:	f1b9 0f10 	cmp.w	r9, #16
    ae58:	f102 0208 	add.w	r2, r2, #8
    ae5c:	dd18      	ble.n	ae90 <_svfprintf_r+0xa8c>
    ae5e:	3301      	adds	r3, #1
    ae60:	3110      	adds	r1, #16
    ae62:	2b07      	cmp	r3, #7
    ae64:	9125      	str	r1, [sp, #148]	; 0x94
    ae66:	9324      	str	r3, [sp, #144]	; 0x90
    ae68:	f8c2 a000 	str.w	sl, [r2]
    ae6c:	6055      	str	r5, [r2, #4]
    ae6e:	ddef      	ble.n	ae50 <_svfprintf_r+0xa4c>
    ae70:	aa23      	add	r2, sp, #140	; 0x8c
    ae72:	4631      	mov	r1, r6
    ae74:	4620      	mov	r0, r4
    ae76:	f002 fb51 	bl	d51c <__ssprint_r>
    ae7a:	2800      	cmp	r0, #0
    ae7c:	f47f abbb 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    ae80:	f1a9 0910 	sub.w	r9, r9, #16
    ae84:	f1b9 0f10 	cmp.w	r9, #16
    ae88:	9925      	ldr	r1, [sp, #148]	; 0x94
    ae8a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ae8c:	aa30      	add	r2, sp, #192	; 0xc0
    ae8e:	dce6      	bgt.n	ae5e <_svfprintf_r+0xa5a>
    ae90:	463e      	mov	r6, r7
    ae92:	460c      	mov	r4, r1
    ae94:	464f      	mov	r7, r9
    ae96:	4691      	mov	r9, r2
    ae98:	3301      	adds	r3, #1
    ae9a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ae9c:	9324      	str	r3, [sp, #144]	; 0x90
    ae9e:	443c      	add	r4, r7
    aea0:	2b07      	cmp	r3, #7
    aea2:	9425      	str	r4, [sp, #148]	; 0x94
    aea4:	e889 0084 	stmia.w	r9, {r2, r7}
    aea8:	f300 8245 	bgt.w	b336 <_svfprintf_r+0xf32>
    aeac:	f109 0908 	add.w	r9, r9, #8
    aeb0:	e4e6      	b.n	a880 <_svfprintf_r+0x47c>
    aeb2:	bf00      	nop
    aeb4:	0001ba1c 	.word	0x0001ba1c
    aeb8:	0001ba38 	.word	0x0001ba38
    aebc:	0001b9e8 	.word	0x0001b9e8
    aec0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    aec2:	9d24      	ldr	r5, [sp, #144]	; 0x90
    aec4:	2b01      	cmp	r3, #1
    aec6:	f340 8208 	ble.w	b2da <_svfprintf_r+0xed6>
    aeca:	3501      	adds	r5, #1
    aecc:	3401      	adds	r4, #1
    aece:	2301      	movs	r3, #1
    aed0:	2d07      	cmp	r5, #7
    aed2:	9425      	str	r4, [sp, #148]	; 0x94
    aed4:	9524      	str	r5, [sp, #144]	; 0x90
    aed6:	f8c9 6000 	str.w	r6, [r9]
    aeda:	f8c9 3004 	str.w	r3, [r9, #4]
    aede:	f300 820d 	bgt.w	b2fc <_svfprintf_r+0xef8>
    aee2:	f109 0908 	add.w	r9, r9, #8
    aee6:	9a16      	ldr	r2, [sp, #88]	; 0x58
    aee8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    aeea:	f8c9 3000 	str.w	r3, [r9]
    aeee:	3501      	adds	r5, #1
    aef0:	4414      	add	r4, r2
    aef2:	2d07      	cmp	r5, #7
    aef4:	9425      	str	r4, [sp, #148]	; 0x94
    aef6:	9524      	str	r5, [sp, #144]	; 0x90
    aef8:	f8c9 2004 	str.w	r2, [r9, #4]
    aefc:	f300 820e 	bgt.w	b31c <_svfprintf_r+0xf18>
    af00:	f109 0908 	add.w	r9, r9, #8
    af04:	2300      	movs	r3, #0
    af06:	9814      	ldr	r0, [sp, #80]	; 0x50
    af08:	9915      	ldr	r1, [sp, #84]	; 0x54
    af0a:	2200      	movs	r2, #0
    af0c:	f7fe f804 	bl	8f18 <__aeabi_dcmpeq>
    af10:	9b12      	ldr	r3, [sp, #72]	; 0x48
    af12:	2800      	cmp	r0, #0
    af14:	f040 80c3 	bne.w	b09e <_svfprintf_r+0xc9a>
    af18:	3b01      	subs	r3, #1
    af1a:	3501      	adds	r5, #1
    af1c:	3601      	adds	r6, #1
    af1e:	441c      	add	r4, r3
    af20:	2d07      	cmp	r5, #7
    af22:	9524      	str	r5, [sp, #144]	; 0x90
    af24:	9425      	str	r4, [sp, #148]	; 0x94
    af26:	f8c9 6000 	str.w	r6, [r9]
    af2a:	f8c9 3004 	str.w	r3, [r9, #4]
    af2e:	f300 80f5 	bgt.w	b11c <_svfprintf_r+0xd18>
    af32:	f109 0908 	add.w	r9, r9, #8
    af36:	9a19      	ldr	r2, [sp, #100]	; 0x64
    af38:	f8c9 2004 	str.w	r2, [r9, #4]
    af3c:	3501      	adds	r5, #1
    af3e:	4414      	add	r4, r2
    af40:	ab1f      	add	r3, sp, #124	; 0x7c
    af42:	2d07      	cmp	r5, #7
    af44:	9425      	str	r4, [sp, #148]	; 0x94
    af46:	9524      	str	r5, [sp, #144]	; 0x90
    af48:	f8c9 3000 	str.w	r3, [r9]
    af4c:	f77f ace8 	ble.w	a920 <_svfprintf_r+0x51c>
    af50:	aa23      	add	r2, sp, #140	; 0x8c
    af52:	9909      	ldr	r1, [sp, #36]	; 0x24
    af54:	980a      	ldr	r0, [sp, #40]	; 0x28
    af56:	f002 fae1 	bl	d51c <__ssprint_r>
    af5a:	2800      	cmp	r0, #0
    af5c:	f47f ab4b 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    af60:	9c25      	ldr	r4, [sp, #148]	; 0x94
    af62:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    af66:	e4dd      	b.n	a924 <_svfprintf_r+0x520>
    af68:	aa23      	add	r2, sp, #140	; 0x8c
    af6a:	9909      	ldr	r1, [sp, #36]	; 0x24
    af6c:	980a      	ldr	r0, [sp, #40]	; 0x28
    af6e:	f002 fad5 	bl	d51c <__ssprint_r>
    af72:	2800      	cmp	r0, #0
    af74:	f43f ad24 	beq.w	a9c0 <_svfprintf_r+0x5bc>
    af78:	f7ff bb3d 	b.w	a5f6 <_svfprintf_r+0x1f2>
    af7c:	aa23      	add	r2, sp, #140	; 0x8c
    af7e:	9909      	ldr	r1, [sp, #36]	; 0x24
    af80:	980a      	ldr	r0, [sp, #40]	; 0x28
    af82:	f002 facb 	bl	d51c <__ssprint_r>
    af86:	2800      	cmp	r0, #0
    af88:	f47f ab35 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    af8c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    af8e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    af92:	e4b4      	b.n	a8fe <_svfprintf_r+0x4fa>
    af94:	aa23      	add	r2, sp, #140	; 0x8c
    af96:	9909      	ldr	r1, [sp, #36]	; 0x24
    af98:	980a      	ldr	r0, [sp, #40]	; 0x28
    af9a:	f002 fabf 	bl	d51c <__ssprint_r>
    af9e:	2800      	cmp	r0, #0
    afa0:	f47f ab29 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    afa4:	9c25      	ldr	r4, [sp, #148]	; 0x94
    afa6:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    afaa:	e455      	b.n	a858 <_svfprintf_r+0x454>
    afac:	aa23      	add	r2, sp, #140	; 0x8c
    afae:	9909      	ldr	r1, [sp, #36]	; 0x24
    afb0:	980a      	ldr	r0, [sp, #40]	; 0x28
    afb2:	f002 fab3 	bl	d51c <__ssprint_r>
    afb6:	2800      	cmp	r0, #0
    afb8:	f47f ab1d 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    afbc:	9c25      	ldr	r4, [sp, #148]	; 0x94
    afbe:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    afc2:	e459      	b.n	a878 <_svfprintf_r+0x474>
    afc4:	f1bb 0f00 	cmp.w	fp, #0
    afc8:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    afcc:	f2c0 82da 	blt.w	b584 <_svfprintf_r+0x1180>
    afd0:	f022 0380 	bic.w	r3, r2, #128	; 0x80
    afd4:	9307      	str	r3, [sp, #28]
    afd6:	ea54 0305 	orrs.w	r3, r4, r5
    afda:	f47f adcb 	bne.w	ab74 <_svfprintf_r+0x770>
    afde:	f1bb 0f00 	cmp.w	fp, #0
    afe2:	f43f ae8d 	beq.w	ad00 <_svfprintf_r+0x8fc>
    afe6:	2700      	movs	r7, #0
    afe8:	e6b8      	b.n	ad5c <_svfprintf_r+0x958>
    afea:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    afec:	2d00      	cmp	r5, #0
    afee:	f340 82cc 	ble.w	b58a <_svfprintf_r+0x1186>
    aff2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aff4:	9a12      	ldr	r2, [sp, #72]	; 0x48
    aff6:	4293      	cmp	r3, r2
    aff8:	bfa8      	it	ge
    affa:	4613      	movge	r3, r2
    affc:	2b00      	cmp	r3, #0
    affe:	461d      	mov	r5, r3
    b000:	dd0d      	ble.n	b01e <_svfprintf_r+0xc1a>
    b002:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b004:	f8c9 6000 	str.w	r6, [r9]
    b008:	3301      	adds	r3, #1
    b00a:	442c      	add	r4, r5
    b00c:	2b07      	cmp	r3, #7
    b00e:	9425      	str	r4, [sp, #148]	; 0x94
    b010:	f8c9 5004 	str.w	r5, [r9, #4]
    b014:	9324      	str	r3, [sp, #144]	; 0x90
    b016:	f300 83a3 	bgt.w	b760 <_svfprintf_r+0x135c>
    b01a:	f109 0908 	add.w	r9, r9, #8
    b01e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b020:	2d00      	cmp	r5, #0
    b022:	bfa8      	it	ge
    b024:	1b5b      	subge	r3, r3, r5
    b026:	2b00      	cmp	r3, #0
    b028:	461d      	mov	r5, r3
    b02a:	f340 80f6 	ble.w	b21a <_svfprintf_r+0xe16>
    b02e:	4aba      	ldr	r2, [pc, #744]	; (b318 <_svfprintf_r+0xf14>)
    b030:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b032:	920f      	str	r2, [sp, #60]	; 0x3c
    b034:	2d10      	cmp	r5, #16
    b036:	f340 8280 	ble.w	b53a <_svfprintf_r+0x1136>
    b03a:	4622      	mov	r2, r4
    b03c:	2710      	movs	r7, #16
    b03e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    b042:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b044:	e005      	b.n	b052 <_svfprintf_r+0xc4e>
    b046:	f109 0908 	add.w	r9, r9, #8
    b04a:	3d10      	subs	r5, #16
    b04c:	2d10      	cmp	r5, #16
    b04e:	f340 8273 	ble.w	b538 <_svfprintf_r+0x1134>
    b052:	3301      	adds	r3, #1
    b054:	3210      	adds	r2, #16
    b056:	2b07      	cmp	r3, #7
    b058:	9225      	str	r2, [sp, #148]	; 0x94
    b05a:	9324      	str	r3, [sp, #144]	; 0x90
    b05c:	f8c9 a000 	str.w	sl, [r9]
    b060:	f8c9 7004 	str.w	r7, [r9, #4]
    b064:	ddef      	ble.n	b046 <_svfprintf_r+0xc42>
    b066:	aa23      	add	r2, sp, #140	; 0x8c
    b068:	4621      	mov	r1, r4
    b06a:	4658      	mov	r0, fp
    b06c:	f002 fa56 	bl	d51c <__ssprint_r>
    b070:	2800      	cmp	r0, #0
    b072:	f47f aac0 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b076:	9a25      	ldr	r2, [sp, #148]	; 0x94
    b078:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b07a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b07e:	e7e4      	b.n	b04a <_svfprintf_r+0xc46>
    b080:	aa23      	add	r2, sp, #140	; 0x8c
    b082:	9909      	ldr	r1, [sp, #36]	; 0x24
    b084:	980a      	ldr	r0, [sp, #40]	; 0x28
    b086:	f002 fa49 	bl	d51c <__ssprint_r>
    b08a:	2800      	cmp	r0, #0
    b08c:	f47f aab3 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b090:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    b094:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b096:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b09a:	f7ff bbcd 	b.w	a838 <_svfprintf_r+0x434>
    b09e:	1e5e      	subs	r6, r3, #1
    b0a0:	2e00      	cmp	r6, #0
    b0a2:	f77f af48 	ble.w	af36 <_svfprintf_r+0xb32>
    b0a6:	4b9c      	ldr	r3, [pc, #624]	; (b318 <_svfprintf_r+0xf14>)
    b0a8:	930f      	str	r3, [sp, #60]	; 0x3c
    b0aa:	2e10      	cmp	r6, #16
    b0ac:	dd2c      	ble.n	b108 <_svfprintf_r+0xd04>
    b0ae:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    b0b2:	2710      	movs	r7, #16
    b0b4:	46b0      	mov	r8, r6
    b0b6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    b0ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
    b0bc:	e006      	b.n	b0cc <_svfprintf_r+0xcc8>
    b0be:	f1a8 0810 	sub.w	r8, r8, #16
    b0c2:	f1b8 0f10 	cmp.w	r8, #16
    b0c6:	f109 0908 	add.w	r9, r9, #8
    b0ca:	dd1a      	ble.n	b102 <_svfprintf_r+0xcfe>
    b0cc:	3501      	adds	r5, #1
    b0ce:	3410      	adds	r4, #16
    b0d0:	2d07      	cmp	r5, #7
    b0d2:	9425      	str	r4, [sp, #148]	; 0x94
    b0d4:	9524      	str	r5, [sp, #144]	; 0x90
    b0d6:	f8c9 a000 	str.w	sl, [r9]
    b0da:	f8c9 7004 	str.w	r7, [r9, #4]
    b0de:	ddee      	ble.n	b0be <_svfprintf_r+0xcba>
    b0e0:	aa23      	add	r2, sp, #140	; 0x8c
    b0e2:	4631      	mov	r1, r6
    b0e4:	4658      	mov	r0, fp
    b0e6:	f002 fa19 	bl	d51c <__ssprint_r>
    b0ea:	2800      	cmp	r0, #0
    b0ec:	f47f aa83 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b0f0:	f1a8 0810 	sub.w	r8, r8, #16
    b0f4:	f1b8 0f10 	cmp.w	r8, #16
    b0f8:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b0fa:	9d24      	ldr	r5, [sp, #144]	; 0x90
    b0fc:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b100:	dce4      	bgt.n	b0cc <_svfprintf_r+0xcc8>
    b102:	4646      	mov	r6, r8
    b104:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    b108:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    b10a:	3501      	adds	r5, #1
    b10c:	4434      	add	r4, r6
    b10e:	2d07      	cmp	r5, #7
    b110:	9425      	str	r4, [sp, #148]	; 0x94
    b112:	9524      	str	r5, [sp, #144]	; 0x90
    b114:	e889 0048 	stmia.w	r9, {r3, r6}
    b118:	f77f af0b 	ble.w	af32 <_svfprintf_r+0xb2e>
    b11c:	aa23      	add	r2, sp, #140	; 0x8c
    b11e:	9909      	ldr	r1, [sp, #36]	; 0x24
    b120:	980a      	ldr	r0, [sp, #40]	; 0x28
    b122:	f002 f9fb 	bl	d51c <__ssprint_r>
    b126:	2800      	cmp	r0, #0
    b128:	f47f aa65 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b12c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b12e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    b130:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b134:	e6ff      	b.n	af36 <_svfprintf_r+0xb32>
    b136:	9907      	ldr	r1, [sp, #28]
    b138:	f011 0210 	ands.w	r2, r1, #16
    b13c:	f000 8108 	beq.w	b350 <_svfprintf_r+0xf4c>
    b140:	980e      	ldr	r0, [sp, #56]	; 0x38
    b142:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    b146:	f1bb 0f00 	cmp.w	fp, #0
    b14a:	6804      	ldr	r4, [r0, #0]
    b14c:	f100 0704 	add.w	r7, r0, #4
    b150:	f04f 0500 	mov.w	r5, #0
    b154:	db26      	blt.n	b1a4 <_svfprintf_r+0xda0>
    b156:	460a      	mov	r2, r1
    b158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b15c:	9207      	str	r2, [sp, #28]
    b15e:	ea54 0205 	orrs.w	r2, r4, r5
    b162:	970e      	str	r7, [sp, #56]	; 0x38
    b164:	461f      	mov	r7, r3
    b166:	f47f aaef 	bne.w	a748 <_svfprintf_r+0x344>
    b16a:	e4c8      	b.n	aafe <_svfprintf_r+0x6fa>
    b16c:	9b07      	ldr	r3, [sp, #28]
    b16e:	06d9      	lsls	r1, r3, #27
    b170:	d42a      	bmi.n	b1c8 <_svfprintf_r+0xdc4>
    b172:	9b07      	ldr	r3, [sp, #28]
    b174:	065a      	lsls	r2, r3, #25
    b176:	d527      	bpl.n	b1c8 <_svfprintf_r+0xdc4>
    b178:	990e      	ldr	r1, [sp, #56]	; 0x38
    b17a:	f9b1 4000 	ldrsh.w	r4, [r1]
    b17e:	3104      	adds	r1, #4
    b180:	17e5      	asrs	r5, r4, #31
    b182:	4622      	mov	r2, r4
    b184:	462b      	mov	r3, r5
    b186:	910e      	str	r1, [sp, #56]	; 0x38
    b188:	f7ff bacb 	b.w	a722 <_svfprintf_r+0x31e>
    b18c:	990e      	ldr	r1, [sp, #56]	; 0x38
    b18e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    b192:	f1bb 0f00 	cmp.w	fp, #0
    b196:	680c      	ldr	r4, [r1, #0]
    b198:	f101 0704 	add.w	r7, r1, #4
    b19c:	f04f 0500 	mov.w	r5, #0
    b1a0:	f280 8245 	bge.w	b62e <_svfprintf_r+0x122a>
    b1a4:	970e      	str	r7, [sp, #56]	; 0x38
    b1a6:	461f      	mov	r7, r3
    b1a8:	ea54 0305 	orrs.w	r3, r4, r5
    b1ac:	f47f aacc 	bne.w	a748 <_svfprintf_r+0x344>
    b1b0:	e4aa      	b.n	ab08 <_svfprintf_r+0x704>
    b1b2:	3301      	adds	r3, #1
    b1b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b1b6:	9324      	str	r3, [sp, #144]	; 0x90
    b1b8:	442c      	add	r4, r5
    b1ba:	2b07      	cmp	r3, #7
    b1bc:	9425      	str	r4, [sp, #148]	; 0x94
    b1be:	e889 0024 	stmia.w	r9, {r2, r5}
    b1c2:	f77f abad 	ble.w	a920 <_svfprintf_r+0x51c>
    b1c6:	e6c3      	b.n	af50 <_svfprintf_r+0xb4c>
    b1c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b1ca:	6814      	ldr	r4, [r2, #0]
    b1cc:	4613      	mov	r3, r2
    b1ce:	3304      	adds	r3, #4
    b1d0:	17e5      	asrs	r5, r4, #31
    b1d2:	4622      	mov	r2, r4
    b1d4:	930e      	str	r3, [sp, #56]	; 0x38
    b1d6:	2a00      	cmp	r2, #0
    b1d8:	462b      	mov	r3, r5
    b1da:	f173 0300 	sbcs.w	r3, r3, #0
    b1de:	f6bf aaa5 	bge.w	a72c <_svfprintf_r+0x328>
    b1e2:	4264      	negs	r4, r4
    b1e4:	f04f 072d 	mov.w	r7, #45	; 0x2d
    b1e8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    b1ec:	f1bb 0f00 	cmp.w	fp, #0
    b1f0:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    b1f4:	f6ff aaa8 	blt.w	a748 <_svfprintf_r+0x344>
    b1f8:	9b07      	ldr	r3, [sp, #28]
    b1fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b1fe:	9307      	str	r3, [sp, #28]
    b200:	f7ff baa2 	b.w	a748 <_svfprintf_r+0x344>
    b204:	aa23      	add	r2, sp, #140	; 0x8c
    b206:	9909      	ldr	r1, [sp, #36]	; 0x24
    b208:	980a      	ldr	r0, [sp, #40]	; 0x28
    b20a:	f002 f987 	bl	d51c <__ssprint_r>
    b20e:	2800      	cmp	r0, #0
    b210:	f47f a9f1 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b214:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b216:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b21a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b21c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b21e:	4432      	add	r2, r6
    b220:	4617      	mov	r7, r2
    b222:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b224:	4293      	cmp	r3, r2
    b226:	db47      	blt.n	b2b8 <_svfprintf_r+0xeb4>
    b228:	9a07      	ldr	r2, [sp, #28]
    b22a:	07d5      	lsls	r5, r2, #31
    b22c:	d444      	bmi.n	b2b8 <_svfprintf_r+0xeb4>
    b22e:	9912      	ldr	r1, [sp, #72]	; 0x48
    b230:	440e      	add	r6, r1
    b232:	1bf5      	subs	r5, r6, r7
    b234:	1acb      	subs	r3, r1, r3
    b236:	429d      	cmp	r5, r3
    b238:	bfa8      	it	ge
    b23a:	461d      	movge	r5, r3
    b23c:	2d00      	cmp	r5, #0
    b23e:	462e      	mov	r6, r5
    b240:	dd0d      	ble.n	b25e <_svfprintf_r+0xe5a>
    b242:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b244:	f8c9 7000 	str.w	r7, [r9]
    b248:	3201      	adds	r2, #1
    b24a:	442c      	add	r4, r5
    b24c:	2a07      	cmp	r2, #7
    b24e:	9425      	str	r4, [sp, #148]	; 0x94
    b250:	f8c9 5004 	str.w	r5, [r9, #4]
    b254:	9224      	str	r2, [sp, #144]	; 0x90
    b256:	f300 8312 	bgt.w	b87e <_svfprintf_r+0x147a>
    b25a:	f109 0908 	add.w	r9, r9, #8
    b25e:	2e00      	cmp	r6, #0
    b260:	bfac      	ite	ge
    b262:	1b9d      	subge	r5, r3, r6
    b264:	461d      	movlt	r5, r3
    b266:	2d00      	cmp	r5, #0
    b268:	f77f ab5c 	ble.w	a924 <_svfprintf_r+0x520>
    b26c:	4a2a      	ldr	r2, [pc, #168]	; (b318 <_svfprintf_r+0xf14>)
    b26e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b270:	920f      	str	r2, [sp, #60]	; 0x3c
    b272:	2d10      	cmp	r5, #16
    b274:	dd9d      	ble.n	b1b2 <_svfprintf_r+0xdae>
    b276:	2610      	movs	r6, #16
    b278:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    b27a:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
    b27e:	e004      	b.n	b28a <_svfprintf_r+0xe86>
    b280:	f109 0908 	add.w	r9, r9, #8
    b284:	3d10      	subs	r5, #16
    b286:	2d10      	cmp	r5, #16
    b288:	dd93      	ble.n	b1b2 <_svfprintf_r+0xdae>
    b28a:	3301      	adds	r3, #1
    b28c:	3410      	adds	r4, #16
    b28e:	2b07      	cmp	r3, #7
    b290:	9425      	str	r4, [sp, #148]	; 0x94
    b292:	9324      	str	r3, [sp, #144]	; 0x90
    b294:	f8c9 a000 	str.w	sl, [r9]
    b298:	f8c9 6004 	str.w	r6, [r9, #4]
    b29c:	ddf0      	ble.n	b280 <_svfprintf_r+0xe7c>
    b29e:	aa23      	add	r2, sp, #140	; 0x8c
    b2a0:	4659      	mov	r1, fp
    b2a2:	4638      	mov	r0, r7
    b2a4:	f002 f93a 	bl	d51c <__ssprint_r>
    b2a8:	2800      	cmp	r0, #0
    b2aa:	f47f a9a4 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b2ae:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b2b0:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b2b2:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b2b6:	e7e5      	b.n	b284 <_svfprintf_r+0xe80>
    b2b8:	9a24      	ldr	r2, [sp, #144]	; 0x90
    b2ba:	9816      	ldr	r0, [sp, #88]	; 0x58
    b2bc:	9917      	ldr	r1, [sp, #92]	; 0x5c
    b2be:	f8c9 1000 	str.w	r1, [r9]
    b2c2:	3201      	adds	r2, #1
    b2c4:	4404      	add	r4, r0
    b2c6:	2a07      	cmp	r2, #7
    b2c8:	9425      	str	r4, [sp, #148]	; 0x94
    b2ca:	f8c9 0004 	str.w	r0, [r9, #4]
    b2ce:	9224      	str	r2, [sp, #144]	; 0x90
    b2d0:	f300 82a5 	bgt.w	b81e <_svfprintf_r+0x141a>
    b2d4:	f109 0908 	add.w	r9, r9, #8
    b2d8:	e7a9      	b.n	b22e <_svfprintf_r+0xe2a>
    b2da:	9b07      	ldr	r3, [sp, #28]
    b2dc:	07d8      	lsls	r0, r3, #31
    b2de:	f53f adf4 	bmi.w	aeca <_svfprintf_r+0xac6>
    b2e2:	3501      	adds	r5, #1
    b2e4:	3401      	adds	r4, #1
    b2e6:	2301      	movs	r3, #1
    b2e8:	2d07      	cmp	r5, #7
    b2ea:	9425      	str	r4, [sp, #148]	; 0x94
    b2ec:	9524      	str	r5, [sp, #144]	; 0x90
    b2ee:	f8c9 6000 	str.w	r6, [r9]
    b2f2:	f8c9 3004 	str.w	r3, [r9, #4]
    b2f6:	f77f ae1c 	ble.w	af32 <_svfprintf_r+0xb2e>
    b2fa:	e70f      	b.n	b11c <_svfprintf_r+0xd18>
    b2fc:	aa23      	add	r2, sp, #140	; 0x8c
    b2fe:	9909      	ldr	r1, [sp, #36]	; 0x24
    b300:	980a      	ldr	r0, [sp, #40]	; 0x28
    b302:	f002 f90b 	bl	d51c <__ssprint_r>
    b306:	2800      	cmp	r0, #0
    b308:	f47f a975 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b30c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b30e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    b310:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b314:	e5e7      	b.n	aee6 <_svfprintf_r+0xae2>
    b316:	bf00      	nop
    b318:	0001b9e8 	.word	0x0001b9e8
    b31c:	aa23      	add	r2, sp, #140	; 0x8c
    b31e:	9909      	ldr	r1, [sp, #36]	; 0x24
    b320:	980a      	ldr	r0, [sp, #40]	; 0x28
    b322:	f002 f8fb 	bl	d51c <__ssprint_r>
    b326:	2800      	cmp	r0, #0
    b328:	f47f a965 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b32c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b32e:	9d24      	ldr	r5, [sp, #144]	; 0x90
    b330:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b334:	e5e6      	b.n	af04 <_svfprintf_r+0xb00>
    b336:	aa23      	add	r2, sp, #140	; 0x8c
    b338:	9909      	ldr	r1, [sp, #36]	; 0x24
    b33a:	980a      	ldr	r0, [sp, #40]	; 0x28
    b33c:	f002 f8ee 	bl	d51c <__ssprint_r>
    b340:	2800      	cmp	r0, #0
    b342:	f47f a958 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b346:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b348:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b34c:	f7ff ba98 	b.w	a880 <_svfprintf_r+0x47c>
    b350:	9907      	ldr	r1, [sp, #28]
    b352:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    b356:	f43f af19 	beq.w	b18c <_svfprintf_r+0xd88>
    b35a:	980e      	ldr	r0, [sp, #56]	; 0x38
    b35c:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    b360:	4603      	mov	r3, r0
    b362:	f1bb 0f00 	cmp.w	fp, #0
    b366:	f103 0304 	add.w	r3, r3, #4
    b36a:	8804      	ldrh	r4, [r0, #0]
    b36c:	f04f 0500 	mov.w	r5, #0
    b370:	f2c0 81b9 	blt.w	b6e6 <_svfprintf_r+0x12e2>
    b374:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    b378:	9107      	str	r1, [sp, #28]
    b37a:	ea54 0105 	orrs.w	r1, r4, r5
    b37e:	930e      	str	r3, [sp, #56]	; 0x38
    b380:	4617      	mov	r7, r2
    b382:	f47f a9e1 	bne.w	a748 <_svfprintf_r+0x344>
    b386:	f7ff bbba 	b.w	aafe <_svfprintf_r+0x6fa>
    b38a:	9c14      	ldr	r4, [sp, #80]	; 0x50
    b38c:	4622      	mov	r2, r4
    b38e:	4620      	mov	r0, r4
    b390:	9c15      	ldr	r4, [sp, #84]	; 0x54
    b392:	4623      	mov	r3, r4
    b394:	4621      	mov	r1, r4
    b396:	f7fd fdf1 	bl	8f7c <__aeabi_dcmpun>
    b39a:	2800      	cmp	r0, #0
    b39c:	f040 8315 	bne.w	b9ca <_svfprintf_r+0x15c6>
    b3a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b3a2:	f1bb 3fff 	cmp.w	fp, #4294967295
    b3a6:	f023 0320 	bic.w	r3, r3, #32
    b3aa:	930d      	str	r3, [sp, #52]	; 0x34
    b3ac:	f000 8276 	beq.w	b89c <_svfprintf_r+0x1498>
    b3b0:	2b47      	cmp	r3, #71	; 0x47
    b3b2:	f000 8192 	beq.w	b6da <_svfprintf_r+0x12d6>
    b3b6:	9b07      	ldr	r3, [sp, #28]
    b3b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b3bc:	9310      	str	r3, [sp, #64]	; 0x40
    b3be:	9b15      	ldr	r3, [sp, #84]	; 0x54
    b3c0:	1e1f      	subs	r7, r3, #0
    b3c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b3c4:	9308      	str	r3, [sp, #32]
    b3c6:	bfbb      	ittet	lt
    b3c8:	463b      	movlt	r3, r7
    b3ca:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
    b3ce:	2300      	movge	r3, #0
    b3d0:	232d      	movlt	r3, #45	; 0x2d
    b3d2:	930f      	str	r3, [sp, #60]	; 0x3c
    b3d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b3d6:	2b66      	cmp	r3, #102	; 0x66
    b3d8:	f000 8263 	beq.w	b8a2 <_svfprintf_r+0x149e>
    b3dc:	2b46      	cmp	r3, #70	; 0x46
    b3de:	f000 815e 	beq.w	b69e <_svfprintf_r+0x129a>
    b3e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b3e4:	9a08      	ldr	r2, [sp, #32]
    b3e6:	2b45      	cmp	r3, #69	; 0x45
    b3e8:	a821      	add	r0, sp, #132	; 0x84
    b3ea:	a91e      	add	r1, sp, #120	; 0x78
    b3ec:	bf0c      	ite	eq
    b3ee:	f10b 0501 	addeq.w	r5, fp, #1
    b3f2:	465d      	movne	r5, fp
    b3f4:	9004      	str	r0, [sp, #16]
    b3f6:	9103      	str	r1, [sp, #12]
    b3f8:	a81d      	add	r0, sp, #116	; 0x74
    b3fa:	2102      	movs	r1, #2
    b3fc:	463b      	mov	r3, r7
    b3fe:	9002      	str	r0, [sp, #8]
    b400:	9501      	str	r5, [sp, #4]
    b402:	9100      	str	r1, [sp, #0]
    b404:	980a      	ldr	r0, [sp, #40]	; 0x28
    b406:	f000 fca3 	bl	bd50 <_dtoa_r>
    b40a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b40c:	2b67      	cmp	r3, #103	; 0x67
    b40e:	4606      	mov	r6, r0
    b410:	f040 827d 	bne.w	b90e <_svfprintf_r+0x150a>
    b414:	9b07      	ldr	r3, [sp, #28]
    b416:	07da      	lsls	r2, r3, #31
    b418:	f140 82bf 	bpl.w	b99a <_svfprintf_r+0x1596>
    b41c:	1974      	adds	r4, r6, r5
    b41e:	9808      	ldr	r0, [sp, #32]
    b420:	4639      	mov	r1, r7
    b422:	2200      	movs	r2, #0
    b424:	2300      	movs	r3, #0
    b426:	f7fd fd77 	bl	8f18 <__aeabi_dcmpeq>
    b42a:	2800      	cmp	r0, #0
    b42c:	f040 81a4 	bne.w	b778 <_svfprintf_r+0x1374>
    b430:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b432:	429c      	cmp	r4, r3
    b434:	d906      	bls.n	b444 <_svfprintf_r+0x1040>
    b436:	2130      	movs	r1, #48	; 0x30
    b438:	1c5a      	adds	r2, r3, #1
    b43a:	9221      	str	r2, [sp, #132]	; 0x84
    b43c:	7019      	strb	r1, [r3, #0]
    b43e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b440:	429c      	cmp	r4, r3
    b442:	d8f9      	bhi.n	b438 <_svfprintf_r+0x1034>
    b444:	1b9b      	subs	r3, r3, r6
    b446:	9312      	str	r3, [sp, #72]	; 0x48
    b448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b44a:	2b47      	cmp	r3, #71	; 0x47
    b44c:	f000 8181 	beq.w	b752 <_svfprintf_r+0x134e>
    b450:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b452:	2b65      	cmp	r3, #101	; 0x65
    b454:	f340 826a 	ble.w	b92c <_svfprintf_r+0x1528>
    b458:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b45a:	2b66      	cmp	r3, #102	; 0x66
    b45c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b45e:	9313      	str	r3, [sp, #76]	; 0x4c
    b460:	f000 8247 	beq.w	b8f2 <_svfprintf_r+0x14ee>
    b464:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b466:	9912      	ldr	r1, [sp, #72]	; 0x48
    b468:	428a      	cmp	r2, r1
    b46a:	f2c0 8236 	blt.w	b8da <_svfprintf_r+0x14d6>
    b46e:	9b07      	ldr	r3, [sp, #28]
    b470:	07d9      	lsls	r1, r3, #31
    b472:	f100 8289 	bmi.w	b988 <_svfprintf_r+0x1584>
    b476:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    b47a:	920d      	str	r2, [sp, #52]	; 0x34
    b47c:	2267      	movs	r2, #103	; 0x67
    b47e:	9211      	str	r2, [sp, #68]	; 0x44
    b480:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b482:	2a00      	cmp	r2, #0
    b484:	f040 815b 	bne.w	b73e <_svfprintf_r+0x133a>
    b488:	9308      	str	r3, [sp, #32]
    b48a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b48c:	9307      	str	r3, [sp, #28]
    b48e:	4693      	mov	fp, r2
    b490:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    b494:	f7ff b97c 	b.w	a790 <_svfprintf_r+0x38c>
    b498:	9b07      	ldr	r3, [sp, #28]
    b49a:	06df      	lsls	r7, r3, #27
    b49c:	d40b      	bmi.n	b4b6 <_svfprintf_r+0x10b2>
    b49e:	9b07      	ldr	r3, [sp, #28]
    b4a0:	065e      	lsls	r6, r3, #25
    b4a2:	d508      	bpl.n	b4b6 <_svfprintf_r+0x10b2>
    b4a4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b4a6:	6813      	ldr	r3, [r2, #0]
    b4a8:	3204      	adds	r2, #4
    b4aa:	920e      	str	r2, [sp, #56]	; 0x38
    b4ac:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
    b4b0:	801a      	strh	r2, [r3, #0]
    b4b2:	f7fe bfcd 	b.w	a450 <_svfprintf_r+0x4c>
    b4b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b4b8:	6813      	ldr	r3, [r2, #0]
    b4ba:	3204      	adds	r2, #4
    b4bc:	920e      	str	r2, [sp, #56]	; 0x38
    b4be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b4c0:	601a      	str	r2, [r3, #0]
    b4c2:	f7fe bfc5 	b.w	a450 <_svfprintf_r+0x4c>
    b4c6:	9b07      	ldr	r3, [sp, #28]
    b4c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b4ca:	f013 0f40 	tst.w	r3, #64	; 0x40
    b4ce:	4613      	mov	r3, r2
    b4d0:	f000 810e 	beq.w	b6f0 <_svfprintf_r+0x12ec>
    b4d4:	3304      	adds	r3, #4
    b4d6:	8814      	ldrh	r4, [r2, #0]
    b4d8:	930e      	str	r3, [sp, #56]	; 0x38
    b4da:	2500      	movs	r5, #0
    b4dc:	f7ff bb2c 	b.w	ab38 <_svfprintf_r+0x734>
    b4e0:	9907      	ldr	r1, [sp, #28]
    b4e2:	f011 0340 	ands.w	r3, r1, #64	; 0x40
    b4e6:	d017      	beq.n	b518 <_svfprintf_r+0x1114>
    b4e8:	980e      	ldr	r0, [sp, #56]	; 0x38
    b4ea:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
    b4ee:	4603      	mov	r3, r0
    b4f0:	f1bb 0f00 	cmp.w	fp, #0
    b4f4:	f103 0304 	add.w	r3, r3, #4
    b4f8:	8804      	ldrh	r4, [r0, #0]
    b4fa:	f04f 0500 	mov.w	r5, #0
    b4fe:	f2c0 80f5 	blt.w	b6ec <_svfprintf_r+0x12e8>
    b502:	f021 0180 	bic.w	r1, r1, #128	; 0x80
    b506:	9107      	str	r1, [sp, #28]
    b508:	ea54 0105 	orrs.w	r1, r4, r5
    b50c:	930e      	str	r3, [sp, #56]	; 0x38
    b50e:	f43f ac13 	beq.w	ad38 <_svfprintf_r+0x934>
    b512:	4617      	mov	r7, r2
    b514:	f7ff b89b 	b.w	a64e <_svfprintf_r+0x24a>
    b518:	990e      	ldr	r1, [sp, #56]	; 0x38
    b51a:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
    b51e:	f1bb 0f00 	cmp.w	fp, #0
    b522:	680c      	ldr	r4, [r1, #0]
    b524:	f101 0704 	add.w	r7, r1, #4
    b528:	f04f 0500 	mov.w	r5, #0
    b52c:	f280 8081 	bge.w	b632 <_svfprintf_r+0x122e>
    b530:	970e      	str	r7, [sp, #56]	; 0x38
    b532:	2700      	movs	r7, #0
    b534:	f7ff b88b 	b.w	a64e <_svfprintf_r+0x24a>
    b538:	4614      	mov	r4, r2
    b53a:	3301      	adds	r3, #1
    b53c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b53e:	9324      	str	r3, [sp, #144]	; 0x90
    b540:	442c      	add	r4, r5
    b542:	2b07      	cmp	r3, #7
    b544:	9425      	str	r4, [sp, #148]	; 0x94
    b546:	e889 0024 	stmia.w	r9, {r2, r5}
    b54a:	f73f ae5b 	bgt.w	b204 <_svfprintf_r+0xe00>
    b54e:	f109 0908 	add.w	r9, r9, #8
    b552:	e662      	b.n	b21a <_svfprintf_r+0xe16>
    b554:	2700      	movs	r7, #0
    b556:	45bb      	cmp	fp, r7
    b558:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    b55c:	f6ff abfe 	blt.w	ad5c <_svfprintf_r+0x958>
    b560:	9b07      	ldr	r3, [sp, #28]
    b562:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    b566:	9307      	str	r3, [sp, #28]
    b568:	f7ff bbc6 	b.w	acf8 <_svfprintf_r+0x8f4>
    b56c:	aa23      	add	r2, sp, #140	; 0x8c
    b56e:	9909      	ldr	r1, [sp, #36]	; 0x24
    b570:	980a      	ldr	r0, [sp, #40]	; 0x28
    b572:	f001 ffd3 	bl	d51c <__ssprint_r>
    b576:	2800      	cmp	r0, #0
    b578:	f47f a83d 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b57c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b57e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b582:	e40d      	b.n	ada0 <_svfprintf_r+0x99c>
    b584:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    b586:	f7ff bbe2 	b.w	ad4e <_svfprintf_r+0x94a>
    b58a:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b58c:	4ab1      	ldr	r2, [pc, #708]	; (b854 <_svfprintf_r+0x1450>)
    b58e:	f8c9 2000 	str.w	r2, [r9]
    b592:	3301      	adds	r3, #1
    b594:	3401      	adds	r4, #1
    b596:	2201      	movs	r2, #1
    b598:	2b07      	cmp	r3, #7
    b59a:	9425      	str	r4, [sp, #148]	; 0x94
    b59c:	9324      	str	r3, [sp, #144]	; 0x90
    b59e:	f8c9 2004 	str.w	r2, [r9, #4]
    b5a2:	dc6f      	bgt.n	b684 <_svfprintf_r+0x1280>
    b5a4:	f109 0908 	add.w	r9, r9, #8
    b5a8:	b92d      	cbnz	r5, b5b6 <_svfprintf_r+0x11b2>
    b5aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b5ac:	b91b      	cbnz	r3, b5b6 <_svfprintf_r+0x11b2>
    b5ae:	9b07      	ldr	r3, [sp, #28]
    b5b0:	07df      	lsls	r7, r3, #31
    b5b2:	f57f a9b7 	bpl.w	a924 <_svfprintf_r+0x520>
    b5b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b5b8:	9916      	ldr	r1, [sp, #88]	; 0x58
    b5ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    b5bc:	f8c9 2000 	str.w	r2, [r9]
    b5c0:	3301      	adds	r3, #1
    b5c2:	440c      	add	r4, r1
    b5c4:	2b07      	cmp	r3, #7
    b5c6:	9425      	str	r4, [sp, #148]	; 0x94
    b5c8:	f8c9 1004 	str.w	r1, [r9, #4]
    b5cc:	9324      	str	r3, [sp, #144]	; 0x90
    b5ce:	f300 81c9 	bgt.w	b964 <_svfprintf_r+0x1560>
    b5d2:	f109 0908 	add.w	r9, r9, #8
    b5d6:	426d      	negs	r5, r5
    b5d8:	2d00      	cmp	r5, #0
    b5da:	f340 80a3 	ble.w	b724 <_svfprintf_r+0x1320>
    b5de:	4a9e      	ldr	r2, [pc, #632]	; (b858 <_svfprintf_r+0x1454>)
    b5e0:	920f      	str	r2, [sp, #60]	; 0x3c
    b5e2:	2d10      	cmp	r5, #16
    b5e4:	f340 8129 	ble.w	b83a <_svfprintf_r+0x1436>
    b5e8:	4622      	mov	r2, r4
    b5ea:	2710      	movs	r7, #16
    b5ec:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    b5f0:	9c09      	ldr	r4, [sp, #36]	; 0x24
    b5f2:	e005      	b.n	b600 <_svfprintf_r+0x11fc>
    b5f4:	f109 0908 	add.w	r9, r9, #8
    b5f8:	3d10      	subs	r5, #16
    b5fa:	2d10      	cmp	r5, #16
    b5fc:	f340 811c 	ble.w	b838 <_svfprintf_r+0x1434>
    b600:	3301      	adds	r3, #1
    b602:	3210      	adds	r2, #16
    b604:	2b07      	cmp	r3, #7
    b606:	9225      	str	r2, [sp, #148]	; 0x94
    b608:	9324      	str	r3, [sp, #144]	; 0x90
    b60a:	f8c9 a000 	str.w	sl, [r9]
    b60e:	f8c9 7004 	str.w	r7, [r9, #4]
    b612:	ddef      	ble.n	b5f4 <_svfprintf_r+0x11f0>
    b614:	aa23      	add	r2, sp, #140	; 0x8c
    b616:	4621      	mov	r1, r4
    b618:	4658      	mov	r0, fp
    b61a:	f001 ff7f 	bl	d51c <__ssprint_r>
    b61e:	2800      	cmp	r0, #0
    b620:	f47e afe9 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b624:	9a25      	ldr	r2, [sp, #148]	; 0x94
    b626:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b628:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b62c:	e7e4      	b.n	b5f8 <_svfprintf_r+0x11f4>
    b62e:	9a07      	ldr	r2, [sp, #28]
    b630:	e592      	b.n	b158 <_svfprintf_r+0xd54>
    b632:	9a07      	ldr	r2, [sp, #28]
    b634:	f7ff ba35 	b.w	aaa2 <_svfprintf_r+0x69e>
    b638:	9b07      	ldr	r3, [sp, #28]
    b63a:	f043 0320 	orr.w	r3, r3, #32
    b63e:	9307      	str	r3, [sp, #28]
    b640:	f108 0801 	add.w	r8, r8, #1
    b644:	f898 3000 	ldrb.w	r3, [r8]
    b648:	f7fe bf35 	b.w	a4b6 <_svfprintf_r+0xb2>
    b64c:	aa23      	add	r2, sp, #140	; 0x8c
    b64e:	9909      	ldr	r1, [sp, #36]	; 0x24
    b650:	980a      	ldr	r0, [sp, #40]	; 0x28
    b652:	f001 ff63 	bl	d51c <__ssprint_r>
    b656:	2800      	cmp	r0, #0
    b658:	f47e afcd 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b65c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b65e:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b662:	f7ff bbb5 	b.w	add0 <_svfprintf_r+0x9cc>
    b666:	2140      	movs	r1, #64	; 0x40
    b668:	980a      	ldr	r0, [sp, #40]	; 0x28
    b66a:	f7fd fffb 	bl	9664 <_malloc_r>
    b66e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b670:	6010      	str	r0, [r2, #0]
    b672:	6110      	str	r0, [r2, #16]
    b674:	2800      	cmp	r0, #0
    b676:	f000 81f3 	beq.w	ba60 <_svfprintf_r+0x165c>
    b67a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    b67c:	2340      	movs	r3, #64	; 0x40
    b67e:	6153      	str	r3, [r2, #20]
    b680:	f7fe bed7 	b.w	a432 <_svfprintf_r+0x2e>
    b684:	aa23      	add	r2, sp, #140	; 0x8c
    b686:	9909      	ldr	r1, [sp, #36]	; 0x24
    b688:	980a      	ldr	r0, [sp, #40]	; 0x28
    b68a:	f001 ff47 	bl	d51c <__ssprint_r>
    b68e:	2800      	cmp	r0, #0
    b690:	f47e afb1 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b694:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    b696:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b698:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b69c:	e784      	b.n	b5a8 <_svfprintf_r+0x11a4>
    b69e:	a821      	add	r0, sp, #132	; 0x84
    b6a0:	a91e      	add	r1, sp, #120	; 0x78
    b6a2:	9004      	str	r0, [sp, #16]
    b6a4:	9103      	str	r1, [sp, #12]
    b6a6:	a81d      	add	r0, sp, #116	; 0x74
    b6a8:	2103      	movs	r1, #3
    b6aa:	9002      	str	r0, [sp, #8]
    b6ac:	9a08      	ldr	r2, [sp, #32]
    b6ae:	f8cd b004 	str.w	fp, [sp, #4]
    b6b2:	463b      	mov	r3, r7
    b6b4:	9100      	str	r1, [sp, #0]
    b6b6:	980a      	ldr	r0, [sp, #40]	; 0x28
    b6b8:	f000 fb4a 	bl	bd50 <_dtoa_r>
    b6bc:	465d      	mov	r5, fp
    b6be:	4606      	mov	r6, r0
    b6c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b6c2:	2b46      	cmp	r3, #70	; 0x46
    b6c4:	eb06 0405 	add.w	r4, r6, r5
    b6c8:	f47f aea9 	bne.w	b41e <_svfprintf_r+0x101a>
    b6cc:	7833      	ldrb	r3, [r6, #0]
    b6ce:	2b30      	cmp	r3, #48	; 0x30
    b6d0:	f000 816d 	beq.w	b9ae <_svfprintf_r+0x15aa>
    b6d4:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    b6d6:	442c      	add	r4, r5
    b6d8:	e6a1      	b.n	b41e <_svfprintf_r+0x101a>
    b6da:	f1bb 0f00 	cmp.w	fp, #0
    b6de:	bf08      	it	eq
    b6e0:	f04f 0b01 	moveq.w	fp, #1
    b6e4:	e667      	b.n	b3b6 <_svfprintf_r+0xfb2>
    b6e6:	930e      	str	r3, [sp, #56]	; 0x38
    b6e8:	4617      	mov	r7, r2
    b6ea:	e55d      	b.n	b1a8 <_svfprintf_r+0xda4>
    b6ec:	930e      	str	r3, [sp, #56]	; 0x38
    b6ee:	e720      	b.n	b532 <_svfprintf_r+0x112e>
    b6f0:	3304      	adds	r3, #4
    b6f2:	6814      	ldr	r4, [r2, #0]
    b6f4:	930e      	str	r3, [sp, #56]	; 0x38
    b6f6:	2500      	movs	r5, #0
    b6f8:	f7ff ba1e 	b.w	ab38 <_svfprintf_r+0x734>
    b6fc:	4630      	mov	r0, r6
    b6fe:	f7fe fddf 	bl	a2c0 <strlen>
    b702:	46a3      	mov	fp, r4
    b704:	4603      	mov	r3, r0
    b706:	900d      	str	r0, [sp, #52]	; 0x34
    b708:	f7ff baeb 	b.w	ace2 <_svfprintf_r+0x8de>
    b70c:	aa23      	add	r2, sp, #140	; 0x8c
    b70e:	9909      	ldr	r1, [sp, #36]	; 0x24
    b710:	980a      	ldr	r0, [sp, #40]	; 0x28
    b712:	f001 ff03 	bl	d51c <__ssprint_r>
    b716:	2800      	cmp	r0, #0
    b718:	f47e af6d 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b71c:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b71e:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b720:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b724:	9912      	ldr	r1, [sp, #72]	; 0x48
    b726:	f8c9 6000 	str.w	r6, [r9]
    b72a:	3301      	adds	r3, #1
    b72c:	440c      	add	r4, r1
    b72e:	2b07      	cmp	r3, #7
    b730:	9425      	str	r4, [sp, #148]	; 0x94
    b732:	9324      	str	r3, [sp, #144]	; 0x90
    b734:	f8c9 1004 	str.w	r1, [r9, #4]
    b738:	f77f a8f2 	ble.w	a920 <_svfprintf_r+0x51c>
    b73c:	e408      	b.n	af50 <_svfprintf_r+0xb4c>
    b73e:	272d      	movs	r7, #45	; 0x2d
    b740:	9308      	str	r3, [sp, #32]
    b742:	9b10      	ldr	r3, [sp, #64]	; 0x40
    b744:	9307      	str	r3, [sp, #28]
    b746:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    b74a:	f04f 0b00 	mov.w	fp, #0
    b74e:	f7ff b820 	b.w	a792 <_svfprintf_r+0x38e>
    b752:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b754:	1cdd      	adds	r5, r3, #3
    b756:	db11      	blt.n	b77c <_svfprintf_r+0x1378>
    b758:	459b      	cmp	fp, r3
    b75a:	db0f      	blt.n	b77c <_svfprintf_r+0x1378>
    b75c:	9313      	str	r3, [sp, #76]	; 0x4c
    b75e:	e681      	b.n	b464 <_svfprintf_r+0x1060>
    b760:	aa23      	add	r2, sp, #140	; 0x8c
    b762:	9909      	ldr	r1, [sp, #36]	; 0x24
    b764:	980a      	ldr	r0, [sp, #40]	; 0x28
    b766:	f001 fed9 	bl	d51c <__ssprint_r>
    b76a:	2800      	cmp	r0, #0
    b76c:	f47e af43 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b770:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b772:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b776:	e452      	b.n	b01e <_svfprintf_r+0xc1a>
    b778:	4623      	mov	r3, r4
    b77a:	e663      	b.n	b444 <_svfprintf_r+0x1040>
    b77c:	9a11      	ldr	r2, [sp, #68]	; 0x44
    b77e:	3a02      	subs	r2, #2
    b780:	9211      	str	r2, [sp, #68]	; 0x44
    b782:	3b01      	subs	r3, #1
    b784:	2b00      	cmp	r3, #0
    b786:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
    b78a:	931d      	str	r3, [sp, #116]	; 0x74
    b78c:	bfb8      	it	lt
    b78e:	425b      	neglt	r3, r3
    b790:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
    b794:	bfb4      	ite	lt
    b796:	222d      	movlt	r2, #45	; 0x2d
    b798:	222b      	movge	r2, #43	; 0x2b
    b79a:	2b09      	cmp	r3, #9
    b79c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
    b7a0:	f340 80fd 	ble.w	b99e <_svfprintf_r+0x159a>
    b7a4:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
    b7a8:	4604      	mov	r4, r0
    b7aa:	4a2c      	ldr	r2, [pc, #176]	; (b85c <_svfprintf_r+0x1458>)
    b7ac:	fb82 2103 	smull	r2, r1, r2, r3
    b7b0:	17da      	asrs	r2, r3, #31
    b7b2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    b7b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    b7ba:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    b7be:	f103 0130 	add.w	r1, r3, #48	; 0x30
    b7c2:	2a09      	cmp	r2, #9
    b7c4:	4613      	mov	r3, r2
    b7c6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    b7ca:	dcee      	bgt.n	b7aa <_svfprintf_r+0x13a6>
    b7cc:	4621      	mov	r1, r4
    b7ce:	3330      	adds	r3, #48	; 0x30
    b7d0:	b2da      	uxtb	r2, r3
    b7d2:	f801 2d01 	strb.w	r2, [r1, #-1]!
    b7d6:	4288      	cmp	r0, r1
    b7d8:	f240 813f 	bls.w	ba5a <_svfprintf_r+0x1656>
    b7dc:	f10d 017e 	add.w	r1, sp, #126	; 0x7e
    b7e0:	4623      	mov	r3, r4
    b7e2:	e001      	b.n	b7e8 <_svfprintf_r+0x13e4>
    b7e4:	f813 2b01 	ldrb.w	r2, [r3], #1
    b7e8:	f801 2b01 	strb.w	r2, [r1], #1
    b7ec:	4298      	cmp	r0, r3
    b7ee:	d1f9      	bne.n	b7e4 <_svfprintf_r+0x13e0>
    b7f0:	1c43      	adds	r3, r0, #1
    b7f2:	1b1b      	subs	r3, r3, r4
    b7f4:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
    b7f8:	4413      	add	r3, r2
    b7fa:	aa1f      	add	r2, sp, #124	; 0x7c
    b7fc:	1a9b      	subs	r3, r3, r2
    b7fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b800:	9319      	str	r3, [sp, #100]	; 0x64
    b802:	2a01      	cmp	r2, #1
    b804:	4413      	add	r3, r2
    b806:	930d      	str	r3, [sp, #52]	; 0x34
    b808:	f340 80f6 	ble.w	b9f8 <_svfprintf_r+0x15f4>
    b80c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b80e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b810:	4413      	add	r3, r2
    b812:	2200      	movs	r2, #0
    b814:	930d      	str	r3, [sp, #52]	; 0x34
    b816:	9213      	str	r2, [sp, #76]	; 0x4c
    b818:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b81c:	e630      	b.n	b480 <_svfprintf_r+0x107c>
    b81e:	aa23      	add	r2, sp, #140	; 0x8c
    b820:	9909      	ldr	r1, [sp, #36]	; 0x24
    b822:	980a      	ldr	r0, [sp, #40]	; 0x28
    b824:	f001 fe7a 	bl	d51c <__ssprint_r>
    b828:	2800      	cmp	r0, #0
    b82a:	f47e aee4 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b82e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b830:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b832:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b836:	e4fa      	b.n	b22e <_svfprintf_r+0xe2a>
    b838:	4614      	mov	r4, r2
    b83a:	3301      	adds	r3, #1
    b83c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    b83e:	9324      	str	r3, [sp, #144]	; 0x90
    b840:	442c      	add	r4, r5
    b842:	2b07      	cmp	r3, #7
    b844:	9425      	str	r4, [sp, #148]	; 0x94
    b846:	e889 0024 	stmia.w	r9, {r2, r5}
    b84a:	f73f af5f 	bgt.w	b70c <_svfprintf_r+0x1308>
    b84e:	f109 0908 	add.w	r9, r9, #8
    b852:	e767      	b.n	b724 <_svfprintf_r+0x1320>
    b854:	0001ba38 	.word	0x0001ba38
    b858:	0001b9e8 	.word	0x0001b9e8
    b85c:	66666667 	.word	0x66666667
    b860:	2d06      	cmp	r5, #6
    b862:	462b      	mov	r3, r5
    b864:	bf28      	it	cs
    b866:	2306      	movcs	r3, #6
    b868:	930d      	str	r3, [sp, #52]	; 0x34
    b86a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b86e:	46b3      	mov	fp, r6
    b870:	970e      	str	r7, [sp, #56]	; 0x38
    b872:	9613      	str	r6, [sp, #76]	; 0x4c
    b874:	4637      	mov	r7, r6
    b876:	9308      	str	r3, [sp, #32]
    b878:	4e8b      	ldr	r6, [pc, #556]	; (baa8 <_svfprintf_r+0x16a4>)
    b87a:	f7fe bf89 	b.w	a790 <_svfprintf_r+0x38c>
    b87e:	aa23      	add	r2, sp, #140	; 0x8c
    b880:	9909      	ldr	r1, [sp, #36]	; 0x24
    b882:	980a      	ldr	r0, [sp, #40]	; 0x28
    b884:	f001 fe4a 	bl	d51c <__ssprint_r>
    b888:	2800      	cmp	r0, #0
    b88a:	f47e aeb4 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b88e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b890:	9a12      	ldr	r2, [sp, #72]	; 0x48
    b892:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b894:	1ad3      	subs	r3, r2, r3
    b896:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b89a:	e4e0      	b.n	b25e <_svfprintf_r+0xe5a>
    b89c:	f04f 0b06 	mov.w	fp, #6
    b8a0:	e589      	b.n	b3b6 <_svfprintf_r+0xfb2>
    b8a2:	a821      	add	r0, sp, #132	; 0x84
    b8a4:	a91e      	add	r1, sp, #120	; 0x78
    b8a6:	9004      	str	r0, [sp, #16]
    b8a8:	9103      	str	r1, [sp, #12]
    b8aa:	a81d      	add	r0, sp, #116	; 0x74
    b8ac:	2103      	movs	r1, #3
    b8ae:	9002      	str	r0, [sp, #8]
    b8b0:	9a08      	ldr	r2, [sp, #32]
    b8b2:	f8cd b004 	str.w	fp, [sp, #4]
    b8b6:	463b      	mov	r3, r7
    b8b8:	9100      	str	r1, [sp, #0]
    b8ba:	980a      	ldr	r0, [sp, #40]	; 0x28
    b8bc:	f000 fa48 	bl	bd50 <_dtoa_r>
    b8c0:	465d      	mov	r5, fp
    b8c2:	4606      	mov	r6, r0
    b8c4:	eb00 040b 	add.w	r4, r0, fp
    b8c8:	e700      	b.n	b6cc <_svfprintf_r+0x12c8>
    b8ca:	272d      	movs	r7, #45	; 0x2d
    b8cc:	f88d 706f 	strb.w	r7, [sp, #111]	; 0x6f
    b8d0:	f7ff b8ae 	b.w	aa30 <_svfprintf_r+0x62c>
    b8d4:	9307      	str	r3, [sp, #28]
    b8d6:	f7ff b94d 	b.w	ab74 <_svfprintf_r+0x770>
    b8da:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b8dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b8de:	4413      	add	r3, r2
    b8e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b8e2:	930d      	str	r3, [sp, #52]	; 0x34
    b8e4:	2a00      	cmp	r2, #0
    b8e6:	dd7f      	ble.n	b9e8 <_svfprintf_r+0x15e4>
    b8e8:	2267      	movs	r2, #103	; 0x67
    b8ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b8ee:	9211      	str	r2, [sp, #68]	; 0x44
    b8f0:	e5c6      	b.n	b480 <_svfprintf_r+0x107c>
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	f340 8098 	ble.w	ba28 <_svfprintf_r+0x1624>
    b8f8:	f1bb 0f00 	cmp.w	fp, #0
    b8fc:	d16b      	bne.n	b9d6 <_svfprintf_r+0x15d2>
    b8fe:	9a07      	ldr	r2, [sp, #28]
    b900:	07d4      	lsls	r4, r2, #31
    b902:	d468      	bmi.n	b9d6 <_svfprintf_r+0x15d2>
    b904:	461a      	mov	r2, r3
    b906:	920d      	str	r2, [sp, #52]	; 0x34
    b908:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b90c:	e5b8      	b.n	b480 <_svfprintf_r+0x107c>
    b90e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    b910:	2b47      	cmp	r3, #71	; 0x47
    b912:	f47f ad83 	bne.w	b41c <_svfprintf_r+0x1018>
    b916:	9b07      	ldr	r3, [sp, #28]
    b918:	07db      	lsls	r3, r3, #31
    b91a:	f53f aed1 	bmi.w	b6c0 <_svfprintf_r+0x12bc>
    b91e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b920:	1b9b      	subs	r3, r3, r6
    b922:	9312      	str	r3, [sp, #72]	; 0x48
    b924:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    b926:	2b47      	cmp	r3, #71	; 0x47
    b928:	f43f af13 	beq.w	b752 <_svfprintf_r+0x134e>
    b92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    b92e:	e728      	b.n	b782 <_svfprintf_r+0x137e>
    b930:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    b934:	970e      	str	r7, [sp, #56]	; 0x38
    b936:	9308      	str	r3, [sp, #32]
    b938:	950d      	str	r5, [sp, #52]	; 0x34
    b93a:	4683      	mov	fp, r0
    b93c:	9013      	str	r0, [sp, #76]	; 0x4c
    b93e:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    b942:	f7fe bf25 	b.w	a790 <_svfprintf_r+0x38c>
    b946:	9b07      	ldr	r3, [sp, #28]
    b948:	07db      	lsls	r3, r3, #31
    b94a:	465f      	mov	r7, fp
    b94c:	d505      	bpl.n	b95a <_svfprintf_r+0x1556>
    b94e:	ae40      	add	r6, sp, #256	; 0x100
    b950:	2330      	movs	r3, #48	; 0x30
    b952:	f806 3d41 	strb.w	r3, [r6, #-65]!
    b956:	f7fe bf11 	b.w	a77c <_svfprintf_r+0x378>
    b95a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    b95e:	ae30      	add	r6, sp, #192	; 0xc0
    b960:	f7fe bf0f 	b.w	a782 <_svfprintf_r+0x37e>
    b964:	aa23      	add	r2, sp, #140	; 0x8c
    b966:	9909      	ldr	r1, [sp, #36]	; 0x24
    b968:	980a      	ldr	r0, [sp, #40]	; 0x28
    b96a:	f001 fdd7 	bl	d51c <__ssprint_r>
    b96e:	2800      	cmp	r0, #0
    b970:	f47e ae41 	bne.w	a5f6 <_svfprintf_r+0x1f2>
    b974:	9d1d      	ldr	r5, [sp, #116]	; 0x74
    b976:	9c25      	ldr	r4, [sp, #148]	; 0x94
    b978:	9b24      	ldr	r3, [sp, #144]	; 0x90
    b97a:	f10d 09c0 	add.w	r9, sp, #192	; 0xc0
    b97e:	e62a      	b.n	b5d6 <_svfprintf_r+0x11d2>
    b980:	46a0      	mov	r8, r4
    b982:	2500      	movs	r5, #0
    b984:	f7fe bd99 	b.w	a4ba <_svfprintf_r+0xb6>
    b988:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b98a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b98c:	4413      	add	r3, r2
    b98e:	2267      	movs	r2, #103	; 0x67
    b990:	930d      	str	r3, [sp, #52]	; 0x34
    b992:	9211      	str	r2, [sp, #68]	; 0x44
    b994:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b998:	e572      	b.n	b480 <_svfprintf_r+0x107c>
    b99a:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b99c:	e552      	b.n	b444 <_svfprintf_r+0x1040>
    b99e:	3330      	adds	r3, #48	; 0x30
    b9a0:	2230      	movs	r2, #48	; 0x30
    b9a2:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
    b9a6:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
    b9aa:	ab20      	add	r3, sp, #128	; 0x80
    b9ac:	e725      	b.n	b7fa <_svfprintf_r+0x13f6>
    b9ae:	9808      	ldr	r0, [sp, #32]
    b9b0:	4639      	mov	r1, r7
    b9b2:	2200      	movs	r2, #0
    b9b4:	2300      	movs	r3, #0
    b9b6:	f7fd faaf 	bl	8f18 <__aeabi_dcmpeq>
    b9ba:	2800      	cmp	r0, #0
    b9bc:	f47f ae8a 	bne.w	b6d4 <_svfprintf_r+0x12d0>
    b9c0:	f1c5 0501 	rsb	r5, r5, #1
    b9c4:	951d      	str	r5, [sp, #116]	; 0x74
    b9c6:	442c      	add	r4, r5
    b9c8:	e529      	b.n	b41e <_svfprintf_r+0x101a>
    b9ca:	4e38      	ldr	r6, [pc, #224]	; (baac <_svfprintf_r+0x16a8>)
    b9cc:	4b38      	ldr	r3, [pc, #224]	; (bab0 <_svfprintf_r+0x16ac>)
    b9ce:	f89d 706f 	ldrb.w	r7, [sp, #111]	; 0x6f
    b9d2:	f7ff b82f 	b.w	aa34 <_svfprintf_r+0x630>
    b9d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b9d8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    b9da:	189d      	adds	r5, r3, r2
    b9dc:	eb05 030b 	add.w	r3, r5, fp
    b9e0:	930d      	str	r3, [sp, #52]	; 0x34
    b9e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b9e6:	e54b      	b.n	b480 <_svfprintf_r+0x107c>
    b9e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b9ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b9ec:	f1c3 0301 	rsb	r3, r3, #1
    b9f0:	441a      	add	r2, r3
    b9f2:	4613      	mov	r3, r2
    b9f4:	920d      	str	r2, [sp, #52]	; 0x34
    b9f6:	e777      	b.n	b8e8 <_svfprintf_r+0x14e4>
    b9f8:	9b07      	ldr	r3, [sp, #28]
    b9fa:	f013 0301 	ands.w	r3, r3, #1
    b9fe:	f47f af05 	bne.w	b80c <_svfprintf_r+0x1408>
    ba02:	9313      	str	r3, [sp, #76]	; 0x4c
    ba04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ba06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ba0a:	e539      	b.n	b480 <_svfprintf_r+0x107c>
    ba0c:	980e      	ldr	r0, [sp, #56]	; 0x38
    ba0e:	f898 3001 	ldrb.w	r3, [r8, #1]
    ba12:	6805      	ldr	r5, [r0, #0]
    ba14:	3004      	adds	r0, #4
    ba16:	2d00      	cmp	r5, #0
    ba18:	900e      	str	r0, [sp, #56]	; 0x38
    ba1a:	46a0      	mov	r8, r4
    ba1c:	f6be ad4b 	bge.w	a4b6 <_svfprintf_r+0xb2>
    ba20:	f04f 35ff 	mov.w	r5, #4294967295
    ba24:	f7fe bd47 	b.w	a4b6 <_svfprintf_r+0xb2>
    ba28:	f1bb 0f00 	cmp.w	fp, #0
    ba2c:	d102      	bne.n	ba34 <_svfprintf_r+0x1630>
    ba2e:	9b07      	ldr	r3, [sp, #28]
    ba30:	07d8      	lsls	r0, r3, #31
    ba32:	d507      	bpl.n	ba44 <_svfprintf_r+0x1640>
    ba34:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ba36:	1c5d      	adds	r5, r3, #1
    ba38:	eb05 030b 	add.w	r3, r5, fp
    ba3c:	930d      	str	r3, [sp, #52]	; 0x34
    ba3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ba42:	e51d      	b.n	b480 <_svfprintf_r+0x107c>
    ba44:	2301      	movs	r3, #1
    ba46:	930d      	str	r3, [sp, #52]	; 0x34
    ba48:	e51a      	b.n	b480 <_svfprintf_r+0x107c>
    ba4a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba4e:	f7ff b865 	b.w	ab1c <_svfprintf_r+0x718>
    ba52:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba56:	f7fe be51 	b.w	a6fc <_svfprintf_r+0x2f8>
    ba5a:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
    ba5e:	e6cc      	b.n	b7fa <_svfprintf_r+0x13f6>
    ba60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ba62:	230c      	movs	r3, #12
    ba64:	6013      	str	r3, [r2, #0]
    ba66:	f04f 30ff 	mov.w	r0, #4294967295
    ba6a:	f7fe bdcd 	b.w	a608 <_svfprintf_r+0x204>
    ba6e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba72:	f7ff b950 	b.w	ad16 <_svfprintf_r+0x912>
    ba76:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba7a:	f7fe bfab 	b.w	a9d4 <_svfprintf_r+0x5d0>
    ba7e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba82:	f7fe bdc9 	b.w	a618 <_svfprintf_r+0x214>
    ba86:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba8a:	f7ff b819 	b.w	aac0 <_svfprintf_r+0x6bc>
    ba8e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba92:	f7fe bfeb 	b.w	aa6c <_svfprintf_r+0x668>
    ba96:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    ba9a:	f7ff b8f3 	b.w	ac84 <_svfprintf_r+0x880>
    ba9e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
    baa2:	f7ff b8d2 	b.w	ac4a <_svfprintf_r+0x846>
    baa6:	bf00      	nop
    baa8:	0001ba30 	.word	0x0001ba30
    baac:	0001ba04 	.word	0x0001ba04
    bab0:	0001ba00 	.word	0x0001ba00

0000bab4 <_vdprintf_r>:
    bab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bab6:	f5ad 7d05 	sub.w	sp, sp, #532	; 0x214
    baba:	ad04      	add	r5, sp, #16
    babc:	9300      	str	r3, [sp, #0]
    babe:	460f      	mov	r7, r1
    bac0:	4613      	mov	r3, r2
    bac2:	f44f 7400 	mov.w	r4, #512	; 0x200
    bac6:	aa03      	add	r2, sp, #12
    bac8:	4629      	mov	r1, r5
    baca:	9403      	str	r4, [sp, #12]
    bacc:	4606      	mov	r6, r0
    bace:	f001 fda5 	bl	d61c <_vasnprintf_r>
    bad2:	b188      	cbz	r0, baf8 <_vdprintf_r+0x44>
    bad4:	4604      	mov	r4, r0
    bad6:	4602      	mov	r2, r0
    bad8:	4639      	mov	r1, r7
    bada:	9b03      	ldr	r3, [sp, #12]
    badc:	4630      	mov	r0, r6
    bade:	f000 f829 	bl	bb34 <_write_r>
    bae2:	42ac      	cmp	r4, r5
    bae4:	9003      	str	r0, [sp, #12]
    bae6:	d004      	beq.n	baf2 <_vdprintf_r+0x3e>
    bae8:	4630      	mov	r0, r6
    baea:	4621      	mov	r1, r4
    baec:	f001 f8be 	bl	cc6c <_free_r>
    baf0:	9803      	ldr	r0, [sp, #12]
    baf2:	f50d 7d05 	add.w	sp, sp, #532	; 0x214
    baf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    baf8:	f04f 30ff 	mov.w	r0, #4294967295
    bafc:	e7f9      	b.n	baf2 <_vdprintf_r+0x3e>
    bafe:	bf00      	nop

0000bb00 <vdprintf>:
    bb00:	b410      	push	{r4}
    bb02:	4c04      	ldr	r4, [pc, #16]	; (bb14 <vdprintf+0x14>)
    bb04:	4613      	mov	r3, r2
    bb06:	460a      	mov	r2, r1
    bb08:	4601      	mov	r1, r0
    bb0a:	6820      	ldr	r0, [r4, #0]
    bb0c:	bc10      	pop	{r4}
    bb0e:	f7ff bfd1 	b.w	bab4 <_vdprintf_r>
    bb12:	bf00      	nop
    bb14:	1fff8f70 	.word	0x1fff8f70

0000bb18 <__ascii_wctomb>:
    bb18:	b121      	cbz	r1, bb24 <__ascii_wctomb+0xc>
    bb1a:	2aff      	cmp	r2, #255	; 0xff
    bb1c:	d804      	bhi.n	bb28 <__ascii_wctomb+0x10>
    bb1e:	700a      	strb	r2, [r1, #0]
    bb20:	2001      	movs	r0, #1
    bb22:	4770      	bx	lr
    bb24:	4608      	mov	r0, r1
    bb26:	4770      	bx	lr
    bb28:	238a      	movs	r3, #138	; 0x8a
    bb2a:	6003      	str	r3, [r0, #0]
    bb2c:	f04f 30ff 	mov.w	r0, #4294967295
    bb30:	4770      	bx	lr
    bb32:	bf00      	nop

0000bb34 <_write_r>:
    bb34:	b570      	push	{r4, r5, r6, lr}
    bb36:	460d      	mov	r5, r1
    bb38:	4c08      	ldr	r4, [pc, #32]	; (bb5c <_write_r+0x28>)
    bb3a:	4611      	mov	r1, r2
    bb3c:	4606      	mov	r6, r0
    bb3e:	461a      	mov	r2, r3
    bb40:	4628      	mov	r0, r5
    bb42:	2300      	movs	r3, #0
    bb44:	6023      	str	r3, [r4, #0]
    bb46:	f7fc fbb7 	bl	82b8 <_write>
    bb4a:	1c43      	adds	r3, r0, #1
    bb4c:	d000      	beq.n	bb50 <_write_r+0x1c>
    bb4e:	bd70      	pop	{r4, r5, r6, pc}
    bb50:	6823      	ldr	r3, [r4, #0]
    bb52:	2b00      	cmp	r3, #0
    bb54:	d0fb      	beq.n	bb4e <_write_r+0x1a>
    bb56:	6033      	str	r3, [r6, #0]
    bb58:	bd70      	pop	{r4, r5, r6, pc}
    bb5a:	bf00      	nop
    bb5c:	1fff9890 	.word	0x1fff9890

0000bb60 <__register_exitproc>:
    bb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb64:	4c25      	ldr	r4, [pc, #148]	; (bbfc <__register_exitproc+0x9c>)
    bb66:	6825      	ldr	r5, [r4, #0]
    bb68:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    bb6c:	4606      	mov	r6, r0
    bb6e:	4688      	mov	r8, r1
    bb70:	4692      	mov	sl, r2
    bb72:	4699      	mov	r9, r3
    bb74:	b3c4      	cbz	r4, bbe8 <__register_exitproc+0x88>
    bb76:	6860      	ldr	r0, [r4, #4]
    bb78:	281f      	cmp	r0, #31
    bb7a:	dc17      	bgt.n	bbac <__register_exitproc+0x4c>
    bb7c:	1c43      	adds	r3, r0, #1
    bb7e:	b176      	cbz	r6, bb9e <__register_exitproc+0x3e>
    bb80:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    bb84:	2201      	movs	r2, #1
    bb86:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    bb8a:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    bb8e:	4082      	lsls	r2, r0
    bb90:	4311      	orrs	r1, r2
    bb92:	2e02      	cmp	r6, #2
    bb94:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    bb98:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    bb9c:	d01e      	beq.n	bbdc <__register_exitproc+0x7c>
    bb9e:	3002      	adds	r0, #2
    bba0:	6063      	str	r3, [r4, #4]
    bba2:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    bba6:	2000      	movs	r0, #0
    bba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbac:	4b14      	ldr	r3, [pc, #80]	; (bc00 <__register_exitproc+0xa0>)
    bbae:	b303      	cbz	r3, bbf2 <__register_exitproc+0x92>
    bbb0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    bbb4:	f7fd fd46 	bl	9644 <malloc>
    bbb8:	4604      	mov	r4, r0
    bbba:	b1d0      	cbz	r0, bbf2 <__register_exitproc+0x92>
    bbbc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    bbc0:	2700      	movs	r7, #0
    bbc2:	e880 0088 	stmia.w	r0, {r3, r7}
    bbc6:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    bbca:	4638      	mov	r0, r7
    bbcc:	2301      	movs	r3, #1
    bbce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    bbd2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    bbd6:	2e00      	cmp	r6, #0
    bbd8:	d0e1      	beq.n	bb9e <__register_exitproc+0x3e>
    bbda:	e7d1      	b.n	bb80 <__register_exitproc+0x20>
    bbdc:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    bbe0:	430a      	orrs	r2, r1
    bbe2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    bbe6:	e7da      	b.n	bb9e <__register_exitproc+0x3e>
    bbe8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    bbec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    bbf0:	e7c1      	b.n	bb76 <__register_exitproc+0x16>
    bbf2:	f04f 30ff 	mov.w	r0, #4294967295
    bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bbfa:	bf00      	nop
    bbfc:	0001b9dc 	.word	0x0001b9dc
    bc00:	00009645 	.word	0x00009645

0000bc04 <register_fini>:
    bc04:	4b02      	ldr	r3, [pc, #8]	; (bc10 <register_fini+0xc>)
    bc06:	b113      	cbz	r3, bc0e <register_fini+0xa>
    bc08:	4802      	ldr	r0, [pc, #8]	; (bc14 <register_fini+0x10>)
    bc0a:	f000 b805 	b.w	bc18 <atexit>
    bc0e:	4770      	bx	lr
    bc10:	00000000 	.word	0x00000000
    bc14:	0000cba9 	.word	0x0000cba9

0000bc18 <atexit>:
    bc18:	2300      	movs	r3, #0
    bc1a:	4601      	mov	r1, r0
    bc1c:	461a      	mov	r2, r3
    bc1e:	4618      	mov	r0, r3
    bc20:	f7ff bf9e 	b.w	bb60 <__register_exitproc>

0000bc24 <quorem>:
    bc24:	6902      	ldr	r2, [r0, #16]
    bc26:	690b      	ldr	r3, [r1, #16]
    bc28:	4293      	cmp	r3, r2
    bc2a:	f300 808d 	bgt.w	bd48 <quorem+0x124>
    bc2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc32:	f103 38ff 	add.w	r8, r3, #4294967295
    bc36:	f101 0714 	add.w	r7, r1, #20
    bc3a:	f100 0b14 	add.w	fp, r0, #20
    bc3e:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    bc42:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    bc46:	ea4f 0488 	mov.w	r4, r8, lsl #2
    bc4a:	b083      	sub	sp, #12
    bc4c:	3201      	adds	r2, #1
    bc4e:	fbb3 f9f2 	udiv	r9, r3, r2
    bc52:	eb0b 0304 	add.w	r3, fp, r4
    bc56:	9400      	str	r4, [sp, #0]
    bc58:	eb07 0a04 	add.w	sl, r7, r4
    bc5c:	9301      	str	r3, [sp, #4]
    bc5e:	f1b9 0f00 	cmp.w	r9, #0
    bc62:	d039      	beq.n	bcd8 <quorem+0xb4>
    bc64:	2500      	movs	r5, #0
    bc66:	46bc      	mov	ip, r7
    bc68:	46de      	mov	lr, fp
    bc6a:	462b      	mov	r3, r5
    bc6c:	f85c 6b04 	ldr.w	r6, [ip], #4
    bc70:	f8de 2000 	ldr.w	r2, [lr]
    bc74:	b2b4      	uxth	r4, r6
    bc76:	fb09 5504 	mla	r5, r9, r4, r5
    bc7a:	0c36      	lsrs	r6, r6, #16
    bc7c:	0c2c      	lsrs	r4, r5, #16
    bc7e:	fb09 4406 	mla	r4, r9, r6, r4
    bc82:	b2ad      	uxth	r5, r5
    bc84:	1b5b      	subs	r3, r3, r5
    bc86:	b2a6      	uxth	r6, r4
    bc88:	fa13 f382 	uxtah	r3, r3, r2
    bc8c:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    bc90:	eb06 4623 	add.w	r6, r6, r3, asr #16
    bc94:	b29b      	uxth	r3, r3
    bc96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    bc9a:	45e2      	cmp	sl, ip
    bc9c:	f84e 3b04 	str.w	r3, [lr], #4
    bca0:	ea4f 4514 	mov.w	r5, r4, lsr #16
    bca4:	ea4f 4326 	mov.w	r3, r6, asr #16
    bca8:	d2e0      	bcs.n	bc6c <quorem+0x48>
    bcaa:	9b00      	ldr	r3, [sp, #0]
    bcac:	f85b 3003 	ldr.w	r3, [fp, r3]
    bcb0:	b993      	cbnz	r3, bcd8 <quorem+0xb4>
    bcb2:	9c01      	ldr	r4, [sp, #4]
    bcb4:	1f23      	subs	r3, r4, #4
    bcb6:	459b      	cmp	fp, r3
    bcb8:	d20c      	bcs.n	bcd4 <quorem+0xb0>
    bcba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    bcbe:	b94b      	cbnz	r3, bcd4 <quorem+0xb0>
    bcc0:	f1a4 0308 	sub.w	r3, r4, #8
    bcc4:	e002      	b.n	bccc <quorem+0xa8>
    bcc6:	681a      	ldr	r2, [r3, #0]
    bcc8:	3b04      	subs	r3, #4
    bcca:	b91a      	cbnz	r2, bcd4 <quorem+0xb0>
    bccc:	459b      	cmp	fp, r3
    bcce:	f108 38ff 	add.w	r8, r8, #4294967295
    bcd2:	d3f8      	bcc.n	bcc6 <quorem+0xa2>
    bcd4:	f8c0 8010 	str.w	r8, [r0, #16]
    bcd8:	4604      	mov	r4, r0
    bcda:	f001 fb19 	bl	d310 <__mcmp>
    bcde:	2800      	cmp	r0, #0
    bce0:	db2e      	blt.n	bd40 <quorem+0x11c>
    bce2:	f109 0901 	add.w	r9, r9, #1
    bce6:	465d      	mov	r5, fp
    bce8:	2300      	movs	r3, #0
    bcea:	f857 1b04 	ldr.w	r1, [r7], #4
    bcee:	6828      	ldr	r0, [r5, #0]
    bcf0:	b28a      	uxth	r2, r1
    bcf2:	1a9a      	subs	r2, r3, r2
    bcf4:	0c09      	lsrs	r1, r1, #16
    bcf6:	fa12 f280 	uxtah	r2, r2, r0
    bcfa:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    bcfe:	eb03 4322 	add.w	r3, r3, r2, asr #16
    bd02:	b291      	uxth	r1, r2
    bd04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    bd08:	45ba      	cmp	sl, r7
    bd0a:	f845 1b04 	str.w	r1, [r5], #4
    bd0e:	ea4f 4323 	mov.w	r3, r3, asr #16
    bd12:	d2ea      	bcs.n	bcea <quorem+0xc6>
    bd14:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    bd18:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    bd1c:	b982      	cbnz	r2, bd40 <quorem+0x11c>
    bd1e:	1f1a      	subs	r2, r3, #4
    bd20:	4593      	cmp	fp, r2
    bd22:	d20b      	bcs.n	bd3c <quorem+0x118>
    bd24:	f853 2c04 	ldr.w	r2, [r3, #-4]
    bd28:	b942      	cbnz	r2, bd3c <quorem+0x118>
    bd2a:	3b08      	subs	r3, #8
    bd2c:	e002      	b.n	bd34 <quorem+0x110>
    bd2e:	681a      	ldr	r2, [r3, #0]
    bd30:	3b04      	subs	r3, #4
    bd32:	b91a      	cbnz	r2, bd3c <quorem+0x118>
    bd34:	459b      	cmp	fp, r3
    bd36:	f108 38ff 	add.w	r8, r8, #4294967295
    bd3a:	d3f8      	bcc.n	bd2e <quorem+0x10a>
    bd3c:	f8c4 8010 	str.w	r8, [r4, #16]
    bd40:	4648      	mov	r0, r9
    bd42:	b003      	add	sp, #12
    bd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd48:	2000      	movs	r0, #0
    bd4a:	4770      	bx	lr
    bd4c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000bd50 <_dtoa_r>:
    bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bd54:	6c01      	ldr	r1, [r0, #64]	; 0x40
    bd56:	b097      	sub	sp, #92	; 0x5c
    bd58:	4681      	mov	r9, r0
    bd5a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
    bd5c:	4692      	mov	sl, r2
    bd5e:	469b      	mov	fp, r3
    bd60:	b149      	cbz	r1, bd76 <_dtoa_r+0x26>
    bd62:	6c42      	ldr	r2, [r0, #68]	; 0x44
    bd64:	604a      	str	r2, [r1, #4]
    bd66:	2301      	movs	r3, #1
    bd68:	4093      	lsls	r3, r2
    bd6a:	608b      	str	r3, [r1, #8]
    bd6c:	f001 f8ee 	bl	cf4c <_Bfree>
    bd70:	2300      	movs	r3, #0
    bd72:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
    bd76:	f1bb 0f00 	cmp.w	fp, #0
    bd7a:	46d8      	mov	r8, fp
    bd7c:	db33      	blt.n	bde6 <_dtoa_r+0x96>
    bd7e:	2300      	movs	r3, #0
    bd80:	6023      	str	r3, [r4, #0]
    bd82:	4ba5      	ldr	r3, [pc, #660]	; (c018 <_dtoa_r+0x2c8>)
    bd84:	461a      	mov	r2, r3
    bd86:	ea08 0303 	and.w	r3, r8, r3
    bd8a:	4293      	cmp	r3, r2
    bd8c:	d014      	beq.n	bdb8 <_dtoa_r+0x68>
    bd8e:	4650      	mov	r0, sl
    bd90:	4659      	mov	r1, fp
    bd92:	2200      	movs	r2, #0
    bd94:	2300      	movs	r3, #0
    bd96:	f7fd f8bf 	bl	8f18 <__aeabi_dcmpeq>
    bd9a:	4605      	mov	r5, r0
    bd9c:	b348      	cbz	r0, bdf2 <_dtoa_r+0xa2>
    bd9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    bda0:	2301      	movs	r3, #1
    bda2:	6013      	str	r3, [r2, #0]
    bda4:	9b24      	ldr	r3, [sp, #144]	; 0x90
    bda6:	2b00      	cmp	r3, #0
    bda8:	f000 80c5 	beq.w	bf36 <_dtoa_r+0x1e6>
    bdac:	489b      	ldr	r0, [pc, #620]	; (c01c <_dtoa_r+0x2cc>)
    bdae:	6018      	str	r0, [r3, #0]
    bdb0:	3801      	subs	r0, #1
    bdb2:	b017      	add	sp, #92	; 0x5c
    bdb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bdb8:	9a22      	ldr	r2, [sp, #136]	; 0x88
    bdba:	f242 730f 	movw	r3, #9999	; 0x270f
    bdbe:	6013      	str	r3, [r2, #0]
    bdc0:	f1ba 0f00 	cmp.w	sl, #0
    bdc4:	f000 80a2 	beq.w	bf0c <_dtoa_r+0x1bc>
    bdc8:	4895      	ldr	r0, [pc, #596]	; (c020 <_dtoa_r+0x2d0>)
    bdca:	9b24      	ldr	r3, [sp, #144]	; 0x90
    bdcc:	2b00      	cmp	r3, #0
    bdce:	d0f0      	beq.n	bdb2 <_dtoa_r+0x62>
    bdd0:	78c3      	ldrb	r3, [r0, #3]
    bdd2:	2b00      	cmp	r3, #0
    bdd4:	f000 80b1 	beq.w	bf3a <_dtoa_r+0x1ea>
    bdd8:	f100 0308 	add.w	r3, r0, #8
    bddc:	9a24      	ldr	r2, [sp, #144]	; 0x90
    bdde:	6013      	str	r3, [r2, #0]
    bde0:	b017      	add	sp, #92	; 0x5c
    bde2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bde6:	2301      	movs	r3, #1
    bde8:	f02b 4800 	bic.w	r8, fp, #2147483648	; 0x80000000
    bdec:	6023      	str	r3, [r4, #0]
    bdee:	46c3      	mov	fp, r8
    bdf0:	e7c7      	b.n	bd82 <_dtoa_r+0x32>
    bdf2:	aa14      	add	r2, sp, #80	; 0x50
    bdf4:	ab15      	add	r3, sp, #84	; 0x54
    bdf6:	9201      	str	r2, [sp, #4]
    bdf8:	9300      	str	r3, [sp, #0]
    bdfa:	4652      	mov	r2, sl
    bdfc:	465b      	mov	r3, fp
    bdfe:	4648      	mov	r0, r9
    be00:	f001 fb30 	bl	d464 <__d2b>
    be04:	ea5f 5418 	movs.w	r4, r8, lsr #20
    be08:	9008      	str	r0, [sp, #32]
    be0a:	f040 8088 	bne.w	bf1e <_dtoa_r+0x1ce>
    be0e:	9d14      	ldr	r5, [sp, #80]	; 0x50
    be10:	9c15      	ldr	r4, [sp, #84]	; 0x54
    be12:	442c      	add	r4, r5
    be14:	f204 4332 	addw	r3, r4, #1074	; 0x432
    be18:	2b20      	cmp	r3, #32
    be1a:	f340 8291 	ble.w	c340 <_dtoa_r+0x5f0>
    be1e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    be22:	f204 4012 	addw	r0, r4, #1042	; 0x412
    be26:	fa08 f803 	lsl.w	r8, r8, r3
    be2a:	fa2a f000 	lsr.w	r0, sl, r0
    be2e:	ea40 0008 	orr.w	r0, r0, r8
    be32:	f7fc fd93 	bl	895c <__aeabi_ui2d>
    be36:	2301      	movs	r3, #1
    be38:	3c01      	subs	r4, #1
    be3a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
    be3e:	9310      	str	r3, [sp, #64]	; 0x40
    be40:	2200      	movs	r2, #0
    be42:	4b78      	ldr	r3, [pc, #480]	; (c024 <_dtoa_r+0x2d4>)
    be44:	f7fc fc4c 	bl	86e0 <__aeabi_dsub>
    be48:	a36d      	add	r3, pc, #436	; (adr r3, c000 <_dtoa_r+0x2b0>)
    be4a:	e9d3 2300 	ldrd	r2, r3, [r3]
    be4e:	f7fc fdfb 	bl	8a48 <__aeabi_dmul>
    be52:	a36d      	add	r3, pc, #436	; (adr r3, c008 <_dtoa_r+0x2b8>)
    be54:	e9d3 2300 	ldrd	r2, r3, [r3]
    be58:	f7fc fc44 	bl	86e4 <__adddf3>
    be5c:	4606      	mov	r6, r0
    be5e:	4620      	mov	r0, r4
    be60:	460f      	mov	r7, r1
    be62:	f7fc fd8b 	bl	897c <__aeabi_i2d>
    be66:	a36a      	add	r3, pc, #424	; (adr r3, c010 <_dtoa_r+0x2c0>)
    be68:	e9d3 2300 	ldrd	r2, r3, [r3]
    be6c:	f7fc fdec 	bl	8a48 <__aeabi_dmul>
    be70:	4602      	mov	r2, r0
    be72:	460b      	mov	r3, r1
    be74:	4630      	mov	r0, r6
    be76:	4639      	mov	r1, r7
    be78:	f7fc fc34 	bl	86e4 <__adddf3>
    be7c:	4606      	mov	r6, r0
    be7e:	460f      	mov	r7, r1
    be80:	f001 fc2c 	bl	d6dc <__aeabi_d2iz>
    be84:	2200      	movs	r2, #0
    be86:	9004      	str	r0, [sp, #16]
    be88:	2300      	movs	r3, #0
    be8a:	4630      	mov	r0, r6
    be8c:	4639      	mov	r1, r7
    be8e:	f7fd f84d 	bl	8f2c <__aeabi_dcmplt>
    be92:	2800      	cmp	r0, #0
    be94:	f040 8230 	bne.w	c2f8 <_dtoa_r+0x5a8>
    be98:	9e04      	ldr	r6, [sp, #16]
    be9a:	2e16      	cmp	r6, #22
    be9c:	f200 8229 	bhi.w	c2f2 <_dtoa_r+0x5a2>
    bea0:	4b61      	ldr	r3, [pc, #388]	; (c028 <_dtoa_r+0x2d8>)
    bea2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    bea6:	e9d3 0100 	ldrd	r0, r1, [r3]
    beaa:	4652      	mov	r2, sl
    beac:	465b      	mov	r3, fp
    beae:	f7fd f85b 	bl	8f68 <__aeabi_dcmpgt>
    beb2:	2800      	cmp	r0, #0
    beb4:	f000 8249 	beq.w	c34a <_dtoa_r+0x5fa>
    beb8:	1e73      	subs	r3, r6, #1
    beba:	9304      	str	r3, [sp, #16]
    bebc:	2300      	movs	r3, #0
    bebe:	930c      	str	r3, [sp, #48]	; 0x30
    bec0:	1b2c      	subs	r4, r5, r4
    bec2:	1e63      	subs	r3, r4, #1
    bec4:	9302      	str	r3, [sp, #8]
    bec6:	f100 8232 	bmi.w	c32e <_dtoa_r+0x5de>
    beca:	2300      	movs	r3, #0
    becc:	9305      	str	r3, [sp, #20]
    bece:	9b04      	ldr	r3, [sp, #16]
    bed0:	2b00      	cmp	r3, #0
    bed2:	f2c0 8223 	blt.w	c31c <_dtoa_r+0x5cc>
    bed6:	9a02      	ldr	r2, [sp, #8]
    bed8:	930b      	str	r3, [sp, #44]	; 0x2c
    beda:	4611      	mov	r1, r2
    bedc:	4419      	add	r1, r3
    bede:	2300      	movs	r3, #0
    bee0:	9102      	str	r1, [sp, #8]
    bee2:	930a      	str	r3, [sp, #40]	; 0x28
    bee4:	9b20      	ldr	r3, [sp, #128]	; 0x80
    bee6:	2b09      	cmp	r3, #9
    bee8:	d829      	bhi.n	bf3e <_dtoa_r+0x1ee>
    beea:	2b05      	cmp	r3, #5
    beec:	f340 8658 	ble.w	cba0 <_dtoa_r+0xe50>
    bef0:	3b04      	subs	r3, #4
    bef2:	9320      	str	r3, [sp, #128]	; 0x80
    bef4:	2500      	movs	r5, #0
    bef6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    bef8:	3b02      	subs	r3, #2
    befa:	2b03      	cmp	r3, #3
    befc:	f200 8635 	bhi.w	cb6a <_dtoa_r+0xe1a>
    bf00:	e8df f013 	tbh	[pc, r3, lsl #1]
    bf04:	0228032c 	.word	0x0228032c
    bf08:	04590337 	.word	0x04590337
    bf0c:	4b44      	ldr	r3, [pc, #272]	; (c020 <_dtoa_r+0x2d0>)
    bf0e:	4a47      	ldr	r2, [pc, #284]	; (c02c <_dtoa_r+0x2dc>)
    bf10:	f3c8 0013 	ubfx	r0, r8, #0, #20
    bf14:	2800      	cmp	r0, #0
    bf16:	bf14      	ite	ne
    bf18:	4618      	movne	r0, r3
    bf1a:	4610      	moveq	r0, r2
    bf1c:	e755      	b.n	bdca <_dtoa_r+0x7a>
    bf1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
    bf22:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
    bf26:	9510      	str	r5, [sp, #64]	; 0x40
    bf28:	4650      	mov	r0, sl
    bf2a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
    bf2e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
    bf32:	9d14      	ldr	r5, [sp, #80]	; 0x50
    bf34:	e784      	b.n	be40 <_dtoa_r+0xf0>
    bf36:	483e      	ldr	r0, [pc, #248]	; (c030 <_dtoa_r+0x2e0>)
    bf38:	e73b      	b.n	bdb2 <_dtoa_r+0x62>
    bf3a:	1cc3      	adds	r3, r0, #3
    bf3c:	e74e      	b.n	bddc <_dtoa_r+0x8c>
    bf3e:	2100      	movs	r1, #0
    bf40:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    bf44:	4648      	mov	r0, r9
    bf46:	9120      	str	r1, [sp, #128]	; 0x80
    bf48:	f000 ffda 	bl	cf00 <_Balloc>
    bf4c:	f04f 33ff 	mov.w	r3, #4294967295
    bf50:	9306      	str	r3, [sp, #24]
    bf52:	9a20      	ldr	r2, [sp, #128]	; 0x80
    bf54:	930d      	str	r3, [sp, #52]	; 0x34
    bf56:	2301      	movs	r3, #1
    bf58:	9007      	str	r0, [sp, #28]
    bf5a:	9221      	str	r2, [sp, #132]	; 0x84
    bf5c:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    bf60:	9309      	str	r3, [sp, #36]	; 0x24
    bf62:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bf64:	2b00      	cmp	r3, #0
    bf66:	f2c0 80d1 	blt.w	c10c <_dtoa_r+0x3bc>
    bf6a:	9a04      	ldr	r2, [sp, #16]
    bf6c:	2a0e      	cmp	r2, #14
    bf6e:	f300 80cd 	bgt.w	c10c <_dtoa_r+0x3bc>
    bf72:	4b2d      	ldr	r3, [pc, #180]	; (c028 <_dtoa_r+0x2d8>)
    bf74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bf78:	e9d3 3400 	ldrd	r3, r4, [r3]
    bf7c:	e9cd 3402 	strd	r3, r4, [sp, #8]
    bf80:	9b21      	ldr	r3, [sp, #132]	; 0x84
    bf82:	2b00      	cmp	r3, #0
    bf84:	f2c0 8300 	blt.w	c588 <_dtoa_r+0x838>
    bf88:	4656      	mov	r6, sl
    bf8a:	465f      	mov	r7, fp
    bf8c:	4650      	mov	r0, sl
    bf8e:	4659      	mov	r1, fp
    bf90:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
    bf94:	4652      	mov	r2, sl
    bf96:	465b      	mov	r3, fp
    bf98:	f7fc fe80 	bl	8c9c <__aeabi_ddiv>
    bf9c:	f001 fb9e 	bl	d6dc <__aeabi_d2iz>
    bfa0:	4604      	mov	r4, r0
    bfa2:	f7fc fceb 	bl	897c <__aeabi_i2d>
    bfa6:	4652      	mov	r2, sl
    bfa8:	465b      	mov	r3, fp
    bfaa:	f7fc fd4d 	bl	8a48 <__aeabi_dmul>
    bfae:	460b      	mov	r3, r1
    bfb0:	4602      	mov	r2, r0
    bfb2:	4639      	mov	r1, r7
    bfb4:	4630      	mov	r0, r6
    bfb6:	f7fc fb93 	bl	86e0 <__aeabi_dsub>
    bfba:	9d07      	ldr	r5, [sp, #28]
    bfbc:	f104 0330 	add.w	r3, r4, #48	; 0x30
    bfc0:	702b      	strb	r3, [r5, #0]
    bfc2:	9b06      	ldr	r3, [sp, #24]
    bfc4:	2b01      	cmp	r3, #1
    bfc6:	4606      	mov	r6, r0
    bfc8:	460f      	mov	r7, r1
    bfca:	f105 0501 	add.w	r5, r5, #1
    bfce:	d062      	beq.n	c096 <_dtoa_r+0x346>
    bfd0:	2200      	movs	r2, #0
    bfd2:	4b18      	ldr	r3, [pc, #96]	; (c034 <_dtoa_r+0x2e4>)
    bfd4:	f7fc fd38 	bl	8a48 <__aeabi_dmul>
    bfd8:	2200      	movs	r2, #0
    bfda:	2300      	movs	r3, #0
    bfdc:	4606      	mov	r6, r0
    bfde:	460f      	mov	r7, r1
    bfe0:	f7fc ff9a 	bl	8f18 <__aeabi_dcmpeq>
    bfe4:	2800      	cmp	r0, #0
    bfe6:	d17e      	bne.n	c0e6 <_dtoa_r+0x396>
    bfe8:	f8cd 9014 	str.w	r9, [sp, #20]
    bfec:	f8dd a018 	ldr.w	sl, [sp, #24]
    bff0:	f8dd b01c 	ldr.w	fp, [sp, #28]
    bff4:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
    bff8:	e029      	b.n	c04e <_dtoa_r+0x2fe>
    bffa:	bf00      	nop
    bffc:	f3af 8000 	nop.w
    c000:	636f4361 	.word	0x636f4361
    c004:	3fd287a7 	.word	0x3fd287a7
    c008:	8b60c8b3 	.word	0x8b60c8b3
    c00c:	3fc68a28 	.word	0x3fc68a28
    c010:	509f79fb 	.word	0x509f79fb
    c014:	3fd34413 	.word	0x3fd34413
    c018:	7ff00000 	.word	0x7ff00000
    c01c:	0001ba39 	.word	0x0001ba39
    c020:	0001bb5c 	.word	0x0001bb5c
    c024:	3ff80000 	.word	0x3ff80000
    c028:	0001bb60 	.word	0x0001bb60
    c02c:	0001bb50 	.word	0x0001bb50
    c030:	0001ba38 	.word	0x0001ba38
    c034:	40240000 	.word	0x40240000
    c038:	f7fc fd06 	bl	8a48 <__aeabi_dmul>
    c03c:	2200      	movs	r2, #0
    c03e:	2300      	movs	r3, #0
    c040:	4606      	mov	r6, r0
    c042:	460f      	mov	r7, r1
    c044:	f7fc ff68 	bl	8f18 <__aeabi_dcmpeq>
    c048:	2800      	cmp	r0, #0
    c04a:	f040 83b7 	bne.w	c7bc <_dtoa_r+0xa6c>
    c04e:	4642      	mov	r2, r8
    c050:	464b      	mov	r3, r9
    c052:	4630      	mov	r0, r6
    c054:	4639      	mov	r1, r7
    c056:	f7fc fe21 	bl	8c9c <__aeabi_ddiv>
    c05a:	f001 fb3f 	bl	d6dc <__aeabi_d2iz>
    c05e:	4604      	mov	r4, r0
    c060:	f7fc fc8c 	bl	897c <__aeabi_i2d>
    c064:	4642      	mov	r2, r8
    c066:	464b      	mov	r3, r9
    c068:	f7fc fcee 	bl	8a48 <__aeabi_dmul>
    c06c:	4602      	mov	r2, r0
    c06e:	460b      	mov	r3, r1
    c070:	4630      	mov	r0, r6
    c072:	4639      	mov	r1, r7
    c074:	f7fc fb34 	bl	86e0 <__aeabi_dsub>
    c078:	f104 0e30 	add.w	lr, r4, #48	; 0x30
    c07c:	f805 eb01 	strb.w	lr, [r5], #1
    c080:	ebcb 0e05 	rsb	lr, fp, r5
    c084:	45d6      	cmp	lr, sl
    c086:	4606      	mov	r6, r0
    c088:	460f      	mov	r7, r1
    c08a:	f04f 0200 	mov.w	r2, #0
    c08e:	4bb0      	ldr	r3, [pc, #704]	; (c350 <_dtoa_r+0x600>)
    c090:	d1d2      	bne.n	c038 <_dtoa_r+0x2e8>
    c092:	f8dd 9014 	ldr.w	r9, [sp, #20]
    c096:	4632      	mov	r2, r6
    c098:	463b      	mov	r3, r7
    c09a:	4630      	mov	r0, r6
    c09c:	4639      	mov	r1, r7
    c09e:	f7fc fb21 	bl	86e4 <__adddf3>
    c0a2:	4606      	mov	r6, r0
    c0a4:	460f      	mov	r7, r1
    c0a6:	4602      	mov	r2, r0
    c0a8:	460b      	mov	r3, r1
    c0aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c0ae:	f7fc ff3d 	bl	8f2c <__aeabi_dcmplt>
    c0b2:	b940      	cbnz	r0, c0c6 <_dtoa_r+0x376>
    c0b4:	4632      	mov	r2, r6
    c0b6:	463b      	mov	r3, r7
    c0b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c0bc:	f7fc ff2c 	bl	8f18 <__aeabi_dcmpeq>
    c0c0:	b188      	cbz	r0, c0e6 <_dtoa_r+0x396>
    c0c2:	07e3      	lsls	r3, r4, #31
    c0c4:	d50f      	bpl.n	c0e6 <_dtoa_r+0x396>
    c0c6:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    c0ca:	9a07      	ldr	r2, [sp, #28]
    c0cc:	1e6b      	subs	r3, r5, #1
    c0ce:	e004      	b.n	c0da <_dtoa_r+0x38a>
    c0d0:	429a      	cmp	r2, r3
    c0d2:	f000 842c 	beq.w	c92e <_dtoa_r+0xbde>
    c0d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    c0da:	2c39      	cmp	r4, #57	; 0x39
    c0dc:	f103 0501 	add.w	r5, r3, #1
    c0e0:	d0f6      	beq.n	c0d0 <_dtoa_r+0x380>
    c0e2:	3401      	adds	r4, #1
    c0e4:	701c      	strb	r4, [r3, #0]
    c0e6:	9908      	ldr	r1, [sp, #32]
    c0e8:	4648      	mov	r0, r9
    c0ea:	f000 ff2f 	bl	cf4c <_Bfree>
    c0ee:	2200      	movs	r2, #0
    c0f0:	9b04      	ldr	r3, [sp, #16]
    c0f2:	702a      	strb	r2, [r5, #0]
    c0f4:	9a22      	ldr	r2, [sp, #136]	; 0x88
    c0f6:	3301      	adds	r3, #1
    c0f8:	6013      	str	r3, [r2, #0]
    c0fa:	9b24      	ldr	r3, [sp, #144]	; 0x90
    c0fc:	2b00      	cmp	r3, #0
    c0fe:	f000 83a7 	beq.w	c850 <_dtoa_r+0xb00>
    c102:	9807      	ldr	r0, [sp, #28]
    c104:	601d      	str	r5, [r3, #0]
    c106:	b017      	add	sp, #92	; 0x5c
    c108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c10c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c10e:	2a00      	cmp	r2, #0
    c110:	f000 8112 	beq.w	c338 <_dtoa_r+0x5e8>
    c114:	9a20      	ldr	r2, [sp, #128]	; 0x80
    c116:	2a01      	cmp	r2, #1
    c118:	f340 8258 	ble.w	c5cc <_dtoa_r+0x87c>
    c11c:	9b06      	ldr	r3, [sp, #24]
    c11e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c120:	1e5f      	subs	r7, r3, #1
    c122:	42ba      	cmp	r2, r7
    c124:	f2c0 8397 	blt.w	c856 <_dtoa_r+0xb06>
    c128:	1bd7      	subs	r7, r2, r7
    c12a:	9b06      	ldr	r3, [sp, #24]
    c12c:	2b00      	cmp	r3, #0
    c12e:	f2c0 848a 	blt.w	ca46 <_dtoa_r+0xcf6>
    c132:	9d05      	ldr	r5, [sp, #20]
    c134:	9b06      	ldr	r3, [sp, #24]
    c136:	9a05      	ldr	r2, [sp, #20]
    c138:	441a      	add	r2, r3
    c13a:	9205      	str	r2, [sp, #20]
    c13c:	9a02      	ldr	r2, [sp, #8]
    c13e:	2101      	movs	r1, #1
    c140:	441a      	add	r2, r3
    c142:	4648      	mov	r0, r9
    c144:	9202      	str	r2, [sp, #8]
    c146:	f000 ff99 	bl	d07c <__i2b>
    c14a:	4606      	mov	r6, r0
    c14c:	b165      	cbz	r5, c168 <_dtoa_r+0x418>
    c14e:	9902      	ldr	r1, [sp, #8]
    c150:	2900      	cmp	r1, #0
    c152:	460b      	mov	r3, r1
    c154:	dd08      	ble.n	c168 <_dtoa_r+0x418>
    c156:	42a9      	cmp	r1, r5
    c158:	9a05      	ldr	r2, [sp, #20]
    c15a:	bfa8      	it	ge
    c15c:	462b      	movge	r3, r5
    c15e:	1ad2      	subs	r2, r2, r3
    c160:	1aed      	subs	r5, r5, r3
    c162:	1acb      	subs	r3, r1, r3
    c164:	9205      	str	r2, [sp, #20]
    c166:	9302      	str	r3, [sp, #8]
    c168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c16a:	2b00      	cmp	r3, #0
    c16c:	f340 82fc 	ble.w	c768 <_dtoa_r+0xa18>
    c170:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c172:	2a00      	cmp	r2, #0
    c174:	f000 8201 	beq.w	c57a <_dtoa_r+0x82a>
    c178:	2f00      	cmp	r7, #0
    c17a:	f000 81fe 	beq.w	c57a <_dtoa_r+0x82a>
    c17e:	4631      	mov	r1, r6
    c180:	463a      	mov	r2, r7
    c182:	4648      	mov	r0, r9
    c184:	f001 f81c 	bl	d1c0 <__pow5mult>
    c188:	f8dd 8020 	ldr.w	r8, [sp, #32]
    c18c:	4601      	mov	r1, r0
    c18e:	4642      	mov	r2, r8
    c190:	4606      	mov	r6, r0
    c192:	4648      	mov	r0, r9
    c194:	f000 ff7c 	bl	d090 <__multiply>
    c198:	4641      	mov	r1, r8
    c19a:	4604      	mov	r4, r0
    c19c:	4648      	mov	r0, r9
    c19e:	f000 fed5 	bl	cf4c <_Bfree>
    c1a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c1a4:	1bdb      	subs	r3, r3, r7
    c1a6:	930a      	str	r3, [sp, #40]	; 0x28
    c1a8:	f040 81e6 	bne.w	c578 <_dtoa_r+0x828>
    c1ac:	2101      	movs	r1, #1
    c1ae:	4648      	mov	r0, r9
    c1b0:	f000 ff64 	bl	d07c <__i2b>
    c1b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c1b6:	4680      	mov	r8, r0
    c1b8:	2b00      	cmp	r3, #0
    c1ba:	f000 8219 	beq.w	c5f0 <_dtoa_r+0x8a0>
    c1be:	4601      	mov	r1, r0
    c1c0:	461a      	mov	r2, r3
    c1c2:	4648      	mov	r0, r9
    c1c4:	f000 fffc 	bl	d1c0 <__pow5mult>
    c1c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c1ca:	2b01      	cmp	r3, #1
    c1cc:	4680      	mov	r8, r0
    c1ce:	f340 82f8 	ble.w	c7c2 <_dtoa_r+0xa72>
    c1d2:	2700      	movs	r7, #0
    c1d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
    c1d8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
    c1dc:	6918      	ldr	r0, [r3, #16]
    c1de:	f000 feff 	bl	cfe0 <__hi0bits>
    c1e2:	f1c0 0020 	rsb	r0, r0, #32
    c1e6:	9a02      	ldr	r2, [sp, #8]
    c1e8:	4410      	add	r0, r2
    c1ea:	f010 001f 	ands.w	r0, r0, #31
    c1ee:	f000 81f6 	beq.w	c5de <_dtoa_r+0x88e>
    c1f2:	f1c0 0320 	rsb	r3, r0, #32
    c1f6:	2b04      	cmp	r3, #4
    c1f8:	f340 84ca 	ble.w	cb90 <_dtoa_r+0xe40>
    c1fc:	9b05      	ldr	r3, [sp, #20]
    c1fe:	f1c0 001c 	rsb	r0, r0, #28
    c202:	4403      	add	r3, r0
    c204:	9305      	str	r3, [sp, #20]
    c206:	4613      	mov	r3, r2
    c208:	4403      	add	r3, r0
    c20a:	4405      	add	r5, r0
    c20c:	9302      	str	r3, [sp, #8]
    c20e:	9b05      	ldr	r3, [sp, #20]
    c210:	2b00      	cmp	r3, #0
    c212:	dd05      	ble.n	c220 <_dtoa_r+0x4d0>
    c214:	4621      	mov	r1, r4
    c216:	461a      	mov	r2, r3
    c218:	4648      	mov	r0, r9
    c21a:	f001 f821 	bl	d260 <__lshift>
    c21e:	4604      	mov	r4, r0
    c220:	9b02      	ldr	r3, [sp, #8]
    c222:	2b00      	cmp	r3, #0
    c224:	dd05      	ble.n	c232 <_dtoa_r+0x4e2>
    c226:	4641      	mov	r1, r8
    c228:	461a      	mov	r2, r3
    c22a:	4648      	mov	r0, r9
    c22c:	f001 f818 	bl	d260 <__lshift>
    c230:	4680      	mov	r8, r0
    c232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c234:	2b00      	cmp	r3, #0
    c236:	f040 827c 	bne.w	c732 <_dtoa_r+0x9e2>
    c23a:	9b06      	ldr	r3, [sp, #24]
    c23c:	2b00      	cmp	r3, #0
    c23e:	f340 8295 	ble.w	c76c <_dtoa_r+0xa1c>
    c242:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c244:	2b00      	cmp	r3, #0
    c246:	f040 81f5 	bne.w	c634 <_dtoa_r+0x8e4>
    c24a:	f8dd b01c 	ldr.w	fp, [sp, #28]
    c24e:	9f06      	ldr	r7, [sp, #24]
    c250:	465d      	mov	r5, fp
    c252:	e002      	b.n	c25a <_dtoa_r+0x50a>
    c254:	f000 fe84 	bl	cf60 <__multadd>
    c258:	4604      	mov	r4, r0
    c25a:	4641      	mov	r1, r8
    c25c:	4620      	mov	r0, r4
    c25e:	f7ff fce1 	bl	bc24 <quorem>
    c262:	f100 0a30 	add.w	sl, r0, #48	; 0x30
    c266:	f805 ab01 	strb.w	sl, [r5], #1
    c26a:	ebcb 0305 	rsb	r3, fp, r5
    c26e:	42bb      	cmp	r3, r7
    c270:	f04f 020a 	mov.w	r2, #10
    c274:	f04f 0300 	mov.w	r3, #0
    c278:	4621      	mov	r1, r4
    c27a:	4648      	mov	r0, r9
    c27c:	dbea      	blt.n	c254 <_dtoa_r+0x504>
    c27e:	9b07      	ldr	r3, [sp, #28]
    c280:	9a06      	ldr	r2, [sp, #24]
    c282:	2a01      	cmp	r2, #1
    c284:	bfac      	ite	ge
    c286:	189b      	addge	r3, r3, r2
    c288:	3301      	addlt	r3, #1
    c28a:	461d      	mov	r5, r3
    c28c:	f04f 0b00 	mov.w	fp, #0
    c290:	4621      	mov	r1, r4
    c292:	2201      	movs	r2, #1
    c294:	4648      	mov	r0, r9
    c296:	f000 ffe3 	bl	d260 <__lshift>
    c29a:	4641      	mov	r1, r8
    c29c:	9008      	str	r0, [sp, #32]
    c29e:	f001 f837 	bl	d310 <__mcmp>
    c2a2:	2800      	cmp	r0, #0
    c2a4:	f340 830d 	ble.w	c8c2 <_dtoa_r+0xb72>
    c2a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
    c2ac:	9907      	ldr	r1, [sp, #28]
    c2ae:	1e6b      	subs	r3, r5, #1
    c2b0:	e004      	b.n	c2bc <_dtoa_r+0x56c>
    c2b2:	428b      	cmp	r3, r1
    c2b4:	f000 8278 	beq.w	c7a8 <_dtoa_r+0xa58>
    c2b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    c2bc:	2a39      	cmp	r2, #57	; 0x39
    c2be:	f103 0501 	add.w	r5, r3, #1
    c2c2:	d0f6      	beq.n	c2b2 <_dtoa_r+0x562>
    c2c4:	3201      	adds	r2, #1
    c2c6:	701a      	strb	r2, [r3, #0]
    c2c8:	4641      	mov	r1, r8
    c2ca:	4648      	mov	r0, r9
    c2cc:	f000 fe3e 	bl	cf4c <_Bfree>
    c2d0:	2e00      	cmp	r6, #0
    c2d2:	f43f af08 	beq.w	c0e6 <_dtoa_r+0x396>
    c2d6:	f1bb 0f00 	cmp.w	fp, #0
    c2da:	d005      	beq.n	c2e8 <_dtoa_r+0x598>
    c2dc:	45b3      	cmp	fp, r6
    c2de:	d003      	beq.n	c2e8 <_dtoa_r+0x598>
    c2e0:	4659      	mov	r1, fp
    c2e2:	4648      	mov	r0, r9
    c2e4:	f000 fe32 	bl	cf4c <_Bfree>
    c2e8:	4631      	mov	r1, r6
    c2ea:	4648      	mov	r0, r9
    c2ec:	f000 fe2e 	bl	cf4c <_Bfree>
    c2f0:	e6f9      	b.n	c0e6 <_dtoa_r+0x396>
    c2f2:	2301      	movs	r3, #1
    c2f4:	930c      	str	r3, [sp, #48]	; 0x30
    c2f6:	e5e3      	b.n	bec0 <_dtoa_r+0x170>
    c2f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
    c2fc:	4640      	mov	r0, r8
    c2fe:	f7fc fb3d 	bl	897c <__aeabi_i2d>
    c302:	4602      	mov	r2, r0
    c304:	460b      	mov	r3, r1
    c306:	4630      	mov	r0, r6
    c308:	4639      	mov	r1, r7
    c30a:	f7fc fe05 	bl	8f18 <__aeabi_dcmpeq>
    c30e:	2800      	cmp	r0, #0
    c310:	f47f adc2 	bne.w	be98 <_dtoa_r+0x148>
    c314:	f108 33ff 	add.w	r3, r8, #4294967295
    c318:	9304      	str	r3, [sp, #16]
    c31a:	e5bd      	b.n	be98 <_dtoa_r+0x148>
    c31c:	9a05      	ldr	r2, [sp, #20]
    c31e:	9b04      	ldr	r3, [sp, #16]
    c320:	1ad2      	subs	r2, r2, r3
    c322:	425b      	negs	r3, r3
    c324:	930a      	str	r3, [sp, #40]	; 0x28
    c326:	2300      	movs	r3, #0
    c328:	9205      	str	r2, [sp, #20]
    c32a:	930b      	str	r3, [sp, #44]	; 0x2c
    c32c:	e5da      	b.n	bee4 <_dtoa_r+0x194>
    c32e:	425b      	negs	r3, r3
    c330:	9305      	str	r3, [sp, #20]
    c332:	2300      	movs	r3, #0
    c334:	9302      	str	r3, [sp, #8]
    c336:	e5ca      	b.n	bece <_dtoa_r+0x17e>
    c338:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    c33a:	9d05      	ldr	r5, [sp, #20]
    c33c:	9e09      	ldr	r6, [sp, #36]	; 0x24
    c33e:	e705      	b.n	c14c <_dtoa_r+0x3fc>
    c340:	f1c3 0820 	rsb	r8, r3, #32
    c344:	fa0a f008 	lsl.w	r0, sl, r8
    c348:	e573      	b.n	be32 <_dtoa_r+0xe2>
    c34a:	900c      	str	r0, [sp, #48]	; 0x30
    c34c:	e5b8      	b.n	bec0 <_dtoa_r+0x170>
    c34e:	bf00      	nop
    c350:	40240000 	.word	0x40240000
    c354:	2300      	movs	r3, #0
    c356:	9309      	str	r3, [sp, #36]	; 0x24
    c358:	9b04      	ldr	r3, [sp, #16]
    c35a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    c35c:	4413      	add	r3, r2
    c35e:	930d      	str	r3, [sp, #52]	; 0x34
    c360:	3301      	adds	r3, #1
    c362:	2b00      	cmp	r3, #0
    c364:	9306      	str	r3, [sp, #24]
    c366:	f340 8283 	ble.w	c870 <_dtoa_r+0xb20>
    c36a:	9c06      	ldr	r4, [sp, #24]
    c36c:	4626      	mov	r6, r4
    c36e:	2100      	movs	r1, #0
    c370:	2e17      	cmp	r6, #23
    c372:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    c376:	d90b      	bls.n	c390 <_dtoa_r+0x640>
    c378:	2201      	movs	r2, #1
    c37a:	2304      	movs	r3, #4
    c37c:	005b      	lsls	r3, r3, #1
    c37e:	f103 0014 	add.w	r0, r3, #20
    c382:	42b0      	cmp	r0, r6
    c384:	4611      	mov	r1, r2
    c386:	f102 0201 	add.w	r2, r2, #1
    c38a:	d9f7      	bls.n	c37c <_dtoa_r+0x62c>
    c38c:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    c390:	4648      	mov	r0, r9
    c392:	f000 fdb5 	bl	cf00 <_Balloc>
    c396:	2c0e      	cmp	r4, #14
    c398:	9007      	str	r0, [sp, #28]
    c39a:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    c39e:	f63f ade0 	bhi.w	bf62 <_dtoa_r+0x212>
    c3a2:	2d00      	cmp	r5, #0
    c3a4:	f43f addd 	beq.w	bf62 <_dtoa_r+0x212>
    c3a8:	9904      	ldr	r1, [sp, #16]
    c3aa:	4657      	mov	r7, sl
    c3ac:	46d8      	mov	r8, fp
    c3ae:	2900      	cmp	r1, #0
    c3b0:	e9cd 780e 	strd	r7, r8, [sp, #56]	; 0x38
    c3b4:	f340 8292 	ble.w	c8dc <_dtoa_r+0xb8c>
    c3b8:	4b91      	ldr	r3, [pc, #580]	; (c600 <_dtoa_r+0x8b0>)
    c3ba:	f001 020f 	and.w	r2, r1, #15
    c3be:	110e      	asrs	r6, r1, #4
    c3c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c3c4:	06f0      	lsls	r0, r6, #27
    c3c6:	e9d3 4500 	ldrd	r4, r5, [r3]
    c3ca:	f140 824c 	bpl.w	c866 <_dtoa_r+0xb16>
    c3ce:	4b8d      	ldr	r3, [pc, #564]	; (c604 <_dtoa_r+0x8b4>)
    c3d0:	4650      	mov	r0, sl
    c3d2:	4659      	mov	r1, fp
    c3d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
    c3d8:	f7fc fc60 	bl	8c9c <__aeabi_ddiv>
    c3dc:	f006 060f 	and.w	r6, r6, #15
    c3e0:	4682      	mov	sl, r0
    c3e2:	468b      	mov	fp, r1
    c3e4:	f04f 0803 	mov.w	r8, #3
    c3e8:	b186      	cbz	r6, c40c <_dtoa_r+0x6bc>
    c3ea:	4f86      	ldr	r7, [pc, #536]	; (c604 <_dtoa_r+0x8b4>)
    c3ec:	07f1      	lsls	r1, r6, #31
    c3ee:	d509      	bpl.n	c404 <_dtoa_r+0x6b4>
    c3f0:	4620      	mov	r0, r4
    c3f2:	4629      	mov	r1, r5
    c3f4:	e9d7 2300 	ldrd	r2, r3, [r7]
    c3f8:	f7fc fb26 	bl	8a48 <__aeabi_dmul>
    c3fc:	f108 0801 	add.w	r8, r8, #1
    c400:	4604      	mov	r4, r0
    c402:	460d      	mov	r5, r1
    c404:	1076      	asrs	r6, r6, #1
    c406:	f107 0708 	add.w	r7, r7, #8
    c40a:	d1ef      	bne.n	c3ec <_dtoa_r+0x69c>
    c40c:	4622      	mov	r2, r4
    c40e:	462b      	mov	r3, r5
    c410:	4650      	mov	r0, sl
    c412:	4659      	mov	r1, fp
    c414:	f7fc fc42 	bl	8c9c <__aeabi_ddiv>
    c418:	4606      	mov	r6, r0
    c41a:	460f      	mov	r7, r1
    c41c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c41e:	b143      	cbz	r3, c432 <_dtoa_r+0x6e2>
    c420:	2200      	movs	r2, #0
    c422:	4b79      	ldr	r3, [pc, #484]	; (c608 <_dtoa_r+0x8b8>)
    c424:	4630      	mov	r0, r6
    c426:	4639      	mov	r1, r7
    c428:	f7fc fd80 	bl	8f2c <__aeabi_dcmplt>
    c42c:	2800      	cmp	r0, #0
    c42e:	f040 8320 	bne.w	ca72 <_dtoa_r+0xd22>
    c432:	4640      	mov	r0, r8
    c434:	f7fc faa2 	bl	897c <__aeabi_i2d>
    c438:	4632      	mov	r2, r6
    c43a:	463b      	mov	r3, r7
    c43c:	f7fc fb04 	bl	8a48 <__aeabi_dmul>
    c440:	4b72      	ldr	r3, [pc, #456]	; (c60c <_dtoa_r+0x8bc>)
    c442:	2200      	movs	r2, #0
    c444:	f7fc f94e 	bl	86e4 <__adddf3>
    c448:	9b06      	ldr	r3, [sp, #24]
    c44a:	4604      	mov	r4, r0
    c44c:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    c450:	2b00      	cmp	r3, #0
    c452:	f000 81df 	beq.w	c814 <_dtoa_r+0xac4>
    c456:	9b04      	ldr	r3, [sp, #16]
    c458:	f8dd 8018 	ldr.w	r8, [sp, #24]
    c45c:	9311      	str	r3, [sp, #68]	; 0x44
    c45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c460:	2b00      	cmp	r3, #0
    c462:	f000 8297 	beq.w	c994 <_dtoa_r+0xc44>
    c466:	4b66      	ldr	r3, [pc, #408]	; (c600 <_dtoa_r+0x8b0>)
    c468:	4969      	ldr	r1, [pc, #420]	; (c610 <_dtoa_r+0x8c0>)
    c46a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    c46e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
    c472:	2000      	movs	r0, #0
    c474:	f7fc fc12 	bl	8c9c <__aeabi_ddiv>
    c478:	4622      	mov	r2, r4
    c47a:	462b      	mov	r3, r5
    c47c:	f7fc f930 	bl	86e0 <__aeabi_dsub>
    c480:	4682      	mov	sl, r0
    c482:	468b      	mov	fp, r1
    c484:	4630      	mov	r0, r6
    c486:	4639      	mov	r1, r7
    c488:	f001 f928 	bl	d6dc <__aeabi_d2iz>
    c48c:	4604      	mov	r4, r0
    c48e:	f7fc fa75 	bl	897c <__aeabi_i2d>
    c492:	4602      	mov	r2, r0
    c494:	460b      	mov	r3, r1
    c496:	4630      	mov	r0, r6
    c498:	4639      	mov	r1, r7
    c49a:	f7fc f921 	bl	86e0 <__aeabi_dsub>
    c49e:	3430      	adds	r4, #48	; 0x30
    c4a0:	9d07      	ldr	r5, [sp, #28]
    c4a2:	b2e4      	uxtb	r4, r4
    c4a4:	4606      	mov	r6, r0
    c4a6:	460f      	mov	r7, r1
    c4a8:	702c      	strb	r4, [r5, #0]
    c4aa:	4602      	mov	r2, r0
    c4ac:	460b      	mov	r3, r1
    c4ae:	4650      	mov	r0, sl
    c4b0:	4659      	mov	r1, fp
    c4b2:	3501      	adds	r5, #1
    c4b4:	f7fc fd58 	bl	8f68 <__aeabi_dcmpgt>
    c4b8:	2800      	cmp	r0, #0
    c4ba:	d14c      	bne.n	c556 <_dtoa_r+0x806>
    c4bc:	4632      	mov	r2, r6
    c4be:	463b      	mov	r3, r7
    c4c0:	2000      	movs	r0, #0
    c4c2:	4951      	ldr	r1, [pc, #324]	; (c608 <_dtoa_r+0x8b8>)
    c4c4:	f7fc f90c 	bl	86e0 <__aeabi_dsub>
    c4c8:	4602      	mov	r2, r0
    c4ca:	460b      	mov	r3, r1
    c4cc:	4650      	mov	r0, sl
    c4ce:	4659      	mov	r1, fp
    c4d0:	f7fc fd4a 	bl	8f68 <__aeabi_dcmpgt>
    c4d4:	2800      	cmp	r0, #0
    c4d6:	f040 830d 	bne.w	caf4 <_dtoa_r+0xda4>
    c4da:	f1b8 0f01 	cmp.w	r8, #1
    c4de:	f340 81b3 	ble.w	c848 <_dtoa_r+0xaf8>
    c4e2:	9b07      	ldr	r3, [sp, #28]
    c4e4:	4498      	add	r8, r3
    c4e6:	e00d      	b.n	c504 <_dtoa_r+0x7b4>
    c4e8:	2000      	movs	r0, #0
    c4ea:	4947      	ldr	r1, [pc, #284]	; (c608 <_dtoa_r+0x8b8>)
    c4ec:	f7fc f8f8 	bl	86e0 <__aeabi_dsub>
    c4f0:	4652      	mov	r2, sl
    c4f2:	465b      	mov	r3, fp
    c4f4:	f7fc fd1a 	bl	8f2c <__aeabi_dcmplt>
    c4f8:	2800      	cmp	r0, #0
    c4fa:	f040 82fb 	bne.w	caf4 <_dtoa_r+0xda4>
    c4fe:	4545      	cmp	r5, r8
    c500:	f000 81a2 	beq.w	c848 <_dtoa_r+0xaf8>
    c504:	4650      	mov	r0, sl
    c506:	4659      	mov	r1, fp
    c508:	2200      	movs	r2, #0
    c50a:	4b42      	ldr	r3, [pc, #264]	; (c614 <_dtoa_r+0x8c4>)
    c50c:	f7fc fa9c 	bl	8a48 <__aeabi_dmul>
    c510:	2200      	movs	r2, #0
    c512:	4b40      	ldr	r3, [pc, #256]	; (c614 <_dtoa_r+0x8c4>)
    c514:	4682      	mov	sl, r0
    c516:	468b      	mov	fp, r1
    c518:	4630      	mov	r0, r6
    c51a:	4639      	mov	r1, r7
    c51c:	f7fc fa94 	bl	8a48 <__aeabi_dmul>
    c520:	460f      	mov	r7, r1
    c522:	4606      	mov	r6, r0
    c524:	f001 f8da 	bl	d6dc <__aeabi_d2iz>
    c528:	4604      	mov	r4, r0
    c52a:	f7fc fa27 	bl	897c <__aeabi_i2d>
    c52e:	4602      	mov	r2, r0
    c530:	460b      	mov	r3, r1
    c532:	4630      	mov	r0, r6
    c534:	4639      	mov	r1, r7
    c536:	f7fc f8d3 	bl	86e0 <__aeabi_dsub>
    c53a:	3430      	adds	r4, #48	; 0x30
    c53c:	b2e4      	uxtb	r4, r4
    c53e:	4652      	mov	r2, sl
    c540:	465b      	mov	r3, fp
    c542:	f805 4b01 	strb.w	r4, [r5], #1
    c546:	4606      	mov	r6, r0
    c548:	460f      	mov	r7, r1
    c54a:	f7fc fcef 	bl	8f2c <__aeabi_dcmplt>
    c54e:	4632      	mov	r2, r6
    c550:	463b      	mov	r3, r7
    c552:	2800      	cmp	r0, #0
    c554:	d0c8      	beq.n	c4e8 <_dtoa_r+0x798>
    c556:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c558:	9304      	str	r3, [sp, #16]
    c55a:	e5c4      	b.n	c0e6 <_dtoa_r+0x396>
    c55c:	2300      	movs	r3, #0
    c55e:	9309      	str	r3, [sp, #36]	; 0x24
    c560:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c562:	2b00      	cmp	r3, #0
    c564:	f340 8189 	ble.w	c87a <_dtoa_r+0xb2a>
    c568:	461e      	mov	r6, r3
    c56a:	461c      	mov	r4, r3
    c56c:	930d      	str	r3, [sp, #52]	; 0x34
    c56e:	9306      	str	r3, [sp, #24]
    c570:	e6fd      	b.n	c36e <_dtoa_r+0x61e>
    c572:	2301      	movs	r3, #1
    c574:	9309      	str	r3, [sp, #36]	; 0x24
    c576:	e7f3      	b.n	c560 <_dtoa_r+0x810>
    c578:	9408      	str	r4, [sp, #32]
    c57a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c57c:	9908      	ldr	r1, [sp, #32]
    c57e:	4648      	mov	r0, r9
    c580:	f000 fe1e 	bl	d1c0 <__pow5mult>
    c584:	4604      	mov	r4, r0
    c586:	e611      	b.n	c1ac <_dtoa_r+0x45c>
    c588:	9b06      	ldr	r3, [sp, #24]
    c58a:	2b00      	cmp	r3, #0
    c58c:	f73f acfc 	bgt.w	bf88 <_dtoa_r+0x238>
    c590:	f040 82da 	bne.w	cb48 <_dtoa_r+0xdf8>
    c594:	2200      	movs	r2, #0
    c596:	4b20      	ldr	r3, [pc, #128]	; (c618 <_dtoa_r+0x8c8>)
    c598:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    c59c:	f7fc fa54 	bl	8a48 <__aeabi_dmul>
    c5a0:	4652      	mov	r2, sl
    c5a2:	465b      	mov	r3, fp
    c5a4:	f7fc fcd6 	bl	8f54 <__aeabi_dcmpge>
    c5a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    c5ac:	4646      	mov	r6, r8
    c5ae:	2800      	cmp	r0, #0
    c5b0:	f000 80f2 	beq.w	c798 <_dtoa_r+0xa48>
    c5b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c5b6:	9d07      	ldr	r5, [sp, #28]
    c5b8:	43db      	mvns	r3, r3
    c5ba:	9304      	str	r3, [sp, #16]
    c5bc:	4641      	mov	r1, r8
    c5be:	4648      	mov	r0, r9
    c5c0:	f000 fcc4 	bl	cf4c <_Bfree>
    c5c4:	2e00      	cmp	r6, #0
    c5c6:	f43f ad8e 	beq.w	c0e6 <_dtoa_r+0x396>
    c5ca:	e68d      	b.n	c2e8 <_dtoa_r+0x598>
    c5cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c5ce:	2a00      	cmp	r2, #0
    c5d0:	f000 8241 	beq.w	ca56 <_dtoa_r+0xd06>
    c5d4:	f203 4333 	addw	r3, r3, #1075	; 0x433
    c5d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    c5da:	9d05      	ldr	r5, [sp, #20]
    c5dc:	e5ab      	b.n	c136 <_dtoa_r+0x3e6>
    c5de:	201c      	movs	r0, #28
    c5e0:	9b05      	ldr	r3, [sp, #20]
    c5e2:	4403      	add	r3, r0
    c5e4:	9305      	str	r3, [sp, #20]
    c5e6:	9b02      	ldr	r3, [sp, #8]
    c5e8:	4403      	add	r3, r0
    c5ea:	4405      	add	r5, r0
    c5ec:	9302      	str	r3, [sp, #8]
    c5ee:	e60e      	b.n	c20e <_dtoa_r+0x4be>
    c5f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c5f2:	2b01      	cmp	r3, #1
    c5f4:	f340 8282 	ble.w	cafc <_dtoa_r+0xdac>
    c5f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    c5fa:	2001      	movs	r0, #1
    c5fc:	e5f3      	b.n	c1e6 <_dtoa_r+0x496>
    c5fe:	bf00      	nop
    c600:	0001bb60 	.word	0x0001bb60
    c604:	0001bc38 	.word	0x0001bc38
    c608:	3ff00000 	.word	0x3ff00000
    c60c:	401c0000 	.word	0x401c0000
    c610:	3fe00000 	.word	0x3fe00000
    c614:	40240000 	.word	0x40240000
    c618:	40140000 	.word	0x40140000
    c61c:	4631      	mov	r1, r6
    c61e:	2300      	movs	r3, #0
    c620:	220a      	movs	r2, #10
    c622:	4648      	mov	r0, r9
    c624:	f000 fc9c 	bl	cf60 <__multadd>
    c628:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c62a:	2b00      	cmp	r3, #0
    c62c:	4606      	mov	r6, r0
    c62e:	f340 8297 	ble.w	cb60 <_dtoa_r+0xe10>
    c632:	9306      	str	r3, [sp, #24]
    c634:	2d00      	cmp	r5, #0
    c636:	dd05      	ble.n	c644 <_dtoa_r+0x8f4>
    c638:	4631      	mov	r1, r6
    c63a:	462a      	mov	r2, r5
    c63c:	4648      	mov	r0, r9
    c63e:	f000 fe0f 	bl	d260 <__lshift>
    c642:	4606      	mov	r6, r0
    c644:	2f00      	cmp	r7, #0
    c646:	f040 817c 	bne.w	c942 <_dtoa_r+0xbf2>
    c64a:	9605      	str	r6, [sp, #20]
    c64c:	9b06      	ldr	r3, [sp, #24]
    c64e:	9a07      	ldr	r2, [sp, #28]
    c650:	f8dd b014 	ldr.w	fp, [sp, #20]
    c654:	3b01      	subs	r3, #1
    c656:	18d3      	adds	r3, r2, r3
    c658:	9308      	str	r3, [sp, #32]
    c65a:	f00a 0301 	and.w	r3, sl, #1
    c65e:	9309      	str	r3, [sp, #36]	; 0x24
    c660:	4617      	mov	r7, r2
    c662:	46c2      	mov	sl, r8
    c664:	4651      	mov	r1, sl
    c666:	4620      	mov	r0, r4
    c668:	f7ff fadc 	bl	bc24 <quorem>
    c66c:	4631      	mov	r1, r6
    c66e:	4605      	mov	r5, r0
    c670:	4620      	mov	r0, r4
    c672:	f000 fe4d 	bl	d310 <__mcmp>
    c676:	465a      	mov	r2, fp
    c678:	9002      	str	r0, [sp, #8]
    c67a:	4651      	mov	r1, sl
    c67c:	4648      	mov	r0, r9
    c67e:	f000 fe67 	bl	d350 <__mdiff>
    c682:	68c2      	ldr	r2, [r0, #12]
    c684:	4680      	mov	r8, r0
    c686:	f105 0330 	add.w	r3, r5, #48	; 0x30
    c68a:	2a00      	cmp	r2, #0
    c68c:	d149      	bne.n	c722 <_dtoa_r+0x9d2>
    c68e:	4601      	mov	r1, r0
    c690:	4620      	mov	r0, r4
    c692:	9306      	str	r3, [sp, #24]
    c694:	f000 fe3c 	bl	d310 <__mcmp>
    c698:	4641      	mov	r1, r8
    c69a:	9005      	str	r0, [sp, #20]
    c69c:	4648      	mov	r0, r9
    c69e:	f000 fc55 	bl	cf4c <_Bfree>
    c6a2:	9a05      	ldr	r2, [sp, #20]
    c6a4:	9b06      	ldr	r3, [sp, #24]
    c6a6:	b92a      	cbnz	r2, c6b4 <_dtoa_r+0x964>
    c6a8:	9920      	ldr	r1, [sp, #128]	; 0x80
    c6aa:	b919      	cbnz	r1, c6b4 <_dtoa_r+0x964>
    c6ac:	9909      	ldr	r1, [sp, #36]	; 0x24
    c6ae:	2900      	cmp	r1, #0
    c6b0:	f000 8236 	beq.w	cb20 <_dtoa_r+0xdd0>
    c6b4:	9902      	ldr	r1, [sp, #8]
    c6b6:	2900      	cmp	r1, #0
    c6b8:	f2c0 80e4 	blt.w	c884 <_dtoa_r+0xb34>
    c6bc:	d105      	bne.n	c6ca <_dtoa_r+0x97a>
    c6be:	9920      	ldr	r1, [sp, #128]	; 0x80
    c6c0:	b919      	cbnz	r1, c6ca <_dtoa_r+0x97a>
    c6c2:	9909      	ldr	r1, [sp, #36]	; 0x24
    c6c4:	2900      	cmp	r1, #0
    c6c6:	f000 80dd 	beq.w	c884 <_dtoa_r+0xb34>
    c6ca:	2a00      	cmp	r2, #0
    c6cc:	f300 814d 	bgt.w	c96a <_dtoa_r+0xc1a>
    c6d0:	9a08      	ldr	r2, [sp, #32]
    c6d2:	703b      	strb	r3, [r7, #0]
    c6d4:	f107 0801 	add.w	r8, r7, #1
    c6d8:	4297      	cmp	r7, r2
    c6da:	4645      	mov	r5, r8
    c6dc:	f000 8154 	beq.w	c988 <_dtoa_r+0xc38>
    c6e0:	4621      	mov	r1, r4
    c6e2:	2300      	movs	r3, #0
    c6e4:	220a      	movs	r2, #10
    c6e6:	4648      	mov	r0, r9
    c6e8:	f000 fc3a 	bl	cf60 <__multadd>
    c6ec:	455e      	cmp	r6, fp
    c6ee:	4604      	mov	r4, r0
    c6f0:	4631      	mov	r1, r6
    c6f2:	f04f 0300 	mov.w	r3, #0
    c6f6:	f04f 020a 	mov.w	r2, #10
    c6fa:	4648      	mov	r0, r9
    c6fc:	d00b      	beq.n	c716 <_dtoa_r+0x9c6>
    c6fe:	f000 fc2f 	bl	cf60 <__multadd>
    c702:	4659      	mov	r1, fp
    c704:	4606      	mov	r6, r0
    c706:	2300      	movs	r3, #0
    c708:	220a      	movs	r2, #10
    c70a:	4648      	mov	r0, r9
    c70c:	f000 fc28 	bl	cf60 <__multadd>
    c710:	4647      	mov	r7, r8
    c712:	4683      	mov	fp, r0
    c714:	e7a6      	b.n	c664 <_dtoa_r+0x914>
    c716:	f000 fc23 	bl	cf60 <__multadd>
    c71a:	4647      	mov	r7, r8
    c71c:	4606      	mov	r6, r0
    c71e:	4683      	mov	fp, r0
    c720:	e7a0      	b.n	c664 <_dtoa_r+0x914>
    c722:	4601      	mov	r1, r0
    c724:	4648      	mov	r0, r9
    c726:	9305      	str	r3, [sp, #20]
    c728:	f000 fc10 	bl	cf4c <_Bfree>
    c72c:	2201      	movs	r2, #1
    c72e:	9b05      	ldr	r3, [sp, #20]
    c730:	e7c0      	b.n	c6b4 <_dtoa_r+0x964>
    c732:	4641      	mov	r1, r8
    c734:	4620      	mov	r0, r4
    c736:	f000 fdeb 	bl	d310 <__mcmp>
    c73a:	2800      	cmp	r0, #0
    c73c:	f6bf ad7d 	bge.w	c23a <_dtoa_r+0x4ea>
    c740:	4621      	mov	r1, r4
    c742:	9c04      	ldr	r4, [sp, #16]
    c744:	2300      	movs	r3, #0
    c746:	3c01      	subs	r4, #1
    c748:	220a      	movs	r2, #10
    c74a:	4648      	mov	r0, r9
    c74c:	9404      	str	r4, [sp, #16]
    c74e:	f000 fc07 	bl	cf60 <__multadd>
    c752:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c754:	4604      	mov	r4, r0
    c756:	2b00      	cmp	r3, #0
    c758:	f47f af60 	bne.w	c61c <_dtoa_r+0x8cc>
    c75c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c75e:	2b00      	cmp	r3, #0
    c760:	f340 81f6 	ble.w	cb50 <_dtoa_r+0xe00>
    c764:	9306      	str	r3, [sp, #24]
    c766:	e570      	b.n	c24a <_dtoa_r+0x4fa>
    c768:	9c08      	ldr	r4, [sp, #32]
    c76a:	e51f      	b.n	c1ac <_dtoa_r+0x45c>
    c76c:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c76e:	2b02      	cmp	r3, #2
    c770:	f77f ad67 	ble.w	c242 <_dtoa_r+0x4f2>
    c774:	9b06      	ldr	r3, [sp, #24]
    c776:	2b00      	cmp	r3, #0
    c778:	f040 8179 	bne.w	ca6e <_dtoa_r+0xd1e>
    c77c:	4641      	mov	r1, r8
    c77e:	2205      	movs	r2, #5
    c780:	4648      	mov	r0, r9
    c782:	f000 fbed 	bl	cf60 <__multadd>
    c786:	4601      	mov	r1, r0
    c788:	4680      	mov	r8, r0
    c78a:	4620      	mov	r0, r4
    c78c:	f000 fdc0 	bl	d310 <__mcmp>
    c790:	2800      	cmp	r0, #0
    c792:	9408      	str	r4, [sp, #32]
    c794:	f77f af0e 	ble.w	c5b4 <_dtoa_r+0x864>
    c798:	9a04      	ldr	r2, [sp, #16]
    c79a:	9907      	ldr	r1, [sp, #28]
    c79c:	2331      	movs	r3, #49	; 0x31
    c79e:	3201      	adds	r2, #1
    c7a0:	9204      	str	r2, [sp, #16]
    c7a2:	700b      	strb	r3, [r1, #0]
    c7a4:	1c4d      	adds	r5, r1, #1
    c7a6:	e709      	b.n	c5bc <_dtoa_r+0x86c>
    c7a8:	9a04      	ldr	r2, [sp, #16]
    c7aa:	3201      	adds	r2, #1
    c7ac:	9204      	str	r2, [sp, #16]
    c7ae:	9a07      	ldr	r2, [sp, #28]
    c7b0:	2331      	movs	r3, #49	; 0x31
    c7b2:	7013      	strb	r3, [r2, #0]
    c7b4:	e588      	b.n	c2c8 <_dtoa_r+0x578>
    c7b6:	2301      	movs	r3, #1
    c7b8:	9309      	str	r3, [sp, #36]	; 0x24
    c7ba:	e5cd      	b.n	c358 <_dtoa_r+0x608>
    c7bc:	f8dd 9014 	ldr.w	r9, [sp, #20]
    c7c0:	e491      	b.n	c0e6 <_dtoa_r+0x396>
    c7c2:	f1ba 0f00 	cmp.w	sl, #0
    c7c6:	f47f ad04 	bne.w	c1d2 <_dtoa_r+0x482>
    c7ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
    c7ce:	2b00      	cmp	r3, #0
    c7d0:	f040 813f 	bne.w	ca52 <_dtoa_r+0xd02>
    c7d4:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
    c7d8:	0d3f      	lsrs	r7, r7, #20
    c7da:	053f      	lsls	r7, r7, #20
    c7dc:	b137      	cbz	r7, c7ec <_dtoa_r+0xa9c>
    c7de:	9b05      	ldr	r3, [sp, #20]
    c7e0:	3301      	adds	r3, #1
    c7e2:	9305      	str	r3, [sp, #20]
    c7e4:	9b02      	ldr	r3, [sp, #8]
    c7e6:	3301      	adds	r3, #1
    c7e8:	9302      	str	r3, [sp, #8]
    c7ea:	2701      	movs	r7, #1
    c7ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7ee:	2001      	movs	r0, #1
    c7f0:	2b00      	cmp	r3, #0
    c7f2:	f43f acf8 	beq.w	c1e6 <_dtoa_r+0x496>
    c7f6:	e4ed      	b.n	c1d4 <_dtoa_r+0x484>
    c7f8:	4640      	mov	r0, r8
    c7fa:	f7fc f8bf 	bl	897c <__aeabi_i2d>
    c7fe:	4632      	mov	r2, r6
    c800:	463b      	mov	r3, r7
    c802:	f7fc f921 	bl	8a48 <__aeabi_dmul>
    c806:	2200      	movs	r2, #0
    c808:	4bbf      	ldr	r3, [pc, #764]	; (cb08 <_dtoa_r+0xdb8>)
    c80a:	f7fb ff6b 	bl	86e4 <__adddf3>
    c80e:	4604      	mov	r4, r0
    c810:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    c814:	4630      	mov	r0, r6
    c816:	4639      	mov	r1, r7
    c818:	2200      	movs	r2, #0
    c81a:	4bbc      	ldr	r3, [pc, #752]	; (cb0c <_dtoa_r+0xdbc>)
    c81c:	f7fb ff60 	bl	86e0 <__aeabi_dsub>
    c820:	4622      	mov	r2, r4
    c822:	462b      	mov	r3, r5
    c824:	4606      	mov	r6, r0
    c826:	460f      	mov	r7, r1
    c828:	f7fc fb9e 	bl	8f68 <__aeabi_dcmpgt>
    c82c:	4680      	mov	r8, r0
    c82e:	2800      	cmp	r0, #0
    c830:	f040 8105 	bne.w	ca3e <_dtoa_r+0xcee>
    c834:	4622      	mov	r2, r4
    c836:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
    c83a:	4630      	mov	r0, r6
    c83c:	4639      	mov	r1, r7
    c83e:	f7fc fb75 	bl	8f2c <__aeabi_dcmplt>
    c842:	b108      	cbz	r0, c848 <_dtoa_r+0xaf8>
    c844:	4646      	mov	r6, r8
    c846:	e6b5      	b.n	c5b4 <_dtoa_r+0x864>
    c848:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    c84c:	f7ff bb89 	b.w	bf62 <_dtoa_r+0x212>
    c850:	9807      	ldr	r0, [sp, #28]
    c852:	f7ff baae 	b.w	bdb2 <_dtoa_r+0x62>
    c856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    c85a:	970a      	str	r7, [sp, #40]	; 0x28
    c85c:	1afb      	subs	r3, r7, r3
    c85e:	441a      	add	r2, r3
    c860:	920b      	str	r2, [sp, #44]	; 0x2c
    c862:	2700      	movs	r7, #0
    c864:	e461      	b.n	c12a <_dtoa_r+0x3da>
    c866:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    c86a:	f04f 0802 	mov.w	r8, #2
    c86e:	e5bb      	b.n	c3e8 <_dtoa_r+0x698>
    c870:	461c      	mov	r4, r3
    c872:	2100      	movs	r1, #0
    c874:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
    c878:	e58a      	b.n	c390 <_dtoa_r+0x640>
    c87a:	2401      	movs	r4, #1
    c87c:	9421      	str	r4, [sp, #132]	; 0x84
    c87e:	940d      	str	r4, [sp, #52]	; 0x34
    c880:	9406      	str	r4, [sp, #24]
    c882:	e7f6      	b.n	c872 <_dtoa_r+0xb22>
    c884:	2a00      	cmp	r2, #0
    c886:	46d0      	mov	r8, sl
    c888:	f8cd b014 	str.w	fp, [sp, #20]
    c88c:	469a      	mov	sl, r3
    c88e:	dd11      	ble.n	c8b4 <_dtoa_r+0xb64>
    c890:	4621      	mov	r1, r4
    c892:	2201      	movs	r2, #1
    c894:	4648      	mov	r0, r9
    c896:	f000 fce3 	bl	d260 <__lshift>
    c89a:	4641      	mov	r1, r8
    c89c:	4604      	mov	r4, r0
    c89e:	f000 fd37 	bl	d310 <__mcmp>
    c8a2:	2800      	cmp	r0, #0
    c8a4:	f340 8149 	ble.w	cb3a <_dtoa_r+0xdea>
    c8a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
    c8ac:	f000 8106 	beq.w	cabc <_dtoa_r+0xd6c>
    c8b0:	f105 0a31 	add.w	sl, r5, #49	; 0x31
    c8b4:	46b3      	mov	fp, r6
    c8b6:	f887 a000 	strb.w	sl, [r7]
    c8ba:	1c7d      	adds	r5, r7, #1
    c8bc:	9e05      	ldr	r6, [sp, #20]
    c8be:	9408      	str	r4, [sp, #32]
    c8c0:	e502      	b.n	c2c8 <_dtoa_r+0x578>
    c8c2:	d104      	bne.n	c8ce <_dtoa_r+0xb7e>
    c8c4:	f01a 0f01 	tst.w	sl, #1
    c8c8:	d001      	beq.n	c8ce <_dtoa_r+0xb7e>
    c8ca:	e4ed      	b.n	c2a8 <_dtoa_r+0x558>
    c8cc:	4615      	mov	r5, r2
    c8ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    c8d2:	2b30      	cmp	r3, #48	; 0x30
    c8d4:	f105 32ff 	add.w	r2, r5, #4294967295
    c8d8:	d0f8      	beq.n	c8cc <_dtoa_r+0xb7c>
    c8da:	e4f5      	b.n	c2c8 <_dtoa_r+0x578>
    c8dc:	9b04      	ldr	r3, [sp, #16]
    c8de:	425c      	negs	r4, r3
    c8e0:	2c00      	cmp	r4, #0
    c8e2:	f000 80bf 	beq.w	ca64 <_dtoa_r+0xd14>
    c8e6:	4b8a      	ldr	r3, [pc, #552]	; (cb10 <_dtoa_r+0xdc0>)
    c8e8:	f004 020f 	and.w	r2, r4, #15
    c8ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    c8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    c8f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    c8f8:	f7fc f8a6 	bl	8a48 <__aeabi_dmul>
    c8fc:	1124      	asrs	r4, r4, #4
    c8fe:	4606      	mov	r6, r0
    c900:	460f      	mov	r7, r1
    c902:	f000 812a 	beq.w	cb5a <_dtoa_r+0xe0a>
    c906:	4d83      	ldr	r5, [pc, #524]	; (cb14 <_dtoa_r+0xdc4>)
    c908:	f04f 0802 	mov.w	r8, #2
    c90c:	07e2      	lsls	r2, r4, #31
    c90e:	d509      	bpl.n	c924 <_dtoa_r+0xbd4>
    c910:	4630      	mov	r0, r6
    c912:	4639      	mov	r1, r7
    c914:	e9d5 2300 	ldrd	r2, r3, [r5]
    c918:	f7fc f896 	bl	8a48 <__aeabi_dmul>
    c91c:	f108 0801 	add.w	r8, r8, #1
    c920:	4606      	mov	r6, r0
    c922:	460f      	mov	r7, r1
    c924:	1064      	asrs	r4, r4, #1
    c926:	f105 0508 	add.w	r5, r5, #8
    c92a:	d1ef      	bne.n	c90c <_dtoa_r+0xbbc>
    c92c:	e576      	b.n	c41c <_dtoa_r+0x6cc>
    c92e:	9907      	ldr	r1, [sp, #28]
    c930:	2230      	movs	r2, #48	; 0x30
    c932:	700a      	strb	r2, [r1, #0]
    c934:	9a04      	ldr	r2, [sp, #16]
    c936:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    c93a:	3201      	adds	r2, #1
    c93c:	9204      	str	r2, [sp, #16]
    c93e:	f7ff bbd0 	b.w	c0e2 <_dtoa_r+0x392>
    c942:	6871      	ldr	r1, [r6, #4]
    c944:	4648      	mov	r0, r9
    c946:	f000 fadb 	bl	cf00 <_Balloc>
    c94a:	6933      	ldr	r3, [r6, #16]
    c94c:	1c9a      	adds	r2, r3, #2
    c94e:	4605      	mov	r5, r0
    c950:	0092      	lsls	r2, r2, #2
    c952:	f106 010c 	add.w	r1, r6, #12
    c956:	300c      	adds	r0, #12
    c958:	f7fa f8b6 	bl	6ac8 <memcpy>
    c95c:	4629      	mov	r1, r5
    c95e:	2201      	movs	r2, #1
    c960:	4648      	mov	r0, r9
    c962:	f000 fc7d 	bl	d260 <__lshift>
    c966:	9005      	str	r0, [sp, #20]
    c968:	e670      	b.n	c64c <_dtoa_r+0x8fc>
    c96a:	2b39      	cmp	r3, #57	; 0x39
    c96c:	f8cd b014 	str.w	fp, [sp, #20]
    c970:	46d0      	mov	r8, sl
    c972:	f000 80a3 	beq.w	cabc <_dtoa_r+0xd6c>
    c976:	f103 0a01 	add.w	sl, r3, #1
    c97a:	46b3      	mov	fp, r6
    c97c:	f887 a000 	strb.w	sl, [r7]
    c980:	1c7d      	adds	r5, r7, #1
    c982:	9e05      	ldr	r6, [sp, #20]
    c984:	9408      	str	r4, [sp, #32]
    c986:	e49f      	b.n	c2c8 <_dtoa_r+0x578>
    c988:	465a      	mov	r2, fp
    c98a:	46d0      	mov	r8, sl
    c98c:	46b3      	mov	fp, r6
    c98e:	469a      	mov	sl, r3
    c990:	4616      	mov	r6, r2
    c992:	e47d      	b.n	c290 <_dtoa_r+0x540>
    c994:	495e      	ldr	r1, [pc, #376]	; (cb10 <_dtoa_r+0xdc0>)
    c996:	f108 3aff 	add.w	sl, r8, #4294967295
    c99a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
    c99e:	4622      	mov	r2, r4
    c9a0:	462b      	mov	r3, r5
    c9a2:	e9d1 0100 	ldrd	r0, r1, [r1]
    c9a6:	f7fc f84f 	bl	8a48 <__aeabi_dmul>
    c9aa:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
    c9ae:	4639      	mov	r1, r7
    c9b0:	4630      	mov	r0, r6
    c9b2:	f000 fe93 	bl	d6dc <__aeabi_d2iz>
    c9b6:	4604      	mov	r4, r0
    c9b8:	f7fb ffe0 	bl	897c <__aeabi_i2d>
    c9bc:	4602      	mov	r2, r0
    c9be:	460b      	mov	r3, r1
    c9c0:	4630      	mov	r0, r6
    c9c2:	4639      	mov	r1, r7
    c9c4:	f7fb fe8c 	bl	86e0 <__aeabi_dsub>
    c9c8:	9a07      	ldr	r2, [sp, #28]
    c9ca:	3430      	adds	r4, #48	; 0x30
    c9cc:	f1b8 0f01 	cmp.w	r8, #1
    c9d0:	4606      	mov	r6, r0
    c9d2:	460f      	mov	r7, r1
    c9d4:	7014      	strb	r4, [r2, #0]
    c9d6:	f102 0501 	add.w	r5, r2, #1
    c9da:	d01e      	beq.n	ca1a <_dtoa_r+0xcca>
    c9dc:	9b07      	ldr	r3, [sp, #28]
    c9de:	eb03 0b08 	add.w	fp, r3, r8
    c9e2:	46a8      	mov	r8, r5
    c9e4:	2200      	movs	r2, #0
    c9e6:	4b4c      	ldr	r3, [pc, #304]	; (cb18 <_dtoa_r+0xdc8>)
    c9e8:	4630      	mov	r0, r6
    c9ea:	4639      	mov	r1, r7
    c9ec:	f7fc f82c 	bl	8a48 <__aeabi_dmul>
    c9f0:	460f      	mov	r7, r1
    c9f2:	4606      	mov	r6, r0
    c9f4:	f000 fe72 	bl	d6dc <__aeabi_d2iz>
    c9f8:	4604      	mov	r4, r0
    c9fa:	f7fb ffbf 	bl	897c <__aeabi_i2d>
    c9fe:	3430      	adds	r4, #48	; 0x30
    ca00:	4602      	mov	r2, r0
    ca02:	460b      	mov	r3, r1
    ca04:	4630      	mov	r0, r6
    ca06:	4639      	mov	r1, r7
    ca08:	f7fb fe6a 	bl	86e0 <__aeabi_dsub>
    ca0c:	f808 4b01 	strb.w	r4, [r8], #1
    ca10:	45c3      	cmp	fp, r8
    ca12:	4606      	mov	r6, r0
    ca14:	460f      	mov	r7, r1
    ca16:	d1e5      	bne.n	c9e4 <_dtoa_r+0xc94>
    ca18:	4455      	add	r5, sl
    ca1a:	2200      	movs	r2, #0
    ca1c:	4b3f      	ldr	r3, [pc, #252]	; (cb1c <_dtoa_r+0xdcc>)
    ca1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
    ca22:	f7fb fe5f 	bl	86e4 <__adddf3>
    ca26:	4632      	mov	r2, r6
    ca28:	463b      	mov	r3, r7
    ca2a:	f7fc fa7f 	bl	8f2c <__aeabi_dcmplt>
    ca2e:	2800      	cmp	r0, #0
    ca30:	d04c      	beq.n	cacc <_dtoa_r+0xd7c>
    ca32:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ca34:	9304      	str	r3, [sp, #16]
    ca36:	f815 4c01 	ldrb.w	r4, [r5, #-1]
    ca3a:	f7ff bb46 	b.w	c0ca <_dtoa_r+0x37a>
    ca3e:	f04f 0800 	mov.w	r8, #0
    ca42:	4646      	mov	r6, r8
    ca44:	e6a8      	b.n	c798 <_dtoa_r+0xa48>
    ca46:	9b05      	ldr	r3, [sp, #20]
    ca48:	9a06      	ldr	r2, [sp, #24]
    ca4a:	1a9d      	subs	r5, r3, r2
    ca4c:	2300      	movs	r3, #0
    ca4e:	f7ff bb72 	b.w	c136 <_dtoa_r+0x3e6>
    ca52:	2700      	movs	r7, #0
    ca54:	e6ca      	b.n	c7ec <_dtoa_r+0xa9c>
    ca56:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ca58:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    ca5a:	9d05      	ldr	r5, [sp, #20]
    ca5c:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    ca60:	f7ff bb69 	b.w	c136 <_dtoa_r+0x3e6>
    ca64:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
    ca68:	f04f 0802 	mov.w	r8, #2
    ca6c:	e4d6      	b.n	c41c <_dtoa_r+0x6cc>
    ca6e:	9408      	str	r4, [sp, #32]
    ca70:	e5a0      	b.n	c5b4 <_dtoa_r+0x864>
    ca72:	9b06      	ldr	r3, [sp, #24]
    ca74:	2b00      	cmp	r3, #0
    ca76:	f43f aebf 	beq.w	c7f8 <_dtoa_r+0xaa8>
    ca7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ca7c:	2b00      	cmp	r3, #0
    ca7e:	f77f aee3 	ble.w	c848 <_dtoa_r+0xaf8>
    ca82:	2200      	movs	r2, #0
    ca84:	4b24      	ldr	r3, [pc, #144]	; (cb18 <_dtoa_r+0xdc8>)
    ca86:	4630      	mov	r0, r6
    ca88:	4639      	mov	r1, r7
    ca8a:	f7fb ffdd 	bl	8a48 <__aeabi_dmul>
    ca8e:	4606      	mov	r6, r0
    ca90:	460f      	mov	r7, r1
    ca92:	f108 0001 	add.w	r0, r8, #1
    ca96:	f7fb ff71 	bl	897c <__aeabi_i2d>
    ca9a:	4632      	mov	r2, r6
    ca9c:	463b      	mov	r3, r7
    ca9e:	f7fb ffd3 	bl	8a48 <__aeabi_dmul>
    caa2:	2200      	movs	r2, #0
    caa4:	4b18      	ldr	r3, [pc, #96]	; (cb08 <_dtoa_r+0xdb8>)
    caa6:	f7fb fe1d 	bl	86e4 <__adddf3>
    caaa:	9a04      	ldr	r2, [sp, #16]
    caac:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
    cab0:	3a01      	subs	r2, #1
    cab2:	4604      	mov	r4, r0
    cab4:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
    cab8:	9211      	str	r2, [sp, #68]	; 0x44
    caba:	e4d0      	b.n	c45e <_dtoa_r+0x70e>
    cabc:	2239      	movs	r2, #57	; 0x39
    cabe:	46b3      	mov	fp, r6
    cac0:	9408      	str	r4, [sp, #32]
    cac2:	9e05      	ldr	r6, [sp, #20]
    cac4:	703a      	strb	r2, [r7, #0]
    cac6:	1c7d      	adds	r5, r7, #1
    cac8:	f7ff bbf0 	b.w	c2ac <_dtoa_r+0x55c>
    cacc:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
    cad0:	2000      	movs	r0, #0
    cad2:	4912      	ldr	r1, [pc, #72]	; (cb1c <_dtoa_r+0xdcc>)
    cad4:	f7fb fe04 	bl	86e0 <__aeabi_dsub>
    cad8:	4632      	mov	r2, r6
    cada:	463b      	mov	r3, r7
    cadc:	f7fc fa44 	bl	8f68 <__aeabi_dcmpgt>
    cae0:	b908      	cbnz	r0, cae6 <_dtoa_r+0xd96>
    cae2:	e6b1      	b.n	c848 <_dtoa_r+0xaf8>
    cae4:	4615      	mov	r5, r2
    cae6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    caea:	2b30      	cmp	r3, #48	; 0x30
    caec:	f105 32ff 	add.w	r2, r5, #4294967295
    caf0:	d0f8      	beq.n	cae4 <_dtoa_r+0xd94>
    caf2:	e530      	b.n	c556 <_dtoa_r+0x806>
    caf4:	9b11      	ldr	r3, [sp, #68]	; 0x44
    caf6:	9304      	str	r3, [sp, #16]
    caf8:	f7ff bae7 	b.w	c0ca <_dtoa_r+0x37a>
    cafc:	f1ba 0f00 	cmp.w	sl, #0
    cb00:	f47f ad7a 	bne.w	c5f8 <_dtoa_r+0x8a8>
    cb04:	e661      	b.n	c7ca <_dtoa_r+0xa7a>
    cb06:	bf00      	nop
    cb08:	401c0000 	.word	0x401c0000
    cb0c:	40140000 	.word	0x40140000
    cb10:	0001bb60 	.word	0x0001bb60
    cb14:	0001bc38 	.word	0x0001bc38
    cb18:	40240000 	.word	0x40240000
    cb1c:	3fe00000 	.word	0x3fe00000
    cb20:	2b39      	cmp	r3, #57	; 0x39
    cb22:	f8cd b014 	str.w	fp, [sp, #20]
    cb26:	46d0      	mov	r8, sl
    cb28:	f8dd b008 	ldr.w	fp, [sp, #8]
    cb2c:	469a      	mov	sl, r3
    cb2e:	d0c5      	beq.n	cabc <_dtoa_r+0xd6c>
    cb30:	f1bb 0f00 	cmp.w	fp, #0
    cb34:	f73f aebc 	bgt.w	c8b0 <_dtoa_r+0xb60>
    cb38:	e6bc      	b.n	c8b4 <_dtoa_r+0xb64>
    cb3a:	f47f aebb 	bne.w	c8b4 <_dtoa_r+0xb64>
    cb3e:	f01a 0f01 	tst.w	sl, #1
    cb42:	f43f aeb7 	beq.w	c8b4 <_dtoa_r+0xb64>
    cb46:	e6af      	b.n	c8a8 <_dtoa_r+0xb58>
    cb48:	f04f 0800 	mov.w	r8, #0
    cb4c:	4646      	mov	r6, r8
    cb4e:	e531      	b.n	c5b4 <_dtoa_r+0x864>
    cb50:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cb52:	2b02      	cmp	r3, #2
    cb54:	dc21      	bgt.n	cb9a <_dtoa_r+0xe4a>
    cb56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb58:	e604      	b.n	c764 <_dtoa_r+0xa14>
    cb5a:	f04f 0802 	mov.w	r8, #2
    cb5e:	e45d      	b.n	c41c <_dtoa_r+0x6cc>
    cb60:	9b20      	ldr	r3, [sp, #128]	; 0x80
    cb62:	2b02      	cmp	r3, #2
    cb64:	dc19      	bgt.n	cb9a <_dtoa_r+0xe4a>
    cb66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb68:	e563      	b.n	c632 <_dtoa_r+0x8e2>
    cb6a:	2400      	movs	r4, #0
    cb6c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
    cb70:	4621      	mov	r1, r4
    cb72:	4648      	mov	r0, r9
    cb74:	f000 f9c4 	bl	cf00 <_Balloc>
    cb78:	f04f 33ff 	mov.w	r3, #4294967295
    cb7c:	9306      	str	r3, [sp, #24]
    cb7e:	930d      	str	r3, [sp, #52]	; 0x34
    cb80:	2301      	movs	r3, #1
    cb82:	9007      	str	r0, [sp, #28]
    cb84:	9421      	str	r4, [sp, #132]	; 0x84
    cb86:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
    cb8a:	9309      	str	r3, [sp, #36]	; 0x24
    cb8c:	f7ff b9e9 	b.w	bf62 <_dtoa_r+0x212>
    cb90:	f43f ab3d 	beq.w	c20e <_dtoa_r+0x4be>
    cb94:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    cb98:	e522      	b.n	c5e0 <_dtoa_r+0x890>
    cb9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cb9c:	9306      	str	r3, [sp, #24]
    cb9e:	e5e9      	b.n	c774 <_dtoa_r+0xa24>
    cba0:	2501      	movs	r5, #1
    cba2:	f7ff b9a8 	b.w	bef6 <_dtoa_r+0x1a6>
    cba6:	bf00      	nop

0000cba8 <__libc_fini_array>:
    cba8:	b538      	push	{r3, r4, r5, lr}
    cbaa:	4d07      	ldr	r5, [pc, #28]	; (cbc8 <__libc_fini_array+0x20>)
    cbac:	4c07      	ldr	r4, [pc, #28]	; (cbcc <__libc_fini_array+0x24>)
    cbae:	1b2c      	subs	r4, r5, r4
    cbb0:	10a4      	asrs	r4, r4, #2
    cbb2:	d005      	beq.n	cbc0 <__libc_fini_array+0x18>
    cbb4:	3c01      	subs	r4, #1
    cbb6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    cbba:	4798      	blx	r3
    cbbc:	2c00      	cmp	r4, #0
    cbbe:	d1f9      	bne.n	cbb4 <__libc_fini_array+0xc>
    cbc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    cbc4:	f00f b858 	b.w	1bc78 <__init_array_end>
	...

0000cbd0 <_malloc_trim_r>:
    cbd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cbd2:	4f23      	ldr	r7, [pc, #140]	; (cc60 <_malloc_trim_r+0x90>)
    cbd4:	460c      	mov	r4, r1
    cbd6:	4606      	mov	r6, r0
    cbd8:	f7fd f8c4 	bl	9d64 <__malloc_lock>
    cbdc:	68bb      	ldr	r3, [r7, #8]
    cbde:	685d      	ldr	r5, [r3, #4]
    cbe0:	f025 0503 	bic.w	r5, r5, #3
    cbe4:	1b29      	subs	r1, r5, r4
    cbe6:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    cbea:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    cbee:	f021 010f 	bic.w	r1, r1, #15
    cbf2:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    cbf6:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    cbfa:	db07      	blt.n	cc0c <_malloc_trim_r+0x3c>
    cbfc:	2100      	movs	r1, #0
    cbfe:	4630      	mov	r0, r6
    cc00:	f7fd faac 	bl	a15c <_sbrk_r>
    cc04:	68bb      	ldr	r3, [r7, #8]
    cc06:	442b      	add	r3, r5
    cc08:	4298      	cmp	r0, r3
    cc0a:	d004      	beq.n	cc16 <_malloc_trim_r+0x46>
    cc0c:	4630      	mov	r0, r6
    cc0e:	f7fd f8ab 	bl	9d68 <__malloc_unlock>
    cc12:	2000      	movs	r0, #0
    cc14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc16:	4261      	negs	r1, r4
    cc18:	4630      	mov	r0, r6
    cc1a:	f7fd fa9f 	bl	a15c <_sbrk_r>
    cc1e:	3001      	adds	r0, #1
    cc20:	d00d      	beq.n	cc3e <_malloc_trim_r+0x6e>
    cc22:	4b10      	ldr	r3, [pc, #64]	; (cc64 <_malloc_trim_r+0x94>)
    cc24:	68ba      	ldr	r2, [r7, #8]
    cc26:	6819      	ldr	r1, [r3, #0]
    cc28:	1b2d      	subs	r5, r5, r4
    cc2a:	f045 0501 	orr.w	r5, r5, #1
    cc2e:	4630      	mov	r0, r6
    cc30:	1b09      	subs	r1, r1, r4
    cc32:	6055      	str	r5, [r2, #4]
    cc34:	6019      	str	r1, [r3, #0]
    cc36:	f7fd f897 	bl	9d68 <__malloc_unlock>
    cc3a:	2001      	movs	r0, #1
    cc3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cc3e:	2100      	movs	r1, #0
    cc40:	4630      	mov	r0, r6
    cc42:	f7fd fa8b 	bl	a15c <_sbrk_r>
    cc46:	68ba      	ldr	r2, [r7, #8]
    cc48:	1a83      	subs	r3, r0, r2
    cc4a:	2b0f      	cmp	r3, #15
    cc4c:	ddde      	ble.n	cc0c <_malloc_trim_r+0x3c>
    cc4e:	4c06      	ldr	r4, [pc, #24]	; (cc68 <_malloc_trim_r+0x98>)
    cc50:	4904      	ldr	r1, [pc, #16]	; (cc64 <_malloc_trim_r+0x94>)
    cc52:	6824      	ldr	r4, [r4, #0]
    cc54:	f043 0301 	orr.w	r3, r3, #1
    cc58:	1b00      	subs	r0, r0, r4
    cc5a:	6053      	str	r3, [r2, #4]
    cc5c:	6008      	str	r0, [r1, #0]
    cc5e:	e7d5      	b.n	cc0c <_malloc_trim_r+0x3c>
    cc60:	1fff90e0 	.word	0x1fff90e0
    cc64:	1fff9854 	.word	0x1fff9854
    cc68:	1fff94ec 	.word	0x1fff94ec

0000cc6c <_free_r>:
    cc6c:	2900      	cmp	r1, #0
    cc6e:	d045      	beq.n	ccfc <_free_r+0x90>
    cc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc74:	460d      	mov	r5, r1
    cc76:	4680      	mov	r8, r0
    cc78:	f7fd f874 	bl	9d64 <__malloc_lock>
    cc7c:	f855 7c04 	ldr.w	r7, [r5, #-4]
    cc80:	496a      	ldr	r1, [pc, #424]	; (ce2c <_free_r+0x1c0>)
    cc82:	f027 0301 	bic.w	r3, r7, #1
    cc86:	f1a5 0408 	sub.w	r4, r5, #8
    cc8a:	18e2      	adds	r2, r4, r3
    cc8c:	688e      	ldr	r6, [r1, #8]
    cc8e:	6850      	ldr	r0, [r2, #4]
    cc90:	42b2      	cmp	r2, r6
    cc92:	f020 0003 	bic.w	r0, r0, #3
    cc96:	d062      	beq.n	cd5e <_free_r+0xf2>
    cc98:	07fe      	lsls	r6, r7, #31
    cc9a:	6050      	str	r0, [r2, #4]
    cc9c:	d40b      	bmi.n	ccb6 <_free_r+0x4a>
    cc9e:	f855 7c08 	ldr.w	r7, [r5, #-8]
    cca2:	1be4      	subs	r4, r4, r7
    cca4:	f101 0e08 	add.w	lr, r1, #8
    cca8:	68a5      	ldr	r5, [r4, #8]
    ccaa:	4575      	cmp	r5, lr
    ccac:	443b      	add	r3, r7
    ccae:	d06f      	beq.n	cd90 <_free_r+0x124>
    ccb0:	68e7      	ldr	r7, [r4, #12]
    ccb2:	60ef      	str	r7, [r5, #12]
    ccb4:	60bd      	str	r5, [r7, #8]
    ccb6:	1815      	adds	r5, r2, r0
    ccb8:	686d      	ldr	r5, [r5, #4]
    ccba:	07ed      	lsls	r5, r5, #31
    ccbc:	d542      	bpl.n	cd44 <_free_r+0xd8>
    ccbe:	f043 0201 	orr.w	r2, r3, #1
    ccc2:	6062      	str	r2, [r4, #4]
    ccc4:	50e3      	str	r3, [r4, r3]
    ccc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ccca:	d218      	bcs.n	ccfe <_free_r+0x92>
    cccc:	08db      	lsrs	r3, r3, #3
    ccce:	1c5a      	adds	r2, r3, #1
    ccd0:	684d      	ldr	r5, [r1, #4]
    ccd2:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    ccd6:	60a7      	str	r7, [r4, #8]
    ccd8:	2001      	movs	r0, #1
    ccda:	109b      	asrs	r3, r3, #2
    ccdc:	fa00 f303 	lsl.w	r3, r0, r3
    cce0:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    cce4:	431d      	orrs	r5, r3
    cce6:	3808      	subs	r0, #8
    cce8:	60e0      	str	r0, [r4, #12]
    ccea:	604d      	str	r5, [r1, #4]
    ccec:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    ccf0:	60fc      	str	r4, [r7, #12]
    ccf2:	4640      	mov	r0, r8
    ccf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ccf8:	f7fd b836 	b.w	9d68 <__malloc_unlock>
    ccfc:	4770      	bx	lr
    ccfe:	0a5a      	lsrs	r2, r3, #9
    cd00:	2a04      	cmp	r2, #4
    cd02:	d853      	bhi.n	cdac <_free_r+0x140>
    cd04:	099a      	lsrs	r2, r3, #6
    cd06:	f102 0739 	add.w	r7, r2, #57	; 0x39
    cd0a:	007f      	lsls	r7, r7, #1
    cd0c:	f102 0538 	add.w	r5, r2, #56	; 0x38
    cd10:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    cd14:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    cd18:	4944      	ldr	r1, [pc, #272]	; (ce2c <_free_r+0x1c0>)
    cd1a:	3808      	subs	r0, #8
    cd1c:	4290      	cmp	r0, r2
    cd1e:	d04d      	beq.n	cdbc <_free_r+0x150>
    cd20:	6851      	ldr	r1, [r2, #4]
    cd22:	f021 0103 	bic.w	r1, r1, #3
    cd26:	428b      	cmp	r3, r1
    cd28:	d202      	bcs.n	cd30 <_free_r+0xc4>
    cd2a:	6892      	ldr	r2, [r2, #8]
    cd2c:	4290      	cmp	r0, r2
    cd2e:	d1f7      	bne.n	cd20 <_free_r+0xb4>
    cd30:	68d0      	ldr	r0, [r2, #12]
    cd32:	60e0      	str	r0, [r4, #12]
    cd34:	60a2      	str	r2, [r4, #8]
    cd36:	6084      	str	r4, [r0, #8]
    cd38:	60d4      	str	r4, [r2, #12]
    cd3a:	4640      	mov	r0, r8
    cd3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    cd40:	f7fd b812 	b.w	9d68 <__malloc_unlock>
    cd44:	6895      	ldr	r5, [r2, #8]
    cd46:	4f3a      	ldr	r7, [pc, #232]	; (ce30 <_free_r+0x1c4>)
    cd48:	42bd      	cmp	r5, r7
    cd4a:	4403      	add	r3, r0
    cd4c:	d03f      	beq.n	cdce <_free_r+0x162>
    cd4e:	68d0      	ldr	r0, [r2, #12]
    cd50:	60e8      	str	r0, [r5, #12]
    cd52:	f043 0201 	orr.w	r2, r3, #1
    cd56:	6085      	str	r5, [r0, #8]
    cd58:	6062      	str	r2, [r4, #4]
    cd5a:	50e3      	str	r3, [r4, r3]
    cd5c:	e7b3      	b.n	ccc6 <_free_r+0x5a>
    cd5e:	07ff      	lsls	r7, r7, #31
    cd60:	4403      	add	r3, r0
    cd62:	d407      	bmi.n	cd74 <_free_r+0x108>
    cd64:	f855 2c08 	ldr.w	r2, [r5, #-8]
    cd68:	1aa4      	subs	r4, r4, r2
    cd6a:	4413      	add	r3, r2
    cd6c:	68a0      	ldr	r0, [r4, #8]
    cd6e:	68e2      	ldr	r2, [r4, #12]
    cd70:	60c2      	str	r2, [r0, #12]
    cd72:	6090      	str	r0, [r2, #8]
    cd74:	4a2f      	ldr	r2, [pc, #188]	; (ce34 <_free_r+0x1c8>)
    cd76:	6812      	ldr	r2, [r2, #0]
    cd78:	f043 0001 	orr.w	r0, r3, #1
    cd7c:	4293      	cmp	r3, r2
    cd7e:	6060      	str	r0, [r4, #4]
    cd80:	608c      	str	r4, [r1, #8]
    cd82:	d3b6      	bcc.n	ccf2 <_free_r+0x86>
    cd84:	4b2c      	ldr	r3, [pc, #176]	; (ce38 <_free_r+0x1cc>)
    cd86:	4640      	mov	r0, r8
    cd88:	6819      	ldr	r1, [r3, #0]
    cd8a:	f7ff ff21 	bl	cbd0 <_malloc_trim_r>
    cd8e:	e7b0      	b.n	ccf2 <_free_r+0x86>
    cd90:	1811      	adds	r1, r2, r0
    cd92:	6849      	ldr	r1, [r1, #4]
    cd94:	07c9      	lsls	r1, r1, #31
    cd96:	d444      	bmi.n	ce22 <_free_r+0x1b6>
    cd98:	6891      	ldr	r1, [r2, #8]
    cd9a:	68d2      	ldr	r2, [r2, #12]
    cd9c:	60ca      	str	r2, [r1, #12]
    cd9e:	4403      	add	r3, r0
    cda0:	f043 0001 	orr.w	r0, r3, #1
    cda4:	6091      	str	r1, [r2, #8]
    cda6:	6060      	str	r0, [r4, #4]
    cda8:	50e3      	str	r3, [r4, r3]
    cdaa:	e7a2      	b.n	ccf2 <_free_r+0x86>
    cdac:	2a14      	cmp	r2, #20
    cdae:	d817      	bhi.n	cde0 <_free_r+0x174>
    cdb0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    cdb4:	007f      	lsls	r7, r7, #1
    cdb6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    cdba:	e7a9      	b.n	cd10 <_free_r+0xa4>
    cdbc:	10aa      	asrs	r2, r5, #2
    cdbe:	684b      	ldr	r3, [r1, #4]
    cdc0:	2501      	movs	r5, #1
    cdc2:	fa05 f202 	lsl.w	r2, r5, r2
    cdc6:	4313      	orrs	r3, r2
    cdc8:	604b      	str	r3, [r1, #4]
    cdca:	4602      	mov	r2, r0
    cdcc:	e7b1      	b.n	cd32 <_free_r+0xc6>
    cdce:	f043 0201 	orr.w	r2, r3, #1
    cdd2:	614c      	str	r4, [r1, #20]
    cdd4:	610c      	str	r4, [r1, #16]
    cdd6:	60e5      	str	r5, [r4, #12]
    cdd8:	60a5      	str	r5, [r4, #8]
    cdda:	6062      	str	r2, [r4, #4]
    cddc:	50e3      	str	r3, [r4, r3]
    cdde:	e788      	b.n	ccf2 <_free_r+0x86>
    cde0:	2a54      	cmp	r2, #84	; 0x54
    cde2:	d806      	bhi.n	cdf2 <_free_r+0x186>
    cde4:	0b1a      	lsrs	r2, r3, #12
    cde6:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    cdea:	007f      	lsls	r7, r7, #1
    cdec:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    cdf0:	e78e      	b.n	cd10 <_free_r+0xa4>
    cdf2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    cdf6:	d806      	bhi.n	ce06 <_free_r+0x19a>
    cdf8:	0bda      	lsrs	r2, r3, #15
    cdfa:	f102 0778 	add.w	r7, r2, #120	; 0x78
    cdfe:	007f      	lsls	r7, r7, #1
    ce00:	f102 0577 	add.w	r5, r2, #119	; 0x77
    ce04:	e784      	b.n	cd10 <_free_r+0xa4>
    ce06:	f240 5054 	movw	r0, #1364	; 0x554
    ce0a:	4282      	cmp	r2, r0
    ce0c:	d806      	bhi.n	ce1c <_free_r+0x1b0>
    ce0e:	0c9a      	lsrs	r2, r3, #18
    ce10:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    ce14:	007f      	lsls	r7, r7, #1
    ce16:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    ce1a:	e779      	b.n	cd10 <_free_r+0xa4>
    ce1c:	27fe      	movs	r7, #254	; 0xfe
    ce1e:	257e      	movs	r5, #126	; 0x7e
    ce20:	e776      	b.n	cd10 <_free_r+0xa4>
    ce22:	f043 0201 	orr.w	r2, r3, #1
    ce26:	6062      	str	r2, [r4, #4]
    ce28:	50e3      	str	r3, [r4, r3]
    ce2a:	e762      	b.n	ccf2 <_free_r+0x86>
    ce2c:	1fff90e0 	.word	0x1fff90e0
    ce30:	1fff90e8 	.word	0x1fff90e8
    ce34:	1fff94e8 	.word	0x1fff94e8
    ce38:	1fff9850 	.word	0x1fff9850

0000ce3c <_localeconv_r>:
    ce3c:	4a04      	ldr	r2, [pc, #16]	; (ce50 <_localeconv_r+0x14>)
    ce3e:	4b05      	ldr	r3, [pc, #20]	; (ce54 <_localeconv_r+0x18>)
    ce40:	6812      	ldr	r2, [r2, #0]
    ce42:	6b50      	ldr	r0, [r2, #52]	; 0x34
    ce44:	2800      	cmp	r0, #0
    ce46:	bf08      	it	eq
    ce48:	4618      	moveq	r0, r3
    ce4a:	30f0      	adds	r0, #240	; 0xf0
    ce4c:	4770      	bx	lr
    ce4e:	bf00      	nop
    ce50:	1fff8f70 	.word	0x1fff8f70
    ce54:	1fff8f74 	.word	0x1fff8f74
    ce58:	ffffffff 	.word	0xffffffff
    ce5c:	ffffffff 	.word	0xffffffff

0000ce60 <memchr>:
    ce60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    ce64:	2a10      	cmp	r2, #16
    ce66:	db2b      	blt.n	cec0 <memchr+0x60>
    ce68:	f010 0f07 	tst.w	r0, #7
    ce6c:	d008      	beq.n	ce80 <memchr+0x20>
    ce6e:	f810 3b01 	ldrb.w	r3, [r0], #1
    ce72:	3a01      	subs	r2, #1
    ce74:	428b      	cmp	r3, r1
    ce76:	d02d      	beq.n	ced4 <memchr+0x74>
    ce78:	f010 0f07 	tst.w	r0, #7
    ce7c:	b342      	cbz	r2, ced0 <memchr+0x70>
    ce7e:	d1f6      	bne.n	ce6e <memchr+0xe>
    ce80:	b4f0      	push	{r4, r5, r6, r7}
    ce82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    ce86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    ce8a:	f022 0407 	bic.w	r4, r2, #7
    ce8e:	f07f 0700 	mvns.w	r7, #0
    ce92:	2300      	movs	r3, #0
    ce94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    ce98:	3c08      	subs	r4, #8
    ce9a:	ea85 0501 	eor.w	r5, r5, r1
    ce9e:	ea86 0601 	eor.w	r6, r6, r1
    cea2:	fa85 f547 	uadd8	r5, r5, r7
    cea6:	faa3 f587 	sel	r5, r3, r7
    ceaa:	fa86 f647 	uadd8	r6, r6, r7
    ceae:	faa5 f687 	sel	r6, r5, r7
    ceb2:	b98e      	cbnz	r6, ced8 <memchr+0x78>
    ceb4:	d1ee      	bne.n	ce94 <memchr+0x34>
    ceb6:	bcf0      	pop	{r4, r5, r6, r7}
    ceb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    cebc:	f002 0207 	and.w	r2, r2, #7
    cec0:	b132      	cbz	r2, ced0 <memchr+0x70>
    cec2:	f810 3b01 	ldrb.w	r3, [r0], #1
    cec6:	3a01      	subs	r2, #1
    cec8:	ea83 0301 	eor.w	r3, r3, r1
    cecc:	b113      	cbz	r3, ced4 <memchr+0x74>
    cece:	d1f8      	bne.n	cec2 <memchr+0x62>
    ced0:	2000      	movs	r0, #0
    ced2:	4770      	bx	lr
    ced4:	3801      	subs	r0, #1
    ced6:	4770      	bx	lr
    ced8:	2d00      	cmp	r5, #0
    ceda:	bf06      	itte	eq
    cedc:	4635      	moveq	r5, r6
    cede:	3803      	subeq	r0, #3
    cee0:	3807      	subne	r0, #7
    cee2:	f015 0f01 	tst.w	r5, #1
    cee6:	d107      	bne.n	cef8 <memchr+0x98>
    cee8:	3001      	adds	r0, #1
    ceea:	f415 7f80 	tst.w	r5, #256	; 0x100
    ceee:	bf02      	ittt	eq
    cef0:	3001      	addeq	r0, #1
    cef2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    cef6:	3001      	addeq	r0, #1
    cef8:	bcf0      	pop	{r4, r5, r6, r7}
    cefa:	3801      	subs	r0, #1
    cefc:	4770      	bx	lr
    cefe:	bf00      	nop

0000cf00 <_Balloc>:
    cf00:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    cf02:	b570      	push	{r4, r5, r6, lr}
    cf04:	4605      	mov	r5, r0
    cf06:	460c      	mov	r4, r1
    cf08:	b14b      	cbz	r3, cf1e <_Balloc+0x1e>
    cf0a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    cf0e:	b180      	cbz	r0, cf32 <_Balloc+0x32>
    cf10:	6802      	ldr	r2, [r0, #0]
    cf12:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    cf16:	2300      	movs	r3, #0
    cf18:	6103      	str	r3, [r0, #16]
    cf1a:	60c3      	str	r3, [r0, #12]
    cf1c:	bd70      	pop	{r4, r5, r6, pc}
    cf1e:	2221      	movs	r2, #33	; 0x21
    cf20:	2104      	movs	r1, #4
    cf22:	f000 fbab 	bl	d67c <_calloc_r>
    cf26:	64e8      	str	r0, [r5, #76]	; 0x4c
    cf28:	4603      	mov	r3, r0
    cf2a:	2800      	cmp	r0, #0
    cf2c:	d1ed      	bne.n	cf0a <_Balloc+0xa>
    cf2e:	2000      	movs	r0, #0
    cf30:	bd70      	pop	{r4, r5, r6, pc}
    cf32:	2101      	movs	r1, #1
    cf34:	fa01 f604 	lsl.w	r6, r1, r4
    cf38:	1d72      	adds	r2, r6, #5
    cf3a:	4628      	mov	r0, r5
    cf3c:	0092      	lsls	r2, r2, #2
    cf3e:	f000 fb9d 	bl	d67c <_calloc_r>
    cf42:	2800      	cmp	r0, #0
    cf44:	d0f3      	beq.n	cf2e <_Balloc+0x2e>
    cf46:	6044      	str	r4, [r0, #4]
    cf48:	6086      	str	r6, [r0, #8]
    cf4a:	e7e4      	b.n	cf16 <_Balloc+0x16>

0000cf4c <_Bfree>:
    cf4c:	b131      	cbz	r1, cf5c <_Bfree+0x10>
    cf4e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    cf50:	684a      	ldr	r2, [r1, #4]
    cf52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    cf56:	6008      	str	r0, [r1, #0]
    cf58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    cf5c:	4770      	bx	lr
    cf5e:	bf00      	nop

0000cf60 <__multadd>:
    cf60:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf62:	690c      	ldr	r4, [r1, #16]
    cf64:	b083      	sub	sp, #12
    cf66:	460d      	mov	r5, r1
    cf68:	4606      	mov	r6, r0
    cf6a:	f101 0e14 	add.w	lr, r1, #20
    cf6e:	2700      	movs	r7, #0
    cf70:	f8de 0000 	ldr.w	r0, [lr]
    cf74:	b281      	uxth	r1, r0
    cf76:	fb02 3101 	mla	r1, r2, r1, r3
    cf7a:	0c0b      	lsrs	r3, r1, #16
    cf7c:	0c00      	lsrs	r0, r0, #16
    cf7e:	fb02 3300 	mla	r3, r2, r0, r3
    cf82:	b289      	uxth	r1, r1
    cf84:	3701      	adds	r7, #1
    cf86:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    cf8a:	42bc      	cmp	r4, r7
    cf8c:	f84e 1b04 	str.w	r1, [lr], #4
    cf90:	ea4f 4313 	mov.w	r3, r3, lsr #16
    cf94:	dcec      	bgt.n	cf70 <__multadd+0x10>
    cf96:	b13b      	cbz	r3, cfa8 <__multadd+0x48>
    cf98:	68aa      	ldr	r2, [r5, #8]
    cf9a:	4294      	cmp	r4, r2
    cf9c:	da07      	bge.n	cfae <__multadd+0x4e>
    cf9e:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    cfa2:	3401      	adds	r4, #1
    cfa4:	6153      	str	r3, [r2, #20]
    cfa6:	612c      	str	r4, [r5, #16]
    cfa8:	4628      	mov	r0, r5
    cfaa:	b003      	add	sp, #12
    cfac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cfae:	6869      	ldr	r1, [r5, #4]
    cfb0:	9301      	str	r3, [sp, #4]
    cfb2:	3101      	adds	r1, #1
    cfb4:	4630      	mov	r0, r6
    cfb6:	f7ff ffa3 	bl	cf00 <_Balloc>
    cfba:	692a      	ldr	r2, [r5, #16]
    cfbc:	3202      	adds	r2, #2
    cfbe:	f105 010c 	add.w	r1, r5, #12
    cfc2:	4607      	mov	r7, r0
    cfc4:	0092      	lsls	r2, r2, #2
    cfc6:	300c      	adds	r0, #12
    cfc8:	f7f9 fd7e 	bl	6ac8 <memcpy>
    cfcc:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    cfce:	6869      	ldr	r1, [r5, #4]
    cfd0:	9b01      	ldr	r3, [sp, #4]
    cfd2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    cfd6:	6028      	str	r0, [r5, #0]
    cfd8:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    cfdc:	463d      	mov	r5, r7
    cfde:	e7de      	b.n	cf9e <__multadd+0x3e>

0000cfe0 <__hi0bits>:
    cfe0:	0c03      	lsrs	r3, r0, #16
    cfe2:	041b      	lsls	r3, r3, #16
    cfe4:	b9b3      	cbnz	r3, d014 <__hi0bits+0x34>
    cfe6:	0400      	lsls	r0, r0, #16
    cfe8:	2310      	movs	r3, #16
    cfea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    cfee:	bf04      	itt	eq
    cff0:	0200      	lsleq	r0, r0, #8
    cff2:	3308      	addeq	r3, #8
    cff4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    cff8:	bf04      	itt	eq
    cffa:	0100      	lsleq	r0, r0, #4
    cffc:	3304      	addeq	r3, #4
    cffe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    d002:	bf04      	itt	eq
    d004:	0080      	lsleq	r0, r0, #2
    d006:	3302      	addeq	r3, #2
    d008:	2800      	cmp	r0, #0
    d00a:	db07      	blt.n	d01c <__hi0bits+0x3c>
    d00c:	0042      	lsls	r2, r0, #1
    d00e:	d403      	bmi.n	d018 <__hi0bits+0x38>
    d010:	2020      	movs	r0, #32
    d012:	4770      	bx	lr
    d014:	2300      	movs	r3, #0
    d016:	e7e8      	b.n	cfea <__hi0bits+0xa>
    d018:	1c58      	adds	r0, r3, #1
    d01a:	4770      	bx	lr
    d01c:	4618      	mov	r0, r3
    d01e:	4770      	bx	lr

0000d020 <__lo0bits>:
    d020:	6803      	ldr	r3, [r0, #0]
    d022:	f013 0207 	ands.w	r2, r3, #7
    d026:	d007      	beq.n	d038 <__lo0bits+0x18>
    d028:	07d9      	lsls	r1, r3, #31
    d02a:	d420      	bmi.n	d06e <__lo0bits+0x4e>
    d02c:	079a      	lsls	r2, r3, #30
    d02e:	d420      	bmi.n	d072 <__lo0bits+0x52>
    d030:	089b      	lsrs	r3, r3, #2
    d032:	6003      	str	r3, [r0, #0]
    d034:	2002      	movs	r0, #2
    d036:	4770      	bx	lr
    d038:	b299      	uxth	r1, r3
    d03a:	b909      	cbnz	r1, d040 <__lo0bits+0x20>
    d03c:	0c1b      	lsrs	r3, r3, #16
    d03e:	2210      	movs	r2, #16
    d040:	f013 0fff 	tst.w	r3, #255	; 0xff
    d044:	bf04      	itt	eq
    d046:	0a1b      	lsreq	r3, r3, #8
    d048:	3208      	addeq	r2, #8
    d04a:	0719      	lsls	r1, r3, #28
    d04c:	bf04      	itt	eq
    d04e:	091b      	lsreq	r3, r3, #4
    d050:	3204      	addeq	r2, #4
    d052:	0799      	lsls	r1, r3, #30
    d054:	bf04      	itt	eq
    d056:	089b      	lsreq	r3, r3, #2
    d058:	3202      	addeq	r2, #2
    d05a:	07d9      	lsls	r1, r3, #31
    d05c:	d404      	bmi.n	d068 <__lo0bits+0x48>
    d05e:	085b      	lsrs	r3, r3, #1
    d060:	d101      	bne.n	d066 <__lo0bits+0x46>
    d062:	2020      	movs	r0, #32
    d064:	4770      	bx	lr
    d066:	3201      	adds	r2, #1
    d068:	6003      	str	r3, [r0, #0]
    d06a:	4610      	mov	r0, r2
    d06c:	4770      	bx	lr
    d06e:	2000      	movs	r0, #0
    d070:	4770      	bx	lr
    d072:	085b      	lsrs	r3, r3, #1
    d074:	6003      	str	r3, [r0, #0]
    d076:	2001      	movs	r0, #1
    d078:	4770      	bx	lr
    d07a:	bf00      	nop

0000d07c <__i2b>:
    d07c:	b510      	push	{r4, lr}
    d07e:	460c      	mov	r4, r1
    d080:	2101      	movs	r1, #1
    d082:	f7ff ff3d 	bl	cf00 <_Balloc>
    d086:	2201      	movs	r2, #1
    d088:	6144      	str	r4, [r0, #20]
    d08a:	6102      	str	r2, [r0, #16]
    d08c:	bd10      	pop	{r4, pc}
    d08e:	bf00      	nop

0000d090 <__multiply>:
    d090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d094:	690d      	ldr	r5, [r1, #16]
    d096:	6917      	ldr	r7, [r2, #16]
    d098:	42bd      	cmp	r5, r7
    d09a:	b083      	sub	sp, #12
    d09c:	460c      	mov	r4, r1
    d09e:	4616      	mov	r6, r2
    d0a0:	da04      	bge.n	d0ac <__multiply+0x1c>
    d0a2:	462a      	mov	r2, r5
    d0a4:	4634      	mov	r4, r6
    d0a6:	463d      	mov	r5, r7
    d0a8:	460e      	mov	r6, r1
    d0aa:	4617      	mov	r7, r2
    d0ac:	68a3      	ldr	r3, [r4, #8]
    d0ae:	6861      	ldr	r1, [r4, #4]
    d0b0:	eb05 0807 	add.w	r8, r5, r7
    d0b4:	4598      	cmp	r8, r3
    d0b6:	bfc8      	it	gt
    d0b8:	3101      	addgt	r1, #1
    d0ba:	f7ff ff21 	bl	cf00 <_Balloc>
    d0be:	f100 0c14 	add.w	ip, r0, #20
    d0c2:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    d0c6:	45cc      	cmp	ip, r9
    d0c8:	9000      	str	r0, [sp, #0]
    d0ca:	d205      	bcs.n	d0d8 <__multiply+0x48>
    d0cc:	4663      	mov	r3, ip
    d0ce:	2100      	movs	r1, #0
    d0d0:	f843 1b04 	str.w	r1, [r3], #4
    d0d4:	4599      	cmp	r9, r3
    d0d6:	d8fb      	bhi.n	d0d0 <__multiply+0x40>
    d0d8:	f106 0214 	add.w	r2, r6, #20
    d0dc:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    d0e0:	f104 0314 	add.w	r3, r4, #20
    d0e4:	4552      	cmp	r2, sl
    d0e6:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    d0ea:	d254      	bcs.n	d196 <__multiply+0x106>
    d0ec:	f8cd 9004 	str.w	r9, [sp, #4]
    d0f0:	4699      	mov	r9, r3
    d0f2:	f852 3b04 	ldr.w	r3, [r2], #4
    d0f6:	fa1f fb83 	uxth.w	fp, r3
    d0fa:	f1bb 0f00 	cmp.w	fp, #0
    d0fe:	d020      	beq.n	d142 <__multiply+0xb2>
    d100:	2000      	movs	r0, #0
    d102:	464f      	mov	r7, r9
    d104:	4666      	mov	r6, ip
    d106:	4605      	mov	r5, r0
    d108:	e000      	b.n	d10c <__multiply+0x7c>
    d10a:	461e      	mov	r6, r3
    d10c:	f857 4b04 	ldr.w	r4, [r7], #4
    d110:	6830      	ldr	r0, [r6, #0]
    d112:	b2a1      	uxth	r1, r4
    d114:	b283      	uxth	r3, r0
    d116:	fb0b 3101 	mla	r1, fp, r1, r3
    d11a:	0c24      	lsrs	r4, r4, #16
    d11c:	0c00      	lsrs	r0, r0, #16
    d11e:	194b      	adds	r3, r1, r5
    d120:	fb0b 0004 	mla	r0, fp, r4, r0
    d124:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    d128:	b299      	uxth	r1, r3
    d12a:	4633      	mov	r3, r6
    d12c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    d130:	45be      	cmp	lr, r7
    d132:	ea4f 4510 	mov.w	r5, r0, lsr #16
    d136:	f843 1b04 	str.w	r1, [r3], #4
    d13a:	d8e6      	bhi.n	d10a <__multiply+0x7a>
    d13c:	6075      	str	r5, [r6, #4]
    d13e:	f852 3c04 	ldr.w	r3, [r2, #-4]
    d142:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    d146:	d020      	beq.n	d18a <__multiply+0xfa>
    d148:	f8dc 3000 	ldr.w	r3, [ip]
    d14c:	4667      	mov	r7, ip
    d14e:	4618      	mov	r0, r3
    d150:	464d      	mov	r5, r9
    d152:	2100      	movs	r1, #0
    d154:	e000      	b.n	d158 <__multiply+0xc8>
    d156:	4637      	mov	r7, r6
    d158:	882c      	ldrh	r4, [r5, #0]
    d15a:	0c00      	lsrs	r0, r0, #16
    d15c:	fb0b 0004 	mla	r0, fp, r4, r0
    d160:	4401      	add	r1, r0
    d162:	b29c      	uxth	r4, r3
    d164:	463e      	mov	r6, r7
    d166:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    d16a:	f846 3b04 	str.w	r3, [r6], #4
    d16e:	6878      	ldr	r0, [r7, #4]
    d170:	f855 4b04 	ldr.w	r4, [r5], #4
    d174:	b283      	uxth	r3, r0
    d176:	0c24      	lsrs	r4, r4, #16
    d178:	fb0b 3404 	mla	r4, fp, r4, r3
    d17c:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    d180:	45ae      	cmp	lr, r5
    d182:	ea4f 4113 	mov.w	r1, r3, lsr #16
    d186:	d8e6      	bhi.n	d156 <__multiply+0xc6>
    d188:	607b      	str	r3, [r7, #4]
    d18a:	4592      	cmp	sl, r2
    d18c:	f10c 0c04 	add.w	ip, ip, #4
    d190:	d8af      	bhi.n	d0f2 <__multiply+0x62>
    d192:	f8dd 9004 	ldr.w	r9, [sp, #4]
    d196:	f1b8 0f00 	cmp.w	r8, #0
    d19a:	dd0b      	ble.n	d1b4 <__multiply+0x124>
    d19c:	f859 3c04 	ldr.w	r3, [r9, #-4]
    d1a0:	f1a9 0904 	sub.w	r9, r9, #4
    d1a4:	b11b      	cbz	r3, d1ae <__multiply+0x11e>
    d1a6:	e005      	b.n	d1b4 <__multiply+0x124>
    d1a8:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    d1ac:	b913      	cbnz	r3, d1b4 <__multiply+0x124>
    d1ae:	f1b8 0801 	subs.w	r8, r8, #1
    d1b2:	d1f9      	bne.n	d1a8 <__multiply+0x118>
    d1b4:	9800      	ldr	r0, [sp, #0]
    d1b6:	f8c0 8010 	str.w	r8, [r0, #16]
    d1ba:	b003      	add	sp, #12
    d1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d1c0 <__pow5mult>:
    d1c0:	f012 0303 	ands.w	r3, r2, #3
    d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1c8:	4614      	mov	r4, r2
    d1ca:	4607      	mov	r7, r0
    d1cc:	d12e      	bne.n	d22c <__pow5mult+0x6c>
    d1ce:	460e      	mov	r6, r1
    d1d0:	10a4      	asrs	r4, r4, #2
    d1d2:	d01c      	beq.n	d20e <__pow5mult+0x4e>
    d1d4:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    d1d6:	b395      	cbz	r5, d23e <__pow5mult+0x7e>
    d1d8:	07e3      	lsls	r3, r4, #31
    d1da:	f04f 0800 	mov.w	r8, #0
    d1de:	d406      	bmi.n	d1ee <__pow5mult+0x2e>
    d1e0:	1064      	asrs	r4, r4, #1
    d1e2:	d014      	beq.n	d20e <__pow5mult+0x4e>
    d1e4:	6828      	ldr	r0, [r5, #0]
    d1e6:	b1a8      	cbz	r0, d214 <__pow5mult+0x54>
    d1e8:	4605      	mov	r5, r0
    d1ea:	07e3      	lsls	r3, r4, #31
    d1ec:	d5f8      	bpl.n	d1e0 <__pow5mult+0x20>
    d1ee:	462a      	mov	r2, r5
    d1f0:	4631      	mov	r1, r6
    d1f2:	4638      	mov	r0, r7
    d1f4:	f7ff ff4c 	bl	d090 <__multiply>
    d1f8:	b1b6      	cbz	r6, d228 <__pow5mult+0x68>
    d1fa:	6872      	ldr	r2, [r6, #4]
    d1fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    d1fe:	1064      	asrs	r4, r4, #1
    d200:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d204:	6031      	str	r1, [r6, #0]
    d206:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    d20a:	4606      	mov	r6, r0
    d20c:	d1ea      	bne.n	d1e4 <__pow5mult+0x24>
    d20e:	4630      	mov	r0, r6
    d210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d214:	462a      	mov	r2, r5
    d216:	4629      	mov	r1, r5
    d218:	4638      	mov	r0, r7
    d21a:	f7ff ff39 	bl	d090 <__multiply>
    d21e:	6028      	str	r0, [r5, #0]
    d220:	f8c0 8000 	str.w	r8, [r0]
    d224:	4605      	mov	r5, r0
    d226:	e7e0      	b.n	d1ea <__pow5mult+0x2a>
    d228:	4606      	mov	r6, r0
    d22a:	e7d9      	b.n	d1e0 <__pow5mult+0x20>
    d22c:	1e5a      	subs	r2, r3, #1
    d22e:	4d0b      	ldr	r5, [pc, #44]	; (d25c <__pow5mult+0x9c>)
    d230:	2300      	movs	r3, #0
    d232:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    d236:	f7ff fe93 	bl	cf60 <__multadd>
    d23a:	4606      	mov	r6, r0
    d23c:	e7c8      	b.n	d1d0 <__pow5mult+0x10>
    d23e:	2101      	movs	r1, #1
    d240:	4638      	mov	r0, r7
    d242:	f7ff fe5d 	bl	cf00 <_Balloc>
    d246:	f240 2171 	movw	r1, #625	; 0x271
    d24a:	2201      	movs	r2, #1
    d24c:	2300      	movs	r3, #0
    d24e:	6141      	str	r1, [r0, #20]
    d250:	6102      	str	r2, [r0, #16]
    d252:	4605      	mov	r5, r0
    d254:	64b8      	str	r0, [r7, #72]	; 0x48
    d256:	6003      	str	r3, [r0, #0]
    d258:	e7be      	b.n	d1d8 <__pow5mult+0x18>
    d25a:	bf00      	nop
    d25c:	0001bc28 	.word	0x0001bc28

0000d260 <__lshift>:
    d260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d264:	4691      	mov	r9, r2
    d266:	690a      	ldr	r2, [r1, #16]
    d268:	688b      	ldr	r3, [r1, #8]
    d26a:	ea4f 1469 	mov.w	r4, r9, asr #5
    d26e:	eb04 0802 	add.w	r8, r4, r2
    d272:	f108 0501 	add.w	r5, r8, #1
    d276:	429d      	cmp	r5, r3
    d278:	460e      	mov	r6, r1
    d27a:	4682      	mov	sl, r0
    d27c:	6849      	ldr	r1, [r1, #4]
    d27e:	dd04      	ble.n	d28a <__lshift+0x2a>
    d280:	005b      	lsls	r3, r3, #1
    d282:	429d      	cmp	r5, r3
    d284:	f101 0101 	add.w	r1, r1, #1
    d288:	dcfa      	bgt.n	d280 <__lshift+0x20>
    d28a:	4650      	mov	r0, sl
    d28c:	f7ff fe38 	bl	cf00 <_Balloc>
    d290:	2c00      	cmp	r4, #0
    d292:	f100 0214 	add.w	r2, r0, #20
    d296:	dd38      	ble.n	d30a <__lshift+0xaa>
    d298:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    d29c:	2100      	movs	r1, #0
    d29e:	f842 1b04 	str.w	r1, [r2], #4
    d2a2:	4293      	cmp	r3, r2
    d2a4:	d1fb      	bne.n	d29e <__lshift+0x3e>
    d2a6:	6934      	ldr	r4, [r6, #16]
    d2a8:	f106 0114 	add.w	r1, r6, #20
    d2ac:	f019 091f 	ands.w	r9, r9, #31
    d2b0:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    d2b4:	d021      	beq.n	d2fa <__lshift+0x9a>
    d2b6:	f1c9 0220 	rsb	r2, r9, #32
    d2ba:	2400      	movs	r4, #0
    d2bc:	680f      	ldr	r7, [r1, #0]
    d2be:	fa07 fc09 	lsl.w	ip, r7, r9
    d2c2:	ea4c 0404 	orr.w	r4, ip, r4
    d2c6:	469c      	mov	ip, r3
    d2c8:	f843 4b04 	str.w	r4, [r3], #4
    d2cc:	f851 4b04 	ldr.w	r4, [r1], #4
    d2d0:	458e      	cmp	lr, r1
    d2d2:	fa24 f402 	lsr.w	r4, r4, r2
    d2d6:	d8f1      	bhi.n	d2bc <__lshift+0x5c>
    d2d8:	f8cc 4004 	str.w	r4, [ip, #4]
    d2dc:	b10c      	cbz	r4, d2e2 <__lshift+0x82>
    d2de:	f108 0502 	add.w	r5, r8, #2
    d2e2:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    d2e6:	6872      	ldr	r2, [r6, #4]
    d2e8:	3d01      	subs	r5, #1
    d2ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    d2ee:	6105      	str	r5, [r0, #16]
    d2f0:	6031      	str	r1, [r6, #0]
    d2f2:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    d2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2fa:	3b04      	subs	r3, #4
    d2fc:	f851 2b04 	ldr.w	r2, [r1], #4
    d300:	f843 2f04 	str.w	r2, [r3, #4]!
    d304:	458e      	cmp	lr, r1
    d306:	d8f9      	bhi.n	d2fc <__lshift+0x9c>
    d308:	e7eb      	b.n	d2e2 <__lshift+0x82>
    d30a:	4613      	mov	r3, r2
    d30c:	e7cb      	b.n	d2a6 <__lshift+0x46>
    d30e:	bf00      	nop

0000d310 <__mcmp>:
    d310:	6902      	ldr	r2, [r0, #16]
    d312:	690b      	ldr	r3, [r1, #16]
    d314:	1ad2      	subs	r2, r2, r3
    d316:	d112      	bne.n	d33e <__mcmp+0x2e>
    d318:	009b      	lsls	r3, r3, #2
    d31a:	3014      	adds	r0, #20
    d31c:	3114      	adds	r1, #20
    d31e:	4419      	add	r1, r3
    d320:	b410      	push	{r4}
    d322:	4403      	add	r3, r0
    d324:	e001      	b.n	d32a <__mcmp+0x1a>
    d326:	4298      	cmp	r0, r3
    d328:	d20b      	bcs.n	d342 <__mcmp+0x32>
    d32a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    d32e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    d332:	4294      	cmp	r4, r2
    d334:	d0f7      	beq.n	d326 <__mcmp+0x16>
    d336:	d307      	bcc.n	d348 <__mcmp+0x38>
    d338:	2001      	movs	r0, #1
    d33a:	bc10      	pop	{r4}
    d33c:	4770      	bx	lr
    d33e:	4610      	mov	r0, r2
    d340:	4770      	bx	lr
    d342:	2000      	movs	r0, #0
    d344:	bc10      	pop	{r4}
    d346:	4770      	bx	lr
    d348:	f04f 30ff 	mov.w	r0, #4294967295
    d34c:	e7f5      	b.n	d33a <__mcmp+0x2a>
    d34e:	bf00      	nop

0000d350 <__mdiff>:
    d350:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d354:	690b      	ldr	r3, [r1, #16]
    d356:	460f      	mov	r7, r1
    d358:	6911      	ldr	r1, [r2, #16]
    d35a:	1a5b      	subs	r3, r3, r1
    d35c:	2b00      	cmp	r3, #0
    d35e:	4690      	mov	r8, r2
    d360:	d117      	bne.n	d392 <__mdiff+0x42>
    d362:	0089      	lsls	r1, r1, #2
    d364:	f107 0214 	add.w	r2, r7, #20
    d368:	f108 0514 	add.w	r5, r8, #20
    d36c:	1853      	adds	r3, r2, r1
    d36e:	4429      	add	r1, r5
    d370:	e001      	b.n	d376 <__mdiff+0x26>
    d372:	429a      	cmp	r2, r3
    d374:	d25e      	bcs.n	d434 <__mdiff+0xe4>
    d376:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    d37a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    d37e:	42a6      	cmp	r6, r4
    d380:	d0f7      	beq.n	d372 <__mdiff+0x22>
    d382:	d260      	bcs.n	d446 <__mdiff+0xf6>
    d384:	463b      	mov	r3, r7
    d386:	4614      	mov	r4, r2
    d388:	4647      	mov	r7, r8
    d38a:	f04f 0901 	mov.w	r9, #1
    d38e:	4698      	mov	r8, r3
    d390:	e006      	b.n	d3a0 <__mdiff+0x50>
    d392:	db5d      	blt.n	d450 <__mdiff+0x100>
    d394:	f107 0514 	add.w	r5, r7, #20
    d398:	f102 0414 	add.w	r4, r2, #20
    d39c:	f04f 0900 	mov.w	r9, #0
    d3a0:	6879      	ldr	r1, [r7, #4]
    d3a2:	f7ff fdad 	bl	cf00 <_Balloc>
    d3a6:	f8d8 3010 	ldr.w	r3, [r8, #16]
    d3aa:	693e      	ldr	r6, [r7, #16]
    d3ac:	f8c0 900c 	str.w	r9, [r0, #12]
    d3b0:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    d3b4:	46a6      	mov	lr, r4
    d3b6:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    d3ba:	f100 0414 	add.w	r4, r0, #20
    d3be:	2300      	movs	r3, #0
    d3c0:	f85e 1b04 	ldr.w	r1, [lr], #4
    d3c4:	f855 8b04 	ldr.w	r8, [r5], #4
    d3c8:	b28a      	uxth	r2, r1
    d3ca:	fa13 f388 	uxtah	r3, r3, r8
    d3ce:	0c09      	lsrs	r1, r1, #16
    d3d0:	1a9a      	subs	r2, r3, r2
    d3d2:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    d3d6:	eb03 4322 	add.w	r3, r3, r2, asr #16
    d3da:	b292      	uxth	r2, r2
    d3dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    d3e0:	45f4      	cmp	ip, lr
    d3e2:	f844 2b04 	str.w	r2, [r4], #4
    d3e6:	ea4f 4323 	mov.w	r3, r3, asr #16
    d3ea:	d8e9      	bhi.n	d3c0 <__mdiff+0x70>
    d3ec:	42af      	cmp	r7, r5
    d3ee:	d917      	bls.n	d420 <__mdiff+0xd0>
    d3f0:	46a4      	mov	ip, r4
    d3f2:	4629      	mov	r1, r5
    d3f4:	f851 eb04 	ldr.w	lr, [r1], #4
    d3f8:	fa13 f28e 	uxtah	r2, r3, lr
    d3fc:	1413      	asrs	r3, r2, #16
    d3fe:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    d402:	b292      	uxth	r2, r2
    d404:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    d408:	428f      	cmp	r7, r1
    d40a:	f84c 2b04 	str.w	r2, [ip], #4
    d40e:	ea4f 4323 	mov.w	r3, r3, asr #16
    d412:	d8ef      	bhi.n	d3f4 <__mdiff+0xa4>
    d414:	43ed      	mvns	r5, r5
    d416:	443d      	add	r5, r7
    d418:	f025 0503 	bic.w	r5, r5, #3
    d41c:	3504      	adds	r5, #4
    d41e:	442c      	add	r4, r5
    d420:	3c04      	subs	r4, #4
    d422:	b922      	cbnz	r2, d42e <__mdiff+0xde>
    d424:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    d428:	3e01      	subs	r6, #1
    d42a:	2b00      	cmp	r3, #0
    d42c:	d0fa      	beq.n	d424 <__mdiff+0xd4>
    d42e:	6106      	str	r6, [r0, #16]
    d430:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d434:	2100      	movs	r1, #0
    d436:	f7ff fd63 	bl	cf00 <_Balloc>
    d43a:	2201      	movs	r2, #1
    d43c:	2300      	movs	r3, #0
    d43e:	6102      	str	r2, [r0, #16]
    d440:	6143      	str	r3, [r0, #20]
    d442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d446:	462c      	mov	r4, r5
    d448:	f04f 0900 	mov.w	r9, #0
    d44c:	4615      	mov	r5, r2
    d44e:	e7a7      	b.n	d3a0 <__mdiff+0x50>
    d450:	463b      	mov	r3, r7
    d452:	f107 0414 	add.w	r4, r7, #20
    d456:	f108 0514 	add.w	r5, r8, #20
    d45a:	4647      	mov	r7, r8
    d45c:	f04f 0901 	mov.w	r9, #1
    d460:	4698      	mov	r8, r3
    d462:	e79d      	b.n	d3a0 <__mdiff+0x50>

0000d464 <__d2b>:
    d464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d468:	b082      	sub	sp, #8
    d46a:	2101      	movs	r1, #1
    d46c:	461c      	mov	r4, r3
    d46e:	f3c3 570a 	ubfx	r7, r3, #20, #11
    d472:	4615      	mov	r5, r2
    d474:	9e08      	ldr	r6, [sp, #32]
    d476:	f7ff fd43 	bl	cf00 <_Balloc>
    d47a:	f3c4 0413 	ubfx	r4, r4, #0, #20
    d47e:	4680      	mov	r8, r0
    d480:	b10f      	cbz	r7, d486 <__d2b+0x22>
    d482:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    d486:	9401      	str	r4, [sp, #4]
    d488:	b31d      	cbz	r5, d4d2 <__d2b+0x6e>
    d48a:	a802      	add	r0, sp, #8
    d48c:	f840 5d08 	str.w	r5, [r0, #-8]!
    d490:	f7ff fdc6 	bl	d020 <__lo0bits>
    d494:	2800      	cmp	r0, #0
    d496:	d134      	bne.n	d502 <__d2b+0x9e>
    d498:	e89d 000c 	ldmia.w	sp, {r2, r3}
    d49c:	f8c8 2014 	str.w	r2, [r8, #20]
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	bf0c      	ite	eq
    d4a4:	2101      	moveq	r1, #1
    d4a6:	2102      	movne	r1, #2
    d4a8:	f8c8 3018 	str.w	r3, [r8, #24]
    d4ac:	f8c8 1010 	str.w	r1, [r8, #16]
    d4b0:	b9df      	cbnz	r7, d4ea <__d2b+0x86>
    d4b2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    d4b6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    d4ba:	6030      	str	r0, [r6, #0]
    d4bc:	6918      	ldr	r0, [r3, #16]
    d4be:	f7ff fd8f 	bl	cfe0 <__hi0bits>
    d4c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4c4:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    d4c8:	6018      	str	r0, [r3, #0]
    d4ca:	4640      	mov	r0, r8
    d4cc:	b002      	add	sp, #8
    d4ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d4d2:	a801      	add	r0, sp, #4
    d4d4:	f7ff fda4 	bl	d020 <__lo0bits>
    d4d8:	9b01      	ldr	r3, [sp, #4]
    d4da:	f8c8 3014 	str.w	r3, [r8, #20]
    d4de:	2101      	movs	r1, #1
    d4e0:	3020      	adds	r0, #32
    d4e2:	f8c8 1010 	str.w	r1, [r8, #16]
    d4e6:	2f00      	cmp	r7, #0
    d4e8:	d0e3      	beq.n	d4b2 <__d2b+0x4e>
    d4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d4ec:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
    d4f0:	4407      	add	r7, r0
    d4f2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    d4f6:	6037      	str	r7, [r6, #0]
    d4f8:	6018      	str	r0, [r3, #0]
    d4fa:	4640      	mov	r0, r8
    d4fc:	b002      	add	sp, #8
    d4fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d502:	e89d 000c 	ldmia.w	sp, {r2, r3}
    d506:	f1c0 0120 	rsb	r1, r0, #32
    d50a:	fa03 f101 	lsl.w	r1, r3, r1
    d50e:	430a      	orrs	r2, r1
    d510:	40c3      	lsrs	r3, r0
    d512:	9301      	str	r3, [sp, #4]
    d514:	f8c8 2014 	str.w	r2, [r8, #20]
    d518:	e7c2      	b.n	d4a0 <__d2b+0x3c>
    d51a:	bf00      	nop

0000d51c <__ssprint_r>:
    d51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d520:	6893      	ldr	r3, [r2, #8]
    d522:	b083      	sub	sp, #12
    d524:	4690      	mov	r8, r2
    d526:	2b00      	cmp	r3, #0
    d528:	d072      	beq.n	d610 <__ssprint_r+0xf4>
    d52a:	4683      	mov	fp, r0
    d52c:	f04f 0900 	mov.w	r9, #0
    d530:	6816      	ldr	r6, [r2, #0]
    d532:	6808      	ldr	r0, [r1, #0]
    d534:	688b      	ldr	r3, [r1, #8]
    d536:	460d      	mov	r5, r1
    d538:	464c      	mov	r4, r9
    d53a:	2c00      	cmp	r4, #0
    d53c:	d045      	beq.n	d5ca <__ssprint_r+0xae>
    d53e:	429c      	cmp	r4, r3
    d540:	461f      	mov	r7, r3
    d542:	469a      	mov	sl, r3
    d544:	d346      	bcc.n	d5d4 <__ssprint_r+0xb8>
    d546:	89ab      	ldrh	r3, [r5, #12]
    d548:	f413 6f90 	tst.w	r3, #1152	; 0x480
    d54c:	d02d      	beq.n	d5aa <__ssprint_r+0x8e>
    d54e:	696f      	ldr	r7, [r5, #20]
    d550:	6929      	ldr	r1, [r5, #16]
    d552:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    d556:	ebc1 0a00 	rsb	sl, r1, r0
    d55a:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    d55e:	1c60      	adds	r0, r4, #1
    d560:	107f      	asrs	r7, r7, #1
    d562:	4450      	add	r0, sl
    d564:	42b8      	cmp	r0, r7
    d566:	463a      	mov	r2, r7
    d568:	bf84      	itt	hi
    d56a:	4607      	movhi	r7, r0
    d56c:	463a      	movhi	r2, r7
    d56e:	055b      	lsls	r3, r3, #21
    d570:	d533      	bpl.n	d5da <__ssprint_r+0xbe>
    d572:	4611      	mov	r1, r2
    d574:	4658      	mov	r0, fp
    d576:	f7fc f875 	bl	9664 <_malloc_r>
    d57a:	2800      	cmp	r0, #0
    d57c:	d037      	beq.n	d5ee <__ssprint_r+0xd2>
    d57e:	4652      	mov	r2, sl
    d580:	6929      	ldr	r1, [r5, #16]
    d582:	9001      	str	r0, [sp, #4]
    d584:	f7f9 faa0 	bl	6ac8 <memcpy>
    d588:	89aa      	ldrh	r2, [r5, #12]
    d58a:	9b01      	ldr	r3, [sp, #4]
    d58c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    d590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    d594:	81aa      	strh	r2, [r5, #12]
    d596:	ebca 0207 	rsb	r2, sl, r7
    d59a:	eb03 000a 	add.w	r0, r3, sl
    d59e:	616f      	str	r7, [r5, #20]
    d5a0:	612b      	str	r3, [r5, #16]
    d5a2:	6028      	str	r0, [r5, #0]
    d5a4:	60aa      	str	r2, [r5, #8]
    d5a6:	4627      	mov	r7, r4
    d5a8:	46a2      	mov	sl, r4
    d5aa:	4652      	mov	r2, sl
    d5ac:	4649      	mov	r1, r9
    d5ae:	f7fc fb27 	bl	9c00 <memmove>
    d5b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
    d5b6:	68ab      	ldr	r3, [r5, #8]
    d5b8:	6828      	ldr	r0, [r5, #0]
    d5ba:	1bdb      	subs	r3, r3, r7
    d5bc:	4450      	add	r0, sl
    d5be:	1b14      	subs	r4, r2, r4
    d5c0:	60ab      	str	r3, [r5, #8]
    d5c2:	6028      	str	r0, [r5, #0]
    d5c4:	f8c8 4008 	str.w	r4, [r8, #8]
    d5c8:	b314      	cbz	r4, d610 <__ssprint_r+0xf4>
    d5ca:	f8d6 9000 	ldr.w	r9, [r6]
    d5ce:	6874      	ldr	r4, [r6, #4]
    d5d0:	3608      	adds	r6, #8
    d5d2:	e7b2      	b.n	d53a <__ssprint_r+0x1e>
    d5d4:	4627      	mov	r7, r4
    d5d6:	46a2      	mov	sl, r4
    d5d8:	e7e7      	b.n	d5aa <__ssprint_r+0x8e>
    d5da:	4658      	mov	r0, fp
    d5dc:	f7fc fbce 	bl	9d7c <_realloc_r>
    d5e0:	4603      	mov	r3, r0
    d5e2:	2800      	cmp	r0, #0
    d5e4:	d1d7      	bne.n	d596 <__ssprint_r+0x7a>
    d5e6:	6929      	ldr	r1, [r5, #16]
    d5e8:	4658      	mov	r0, fp
    d5ea:	f7ff fb3f 	bl	cc6c <_free_r>
    d5ee:	230c      	movs	r3, #12
    d5f0:	f8cb 3000 	str.w	r3, [fp]
    d5f4:	89ab      	ldrh	r3, [r5, #12]
    d5f6:	2200      	movs	r2, #0
    d5f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d5fc:	f04f 30ff 	mov.w	r0, #4294967295
    d600:	81ab      	strh	r3, [r5, #12]
    d602:	f8c8 2008 	str.w	r2, [r8, #8]
    d606:	f8c8 2004 	str.w	r2, [r8, #4]
    d60a:	b003      	add	sp, #12
    d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d610:	2000      	movs	r0, #0
    d612:	f8c8 0004 	str.w	r0, [r8, #4]
    d616:	b003      	add	sp, #12
    d618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000d61c <_vasnprintf_r>:
    d61c:	b570      	push	{r4, r5, r6, lr}
    d61e:	4615      	mov	r5, r2
    d620:	b09a      	sub	sp, #104	; 0x68
    d622:	6814      	ldr	r4, [r2, #0]
    d624:	b109      	cbz	r1, d62a <_vasnprintf_r+0xe>
    d626:	2c00      	cmp	r4, #0
    d628:	d11a      	bne.n	d660 <_vasnprintf_r+0x44>
    d62a:	2400      	movs	r4, #0
    d62c:	f44f 7222 	mov.w	r2, #648	; 0x288
    d630:	f8ad 200c 	strh.w	r2, [sp, #12]
    d634:	9400      	str	r4, [sp, #0]
    d636:	9404      	str	r4, [sp, #16]
    d638:	461a      	mov	r2, r3
    d63a:	f64f 76ff 	movw	r6, #65535	; 0xffff
    d63e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    d640:	9402      	str	r4, [sp, #8]
    d642:	4669      	mov	r1, sp
    d644:	9405      	str	r4, [sp, #20]
    d646:	f8ad 600e 	strh.w	r6, [sp, #14]
    d64a:	f7fc fedb 	bl	a404 <_svfprintf_r>
    d64e:	2800      	cmp	r0, #0
    d650:	db11      	blt.n	d676 <_vasnprintf_r+0x5a>
    d652:	9b00      	ldr	r3, [sp, #0]
    d654:	6028      	str	r0, [r5, #0]
    d656:	2200      	movs	r2, #0
    d658:	701a      	strb	r2, [r3, #0]
    d65a:	9804      	ldr	r0, [sp, #16]
    d65c:	b01a      	add	sp, #104	; 0x68
    d65e:	bd70      	pop	{r4, r5, r6, pc}
    d660:	f44f 62c1 	mov.w	r2, #1544	; 0x608
    d664:	9100      	str	r1, [sp, #0]
    d666:	9104      	str	r1, [sp, #16]
    d668:	f8ad 200c 	strh.w	r2, [sp, #12]
    d66c:	dae4      	bge.n	d638 <_vasnprintf_r+0x1c>
    d66e:	238b      	movs	r3, #139	; 0x8b
    d670:	6003      	str	r3, [r0, #0]
    d672:	2000      	movs	r0, #0
    d674:	e7f2      	b.n	d65c <_vasnprintf_r+0x40>
    d676:	2000      	movs	r0, #0
    d678:	e7f0      	b.n	d65c <_vasnprintf_r+0x40>
    d67a:	bf00      	nop

0000d67c <_calloc_r>:
    d67c:	b510      	push	{r4, lr}
    d67e:	fb02 f101 	mul.w	r1, r2, r1
    d682:	f7fb ffef 	bl	9664 <_malloc_r>
    d686:	4604      	mov	r4, r0
    d688:	b1d8      	cbz	r0, d6c2 <_calloc_r+0x46>
    d68a:	f850 2c04 	ldr.w	r2, [r0, #-4]
    d68e:	f022 0203 	bic.w	r2, r2, #3
    d692:	3a04      	subs	r2, #4
    d694:	2a24      	cmp	r2, #36	; 0x24
    d696:	d818      	bhi.n	d6ca <_calloc_r+0x4e>
    d698:	2a13      	cmp	r2, #19
    d69a:	d914      	bls.n	d6c6 <_calloc_r+0x4a>
    d69c:	2300      	movs	r3, #0
    d69e:	2a1b      	cmp	r2, #27
    d6a0:	6003      	str	r3, [r0, #0]
    d6a2:	6043      	str	r3, [r0, #4]
    d6a4:	d916      	bls.n	d6d4 <_calloc_r+0x58>
    d6a6:	2a24      	cmp	r2, #36	; 0x24
    d6a8:	6083      	str	r3, [r0, #8]
    d6aa:	60c3      	str	r3, [r0, #12]
    d6ac:	bf11      	iteee	ne
    d6ae:	f100 0210 	addne.w	r2, r0, #16
    d6b2:	6103      	streq	r3, [r0, #16]
    d6b4:	6143      	streq	r3, [r0, #20]
    d6b6:	f100 0218 	addeq.w	r2, r0, #24
    d6ba:	2300      	movs	r3, #0
    d6bc:	6013      	str	r3, [r2, #0]
    d6be:	6053      	str	r3, [r2, #4]
    d6c0:	6093      	str	r3, [r2, #8]
    d6c2:	4620      	mov	r0, r4
    d6c4:	bd10      	pop	{r4, pc}
    d6c6:	4602      	mov	r2, r0
    d6c8:	e7f7      	b.n	d6ba <_calloc_r+0x3e>
    d6ca:	2100      	movs	r1, #0
    d6cc:	f7fc fafc 	bl	9cc8 <memset>
    d6d0:	4620      	mov	r0, r4
    d6d2:	bd10      	pop	{r4, pc}
    d6d4:	f100 0208 	add.w	r2, r0, #8
    d6d8:	e7ef      	b.n	d6ba <_calloc_r+0x3e>
    d6da:	bf00      	nop

0000d6dc <__aeabi_d2iz>:
    d6dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
    d6e0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    d6e4:	d215      	bcs.n	d712 <__aeabi_d2iz+0x36>
    d6e6:	d511      	bpl.n	d70c <__aeabi_d2iz+0x30>
    d6e8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    d6ec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    d6f0:	d912      	bls.n	d718 <__aeabi_d2iz+0x3c>
    d6f2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    d6f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d6fa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    d6fe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d702:	fa23 f002 	lsr.w	r0, r3, r2
    d706:	bf18      	it	ne
    d708:	4240      	negne	r0, r0
    d70a:	4770      	bx	lr
    d70c:	f04f 0000 	mov.w	r0, #0
    d710:	4770      	bx	lr
    d712:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d716:	d105      	bne.n	d724 <__aeabi_d2iz+0x48>
    d718:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    d71c:	bf08      	it	eq
    d71e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d722:	4770      	bx	lr
    d724:	f04f 0000 	mov.w	r0, #0
    d728:	4770      	bx	lr
    d72a:	bf00      	nop

0000d72c <__aeabi_uldivmod>:
    d72c:	b953      	cbnz	r3, d744 <__aeabi_uldivmod+0x18>
    d72e:	b94a      	cbnz	r2, d744 <__aeabi_uldivmod+0x18>
    d730:	2900      	cmp	r1, #0
    d732:	bf08      	it	eq
    d734:	2800      	cmpeq	r0, #0
    d736:	bf1c      	itt	ne
    d738:	f04f 31ff 	movne.w	r1, #4294967295
    d73c:	f04f 30ff 	movne.w	r0, #4294967295
    d740:	f000 b97e 	b.w	da40 <__aeabi_idiv0>
    d744:	f1ad 0c08 	sub.w	ip, sp, #8
    d748:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d74c:	f000 f806 	bl	d75c <__udivmoddi4>
    d750:	f8dd e004 	ldr.w	lr, [sp, #4]
    d754:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d758:	b004      	add	sp, #16
    d75a:	4770      	bx	lr

0000d75c <__udivmoddi4>:
    d75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d760:	468c      	mov	ip, r1
    d762:	460e      	mov	r6, r1
    d764:	4604      	mov	r4, r0
    d766:	9d08      	ldr	r5, [sp, #32]
    d768:	2b00      	cmp	r3, #0
    d76a:	d150      	bne.n	d80e <__udivmoddi4+0xb2>
    d76c:	428a      	cmp	r2, r1
    d76e:	4617      	mov	r7, r2
    d770:	d96c      	bls.n	d84c <__udivmoddi4+0xf0>
    d772:	fab2 fe82 	clz	lr, r2
    d776:	f1be 0f00 	cmp.w	lr, #0
    d77a:	d00b      	beq.n	d794 <__udivmoddi4+0x38>
    d77c:	f1ce 0420 	rsb	r4, lr, #32
    d780:	fa20 f404 	lsr.w	r4, r0, r4
    d784:	fa01 f60e 	lsl.w	r6, r1, lr
    d788:	ea44 0c06 	orr.w	ip, r4, r6
    d78c:	fa02 f70e 	lsl.w	r7, r2, lr
    d790:	fa00 f40e 	lsl.w	r4, r0, lr
    d794:	ea4f 4917 	mov.w	r9, r7, lsr #16
    d798:	0c22      	lsrs	r2, r4, #16
    d79a:	fbbc f0f9 	udiv	r0, ip, r9
    d79e:	fa1f f887 	uxth.w	r8, r7
    d7a2:	fb09 c610 	mls	r6, r9, r0, ip
    d7a6:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    d7aa:	fb00 f308 	mul.w	r3, r0, r8
    d7ae:	42b3      	cmp	r3, r6
    d7b0:	d909      	bls.n	d7c6 <__udivmoddi4+0x6a>
    d7b2:	19f6      	adds	r6, r6, r7
    d7b4:	f100 32ff 	add.w	r2, r0, #4294967295
    d7b8:	f080 8122 	bcs.w	da00 <__udivmoddi4+0x2a4>
    d7bc:	42b3      	cmp	r3, r6
    d7be:	f240 811f 	bls.w	da00 <__udivmoddi4+0x2a4>
    d7c2:	3802      	subs	r0, #2
    d7c4:	443e      	add	r6, r7
    d7c6:	1af6      	subs	r6, r6, r3
    d7c8:	b2a2      	uxth	r2, r4
    d7ca:	fbb6 f3f9 	udiv	r3, r6, r9
    d7ce:	fb09 6613 	mls	r6, r9, r3, r6
    d7d2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    d7d6:	fb03 f808 	mul.w	r8, r3, r8
    d7da:	45a0      	cmp	r8, r4
    d7dc:	d909      	bls.n	d7f2 <__udivmoddi4+0x96>
    d7de:	19e4      	adds	r4, r4, r7
    d7e0:	f103 32ff 	add.w	r2, r3, #4294967295
    d7e4:	f080 810a 	bcs.w	d9fc <__udivmoddi4+0x2a0>
    d7e8:	45a0      	cmp	r8, r4
    d7ea:	f240 8107 	bls.w	d9fc <__udivmoddi4+0x2a0>
    d7ee:	3b02      	subs	r3, #2
    d7f0:	443c      	add	r4, r7
    d7f2:	ebc8 0404 	rsb	r4, r8, r4
    d7f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d7fa:	2100      	movs	r1, #0
    d7fc:	2d00      	cmp	r5, #0
    d7fe:	d062      	beq.n	d8c6 <__udivmoddi4+0x16a>
    d800:	fa24 f40e 	lsr.w	r4, r4, lr
    d804:	2300      	movs	r3, #0
    d806:	602c      	str	r4, [r5, #0]
    d808:	606b      	str	r3, [r5, #4]
    d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d80e:	428b      	cmp	r3, r1
    d810:	d907      	bls.n	d822 <__udivmoddi4+0xc6>
    d812:	2d00      	cmp	r5, #0
    d814:	d055      	beq.n	d8c2 <__udivmoddi4+0x166>
    d816:	2100      	movs	r1, #0
    d818:	e885 0041 	stmia.w	r5, {r0, r6}
    d81c:	4608      	mov	r0, r1
    d81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d822:	fab3 f183 	clz	r1, r3
    d826:	2900      	cmp	r1, #0
    d828:	f040 8090 	bne.w	d94c <__udivmoddi4+0x1f0>
    d82c:	42b3      	cmp	r3, r6
    d82e:	d302      	bcc.n	d836 <__udivmoddi4+0xda>
    d830:	4282      	cmp	r2, r0
    d832:	f200 80f8 	bhi.w	da26 <__udivmoddi4+0x2ca>
    d836:	1a84      	subs	r4, r0, r2
    d838:	eb66 0603 	sbc.w	r6, r6, r3
    d83c:	2001      	movs	r0, #1
    d83e:	46b4      	mov	ip, r6
    d840:	2d00      	cmp	r5, #0
    d842:	d040      	beq.n	d8c6 <__udivmoddi4+0x16a>
    d844:	e885 1010 	stmia.w	r5, {r4, ip}
    d848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d84c:	b912      	cbnz	r2, d854 <__udivmoddi4+0xf8>
    d84e:	2701      	movs	r7, #1
    d850:	fbb7 f7f2 	udiv	r7, r7, r2
    d854:	fab7 fe87 	clz	lr, r7
    d858:	f1be 0f00 	cmp.w	lr, #0
    d85c:	d135      	bne.n	d8ca <__udivmoddi4+0x16e>
    d85e:	1bf3      	subs	r3, r6, r7
    d860:	ea4f 4817 	mov.w	r8, r7, lsr #16
    d864:	fa1f fc87 	uxth.w	ip, r7
    d868:	2101      	movs	r1, #1
    d86a:	fbb3 f0f8 	udiv	r0, r3, r8
    d86e:	0c22      	lsrs	r2, r4, #16
    d870:	fb08 3610 	mls	r6, r8, r0, r3
    d874:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    d878:	fb0c f300 	mul.w	r3, ip, r0
    d87c:	42b3      	cmp	r3, r6
    d87e:	d907      	bls.n	d890 <__udivmoddi4+0x134>
    d880:	19f6      	adds	r6, r6, r7
    d882:	f100 32ff 	add.w	r2, r0, #4294967295
    d886:	d202      	bcs.n	d88e <__udivmoddi4+0x132>
    d888:	42b3      	cmp	r3, r6
    d88a:	f200 80ce 	bhi.w	da2a <__udivmoddi4+0x2ce>
    d88e:	4610      	mov	r0, r2
    d890:	1af6      	subs	r6, r6, r3
    d892:	b2a2      	uxth	r2, r4
    d894:	fbb6 f3f8 	udiv	r3, r6, r8
    d898:	fb08 6613 	mls	r6, r8, r3, r6
    d89c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    d8a0:	fb0c fc03 	mul.w	ip, ip, r3
    d8a4:	45a4      	cmp	ip, r4
    d8a6:	d907      	bls.n	d8b8 <__udivmoddi4+0x15c>
    d8a8:	19e4      	adds	r4, r4, r7
    d8aa:	f103 32ff 	add.w	r2, r3, #4294967295
    d8ae:	d202      	bcs.n	d8b6 <__udivmoddi4+0x15a>
    d8b0:	45a4      	cmp	ip, r4
    d8b2:	f200 80b5 	bhi.w	da20 <__udivmoddi4+0x2c4>
    d8b6:	4613      	mov	r3, r2
    d8b8:	ebcc 0404 	rsb	r4, ip, r4
    d8bc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    d8c0:	e79c      	b.n	d7fc <__udivmoddi4+0xa0>
    d8c2:	4629      	mov	r1, r5
    d8c4:	4628      	mov	r0, r5
    d8c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d8ca:	f1ce 0120 	rsb	r1, lr, #32
    d8ce:	fa06 f30e 	lsl.w	r3, r6, lr
    d8d2:	fa07 f70e 	lsl.w	r7, r7, lr
    d8d6:	fa20 f901 	lsr.w	r9, r0, r1
    d8da:	ea4f 4817 	mov.w	r8, r7, lsr #16
    d8de:	40ce      	lsrs	r6, r1
    d8e0:	ea49 0903 	orr.w	r9, r9, r3
    d8e4:	fbb6 faf8 	udiv	sl, r6, r8
    d8e8:	ea4f 4419 	mov.w	r4, r9, lsr #16
    d8ec:	fb08 661a 	mls	r6, r8, sl, r6
    d8f0:	fa1f fc87 	uxth.w	ip, r7
    d8f4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    d8f8:	fb0a f20c 	mul.w	r2, sl, ip
    d8fc:	429a      	cmp	r2, r3
    d8fe:	fa00 f40e 	lsl.w	r4, r0, lr
    d902:	d90a      	bls.n	d91a <__udivmoddi4+0x1be>
    d904:	19db      	adds	r3, r3, r7
    d906:	f10a 31ff 	add.w	r1, sl, #4294967295
    d90a:	f080 8087 	bcs.w	da1c <__udivmoddi4+0x2c0>
    d90e:	429a      	cmp	r2, r3
    d910:	f240 8084 	bls.w	da1c <__udivmoddi4+0x2c0>
    d914:	f1aa 0a02 	sub.w	sl, sl, #2
    d918:	443b      	add	r3, r7
    d91a:	1a9b      	subs	r3, r3, r2
    d91c:	fa1f f989 	uxth.w	r9, r9
    d920:	fbb3 f1f8 	udiv	r1, r3, r8
    d924:	fb08 3311 	mls	r3, r8, r1, r3
    d928:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    d92c:	fb01 f60c 	mul.w	r6, r1, ip
    d930:	429e      	cmp	r6, r3
    d932:	d907      	bls.n	d944 <__udivmoddi4+0x1e8>
    d934:	19db      	adds	r3, r3, r7
    d936:	f101 32ff 	add.w	r2, r1, #4294967295
    d93a:	d26b      	bcs.n	da14 <__udivmoddi4+0x2b8>
    d93c:	429e      	cmp	r6, r3
    d93e:	d969      	bls.n	da14 <__udivmoddi4+0x2b8>
    d940:	3902      	subs	r1, #2
    d942:	443b      	add	r3, r7
    d944:	1b9b      	subs	r3, r3, r6
    d946:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    d94a:	e78e      	b.n	d86a <__udivmoddi4+0x10e>
    d94c:	f1c1 0e20 	rsb	lr, r1, #32
    d950:	fa22 f40e 	lsr.w	r4, r2, lr
    d954:	408b      	lsls	r3, r1
    d956:	4323      	orrs	r3, r4
    d958:	fa20 f70e 	lsr.w	r7, r0, lr
    d95c:	fa06 f401 	lsl.w	r4, r6, r1
    d960:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    d964:	fa26 f60e 	lsr.w	r6, r6, lr
    d968:	433c      	orrs	r4, r7
    d96a:	fbb6 f9fc 	udiv	r9, r6, ip
    d96e:	0c27      	lsrs	r7, r4, #16
    d970:	fb0c 6619 	mls	r6, ip, r9, r6
    d974:	fa1f f883 	uxth.w	r8, r3
    d978:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    d97c:	fb09 f708 	mul.w	r7, r9, r8
    d980:	42b7      	cmp	r7, r6
    d982:	fa02 f201 	lsl.w	r2, r2, r1
    d986:	fa00 fa01 	lsl.w	sl, r0, r1
    d98a:	d908      	bls.n	d99e <__udivmoddi4+0x242>
    d98c:	18f6      	adds	r6, r6, r3
    d98e:	f109 30ff 	add.w	r0, r9, #4294967295
    d992:	d241      	bcs.n	da18 <__udivmoddi4+0x2bc>
    d994:	42b7      	cmp	r7, r6
    d996:	d93f      	bls.n	da18 <__udivmoddi4+0x2bc>
    d998:	f1a9 0902 	sub.w	r9, r9, #2
    d99c:	441e      	add	r6, r3
    d99e:	1bf6      	subs	r6, r6, r7
    d9a0:	b2a0      	uxth	r0, r4
    d9a2:	fbb6 f4fc 	udiv	r4, r6, ip
    d9a6:	fb0c 6614 	mls	r6, ip, r4, r6
    d9aa:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    d9ae:	fb04 f808 	mul.w	r8, r4, r8
    d9b2:	45b8      	cmp	r8, r7
    d9b4:	d907      	bls.n	d9c6 <__udivmoddi4+0x26a>
    d9b6:	18ff      	adds	r7, r7, r3
    d9b8:	f104 30ff 	add.w	r0, r4, #4294967295
    d9bc:	d228      	bcs.n	da10 <__udivmoddi4+0x2b4>
    d9be:	45b8      	cmp	r8, r7
    d9c0:	d926      	bls.n	da10 <__udivmoddi4+0x2b4>
    d9c2:	3c02      	subs	r4, #2
    d9c4:	441f      	add	r7, r3
    d9c6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    d9ca:	ebc8 0707 	rsb	r7, r8, r7
    d9ce:	fba0 8902 	umull	r8, r9, r0, r2
    d9d2:	454f      	cmp	r7, r9
    d9d4:	4644      	mov	r4, r8
    d9d6:	464e      	mov	r6, r9
    d9d8:	d314      	bcc.n	da04 <__udivmoddi4+0x2a8>
    d9da:	d029      	beq.n	da30 <__udivmoddi4+0x2d4>
    d9dc:	b365      	cbz	r5, da38 <__udivmoddi4+0x2dc>
    d9de:	ebba 0304 	subs.w	r3, sl, r4
    d9e2:	eb67 0706 	sbc.w	r7, r7, r6
    d9e6:	fa07 fe0e 	lsl.w	lr, r7, lr
    d9ea:	40cb      	lsrs	r3, r1
    d9ec:	40cf      	lsrs	r7, r1
    d9ee:	ea4e 0303 	orr.w	r3, lr, r3
    d9f2:	e885 0088 	stmia.w	r5, {r3, r7}
    d9f6:	2100      	movs	r1, #0
    d9f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d9fc:	4613      	mov	r3, r2
    d9fe:	e6f8      	b.n	d7f2 <__udivmoddi4+0x96>
    da00:	4610      	mov	r0, r2
    da02:	e6e0      	b.n	d7c6 <__udivmoddi4+0x6a>
    da04:	ebb8 0402 	subs.w	r4, r8, r2
    da08:	eb69 0603 	sbc.w	r6, r9, r3
    da0c:	3801      	subs	r0, #1
    da0e:	e7e5      	b.n	d9dc <__udivmoddi4+0x280>
    da10:	4604      	mov	r4, r0
    da12:	e7d8      	b.n	d9c6 <__udivmoddi4+0x26a>
    da14:	4611      	mov	r1, r2
    da16:	e795      	b.n	d944 <__udivmoddi4+0x1e8>
    da18:	4681      	mov	r9, r0
    da1a:	e7c0      	b.n	d99e <__udivmoddi4+0x242>
    da1c:	468a      	mov	sl, r1
    da1e:	e77c      	b.n	d91a <__udivmoddi4+0x1be>
    da20:	3b02      	subs	r3, #2
    da22:	443c      	add	r4, r7
    da24:	e748      	b.n	d8b8 <__udivmoddi4+0x15c>
    da26:	4608      	mov	r0, r1
    da28:	e70a      	b.n	d840 <__udivmoddi4+0xe4>
    da2a:	3802      	subs	r0, #2
    da2c:	443e      	add	r6, r7
    da2e:	e72f      	b.n	d890 <__udivmoddi4+0x134>
    da30:	45c2      	cmp	sl, r8
    da32:	d3e7      	bcc.n	da04 <__udivmoddi4+0x2a8>
    da34:	463e      	mov	r6, r7
    da36:	e7d1      	b.n	d9dc <__udivmoddi4+0x280>
    da38:	4629      	mov	r1, r5
    da3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da3e:	bf00      	nop

0000da40 <__aeabi_idiv0>:
    da40:	4770      	bx	lr
    da42:	bf00      	nop
    da44:	25207325 	.word	0x25207325
    da48:	252f6434 	.word	0x252f6434
    da4c:	2f643230 	.word	0x2f643230
    da50:	64323025 	.word	0x64323025
    da54:	20746120 	.word	0x20746120
    da58:	64323025 	.word	0x64323025
    da5c:	3230253a 	.word	0x3230253a
    da60:	30253a64 	.word	0x30253a64
    da64:	00006432 	.word	0x00006432
    da68:	00006425 	.word	0x00006425
    da6c:	53206e49 	.word	0x53206e49
    da70:	41776f68 	.word	0x41776f68
    da74:	75426a64 	.word	0x75426a64
    da78:	6e6f7474 	.word	0x6e6f7474
    da7c:	00000a73 	.word	0x00000a73
    da80:	5458454e 	.word	0x5458454e
    da84:	00000000 	.word	0x00000000
    da88:	0000002b 	.word	0x0000002b
    da8c:	0000002d 	.word	0x0000002d
    da90:	3a643225 	.word	0x3a643225
    da94:	64323025 	.word	0x64323025
    da98:	00000000 	.word	0x00000000
    da9c:	3a643225 	.word	0x3a643225
    daa0:	64323025 	.word	0x64323025
    daa4:	3230253a 	.word	0x3230253a
    daa8:	00000064 	.word	0x00000064
    daac:	5f4a4441 	.word	0x5f4a4441
    dab0:	454e4f4e 	.word	0x454e4f4e
    dab4:	73616320 	.word	0x73616320
    dab8:	6e692065 	.word	0x6e692065
    dabc:	6f685320 	.word	0x6f685320
    dac0:	67694877 	.word	0x67694877
    dac4:	67696c68 	.word	0x67696c68
    dac8:	6f427468 	.word	0x6f427468
    dacc:	0a292878 	.word	0x0a292878
    dad0:	00000000 	.word	0x00000000
    dad4:	25207325 	.word	0x25207325
    dad8:	2f643230 	.word	0x2f643230
    dadc:	64323025 	.word	0x64323025
    dae0:	3230252f 	.word	0x3230252f
    dae4:	00000a64 	.word	0x00000a64
    dae8:	47206e49 	.word	0x47206e49
    daec:	75437465 	.word	0x75437465
    daf0:	6a644172 	.word	0x6a644172
    daf4:	74617453 	.word	0x74617453
    daf8:	44412065 	.word	0x44412065
    dafc:	4f485f4a 	.word	0x4f485f4a
    db00:	63205255 	.word	0x63205255
    db04:	0a657361 	.word	0x0a657361
    db08:	00000000 	.word	0x00000000
    db0c:	2077654e 	.word	0x2077654e
    db10:	656d6974 	.word	0x656d6974
    db14:	20736920 	.word	0x20736920
    db18:	252f6425 	.word	0x252f6425
    db1c:	64252f64 	.word	0x64252f64
    db20:	3a642520 	.word	0x3a642520
    db24:	000a6425 	.word	0x000a6425
    db28:	20435452 	.word	0x20435452
    db2c:	20776f6e 	.word	0x20776f6e
    db30:	20746573 	.word	0x20746573
    db34:	25206f74 	.word	0x25206f74
    db38:	64252f64 	.word	0x64252f64
    db3c:	2064252f 	.word	0x2064252f
    db40:	253a6425 	.word	0x253a6425
    db44:	00000a64 	.word	0x00000a64
    db48:	47206e49 	.word	0x47206e49
    db4c:	75437465 	.word	0x75437465
    db50:	6a644172 	.word	0x6a644172
    db54:	74617453 	.word	0x74617453
    db58:	44412065 	.word	0x44412065
    db5c:	494d5f4a 	.word	0x494d5f4a
    db60:	6163204e 	.word	0x6163204e
    db64:	000a6573 	.word	0x000a6573
    db68:	47206e49 	.word	0x47206e49
    db6c:	75437465 	.word	0x75437465
    db70:	6a644172 	.word	0x6a644172
    db74:	74617453 	.word	0x74617453
    db78:	44412065 	.word	0x44412065
    db7c:	45535f4a 	.word	0x45535f4a
    db80:	61632043 	.word	0x61632043
    db84:	000a6573 	.word	0x000a6573
    db88:	47206e49 	.word	0x47206e49
    db8c:	75437465 	.word	0x75437465
    db90:	6a644172 	.word	0x6a644172
    db94:	74617453 	.word	0x74617453
    db98:	44412065 	.word	0x44412065
    db9c:	4f4d5f4a 	.word	0x4f4d5f4a
    dba0:	2048544e 	.word	0x2048544e
    dba4:	65736163 	.word	0x65736163
    dba8:	0000000a 	.word	0x0000000a
    dbac:	47206e49 	.word	0x47206e49
    dbb0:	75437465 	.word	0x75437465
    dbb4:	6a644172 	.word	0x6a644172
    dbb8:	74617453 	.word	0x74617453
    dbbc:	44412065 	.word	0x44412065
    dbc0:	41445f4a 	.word	0x41445f4a
    dbc4:	61632059 	.word	0x61632059
    dbc8:	000a6573 	.word	0x000a6573
    dbcc:	69206425 	.word	0x69206425
    dbd0:	72672073 	.word	0x72672073
    dbd4:	65746165 	.word	0x65746165
    dbd8:	68742072 	.word	0x68742072
    dbdc:	6d206e61 	.word	0x6d206e61
    dbe0:	64207861 	.word	0x64207861
    dbe4:	20737961 	.word	0x20737961
    dbe8:	29642528 	.word	0x29642528
    dbec:	726f6620 	.word	0x726f6620
    dbf0:	69687420 	.word	0x69687420
    dbf4:	6f6d2073 	.word	0x6f6d2073
    dbf8:	2068746e 	.word	0x2068746e
    dbfc:	6573202d 	.word	0x6573202d
    dc00:	6e697474 	.word	0x6e697474
    dc04:	6f742067 	.word	0x6f742067
    dc08:	000a3120 	.word	0x000a3120
    dc0c:	47206e49 	.word	0x47206e49
    dc10:	75437465 	.word	0x75437465
    dc14:	6a644172 	.word	0x6a644172
    dc18:	74617453 	.word	0x74617453
    dc1c:	44412065 	.word	0x44412065
    dc20:	45595f4a 	.word	0x45595f4a
    dc24:	63205241 	.word	0x63205241
    dc28:	0a657361 	.word	0x0a657361
    dc2c:	00000000 	.word	0x00000000
    dc30:	73756c50 	.word	0x73756c50
    dc34:	786f6220 	.word	0x786f6220
    dc38:	756f7420 	.word	0x756f7420
    dc3c:	61206863 	.word	0x61206863
    dc40:	25282074 	.word	0x25282074
    dc44:	64252c64 	.word	0x64252c64
    dc48:	00000a29 	.word	0x00000a29
    dc4c:	20646c4f 	.word	0x20646c4f
    dc50:	656d6974 	.word	0x656d6974
    dc54:	20736920 	.word	0x20736920
    dc58:	252f6425 	.word	0x252f6425
    dc5c:	64252f64 	.word	0x64252f64
    dc60:	3a642520 	.word	0x3a642520
    dc64:	000a6425 	.word	0x000a6425
    dc68:	756e694d 	.word	0x756e694d
    dc6c:	6f622073 	.word	0x6f622073
    dc70:	6f742078 	.word	0x6f742078
    dc74:	20686375 	.word	0x20686375
    dc78:	28207461 	.word	0x28207461
    dc7c:	252c6425 	.word	0x252c6425
    dc80:	000a2964 	.word	0x000a2964
    dc84:	5f4a4441 	.word	0x5f4a4441
    dc88:	52554f48 	.word	0x52554f48
    dc8c:	73616320 	.word	0x73616320
    dc90:	6e692065 	.word	0x6e692065
    dc94:	4d6f4420 	.word	0x4d6f4420
    dc98:	73756e69 	.word	0x73756e69
    dc9c:	2928704f 	.word	0x2928704f
    dca0:	4420202e 	.word	0x4420202e
    dca4:	65726365 	.word	0x65726365
    dca8:	746e656d 	.word	0x746e656d
    dcac:	20676e69 	.word	0x20676e69
    dcb0:	72756f48 	.word	0x72756f48
    dcb4:	6c615620 	.word	0x6c615620
    dcb8:	000a6575 	.word	0x000a6575
    dcbc:	20646c4f 	.word	0x20646c4f
    dcc0:	656d6974 	.word	0x656d6974
    dcc4:	20736920 	.word	0x20736920
    dcc8:	253a6425 	.word	0x253a6425
    dccc:	64253a64 	.word	0x64253a64
    dcd0:	0a64253a 	.word	0x0a64253a
    dcd4:	00000000 	.word	0x00000000
    dcd8:	2077654e 	.word	0x2077654e
    dcdc:	656d6974 	.word	0x656d6974
    dce0:	20736920 	.word	0x20736920
    dce4:	253a6425 	.word	0x253a6425
    dce8:	64253a64 	.word	0x64253a64
    dcec:	0a64253a 	.word	0x0a64253a
    dcf0:	00000000 	.word	0x00000000
    dcf4:	20435452 	.word	0x20435452
    dcf8:	20776f6e 	.word	0x20776f6e
    dcfc:	20746573 	.word	0x20746573
    dd00:	25206f74 	.word	0x25206f74
    dd04:	64253a64 	.word	0x64253a64
    dd08:	3a64253a 	.word	0x3a64253a
    dd0c:	000a6425 	.word	0x000a6425
    dd10:	20646c4f 	.word	0x20646c4f
    dd14:	656d6974 	.word	0x656d6974
    dd18:	20736920 	.word	0x20736920
    dd1c:	252f6425 	.word	0x252f6425
    dd20:	64252f64 	.word	0x64252f64
    dd24:	3a642520 	.word	0x3a642520
    dd28:	253a6425 	.word	0x253a6425
    dd2c:	00000a64 	.word	0x00000a64
    dd30:	2077654e 	.word	0x2077654e
    dd34:	656d6974 	.word	0x656d6974
    dd38:	20736920 	.word	0x20736920
    dd3c:	252f6425 	.word	0x252f6425
    dd40:	64252f64 	.word	0x64252f64
    dd44:	3a642520 	.word	0x3a642520
    dd48:	253a6425 	.word	0x253a6425
    dd4c:	00000a64 	.word	0x00000a64
    dd50:	20435452 	.word	0x20435452
    dd54:	20776f6e 	.word	0x20776f6e
    dd58:	20746573 	.word	0x20746573
    dd5c:	25206f74 	.word	0x25206f74
    dd60:	64252f64 	.word	0x64252f64
    dd64:	2064252f 	.word	0x2064252f
    dd68:	253a6425 	.word	0x253a6425
    dd6c:	64253a64 	.word	0x64253a64
    dd70:	0000000a 	.word	0x0000000a
    dd74:	6e656554 	.word	0x6e656554
    dd78:	33207973 	.word	0x33207973
    dd7c:	5420322e 	.word	0x5420322e
    dd80:	43205446 	.word	0x43205446
    dd84:	6b636f6c 	.word	0x6b636f6c
    dd88:	6f725020 	.word	0x6f725020
    dd8c:	6d617267 	.word	0x6d617267
    dd90:	00000000 	.word	0x00000000
    dd94:	74696e49 	.word	0x74696e49
    dd98:	696c6169 	.word	0x696c6169
    dd9c:	676e697a 	.word	0x676e697a
    dda0:	54465420 	.word	0x54465420
    dda4:	73696420 	.word	0x73696420
    dda8:	79616c70 	.word	0x79616c70
    ddac:	00000000 	.word	0x00000000
    ddb0:	74696e49 	.word	0x74696e49
    ddb4:	696c6169 	.word	0x696c6169
    ddb8:	676e697a 	.word	0x676e697a
    ddbc:	43545220 	.word	0x43545220
    ddc0:	002e2e2e 	.word	0x002e2e2e
    ddc4:	6c756f43 	.word	0x6c756f43
    ddc8:	74276e64 	.word	0x74276e64
    ddcc:	6e696620 	.word	0x6e696620
    ddd0:	54522064 	.word	0x54522064
    ddd4:	00000043 	.word	0x00000043
    ddd8:	74736f6c 	.word	0x74736f6c
    dddc:	65776f50 	.word	0x65776f50
    dde0:	20292872 	.word	0x20292872
    dde4:	6f706572 	.word	0x6f706572
    dde8:	20737472 	.word	0x20737472
    ddec:	00000000 	.word	0x00000000
    ddf0:	74736f6c 	.word	0x74736f6c
    ddf4:	65776f50 	.word	0x65776f50
    ddf8:	20292872 	.word	0x20292872
    ddfc:	6425203d 	.word	0x6425203d
    de00:	0000000a 	.word	0x0000000a
    de04:	20435452 	.word	0x20435452
    de08:	74736f6c 	.word	0x74736f6c
    de0c:	776f7020 	.word	0x776f7020
    de10:	202e7265 	.word	0x202e7265
    de14:	74655320 	.word	0x74655320
    de18:	676e6974 	.word	0x676e6974
    de1c:	43545220 	.word	0x43545220
    de20:	206f7420 	.word	0x206f7420
    de24:	7473616c 	.word	0x7473616c
    de28:	6d6f6320 	.word	0x6d6f6320
    de2c:	656c6970 	.word	0x656c6970
    de30:	6d697420 	.word	0x6d697420
    de34:	00000065 	.word	0x00000065
    de38:	323a3131 	.word	0x323a3131
    de3c:	33303a38 	.word	0x33303a38
    de40:	00000000 	.word	0x00000000
    de44:	2074634f 	.word	0x2074634f
    de48:	32203620 	.word	0x32203620
    de4c:	00333230 	.word	0x00333230
    de50:	63726f46 	.word	0x63726f46
    de54:	20676e69 	.word	0x20676e69
    de58:	20435452 	.word	0x20435452
    de5c:	6c206f74 	.word	0x6c206f74
    de60:	20747361 	.word	0x20747361
    de64:	706d6f63 	.word	0x706d6f63
    de68:	20656c69 	.word	0x20656c69
    de6c:	656d6974 	.word	0x656d6974
    de70:	00000000 	.word	0x00000000
    de74:	72746552 	.word	0x72746552
    de78:	69766569 	.word	0x69766569
    de7c:	4420676e 	.word	0x4420676e
    de80:	2f657461 	.word	0x2f657461
    de84:	656d6954 	.word	0x656d6954
    de88:	6f726620 	.word	0x6f726620
    de8c:	5452206d 	.word	0x5452206d
    de90:	2e2e2e43 	.word	0x2e2e2e43
    de94:	0000002e 	.word	0x0000002e
    de98:	65746144 	.word	0x65746144
    de9c:	72745320 	.word	0x72745320
    dea0:	20676e69 	.word	0x20676e69
    dea4:	ff00203d 	.word	0xff00203d

0000dea8 <SPISettings::ctar_div_table>:
    dea8:	00030002 00050004 00080006 000c000a     ................
    deb8:	00140010 00200018 00380028 00600040     ...... .(.8.@.`.
    dec8:	00c00080 01800100 02800200 ffff0300     ................

0000ded8 <SPISettings::ctar_clock_table>:
    ded8:	80000000 80010000 00000000 80020000     ................
    dee8:	00010000 00001001 00020000 00011001     ................
    def8:	00002003 00020001 00012003 00003004     . ....... ...0..
    df08:	00022003 00032003 00004005 00014005     . ... ...@...@..
    df18:	00005006 00015006 00006007 00016007     .P...P...`...`..
    df28:	00007008 00026007 00017008              .p...`...p..

0000df34 <SPIClass::spi0_hardware>:
    df34:	4004803c 00001000 00001a04 00007fff     <..@............
    df44:	00001011 00002095 0000080c 00000200     ..... ..........
    df54:	00000200 0000070b 00000240 00000200     ........@.......
    df64:	00000e0d 00000240 00000200 0609020a     ....@...........
    df74:	16151714 0000000f 00000200 00000200     ................
    df84:	00000200 00000200 00000200 00000200     ................
    df94:	00000200 00000200 00000200 02020101     ................
    dfa4:	08080404 00000010                       ........

0000dfac <Arial_72_index>:
    dfac:	14000000 c003e800 c2b9e028 0f8507b9     ........(.......
    dfbc:	47002126 31119530 d5846742 c014b209     &!.G0..1Bg......
    dfcc:	005e202d e3d501d3 927348f1 5278265e     - ^......Hs.^&xR
    dfdc:	6281b074 d785c842 a118c44b f0779233     t..bB...K...3.w.
    dfec:	340fc2fb d2028952 4dcd243a 37959b0c     ...4R...:$.M...7
    dffc:	347578ea cbd57b2a ac5d0e2d ab8d91bf     .xu4*{..-.].....
    e00c:	4db0c639 3856db78 f6dc76a9 0ab4f719     9..Mx.V8.v......
    e01c:	63d01bf8 38c2dd20 9e098b84 e849fc1c     ...c ..8......I.
    e02c:	63a211b2 92f347cb 4f5e279b 6b59a37c     ...c.G...'^O|.Yk
    e03c:	21a6ddf2 879bbbcc 657e0a3b 94273a01     ...!....;.~e.:'.
    e04c:	5201e963 56cda8f6 7d9db74a 2c3613fb     c..R...VJ..}..6,
    e05c:	ff80b3ec                                ....

0000e060 <Arial_60_index>:
    e060:	50000000 032b4006 f4401f2c 18153c85     ...P.@+.,.@..<..
    e070:	c68d115c 6bc01a85 cc86b1e1 627ed01c     \......k......~b
    e080:	2941c90e f992b128 5836f50c 8fe1b3e8     ..A)(.....6X....
    e090:	06ad3e95 4b1122e4 754f5948 61109781     .>...".KHYOu...a
    e0a0:	60869405 216cb9d9 dbd556b4 d6d574b9     ...`..l!.V...t..
    e0b0:	9e1f9c77 181aae83 964be4c2 9d695e9e     w.........K..^i.
    e0c0:	caa6c767 ed0f0bb4 db72b53d 426e77eb     g.......=.r..wnB
    e0d0:	5be636b9 c2f9efd1 83cc15ab 9bcc4432     .6.[........2D..
    e0e0:	73e7ac38 4bb7d2d2 b1f556ed dd7187d9     8..s...K.V....q.
    e0f0:	e30e38f5 5e2e928f 6bec213a fd337fbf     .8.....^:!.k..3.
    e100:	df97f764 ff409f9f                       d.....@.

0000e108 <Arial_72>:
    e108:	0000dfac 00000000 0000f99c 7e200001     .............. ~
    e118:	070f0000 07070507 0000486f              ........oH..

0000e124 <Arial_20_data>:
    e124:	00010000 1b01a302 80111cef 5b353908     .............95[
    e134:	02a00f86 1c180c10 4706433a 3018faff     ........:C.G...0
    e144:	ff1f3138 c381c1e0 0d603084 2000fab9     81.......0`.... 
    e154:	c13fe003 30278ecb 3140188d fe00fc00     ..?...'0..@1....
    e164:	3a017c00 43188700 e1e41c31 80f001ff     .|.:...C1.......
    e174:	a2150020 18c02303 66c0801f 83610403      ....#.....f..a.
    e184:	00c33002 980318c3 1ee307e0 00fc180f     .0..............
    e194:	63003463 300c030c 60c0301c 988303c3     c4.c...0.0.`....
    e1a4:	60e0070c a111000f 00786002 7038807f     ...`.....`x...8p
    e1b4:	30808149 00f006c0 00f800f0 e1380073     I..0........s.8.
    e1c4:	03e61c9c 607c8071 c3071c0e cf7ff887     ....q.|`........
    e1d4:	0280c107 80bb3439 20e9d206 583268e0     ....94..... .h2X
    e1e4:	620927dc 8081810c 2ce9d106 46328821     .'.b.......,!.2F
    e1f4:	f230e0d0 300c1934 702d490a fe271318     ..0.4..0.I-p..'.
    e204:	fcc0033f 0e10c239 06180a71 80ff7f04     ?...9...q.......
    e214:	3a020060 d0ca11ed 31191107 011202fc     `..:.......1....
    e224:	a0088011 20071001 911c18d2 07963089     ....... .....0..
    e234:	a10d0003 0ff80002 307470f8 3807701b     .........pt0.p.8
    e244:	1c038603 3ee03f1c 02a20800 0f0f0610     .....?.>........
    e254:	3d6cde9f 0d30c003 f80002a1 7170f80f     ..l=..0.......pq
    e264:	3880f180 c0001800 00180007 300006c0     ...8...........0
    e274:	001c8003 470006e0 a10dc0ff 0ff80102     .......G........
    e284:	80e370f0 0c0003cc 80037000 00f8017c     .p.......p..|...
    e294:	00f00070 8019c038 f80f07c7 a10e800f     p...8...........
    e2a4:	00030002 003c000e 06b001f8 71c01860     ......<.....`..q
    e2b4:	0603c381 18300c0c ff3f32e0 0d0003b0     ......0..2?.....
    e2c4:	7f1002a1 802580e3 f83ff804 d40073f0     ......%...?..s..
    e2d4:	19c03800 0f06c780 0d800ff8 7c0002a1     .8.............|
    e2e4:	7138f807 9801e6c0 1e03c000 1c3cfe0d     ..8q..........<.
    e2f4:	0c6035e0 860133c0 1ff00f0e 02a10d00     .5`..3..........
    e304:	00f0ff11 30000480 00048001 48308030     .......0....0.0H
    e314:	14302430 a10d0030 0ff80002 306530f8     0$0.0........0e0
    e324:	fec06018 3838fc07 19c06ac0 0f07c780     .`....88.j......
    e334:	0d800ff8 f80002a1 7170f80f 5601cc80     ..........pq...V
    e344:	3807cc00 78b07f3c 190003c0 8e016780     ...8<..x.....g..
    e354:	3ee01f1c 017b0200 6044e911 11eda302     ...>..{...D`....
    e364:	b47244e9 000e6a0c 0f780001 077cf081     .Dr..j....x...|.
    e374:	e0013080 c007c007 001e800f 1a410d10     .0............A.
    e384:	00faff11 0cfc7f04 00080e6a 03f00178     ........j...x...
    e394:	07e003e0 e0010c80 f0810f3e 0080001e     ........>.......
    e3a4:	0002a10e 1efe07fc e00e300e 0018800d     .........0......
    e3b4:	03e00030 38000e80 8203e000 0080c040     0......8....@...
    e3c4:	1a000c20 0780ebd2 ff0300f8 1ef001e0      ...............
    e3d4:	e0007800 070e001c c3e08c07 e1388cfd     .x............8.
    e3e4:	1c18c6f1 8301c618 6830c030 98c100c6     ........0.0h....
    e3f4:	187318c0 00630c06 38708cc3 381fc761     ..s...c...p8a..8
    e404:	037e7f18 3080c787 00c70000 00787000     ..~....0.....px.
    e414:	1fe0031c 80ff3f00 0080ff00 7002a111     .....?.........p
    e424:	36808003 00c11d00 c27100c6 30100603     ...6......q....0
    e434:	07fe0f18 3080c1ff 00860ee0 c0006034     .......0....4`..
    e444:	6f02a210 c3ff07fe 1d807100 00cc0038     ...o.....q..8...
    e454:	ffe300e6 c0f8ffe1 ce03600e 1d001b00     .........`......
    e464:	fcff1c80 1200f87f 3f8002a1 07fc1f80     ...........?....
    e474:	1cc0c181 00cc0170 cc00801b 01c00100     ....p...........
    e484:	80730098 8303380c f83fe081 1100fc01     ..s..8....?.....
    e494:	fe8f02a2 c0e0ff03 9101301e 00dc0680     .........0......
    e4a4:	180f001b 31006600 fc7f3c80 0f00fc1f     .....f.1.<......
    e4b4:	ff7102a2 470070ff 01c0edff 0ec0ff1f     ..q..p.G........
    e4c4:	ff3102a2 1f01e0fe 11006efe a1130080     ..1......n......
    e4d4:	c01fc002 e001ff0f c7013878 00600c00     ........x8....`.
    e4e4:	38010066 07300200 b80100fb 01801900     f..8..0.........
    e4f4:	e018009c f0808703 7f00fe3f 02a21000     ........?.......
    e504:	1807809b ffff7100 807100b8 01a30206     .....q....q.....
    e514:	0b98ef1b 00da01a1 03c601f4 3f063370     ............p3.?
    e524:	a210f8e0 e6006c02 e100e300 e0c0e080     .....l..........
    e534:	e030e060 f00ce018 ee03fc06 e080e301     `.0.............
    e544:	06078ce0 0e60c401 00980330 02a20de0     ......`.0.......
    e554:	c00d801b 3f026005 02a311fe f83c00ee     .....`.?......<.
    e564:	3760e703 61368339 738c71ce f060c386     ..`79.6a.q.s..`.
    e574:	100607e3 c09102a2 7c03f006 d900b601     ...........|....
    e584:	068c7180 188c03c3 601c0636 d80cb031     .q......6..`1...
    e594:	f6016c03 03607c00 02a11480 07801fc0     .l...|`.........
    e5a4:	1e7880ff 70380007 0300e300 301b0038     ..x...8p....8..0
    e5b4:	00180e00 c301e018 030f1c80 00fc3fc0     .............?..
    e5c4:	a210003f 07ff6f02 3900e3ff 00580f80     ?....o.....9..X.
    e5d4:	0066006c fff1ff73 0c00b8e1 a9140000     l.f.s...........
    e5e4:	801fc0fe 7880ff07 3800071e 60e80070     .......x...8p..`
    e5f4:	00c06c00 98030033 79e01800 0ffc81c3     .l..3......y....
    e604:	ff1fe003 008e3f80 a2103000 87ff8f02     .....?...0......
    e614:	3900e3ff 00380f80 0076006c fff1ff73     ...9..8.l.v.s...
    e624:	60e0c0e0 180c3030 c6010c07 19006300     ...`00.......c..
    e634:	03c00e80 6002a110 e0ff007f 0de078e0     .......`.....x..
    e644:	0067000c ff00e003 03f03f00 000f00fe     ..g......?......
    e654:	0d00e301 067006c0 ff070f1e 1000fe00     ......p.........
    e664:	ff1102a0 1a30a0ff 30400103 02a21000     ......0...@0....
    e674:	b807809b 37006c00 18803900 f83f38f0     .....l.7.9...8?.
    e684:	1100f003 006c02a1 0c0f801b 06306900     ......l......i0.
    e694:	3860c040 84c18038 ce001803 00600308     @.`88.........`.
    e6a4:	800310f8 9103a01b e5001c80 18036c80     .............l..
    e6b4:	1834600c 83c1c018 301c0c86 06c3c061     .`4........0a...
    e6c4:	31700c18 1803c680 8033600e 80b0036e     ..p1.....`3.n...
    e6d4:	076003d8 0e103c80 13003800 006702a0     ..`..<...8....g.
    e6e4:	8103381c 060c70c0 07c06000 803b001c     .8...p...`....;.
    e6f4:	0110b001 001e00c0 63006003 01380e00     .........`.c..8.
    e704:	0c18c0c1 70600003 39000e07 12c001c0     ......`p...9....
    e714:	004c02a0 0c07c01c 38c0c100 83010e1c     ..L........8....
    e724:	03701880 0233009c 000d7800 000320c0     ..p...3..x... ..
    e734:	3002a010 0c00fcff 0e000c00 06000600     ...0............
    e744:	07000600 03000300 01800300 01800180     ................
    e754:	00c00180 01c000c0 05e0ff1f fd11e9d2     ................
    e764:	c470e3c6 01a0087c 122c8111 89913860     ..p.|.....,.`8..
    e774:	3860900c e9d1050c 8f1efd11 0c7c1c46     ..`8........F.|.
    e784:	60c02559 9881f080 06860c93 17111860     Y%.`........`...
    e794:	ffff11ea 2e412105 0d60301c fce10179     .....!A..0`.y...
    e7a4:	7370f81f 0003c000 fcf11f3c 014603c6     ..ps....<.....F.
    e7b4:	f8700e98 c0f861ff 1702a20d 1b7c0680     ..p..a........|.
    e7c4:	c03978fc 00ef0166 0cb8036c 0c7fe3f0     .x9.f...l.......
    e7d4:	790c00f8 1ff8c001 0e8cc3e1 08c03ae0     ...y.........:..
    e7e4:	1c0333c0 f8807f38 1602a10d c77c3000     .3..8........0|.
    e7f4:	c03c38fb 00ef0077 0e98016e 60ff7870     .8<.w...n...px.`
    e804:	790d80f9 0ff8e001 807170f8 ff3880d1     ...y.....pq...8.
    e814:	c00160fc 0ecf0003 801ff01f e100a008     .`..............
    e824:	4798fcf1 806198f6 00eaa90d 70fe8ff9     ...G..a........p
    e834:	01ee8079 03dc00de f1e01c30 00f3c1ff     y.......0.......
    e844:	0136800d f03f0e8e a20c003f 0c801702     ..6...?.?.......
    e854:	c1f37ff8 07b8079c a2020658 bec9d100     ........X.......
    e864:	e8d705ec 8f0639d0 c0796347 d701a20c     .....9..Gcy.....
    e874:	60070c80 70180773 477006c7 30c239f0     ...`s..p..pG.9.0
    e884:	0c8c83e1 c0017360 db00a202 7a1498ef     ....`s.........z
    e894:	7cf80c03 c3f3ef6f 070edce1 58070cb8     ...|o..........X
    e8a4:	7a0c060c 6ff80c02 079cc1f3 065807b8     ...z...o......X.
    e8b4:	e001790d 70f80ff8 03ce8071 07dc00de     .y.....pq.......
    e8c4:	e1e01830 0df001ff f80ceaaa 73f0f837     0...........7..s
    e8d4:	de03cc80 7007d800 fec6e119 00ccf019     .......p........
    e8e4:	eaa90d00 f68ff900 ee807970 dc00de01     ........py......
    e8f4:	701c3003 f3c1fef0 078001c0 ef2d017a     .0.p........z.-.
    e904:	5670c3f1 01790c00 e33ff0c1 c00c9883     ..pV..y...?.....
    e914:	c01f8007 007e807f 06dc003b 07ff6170     ......~.;...pa..
    e924:	01a007e0 3f621401 3e308ae9 027a0c1e     ......b?..0>..z.
    e934:	8075801b 7930076c 0de6c3fe 80b10178     ..u.l.0y....x...
    e944:	c1316038 390e06c3 c20e1803 e0006103     8`1....9.....a..
    e954:	78130001 07066c02 c10c1c18 18368c41     ...x.l......A.6.
    e964:	368663c3 07236230 c6067263 402c28c0     .c.60b#.cr...(,@
    e974:	02027070 01780d00 0c9801ae 81e37030     pp....x.....0p..
    e984:	0f60038c f8001c80 c01c6003 180683e3     ..`......`......
    e994:	0d38e00c 01ace9a8 060c0fb0 c1603030     ..8.........00`.
    e9a4:	0c180687 0f600662 41820784 1e800181     ....b.`....A....
    e9b4:	0d007000 ffd00178 0e8001f0 80037000     .p..x........p..
    e9c4:	07e0001c c0013800 0230000e d108fe3f     .....8....0.?...
    e9d4:	787020e9 03034673 6818e008 c0030cc4     . pxsF.....h....
    e9e4:	e8d202e0 e0bdefdb 2ee9d008 408c8607     ...............@
    e9f4:	c10132c0 1c18309a 0e001c3c c0032221     .2...0..<...!"..
    ea04:	ffb0f11f ffff7840                       ....@x..

0000ea0c <Arial_28_data>:
    ea0c:	16000000 1780b801 91ea79bf 2994053c     .........y..<..)
    ea1c:	c11dbc1d 80800cc8 2d00380b 000e1c00     .........8.-....
    ea2c:	1ca03878 3870000e e0ffff4f 1c283c38     x8....p8O...8<(.
    ea3c:	3878000e f8ffff13 1c0a1c38 3c38000e     ..x8....8.....8<
    ea4c:	000e1c04 ac3e4009 7e00c000 0ff03f00     .....@>....~.?..
    ea5c:	f0cc03ff 86438ef1 01180e1d 601e00e3     ......C........`
    ea6c:	3f00fc03 00ff01e0 cf00f80f 80741880     ...?..........t.
    ea7c:	83c1f160 c6f330bc 87cf7c3c f87fe0ff     `....0..<|......
    ea8c:	0112fc01 b80f0080 001f4640 c03f8003     ........@F....?.
    ea9c:	e0798007 e0700007 70e0000f 70e0000e     ..y...p....p...p
    eaac:	70e0001c 70e0003c 70e00038 70e00078     ...p<..p8..px..p
    eabc:	70e00070 e07000e0 e17900e0 c33f00c0     p..p..p...y...?.
    eacc:	030fe0c3 0700f887 07003c8f 01001d0e     .........<......
    eadc:	03c081c3 07c08183 07c08183 0fc08103     ................
    eaec:	0ec08103 1cc08103 3c80c301 3880e701     ...........<...8
    eafc:	7800ff00 0b003c00 013440b8 fe0700f8     ...x.<...@4.....
    eb0c:	00ff0f00 1e000f0f 80238107 e0c00170     ..........#.p...
    eb1c:	00e0e301 7f00c0ff 00fe0000 0300fc01     ................
    eb2c:	8f0700fe 8f070f04 1c8f031e 011cde01     ................
    eb3c:	fe001cfe 1e7c001c 000f7c00 ff830ffe     ......|..|......
    eb4c:	c1e7ff07 7e8083ff 94010001 39be0f49     .......~....I..9
    eb5c:	5c480400 0303031a c4c08181 c3250c1c     ..H\..........%.
    eb6c:	c1802b78 3808032e 8001070c 040c30e0     x+.....8.....0..
    eb7c:	c01a7c48 03061c30 030ec480 a00d3824     H|..0.......$8..
    eb8c:	90060ef2 060e64e0 81030307 98068081     .....d..........
    eb9c:	e0201f28 f7ee8923 07fcc7ff ef813bc0     (. .#........;..
    ebac:	20081c07 2f42a609 01001ca0 ffff27c0     ... ..B/.....'..
    ebbc:	000007e8 92010070 9b3e177d 24860520     ....p...}.>. ..$
    ebcc:	01fc3f1b 3c176086 1700b805 75401e00     .?...`.<......@u
    ebdc:	1407c901 5170241c 1c0197c0 40380900     .....$pQ......8@
    ebec:	01f0032c f87f80ff 80830f1f ed005c72     ,...........r\..
    ebfc:	80ef01e0 38009707 870f0e70 0ff0ffc0     .......8p.......
    ec0c:	007e00fc 2c80b805 010e6000 e1073ee0     ..~....,.`...>..
    ec1c:	ceef7ffe a00fecf0 003d401f 20b80970     .........@=.p.. 
    ec2c:	00f8032c ff3fe0ff 78fce083 1f00c703     ,.....?....x....
    ec3c:	001e001c 07003800 00700080 e001000f     .....8....p.....
    ec4c:	07003c00 00f00080 c003001e 1f007800     .<...........x..
    ec5c:	00c00300 000f0078 1f00c001 ff7ffcff     ....x...........
    ec6c:	403809f0 03f0072c f8ff80ff 00870f3e     ..8@,.......>...
    ec7c:	3807e071 0300e800 00f00080 100f001c     q..8............
    ec8c:	7f00f803 003c00c0 7c008003 c0f10000     ......<....|....
    ec9c:	f3009c03 0f3c3cc0 3fc0ff07 00f801f0     .....<<....?....
    ecac:	2c20b809 00000700 101f00f0 0f007e00     .. ,.........~..
    ecbc:	00ee01e0 8e03e01c 0fe07800 e0e0000e     .........x......
    eccc:	c0030e1c 070e38e0 0ef0e000 7fe2001e     .....8..........
    ecdc:	0380feff 40380980 f0ff032d 80a3feff     ......8@-.......
    ecec:	03001c02 fc7f809f e0c3ff0f c003783c     ............<x..
    ecfc:	00c03a00 e00e0077 71008e03 071e1ec0     .:..w......q....
    ed0c:	3fe0ff83 00fc00f8 2c20b809 7f00fc01     ...?...... ,....
    ed1c:	81ff0ff0 013c7cf0 781e80c3 00e0f000     .....|<....x....
    ed2c:	c301001c c1ff1cf0 c01ffedf 9e07f0f1     ................
    ed3c:	00b83a00 9c038039 07c03900 f8f0000e     .:..9....9......
    ed4c:	c0ff071e 7e00f81f 40380900 f8ff3f2d     .......~..8@-?..
    ed5c:	01000600 00600080 0007001c 3800c000     ......`........8
    ed6c:	80c00120 7040020e 28800309 e0a0001c      .....@p...(....
    ed7c:	40380900 01f0032c f87f80ff 8087071e     ..8@,...........
    ed8c:	e3009c7a 0f3c3cc0 3fc0ff03 03ff0fe0     z....<<....?....
    ed9c:	0ff0f0c0 e0eb003c 7900de01 071e0ec0     ....<......y....
    edac:	1ff0ff83 00fc00f8 2c403809 ff01f003     .........8@,....
    edbc:	1ef8ff80 70808707 003c07e0 5c0d0067     .......p..<.g..\
    edcc:	0fc03900 c0e7033c 87fb7ffc 0e3f70fe     .9..<........p?.
    eddc:	00e00100 ce01700e 1ee07000 ff81071e     .....p...p......
    edec:	00f81fe0 aa0100fc 463f1760 b6019e80     ........`.?F....
    edfc:	463f177d 904d9f80 2e42a609 00200000     }.?F..M...B... .
    ee0c:	e007001e fe00fc01 0f803f00 00f007c0     .........?......
    ee1c:	000e00f8 0700f800 c00f00f0 00803f00     .............?..
    ee2c:	fc0100fe 00e00700 2000001e 2f449809     ........... ..D/
    ee3c:	00ffff3f ffff0400 42a609f0 0f00802e     ?..........B....
    ee4c:	00fc0000 0f00f007 803f00e0 01007e00     ..........?..~..
    ee5c:	e00300fc 03000e00 00fc01e0 803f007e     ............~.?.
    ee6c:	f007e00f 0f00fc00 00800000 40380900     ..............8@
    ee7c:	01f0032c fcffc0ff 80c7071e c707e078     ,...........x...
    ee8c:	01000e00 007800c0 c003000e 7c00f001     ......x........|
    ee9c:	03001f00 00f000c0 e000053c 48000012     ........<......H
    eeac:	4812000e 0300505c 000000fe 0000feff     ...H\P..........
    eebc:	00fcff1f f803fc03 07003f00 00e003e0     .........?......
    eecc:	003c800f c0013c00 1ef01c3e c1e3fc07     ..<..<..>.......
    eedc:	0ef77fe0 f083070e 0778f070 8007c781     ........p.x.....
    eeec:	78380e3c c373e000 9c030780 1c30001c     <.8x..s.......0.
    eefc:	8001e0e1 0c000ee7 000e4707 70380e1c     .........G....8p
    ef0c:	c3f1e000 0e070e80 78f0001e 870f7078     ...........xxp..
    ef1c:	fce1c381 fe0f0e78 3f7880ff e001f8e7     ....x.....x?....
    ef2c:	8f031f7c 38000000 0300003e 0000f880     |......8>.......
    ef3c:	00f00378 f00f800f 1f00f803 0080ffff     x...............
    ef4c:	00f0ff3f 00f81f00 20b80c00 c0072035     ?.......... 5 ..
    ef5c:	00770008 10e03d00 8000c701 0f001c1c     ..w..=..........
    ef6c:	70008107 073c001c 1cc00182 f0ff1f10     ...p..<.........
    ef7c:	20feff0f 27710070 70c80100 003c0700     ... p.q'...p..<.
    ef8c:	0000ee01 60b80a38 03feff34 ff0ffeff     ....8..`4.......
    ef9c:	f80038fc f0e500e0 01c03900 1f1f00c7     .8.......9......
    efac:	ff7ff0ff c7ffffe1 009c0f00 3e00700e     .............p.>
    efbc:	e00e00b8 01807b00 3f1f00ce fffff8ff     .....{.....?....
    efcc:	00f8ffc3 3840380c 01007f00 ff01e0ff     .....8@8........
    efdc:	3ff001fc 8107e001 e0e001e0 00e07800     ...?.........x..
    efec:	0800701c 6f000078 80030000 00e00000     .p..x..o........
    effc:	07007008 8e070038 80870300 03e0c103     .p..8...........
    f00c:	c0077cc0 07c0ff1f 7f00c0ff 60b80b00     .|.............`
    f01c:	00feff38 ff80ffff 03e0e0ff f000e0f0     8...............
    f02c:	e07800e0 001c3d00 0080b703 0700703c     ..x..=......<p..
    f03c:	8e0f0070 00ce0100 0700ce03 0e0f008e     p...............
    f04c:	ff0f3f00 f8ff0ffe 00e0ff0f 3560b80a     .?............`5
    f05c:	defeff3f 00470000 ffff2700 0900c09b     ?.....G..'......
    f06c:	ff0400e0 b809fcff ff3f3160 040078ff     ........`1?..x..
    f07c:	ff090070 00c09bff 00008033 3c40380d     p.......3....8@<
    f08c:	00c03f00 1f00ff3f e007f0ff 00f0011f     .?..?...........
    f09c:	0f0078f0 e300000e 701c00c0 008e0100     .x.........p....
    f0ac:	00700500 07c01300 0000b8ff 01007078     ..p.........xp..
    f0bc:	380000cf 1e0700e0 f0e10100 801f7c00     ...8.........|..
    f0cc:	ffff017f e0ff0fc0 00e03f00 3960380b     .........?...8`9
    f0dc:	df0300bc fff30000 00f0feff 03009c0f     ................
    f0ec:	80b80180 fd7ebf17 203808e0 fa00a029     ......~...8 )...
    f0fc:	00600f00 f00ec0f3 1f073807 81ff870f     ..`......8......
    f10c:	003f80ff 3460b80b e07800e0 01e0f000     ..?...`4..x.....
    f11c:	c003e0e0 e08007e0 1ee0000f 003ce000     ..............<.
    f12c:	e00078e0 e0e100f0 00e0e300 ef00f0e7     .x..............
    f13c:	78fe0070 003cfc00 f0001cf8 0fe0000e     p..x..<.........
    f14c:	8007e000 e08003e0 01e0c001 f000e0e0     ................
    f15c:	e07000e0 00e03800 1e00e03c 2d603809     ..p..8..<....8`-
    f16c:	f00600bc 00c01b00 3f010057 b80cf8ff     ........W..?....
    f17c:	00f84280 00e0cf0f 7f00fcfd bb03e08e     .B..............
    f18c:	3cef01b8 e3790ee0 0ecfe380 c7c11d0e     ...<..y.........
    f19c:	380e8e87 0f9e833b 79e00e3c b8033ee0     ...8;...<..y.>..
    f1ac:	0be00007 1e396038 00be0300 01c08f07     ....8`9.........
    f1bc:	bb03c0dd 807307c0 1d80e30e 873b80c7     ......s.......;.
    f1cc:	00077700 dc010fee 0eb8030e 0e1e7007     .w...........p..
    f1dc:	c01d1ce0 3c803b1c ee380077 00dc3900     .....;.<w.8..9..
    f1ec:	7700b87b dc0f008e 00c70f00 380de001     {..w...........8
    f1fc:	7f003c40 fc3f0080 e0ff1f00 017ee007     @<....?.......~.
    f20c:	78e003f0 000e1e00 0080c301 00000e3d     ...x........=...
    f21c:	0000f076 1e0000ee e300001c 383c00c0     v.............<8
    f22c:	80070700 0078e001 7ee007f8 80ff7f00     ......x....~....
    f23c:	00c0ff03 0a00e01f ff3460b8 ffff03ff     .........`4.....
    f24c:	38feff0f 00e07c00 f5018073 007700c0     ...8.|..s.....w.
    f25c:	0e00dc03 fff90070 feffc7ff dec0ff1f     ....p...........
    f26c:	005f0000 3c0d0000 7f003c5f f87f0000     .._....<_<......
    f27c:	c0ff1f00 017cc007 78c003e0 000e3c00     ......|....x.<..
    f28c:	00808303 00000e79 0100f0e6 380000ce     ....y..........8
    f29c:	1c0f00e0 80c30100 07383830 fb80078f     ........088.....
    f2ac:	f80778c0 007ec007 03e0ff7f 1f00ffff     .x....~.........
    f2bc:	0000f0e3 0000001c 60b80b80 80ffff38     ...........`8...
    f2cc:	ffe0ffff 00e0f0ff 7800e0f8 5c3d00e0     ...........x..=\
    f2dc:	009c0300 0f009c07 1f3f001c ff1ffeff     ..........?.....
    f2ec:	e0ff1ffc 23c0071c 80033c80 0f80031e     .......#.<......
    f2fc:	83078003 80c30780 0070c403 1e00703c     ..........p.<p..
    f30c:	0b0f0070 01344038 ff1f00fe 01ff7f00     p...8@4.........
    f31c:	80031ff0 0e000e0f c7018043 000f0000     ........C.......
    f32c:	00800f00 1f00f01f ff0f00fe 80ff0380     ................
    f33c:	00807f00 0700800f ef0000c7 00ce0100     ................
    f34c:	0f009e03 3f3c001e ff3ff001 00ff1fc0     ......<?..?.....
    f35c:	0a00f80f 3f2f20b8 07d0ffff 80036800     ..... /?.....h..
    f36c:	14c00134 0b00e000 bc396038 00ef0300     4.......8`9.....
    f37c:	00c0f900 f800803b f0380070 07f8f000     ....;...p.8.....
    f38c:	00ffffc0 3f00fcff b80c00c0 00e03420     .......?.... 4..
    f39c:	0100bc03 0e00e0f0 e0008083 037900f0     ..............y.
    f3ac:	f0800380 001ce001 3c800770 c0011c20     ........p..< ...
    f3bc:	00f08007 3c0038e0 e000041e 783c00e0     .....8.<......<x
    f3cc:	001c0700 8000cf01 01007007 072001fc     .........p.... .
    f3dc:	b81200c0 00e04c00 c03b00f8 e701e003     .....L....;.....
    f3ec:	07800f00 e00e8043 3b008f03 011c1e80     ....C......;....
    f3fc:	0e7200ee 3880e300 018e031c 83038ec4     ..r....8........
    f40c:	1e1ce080 0e08070e 8083030e 1e0e3838     ............88..
    f41c:	1ce07100 e0384070 f700380e 90e03980     .q..p@8..8...9..
    f42c:	e00e803b 1f007e00 003e2001 b80c800f     ;....~... >.....
    f43c:	00783200 07000f0f c001c081 0fe00038     .2x.........8...
    f44c:	e0017800 0e38003c 80070700 00c0e301     .x..<.8.........
    f45c:	0700e038 fc010070 003e0000 00000700     8...p.....>.....
    f46c:	0100e003 f70000fc e0380080 001c1c00     ..........8.....
    f47c:	0780070f c001e080 07f0001c f0007880     .............x..
    f48c:	0e1c001c 80870300 00c0f300 00b80c1e     ................
    f49c:	0700f032 c301009c f0e00080 001e7800     2............x..
    f4ac:	0e80033c 8007f000 03c0031e f000e080     <...............
    f4bc:	3c1e0078 008e0300 00007700 0300c01f     x..<.....w......
    f4cc:	0e8006e0 70003000 20380b00 ffff2731     .....0.p..8 1'..
    f4dc:	001e0000 01007800 800300e0 00000e00     .....x..........
    f4ec:	f000003c 00c00300 1c000007 00780000     <.............x.
    f4fc:	0700e001 000e0080 00003800 c00300f0     .........8......
    f50c:	00000f00 7000001c 00e00100 13008007     .......p........
    f51c:	03f8ffff 3f175cc8 def086f7 4f38c21b     .....\.?......8O
    f52c:	00b805f0 5c021c17 1c091c05 1c241c14     .......\......$.
    f53c:	1d901c50 c8031c00 f43f175c fad0873e     P.......\.?.>...
    f54c:	f0cf031e a2269e07 f8008103 3b20d800     ......&....... ;
    f55c:	0c380e84 92838318 1cc039e0 2dfc870b     ..8......9.....-
    f56c:	c0ffff3f 9a4b8a03 1c3c7cf8 402a090e     ?.....K..|<...*@
    f57c:	03f8072c fcffc0ff 00cf073c 4007c079     ,.......<...y..@
    f58c:	0f001c00 7ff07f80 c7f91ffe 07e039c0     .............9..
    f59c:	00e70038 9f0fe03c eefff107 fcc0f91f     8...<...........
    f5ac:	6038091c 0300bc2d fe77c08f fce1ff0f     ..8`-.....w.....
    f5bc:	e8013e3e 80b703f0 39008f07 873f0ff0     >>.........9..?.
    f5cc:	eff0ffc7 007e1cfc 2840aa08 ff03f003     ......~...@(....
    f5dc:	f8e0ff01 1c07787c 3e00ef01 001c0070     ....|x.....>p...
    f5ec:	e01c8077 87033c0e f0ffc083 f801f81f     w....<..........
    f5fc:	20380900 3800a02d fe07c70f 7cfcffe1     ..8 -..8.......|
    f60c:	f8019e3f 80f70370 3c008707 878f0ff0     ?...p......<....
    f61c:	0ffefff0 387ec0fd 2c402a09 ff01f003     ......~8.*@,....
    f62c:	1ef87f80 78808707 001807e0 3f0f0077     .......x....w..?
    f63c:	00f0fcff e000000f e1009e03 ff1f7cf0     .............|..
    f64c:	0fc0ff01 20b805e0 fee00718 23e1e11f     ....... .......#
    f65c:	8ef67f82 38141c0d 3c3a0900 c1f1032c     .......8..:<,...
    f66c:	ff7f38ff 80e70f1f fd001c7e c0e101e0     .8......~.......
    f67c:	e3033c0f ff3ffce1 1f70ff83 dc01008e     .<....?...p.....
    f68c:	0e803b00 c0c70378 07fefff8 803f00ff     .;..x.........?.
    f69c:	2d603808 3f0e00bc ffe37f07 f83cf8f9     .8`-...?......<.
    f6ac:	ef03780f 03f03e00 01c001b8 3e1360b8     .x...>.......`.>
    f6bc:	c0fbfd86 13dc4904 a001f420 f4a00ffa     .....I.. .......
    f6cc:	3f3f0f0e b808009f 00bc2960 c0790007     ..??....`)....y.
    f6dc:	1c1e703c 8107070f e071c0c3 7807f01c     <p........q....x
    f6ec:	7d00ff01 07381ee0 e0c1010f 0f1c3870     ...}..8.....p8..
    f6fc:	c0e10107 1c07703c 3c00e701 1360b801     ....<p.....<..`.
    f70c:	e0fd7ebf 4260aa0d 0e3ff0e3 eff88f7f     .~....`B..?.....
    f71c:	c3cffffd 1ff83cdc f000ef01 c001bc0f     .....<..........
    f72c:	8003781f 0338803b 602a0880 77f0e32c     .x..;.8...*`,..w
    f73c:	9fff3ffe f780cf83 03f03e80 803b00ef     .?.......>....;.
    f74c:	402a091c 01f0032c f87f80ff 80870f1f     ..*@,...........
    f75c:	3c07e078 01e0fd00 c07900de c3033c0e     x..<......y..<..
    f76c:	fc3ff0e1 1f00ff03 7c3a0980 1cf0e32c     ..?.......:|,...
    f77c:	f8bf83ff 808f0f7f ed003c7a c0e301e0     ........z<......
    f78c:	cf037c0e fcfff1c1 1f07ff3b 0300bc81     .|......;.......
    f79c:	3a090080 f1032c3c 7f38ffc1 e70f1ff7     ...:<,....8.....
    f7ac:	07e07c80 e0fd00bc 0fc0e101 e1e3033c     .|..........<...
    f7bc:	83ff3ffc 8f1f70ff 003800a0 602a0507     .?...p....8...*`
    f7cc:	fbdde71a e0117cfe 03bc016f 20aa0880     .....|..o...... 
    f7dc:	0fe00f26 e1ff07fe 0fe078e0 00ce0138     &........x..8...
    f7ec:	7f00e003 01fe1f80 fc0fe0ff 01803f00     .............?..
    f7fc:	3807c0f1 e181cf03 f83ff0ff 0500f803     ...8......?.....
    f80c:	04160038 138e8501 a3e1e8ff e00f7880     8............x..
    f81c:	08800ffc bc2d602a 0ec0fb00 077007e0     ....*`-.......p.
    f82c:	07cf07bc ff71ffe7 091c3f38 e02600aa     ......q.8?....&.
    f83c:	03e0f000 0e7a008f 1e70e000 78c00107     ......z...p....x
    f84c:	7070403c 07088f07 7007121c 00c00720     <@pp.......p ...
    f85c:	8003003c 00aa0e00 e0001c3b c0077807     <.......;....x..
    f86c:	e0031c3e 800d381c e00e1ce4 83313870     >....8......p81.
    f87c:	0ec7e180 701c8701 c0311c07 00e7e01c     .......p..1.....
    f88c:	00b88333 03e00eee 00021bb8 01800ff8     3...............
    f89c:	07003ce0 1c007000 09008001 f024002a     .<...p......*.$.
    f8ac:	7000cf01 071e1ee0 1ce0e081 00cf033c     ...p........<...
    f8bc:	f003c03d 00043e00 003f00f0 cf01f00f     =....>....?.....
    f8cc:	1ee07000 e081071e 033c1ce0 083c00cf     .p........<...<.
    f8dc:	e0263cba f0019c03 071c0ee0 1c38e0a0     .<&...........8.
    f8ec:	e0e0401e e380781c 00e11d80 821f00ee     .@...x..........
    f8fc:	1e00f800 20e08004 0007000e e003c00f     ....... ........
    f90c:	0900f000 2f27002a 1e00f8ff 01800700     ....*.'/........
    f91c:	003800e0 c003000f 3c00f000 03000f00     ..8........<....
    f92c:	00f000c0 000f003c 7000c003 ffff2700     ....<......p.'..
    f93c:	1a3cc805 c10ff001 078543e3 071ee000     ..<......C......
    f94c:	c00770c0 d0e0001e 1ec021e1 78801f20     .p.......!.. ..x
    f95c:	937bca01 fbfd7ebf c80580e3 0ff01a3c     ..{..~......<...
    f96c:	e101fc80 8083c2a1 0fe0011c 810f3880     .............8..
    f97c:	70681ce0 111ee090 0a001ef8 1fae250c     ..hp.........%..
    f98c:	01ff0300 c31dfebf fe03ecff ffc00700     ................

0000f99c <Arial_72_data>:
    f99c:	01000000 2c6402c0 efffcd01 fff97fff     ......d,........
    f9ac:	adbff6d7 3ec9a7fd f17f0368 11cd06ff     .......>h.......
    f9bc:	80ff4d72 00fffb3f 07f0df7f 3f00fffc     rM..?..........?
    f9cc:	7f00fcb1 e403c00f c007009f 0304640d     .............d..
    f9dc:	1f000088 80ff00f0 c0ff0000 0012fc07     ................
    f9ec:	03c07f00 010000fe f81f00ff fc0f0000     ................
    f9fc:	90c07f00 00fc0700 0000e03f ff01f01f     ........?.......
    fa0c:	ff000080 04fc07c0 c07f0080 0000fe03     ................
    fa1c:	1f00ff01 0f0000f8 c07f00fc e03f0000     ..............?.
    fa2c:	df00ff01 ffffffff ffc7ffff ffffffff     ................
    fa3c:	1f00e0ff 80ff00f0 c07f0000 0000fe07     ................
    fa4c:	1f00ff03 012001f0 f80f00ff fc070000     ...... .........
    fa5c:	00e07f00 01f03f00 000900ff ff00f01f     .....?..........
    fa6c:	7f000080 00fe07c0 00ff0300 4000f01f     ...............@
    fa7c:	0f00ff01 ff3700f8 ffffffff fffff1ff     ......7.........
    fa8c:	ffffffff 00fc07f0 0000e03f ff01f01f     ........?.......
    fa9c:	ff000080 00fc07c0 c07f4002 0000fe03     .........@......
    faac:	1f00ff01 0f0000f8 c07f00fc fc071200     ................
    fabc:	00e03f00 01f01f00 000080ff fc07c0ff     .?..............
    facc:	7f900000 00fe03c0 00ff0100 0100f81f     ................
    fadc:	0f00ff01 0b0000f8 8ab313eb c0070000     ................
    faec:	00000000 0000f83f ffff0300 1f000080     ....?...........
    fafc:	00e0ffff ffff3f00 ff0000f8 00fcffff     .....?..........
    fb0c:	ffffff01 ff0300fe 00ffffff ffffff03     ................
    fb1c:	ff0780ff c0ffffe7 cf07ff0f fe0fc0ff     ................
    fb2c:	e0ffc307 c007fc1f f81fe0ff f07fc007     ................
    fb3c:	c007f01f f03ff03f f13fc007 f800fc07     ....?.?...?.....
    fb4c:	fc07ff03 ff01f800 f800fc07 ff24f001     ..............$.
    fb5c:	00001f80 1fc0ff00 7f000000 00001fc0     ................
    fb6c:	1fe07f00 7f000000 00001ff0 1ff83f00     .............?..
    fb7c:	3f000000 00001ffe 9fff1f00 1f000000     ...?............
    fb8c:	0000ffff ffff0f00 07000000 00e0ffff     ................
    fb9c:	ffff0300 000000fe 80ffffff ff3f0000     ..............?.
    fbac:	0000e0ff f8ffff1f ff030000 0000fcff     ................
    fbbc:	ffffff00 1f000000 0000ffff ffff1f00     ................
    fbcc:	1f000080 00c0ff1f ff071f00 1f0000e0     ................
    fbdc:	00e0ff01 7f001f00 030000f4 80fe07e0     ................
    fbec:	007c0000 0000f27f fc07800f 800f001f     ..|.............
    fbfc:	e03ffe07 ff00f001 f001f0bf f0bfff00     ..?.............
    fc0c:	ff01f001 f001f09f f81fff01 ff03f001     ................
    fc1c:	f001fc1f fc0fff03 fe07f001 f001fe0f     ................
    fc2c:	ff0ffe0f fc1ff001 f0c1ff07 ff03fc7f     ................
    fc3c:	f8fff1f1 ffffff03 ff01f0ff e0ffffff     ................
    fc4c:	ffffff00 7f00c0ff 80ffffff ffff3f00     .............?..
    fc5c:	1f0000ff 00fcffff ffff0700 000000f0     ................
    fc6c:	0000ffff f00f0000 00680000 00003e00     ..........h..>..
    fc7c:	07000008 130000c0 90fd1b65 0000ff00     ........e.......
    fc8c:	e01f0000 ff1f0000 00000000 0000807f     ................
    fc9c:	0000ffff 00fc0300 feff0f00 0f000000     ................
    fcac:	3f0000e0 0000fcff 00807f00 f8ffff01     ...?............
    fcbc:	fc010000 f80f0000 0000f01f 0000f00f     ................
    fccc:	c03fc03f 803f0000 00fe0100 0100807f     ?.?...?.........
    fcdc:	070000fe 00fe00f0 00f00f00 01803f00     .............?..
    fcec:	3f0000fc 1f0200c0 00fe00c0 00c03f00     ...?.........?..
    fcfc:	01007f00 fe0100f8 f8030000 00f00700     ................
    fd0c:	0000f807 0300fc11 f80700f8 f0070000     ................
    fd1c:	00e00f00 0000c03f 3f00c01f 00fe0080     ....?......?....
    fd2c:	007f0000 0700fe00 010000f8 f80300fc     ................
    fd3c:	00c01f00 00f00700 ff00e00f 1f000000     ................
    fd4c:	803f00c0 0000f803 00007f00 e01f00fe     ..?.............
    fd5c:	fc010000 00f80300 000000ff 1f00f003     ................
    fd6c:	00fc03c0 fc210000 03e00f00 000000fc     ......!.........
    fd7c:	3f00f007 00e01f80 e00f0000 7f00fc01     ...?............
    fd8c:	00000080 f00fc03f 0000fc03 807f0000     ....?...........
    fd9c:	f00f807f 01000000 00fe03ff 0000807f     ................
    fdac:	ffff0300 00fc01f0 07000000 0f80ffff     ................
    fdbc:	000000f0 fcff0f00 00803f00 1f0000ff     .........?......
    fdcc:	fe01e0ff 00ff1f00 00fe3f00 ff00f007     .........?......
    fddc:	1f0000ff c03f00e0 00feff0f 01000000     ......?.........
    fdec:	ff3f00fe 000000fc 01f80700 00f8ffff     ..?.............
    fdfc:	3f000000 1ff80fc0 000000f0 3f00ff00     ...?...........?
    fe0c:	00c03fc0 f8070000 7f00fe01 00000080     .?..............
    fe1c:	f007e01f 0040fe00 e01f0000 3f00f007     ......@........?
    fe2c:	00000080 c01f00ff 0000fe00 00f80300     ................
    fe3c:	f80100ff 1f000000 00f803e0 0000f007     ................
    fe4c:	0f007f00 c01f00e0 fc030000 00803f00     .............?..
    fe5c:	0000807f 1f00fc03 c03f00c0 fc030000     ..........?.....
    fe6c:	00e00f00 0000e01f 0700fc03 f00f00f0     ................
    fe7c:	fc030000 00f80300 0000f007 0700e01f     ................
    fe8c:	803f00e0 807f0000 00c01f00 030000fe     ..?.............
    fe9c:	7f0000fc 00f80300 00e00f00 0f00fc01     ................
    feac:	7f0000e0 f8030080 00007f00 0000fc01     ................
    febc:	fc03f00f f00f0000 e01f0000 0000e01f     ................
    fecc:	0000807f 80ffc07f 00fe0100 ffff0000     ................
    fedc:	0f0000fc 010000f0 00e0ffff 00c03f00     .............?..
    feec:	ffff0300 fe010000 07000000 0000f8ff     ................
    fefc:	0000f807 80ff0f00 c03f0000 07000000     ..........?.....
    ff0c:	250f00f8 0030fc17 00f81f00 00000000     ...%..0.........
    ff1c:	00f8ff07 00000000 00f0ffff 0f000000     ................
    ff2c:	00c0ffff ff010000 0000ffff ff1f0000     ................
    ff3c:	0000fcff ffff0000 0000f0ff ffff0f00     ................
    ff4c:	0000c0ff 1ff8ff00 000000fe 3f00fe07     ...............?
    ff5c:	000000f8 ff00e07f 030000c0 fe0300fe     ................
    ff6c:	3f000000 f81f00f0 3f000600 f80f00e0     ...?.......?....
    ff7c:	ff010000 80ff0080 fc070000 00fc0700     ................
    ff8c:	f03f0000 00e07f00 80ff0100 0000fe07     ..?.............
    ff9c:	00fe0700 0000e07f 07f83f00 000000ff     .........?......
    ffac:	ffe0ff00 000000f0 ff1fff07 00000000     ................
    ffbc:	f0ffff1f 00000000 00ffff7f 03000000     ................
    ffcc:	00e0ffff 0f000000 0000feff 3f000000     ...............?
    ffdc:	0000c0ff ff030000 000000f8 ff7f0000     ................
    ffec:	00000080 feff0700 00000000 f0ffff00     ................
    fffc:	00000000 c0ffff0f 00000000 00ffffff     ................
   1000c:	0f000000 00fc1fff ff000000 00f0fff0     ................
   1001c:	ff0f0000 03c0ff03 e0ff00c0 3f00fe0f     ...............?
   1002c:	00fe0ff0 ff01f83f 00e07f80 f81fe0ff     ....?...........
   1003c:	0700fe07 c0ff80ff 1f00e03f 03fe0ffe     ........?.......
   1004c:	7f0000ff 1fe07ff0 ff0100f0 ff00ffc7     ................
   1005c:	ff070080 f80ff87f ff3f0000 c07f80ff     ..........?.....
   1006c:	ffff0000 00fe03fc ffff0300 00f01fc0     ................
   1007c:	feff0f00 0080ff00 e0ff3f00 0000fc07     .........?......
   1008c:	00feff01 0000e03f 01f0ff07 000080ff     ....?...........
   1009c:	0f00ff1f 000000fc 3f00fc7f 070000f0     ...........?....
   100ac:	ff01e0ff 7f000080 fe0f80ff ff030000     ................
   100bc:	f83f00fe ff7f0000 c0ff01f8 ffff0700     ..?.............
   100cc:	00ff07e0 ffff7f00 00fe1f80 fedfff0f     ................
   100dc:	03fcff00 fc7ffcff ffffff03 f0ffc1ff     ................
   100ec:	ffffff0f c0ff07fc ffffff3f 00fc3f80     ........?....?..
   100fc:	f8ffffff 01c07f00 80ffffff 0700fc01     ................
   1010c:	00f0ffff 0700c007 0000fcff 0700001c     ................
   1011c:	000000ff 154d0240 efff3d71 fef83ffe     ....@.M.q=...?..
   1012c:	06f8243f 10621b2e 00f80100 0100f801     ?$....b.........
   1013c:	fc0100f8 00fc0000 0020fe00 1f00c01f     .......... .....
   1014c:	f80300c1 00f80300 0100fc03 fe0100fc     ................
   1015c:	00fe0000 08e01f80 9000fc03 0f08807f     ................
   1016c:	ff8100f0 00ff0000 00f09f04 2d00f00f     ...............-
   1017c:	ff0000ff f0bf0100 00ff1b00 00f01f01     ................
   1018c:	0b00f807 1f00c07f ff4900e0 807f0000     ..........I.....
   1019c:	00fc0702 0000fe01 070880ff fe0300f8     ................
   101ac:	e01f4000 00ff0004 00f80740 0000fc01     .@......@.......
   101bc:	3f0000ff fc018080 e00f0008 40f80300     ...?...........@
   101cc:	00c01f00 0100f007 7e0000f8 801f0000     ...........~....
   101dc:	620f2e06 0100e017 fe0000f8 803f0000     ...b..........?.
   101ec:	00c00f00 2000f007 0f00803f 7f0001e0     ....... ?.......
   101fc:	c01f0000 00f00f00 0100f803 7f0000fe     ................
   1020c:	f8078000 c03f0008 08fe0190 80f00f00     ......?.........
   1021c:	0080ff00 0380c43f ff0000fe fb0f0030     ....?.......0...
   1022c:	f47f0040 00fe0700 00f07f00 0140fa0f     @.............@.
   1023c:	1f0020ff f11f00e0 00fe0100 0008ff01     . ..............
   1024c:	1f00e01f fe0140f0 c03f0004 04f80740     .....@....?.@...
   1025c:	0000ff00 0f20007f e00f00e0 00f00f00     ...... .........
   1026c:	0700f007 f00300f0 00f80300 0100f801     ................
   1027c:	f80100f8 4f080000 007d520d 0800f007     .......O.R}.....
   1028c:	8300f801 e0013ec0 f8830ffe ffe3e37f     .....>..........
   1029c:	fffbfe1f ffffffc7 fffffff3 ffff3ffe     .............?..
   102ac:	ffff00fe ff0100fc 3f0000c0 1f0000e0     ...........?....
   102bc:	0f0000fc 070080ff 0300f0f7 0100fef9     ................
   102cc:	00c03ffe 00f807ff 00ffc17f e03fe03f     .?..........?.?.
   102dc:	f007f007 f801fc00 38000e00 04000100     ...........8....
   102ec:	14180c00 0000ad5b 0000f00f ff0000d0     ....[...........
   102fc:	000c0000 00f00f00 ffffdf00 f7ffffff     ................
   1030c:	ffffffff 0080feff 0000f807 7f000068     ............h...
   1031c:	00060080 00f80700 4c020000 ffcd8927     ...........L'...
   1032c:	e003ffc7 c3870ff4 0e3cf8f1 c4060001     ..........<.....
   1033c:	ff1daa0c ffefffff 4402feff ffcd01a4     ...........D....
   1034c:	6407fcc7 00c80100 00f80700 00f03f00     ...d.........?..
   1035c:	00e01f00 00a4ff00 00807f00 0040fe03     ..............@.
   1036c:	0000fe01 0080f80f 0000f807 0020e13f     ............?. .
   1037c:	0000e01f 000082ff 0300807f 018004fe     ................
   1038c:	0f0000fe 070008f8 3f0000f8 1f0012e0     ...........?....
   1039c:	ff0000e0 7f002080 fe030080 fe014000     ..... .......@..
   103ac:	f80f0000 f8079000 e03f0000 e01f0001     ..........?.....
   103bc:	80ff0000 807f4002 00fe0300 00fe0104     .....@..........
   103cc:	00f80f00 00f80709 00e03f00 00e01f10     .........?......
   103dc:	0080ff00 00807f20 0000fe03 0000fe49     .... .......I...
   103ec:	0000f80f 0000f887 0000e03f 000000ff     ........?.......
   103fc:	fb97a40b ff010080 00000080 00e0ff1f     ................
   1040c:	ffff0100 070000f8 00f8ffff ffff1f00     ................
   1041c:	1f0001f8 80ffffff ffff7f00 ff0180ff     ................
   1042c:	80ff1ff0 0780ff07 fe0f80ff 00ff0700     ................
   1043c:	0700f03f e07f00ff 01fe0700 070080ff     ?...............
   1044c:	c07f20fc 8aff0000 0000e03f f01ff31f     . ......?.......
   1045c:	fe030000 0000f8df fef77f00 1f000000     ................
   1046c:	0080fffd fffc0700 1f000000 00e0bff5     ................
   1047c:	3ffc0700 1f0000c0 00f84ff2 81fc0700     ...?.....O......
   1048c:	030000ff 00ff03fe 03fc0f00 3f0000ff     ...............?
   1049c:	00ff07f0 07e0ff00 ff0300ff 00ff0f80     ................
   104ac:	0f00ff0f fcffc0ff ffff0f00 1f00f0ff     ................
   104bc:	c0ffffff ffff1f00 1f0080ff 00feffff     ................
   104cc:	ffff0f00 0f0000f0 00c0ffff feff0700     ................
   104dc:	00000000 0000c0ff 032ce406 3f000080     ..........,....?
   104ec:	fe000080 e01f0000 00fe0300 00e07f00     ................
   104fc:	0100fe0f 3f00e0ff ff0700fe feff00e0     .......?........
   1050c:	e0ff1f00 00feff03 1fe0ffff ff07feff     ................
   1051c:	fbffe1ff 3fff7ffe fee3ffef ef3ff8ff     .......?......?.
   1052c:	fffe03ff f8ef3fc0 00fefe03 0380ef3f     .....?......?...
   1053c:	3f00e0fe 7f0000fa ff0000f4 ff0100e8     ...?............
   1054c:	ff0300d0 ff0700a0 fd0f0040 f01f0000     ........@.......
   1055c:	030ce40b ff010080 000000c0 00fcff1f     ................
   1056c:	ff7f0000 010000ff c0ffffff ffff0300     ................
   1057c:	0f00f0ff f8ffffff ffff1f00 1f00fcff     ................
   1058c:	feffffff 00ff3f00 7f00fe7f ff0f00fc     .....?..........
   1059c:	00f07f00 ff80ff07 ff0300e0 00c0ff80     ................
   105ac:	ffc1ff01 ff000080 0000ffc1 ffc17f00     ................
   105bc:	7f000000 0000ffe3 7fe93f00 070000c0     .........?......
   105cc:	00c007fc 00fd0700 00000000 0000a0ff     ................
   105dc:	f03f0000 00000000 0000e43f fc0f0000     ..?.....?.......
   105ec:	00000080 0000ff03 fe070000 00000000     ................
   105fc:	0000fe0f fc1f0000 00000000 0000fc3f     ............?...
   1060c:	f87f0000 00000000 0000f07f f0ff0000     ................
   1061c:	03000000 0000e0ff c0ff0700 0f000000     ................
   1062c:	000080ff 00ff1f00 3f000000 000000fe     ...........?....
   1063c:	00fc7f00 ff000000 000000f8 00f0ff01     ................
   1064c:	ff030000 000000e0 00c0ff0f ff1f0000     ................
   1065c:	00000080 0000fe3f fc7f0000 00000000     ....?...........
   1066c:	0000f8ff f0ff0100 03000000 0000e0ff     ................
   1067c:	80ff0700 0f000000 000000ff 00fe1f00     ................
   1068c:	3f000000 000000fc 00f87f00 7f000000     ...?............
   1069c:	000000f0 00e0ff00 ff010000 000000c0     ................
   106ac:	0080ff01 ff030000 00000000 ffffff03     ................
   106bc:	fff2ffff ffffffff fffffffe 80ffffff     ................
   106cc:	fb97a40b fe030080 00000000 00c0ff3f     ............?...
   106dc:	ffff0100 0f0000e0 00f0ffff ffff3f00     .............?..
   106ec:	ff0100f0 00f0ffff ffffff03 ff0f00f0     ................
   106fc:	00f0ffff ff01fe3f f0ff00f0 01f0ff00     ....?...........
   1070c:	ff00c0ff 00ff07e0 0fe0ff00 ff0000fc     ................
   1071c:	00f03fc0 7f80ff00 ff0100e0 0080ff80     .?..............
   1072c:	7f08ff01 7f0000e0 0080ffc0 1f80ff00     ................
   1073c:	ff010000 00000008 00c07f00 ff010000     ................
   1074c:	00000084 00c07f00 ff010000 00000000     ................
   1075c:	0000fe07 f81f0000 00000000 0000e0ff     ................
   1076c:	80ff0f00 ff070000 000000fe 00f8ff0f     ................
   1077c:	ff1f0000 000000c0 00c0ff3f ff7f0000     ........?.......
   1078c:	000000f0 00f0ffff ffff0300 070000f8     ................
   1079c:	00f8ff01 7f000000 000000f8 00f87f00     ................
   107ac:	3f000000 000000f0 00f03f00 3f000000     ...?.....?.....?
   107bc:	000000e0 00e87f00 0f000000 000000f8     ................
   107cc:	80fd1f00 03000000 00800ffe fffd0700     ................
   107dc:	0f000000 0000fffb fef71f00 7f000000     ................
   107ec:	0000fce7 ffa1ff00 7f000080 0080ffe3     ................
   107fc:	ff83ff01 ff070000 0000ff07 ff07fc1f     ................
   1080c:	f87f0000 0180ff07 ff0fe0ff 80ff1fc0     ................
   1081c:	ffffff0f ff0f00fe 00f8ffff ffffff0f     ................
   1082c:	ff0f00e0 0080ffff fcffff07 ff070000     ................
   1083c:	0000f0ff 00ffff01 7f000000 0c0000f0     ................
   1084c:	800384a3 01000000 000000fc 807f0000     ................
   1085c:	00000000 0004f01f ff000000 000000c0     ................
   1086c:	00f83f00 0f000000 004000ff fc7f0000     .?........@.....
   1087c:	00000000 0080ff1f ff070000 000004f0     ................
   1088c:	c0ff3f00 0f000000 0000f8ff ffff0300     .?..............
   1089c:	00004000 00fcff1f ff070000 000080ff     .@..............
   108ac:	f0dfff01 7f000000 0000fef3 7ffe1f00     ................
   108bc:	030000c0 00f88fff e1ff0000 000000ff     ................
   108cc:	e03ff83f ff0f0000 0000fc07 ffc0ff01     ?.?.............
   108dc:	7f000080 00f01ff0 03fc1f00 008000fe     ................
   108ec:	f80fe0ff f83f0000 0000ff01 3f00fe0f     ......?........?
   108fc:	7f0008e0 80ff00f0 00fc1f00 0700f01f     ................
   1090c:	fe0300ff f83f8000 00f80f00 0100fe0f     ......?.........
   1091c:	ff0300ff e03f0080 00fc1f08 0780ff00     ......?.........
   1092c:	1f0000ff c0ff01f0 00fe0300 0000f07f     ................
   1093c:	ff1bc07f ffffffff ffffc7ff ffffffff     ................
   1094c:	000000a0 8006f01f 7f000000 000012c0     ................
   1095c:	00ff0100 17a40b00 ff0089fb c2ffffff     ................
   1096c:	ffff7fc0 ff01f0ff e1ffffff 00c07f40     ............@...
   1097c:	ff010000 00000080 00c07fa0 ff010000     ................
   1098c:	00000080 00c07f50 ff000000 00807f80     ....P...........
   1099c:	ff0fff03 fc0700f0 00f8ff7f fffff90f     ................
   109ac:	ff1f00f8 00fcffff ffffff3f ffff00fc     ........?.......
   109bc:	01fcffff ffffffff fcff03fc 07f8ff01     ................
   109cc:	7f00e0ff 00ff0ff8 3ff87f00 3f0000fc     ...........?...?
   109dc:	00f07ff0 fff03f00 7f0000c0 00001fe0     .....?..........
   109ec:	00e07f00 ff000000 000000d0 00f01f00     ................
   109fc:	3f000000 000000fd 00fe0700 01000000     ...?............
   10a0c:	00c007ff 1fff0300 010000f0 00f03fff     .............?..
   10a1c:	3ffe0300 0f0000e0 00c07ffc fff01f00     ...?............
   10a2c:	7f0000c0 00c0ffe1 ff81ff00 ff030080     ................
   10a3c:	0080ff03 ff03fc0f f83f0080 01c0ff07     ..........?.....
   10a4c:	ff07e0ff 80ff1fe0 ffffff07 ff0700fe     ................
   10a5c:	00fcffff ffffff07 ff0700f0 0080ffff     ................
   10a6c:	feffff07 ff030000 0000f0ff 80ffff01     ................
   10a7c:	3f000000 0c0000f0 80fb8f24 f03f0000     ...?....$.....?.
   10a8c:	01000000 0080ffff ffff0300 070000f0     ................
   10a9c:	00fcffff ffff0700 0f0080ff e0ffffff     ................
   10aac:	ffff0f00 0f00f8ff feffffff e0ff0700     ................
   10abc:	0700ff3f ff0380ff 00ff07c0 07e0ff00     ?...............
   10acc:	3f0000ff 00ff03f8 40fc0f00 0000e07f     ...?.......@....
   10adc:	e03fe07f f01f0000 0000f03f f01ffc0f     ..?.....?.......
   10aec:	fe070000 0000f81f f80fff01 f8000000     ................
   10afc:	0000fc07 fc030000 00000000 00c07f09     ................
   10b0c:	3f000000 00ff01e0 07e01f00 0f00f0ff     ...?............
   10b1c:	ffff0ff0 1ff80f00 07c0ffff ffff1ffc     ................
   10b2c:	3ffe03f8 01feffff ffff3fff bfff80ff     ...?.....?......
   10b3c:	e0ffffff 07f8df7f ff3ff0ff fc7f00e0     ..........?.....
   10b4c:	00e0ff1f ff0fff0f ff0300c0 00c0ff87     ................
   10b5c:	ffe3ff00 3f0000c0 00f83ff2 a3ff0100     .......?.?......
   10b6c:	000000ff 80fff90f ff070000 0000f03f     ............?...
   10b7c:	fff83f00 03000000 00c03ffe 83ff0300     .?.......?......
   10b8c:	000000fc 00ffe13f f01f0000 0000807f     ....?...........
   10b9c:	e03ff81f f80f0000 0000f80f fe07fc0f     ..?.............
   10bac:	fc0f0000 0080ff01 ff00fe0f fe0f00e0     ................
   10bbc:	00fc3f00 0f00ff1f ff3f80ff ffff0300     .?........?.....
   10bcc:	0100ffff ffffffff ff3f0000 0000ffff     ..........?.....
   10bdc:	ffffff0f ff030000 0000ffff feff7f00     ................
   10bec:	0f000000 0000fcff e07f0000 e30b0000     ................
   10bfc:	ff8d0390 ffffffff fffffffe fffeffff     ................
   10c0c:	ffffffff 000000fc 00f80300 07000000     ................
   10c1c:	000000f0 00e00f00 1f000000 000000e0     ................
   10c2c:	00c03f00 7f000000 00000081 00e01f00     .?..............
   10c3c:	3f000000 000020c0 00f00f00 1f000000     ...?. ..........
   10c4c:	000000e0 00e03f00 3f000000 000000c0     .....?.....?....
   10c5c:	00807f00 ff000000 00000080 0000ff00     ................
   10c6c:	ff010000 00000400 00c07f00 1f000080     ................
   10c7c:	001000f0 00fc0700 01000002 400000ff     ...............@
   10c8c:	c07f0000 00000800 0100f01f fc070020     ............ ...
   10c9c:	00240000 0000ff01 7f008004 900000c0     ..$.............
   10cac:	00f01f00 07001200 000000fc 00f80700     ................
   10cbc:	01800200 000000ff c07f0058 00080000     ........X.......
   10ccc:	0000f81f fe036001 00000000 fb97a40b     .....`..........
   10cdc:	ff010080 00000080 00f0ff3f ffff0100     ........?.......
   10cec:	0f0000f8 00fcffff ffff3f00 ff0100fc     .........?......
   10cfc:	00fcffff ffffff07 ff0f00fc 00fcffff     ................
   10d0c:	ff00ff3f f0ff00fc 01fc3f00 3f00c0ff     ?........?.....?
   10d1c:	00ff07f8 0ff83f00 3f0000fc 00f01ff0     .....?.....?....
   10d2c:	7fe03f00 7f0000e0 00f09fe6 3ff80f00     .?.............?
   10d3c:	3f0000f0 00e03ff0 7fc07f00 ff0100e0     ...?.?..........
   10d4c:	00e07f80 ff00fe07 fc1f00e0 00e0ff00     ................
   10d5c:	ff00f07f c0ff07f8 ffffff00 ff0000ff     ................
   10d6c:	00fcffff ffff7f00 3f0000e0 0000ffff     ...........?....
   10d7c:	ffffff00 ff070000 0080ffff ffffff3f     ............?...
   10d8c:	ffff00c0 03c0ffff ff0ff0ff 00ff0fc0     ................
   10d9c:	3fc0ff03 ff0300f8 00e0ffc0 ff81ff01     ...?............
   10dac:	ff010080 0000fe87 fc0fff03 ff030000     ................
   10dbc:	0000fe43 fccf7f00 ff000000 0000fef7     C...............
   10dcc:	fcf71f00 3f000000 0000fcef ffe1ff00     .......?........
   10ddc:	3f000000 0000ffe3 fec3ff00 ff010000     ...?............
   10dec:	0000fe07 fe0ffe07 fc1f0000 0000fe0f     ................
   10dfc:	ff0ff07f c0ff0300 3fc0ff1f ff1f80ff     ...........?....
   10e0c:	00feffff ffffff1f ff1f00f8 00e0ffff     ................
   10e1c:	ffffff1f ff0f0080 0000fcff e0ffff0f     ................
   10e2c:	ff030000 000000ff 00e07f00 97a40b00     ................
   10e3c:	030080fb 000000ff c0ff3f00 ff010000     .........?......
   10e4c:	0000e0ff f0ffff0f ff3f0000 0100f0ff     ..........?.....
   10e5c:	f8ffffff ffff0700 0f00f8ff f8ffffff     ................
   10e6c:	80ff3f00 ff00f8ff f03f00f8 00c0ff03     .?........?.....
   10e7c:	ff07f03f f03f0000 0000fc1f f03fe03f     ?.....?.....?.?.
   10e8c:	e03f0000 0000e07f 80ffc13f 837f0000     ..?.....?.......
   10e9c:	000000ff 00fc877f 1fff0000 010000f8     ................
   10eac:	00f03ffe bffe0100 000000f8 00feab7f     .?..............
   10ebc:	f71f0000 000000fc 80fff07f fc1f0000     ................
   10ecc:	0000f03f f03ffe0f fc3f0000 0000f07f     ?.....?...?.....
   10edc:	e0fff8ff f0ff0300 0f00f0ff f0ffe0ff     ................
   10eec:	c1ff3f00 fe03fcff ffff81ff 01fffdff     .?..............
   10efc:	f3ffffff ffff01fe 01fcc7ff 0fffffff     ................
   10f0c:	ffff01f8 00f01ff8 3fe0ffff ff7f00c0     ...........?....
   10f1c:	00807f00 ff01f01f 00000048 00c07f00     ........H.......
   10f2c:	ff000000 00000000 f001fe03 fc070000     ................
   10f3c:	0000e03f c07ff80f e03f0000 0000c0ff     ?.........?.....
   10f4c:	80ffc07f 81ff0100 030000ff 00ff03fe     ................
   10f5c:	07fc0f00 1f0000ff 00fe07f0 0fe07f00     ................
   10f6c:	ff0300fe 00ff0f80 1f00fe0f fcff80ff     ................
   10f7c:	ffff1f00 1f00f0ff c0ffffff ffff1f00     ................
   10f8c:	1f0000ff 00fcffff ffff1f00 0f0000e0     ................
   10f9c:	0080ffff f8ff0700 01000000 000080ff     ................
   10fac:	01245a02 ffc7ffcd d0001a40 01308006     .Z$.....@.....0.
   10fbc:	80fff8bf 89a76102 ffc7ffcd d0001a40     .....a......@...
   10fcc:	01308006 e0fff8bf f0811e7c 073f7ef8     ..0.....|....~?.
   10fdc:	0020c081 6398970b 000000a0 00200000     .. ....c...... .
   10fec:	01000000 000000c0 00801f00 ff000000     ................
   10ffc:	00000000 0000fe07 fc7f0000 03000000     ................
   1100c:	0000f8ff f0ff1f00 ff010000 0000e0ff     ................
   1101c:	80ffff0f ff7f0000 030000f8 00c0ffff     ................
   1102c:	fcff3f00 ff010000 0000e0ff 00feff0f     .?..............
   1103c:	ffff0000 070000e0 0000ffff f0ff3f00     .............?..
   1104c:	ff030000 000080ff 00f8ff1f ff7f0000     ................
   1105c:	000000c0 0000fcff e0ff0100 03000000     ................
   1106c:	000000fe 80ff0700 0f000000 0000c0ff     ................
   1107c:	f0ff1f00 1f000000 0000f8ff feff0f00     ................
   1108c:	03000000 0000ffff ffff0100 000000c0     ................
   1109c:	00e0ffff ff3f0000 000000f8 00feff1f     ......?.........
   110ac:	ff0f0000 000000ff c0ffff03 ff010000     ................
   110bc:	0000e0ff f8ffff00 7f000000 0000f8ff     ................
   110cc:	f0ff1f00 0f000000 0000e0ff c0ff0700     ................
   110dc:	01000000 000080ff 00ff0000 00000000     ................
   110ec:	0000007e 001c0000 00000000 14cf0b08     ~...............
   110fc:	ffffada3 ffffffff ffffff1f 00f4ffff     ................
   1110c:	00000000 00008005 df000000 ffffffff     ................
   1111c:	fffff1ff fcffffff 6398970b 000000a4     ...........c....
   1112c:	000e0000 00000000 0000801f c03f0000     ..............?.
   1113c:	00000000 0000e07f f8ff0000 01000000     ................
   1114c:	0000fcff feff0300 07000000 0080ffff     ................
   1115c:	ffff0700 010000c0 00e0ffff ffff0000     ................
   1116c:	000000f0 00fcff3f ff1f0000 000000fe     ....?...........
   1117c:	00ffff07 ff010000 0000c0ff e0ffff00     ................
   1118c:	3f000000 0000f0ff fcff1f00 07000000     ...?............
   1119c:	0000feff feff0300 00000000 0000fcff     ................
   111ac:	f87f0000 00000000 0000f01f e0ff0100     ................
   111bc:	0f000000 0000c0ff 80ffff00 ff070000     ................
   111cc:	000000fe 00f0ff7f ffff0300 3f000000     ...............?
   111dc:	0000f8ff c0ffff01 ff1f0000 010000fc     ................
   111ec:	00e0ffff ffff0f00 ff000000 0000f0ff     ................
   111fc:	80ffff07 ff7f0000 010000fc 00e0ffff     ................
   1120c:	feff0300 07000000 0000f0ff 80ff0f00     ................
   1121c:	1f000000 000000f8 00c03f00 7e000000     .........?.....~
   1122c:	00000000 0000e000 00010000 00000000     ................
   1123c:	94a40b00 01008003 0000c0ff f8ff3f00     .............?..
   1124c:	ff010000 0000fcff feffff0f ff7f0000     ................
   1125c:	0100feff feffffff ffff0700 1f00feff     ................
   1126c:	feffffff 00ff7f00 ff00feff fe3f00f8     ..............?.
   1127c:	00c0ff03 ff07fc3f fc1f0000 0000fc1f     ....?...........
   1128c:	f03ffc1f f83f0000 0000c0ff 80fff13f     ..?...?.....?...
   1129c:	e33f0000 000000fe 00fce77f e37f0000     ..?.............
   112ac:	000000ff 00fcf71f e03f0000 000000f8     ..........?.....
   112bc:	0000e07f f81f0000 00000000 0000f80f     ................
   112cc:	f03f0000 00000000 0000c0ff 80ff0300     ..?.............
   112dc:	0f000000 000000fe 00fc3f00 ff000000     .........?......
   112ec:	000000f0 00c0ff03 ff0f0000 00000000     ................
   112fc:	0000fc3f f0ff0000 03000000 0000c0ff     ?...............
   1130c:	00ff0f00 3f000000 000000fc 00f0ff00     .......?........
   1131c:	ff030000 000000c0 0000ff0f fc1f0000     ................
   1132c:	00000000 0000f07f c0ff0000 00001000     ................
   1133c:	0000e07f 80ff0000 00000800 0300e07f     ................
   1134c:	f01f0040 00d00000 00000000 ff010034     @...........4...
   1135c:	00080000 00c07f00 172f1700 0000605e     ........../.^`..
   1136c:	ff070000 000000f8 00000000 ffff0700     ................
   1137c:	000000fe 00000000 ffffff03 000000fe     ................
   1138c:	00000000 ffffff7f 000000fe 1f000000     ................
   1139c:	ffffffff 000000fc ff030000 ffffffff     ................
   113ac:	000000f8 ff3f0000 ffffffff 000000f0     ......?.........
   113bc:	ffff0700 ffffffff 000000c0 ffff7f00     ................
   113cc:	ffffffff 00000080 e0ffff0f feff7f00     ................
   113dc:	00000000 00e0ffff f8ff3f00 0f000000     .........?......
   113ec:	0000f8ff e0ff1f00 ff000000 000000fe     ................
   113fc:	80ff3f00 ff0f0000 000000c0 00fe7f00     .?..............
   1140c:	f8ff0000 00000000 00f8ff00 80ff0f00     ................
   1141c:	00000000 00c0ff01 00f0ff00 00000000     ................
   1142c:	0000ff07 0000ff07 00000000 0000fc1f     ................
   1143c:	0000f07f 00000000 0700f07f 000000fe     ................
   1144c:	01000000 3f0080ff 7f0000e0 07000000     .......?........
   1145c:	fe0300fe ff1f0000 1fe03f00 f03f00f0     .........?....?.
   1146c:	feff0300 7f00ff01 00ff01c0 f8ff7f00     ................
   1147c:	fe01f01f 00f01f00 e0ffff07 f80f80ff     ................
   1148c:	0000ff00 87ffffff c03f00fc 0f00f80f     ..........?.....
   1149c:	3ffeffff 00fe01e0 ff00807f fffbffff     ...?............
   114ac:	07f80700 ff0f00f8 f0ffffff 3fc03f00     .............?.?
   114bc:	fe7f00c0 80ffff07 fc01fe01 80ff0700     ................
   114cc:	00fcff07 e01ff007 00f87f00 00e0ff1f     ................
   114dc:	00fe803f 0080ff03 0100fe7f 00f00ffe     ?...............
   114ec:	0100f83f 0700f0ff 03807ff0 0f0080ff     ?...............
   114fc:	3f0080ff 1f00f883 3f0000f8 fc0100fc     ...?.......?....
   1150c:	ff01c01f ff010080 e10f00c0 fc0f00fe     ................
   1151c:	fe070000 0f7f0000 c07f00e0 f03f0000     ..............?.
   1152c:	7ff80300 00fe0700 80ff0100 f8c31f00     ................
   1153c:	00e03f00 00fc0f00 c01ffe00 0000ff03     .?..............
   1154c:	00c07f00 00fef107 0000f81f 0000fe03     ................
   1155c:	00e08f3f 000080ff 0300f01f 07007ffc     ?...............
   1156c:	000000fc 1f0080ff 7f00f8c3 070000e0     ................
   1157c:	fe0000f8 ff03c01f 7f000000 f10700c0     ................
   1158c:	fe03c01f 7f000000 f00f00c0 f01f00fe     ................
   1159c:	fc030000 07ff0000 80ff00f0 e03f0000     ..............?.
   115ac:	47f80700 80ff00f0 e03f0000 3ff00f00     ...G......?....?
   115bc:	00fc0780 00ff0300 fc81ff00 00e03f00     .............?..
   115cc:	00f01f00 e00ff807 0000ff01 0080ff01     ................
   115dc:	807fc07f 0000fc0f 0700fc1f 00fc01fc     ................
   115ec:	0000e03f 7f00e0ff 01e00fc0 0f0080ff     ?...............
   115fc:	fe0700fe 0f007f00 ff0000fc e07f00f0     ................
   1160c:	3f00f803 ff0f00f0 00fe0780 ff01e01f     ...?............
   1161c:	fcff01c0 00e0ff00 ff0f00ff f0ff3f00     .............?..
   1162c:	0300ff1f fe3f00f8 c3ffff07 1f00f0ff     ......?.........
   1163c:	ffff01e0 ffffffff ff0000ff ffff0700     ................
   1164c:	ffff7fff fc0300f0 ffff1f00 fffffffb     ................
   1165c:	e01f0000 ffff7f00 e0ffff9f 80ff0000     ................
   1166c:	f0ffff03 00feff7f 00fe0300 03ffff07     ................
   1167c:	00e0ffff 00f01f00 0ff0ff1f 0000fcff     ................
   1168c:	00c07f00 3f00fe3f ff0180ff 0000ff03     ....?..?........
   1169c:	7f00803f f01f00c0 0000fc0f 00000000     ?...............
   116ac:	80ff0100 0000f07f 00000000 01f81f00     ................
   116bc:	0000c0ff 00000000 0780ff01 000000ff     ................
   116cc:	00000000 1f00fc3f 000000fc 03000000     ....?...........
   116dc:	ff00c0ff 000000f8 3f000000 ff0300fc     ...........?....
   116ec:	000000f0 ff070000 ff0f00c0 000000e0     ................
   116fc:	fcff0000 ff3f0000 000000c0 c0ff1f00     ......?.........
   1170c:	ffff0000 000000c0 00fcff07 ffff0300     ................
   1171c:	010000e0 00c0ffff ffff0700 ff0300fc     ................
   1172c:	0000f8ff ffff1f00 ffffffff 000080ff     ................
   1173c:	ffff3f00 ffffffff 000000f8 ffffff00     .?..............
   1174c:	ffffffff 00000000 ffffff01 e0ffffff     ................
   1175c:	00000000 ffffff03 00fcffff 00000000     ................
   1176c:	ffffff03 0080ffff 00000000 ffffff03     ................
   1177c:	0000e0ff 00000000 ffffff01 000000f8     ................
   1178c:	00000000 f0ff3f00 00000000 047ce410     .....?........|.
   1179c:	00000030 0000f07f 00009000 00f0ff01     0...............
   117ac:	00000100 f0ff0700 00020000 ff1f0000     ................
   117bc:	000000f0 fe010000 000000ff 07000040     ............@...
   117cc:	0000fffd 00008000 00fff11f 00000000     ................
   117dc:	f01ffe01 00100000 1ffc0700 240000f0     ...............$
   117ec:	f01f0000 0000f01f 7f000040 00f01fc0     ........@.......
   117fc:	0f000000 80ff01fc 00000800 ff01f01f     ................
   1180c:	00100000 01c07f00 000000ff 00fc0f00     ................
   1181c:	0200f81f f01f0000 00f01f00 ff030000     ................
   1182c:	80ff0100 3f000000 f80f00e0 00000400     .......?........
   1183c:	1f00c0ff 000000f8 0000f80f 000080ff     ................
   1184c:	0080ff01 0000fc0f 00f01f00 00c07f00     ................
   1185c:	e07f0080 c0ff0000 fc070000 fc070000     ................
   1186c:	1f001000 0f0000f8 010000fc 000000ff     ................
   1187c:	0002c07f ffffff07 04c0ffff ffff1f80     ................
   1188c:	c0ffffff ff7f0008 ffffffff ff0f00c0     ................
   1189c:	ffffffff 1f0001fe 000000f8 0002fc0f     ................
   118ac:	0000e07f 04fc0f00 0080ff81 fc0f0000     ................
   118bc:	00fe0708 0f000000 e0ff00fc 00000000     ................
   118cc:	ff01e1ff 00000080 07c2ff00 000000fe     ................
   118dc:	c0ff0000 0000e0ff fe0f0000 0080ff41     ............A...
   118ec:	0f000000 00f83ffc 00000000 00ffe3ff     .....?..........
   118fc:	00000000 fe8ffe07 00000000 fffe0f00     ................
   1190c:	000000c0 e07f0000 0420a40d ffffff37     .......... .7...
   1191c:	0f0000fe ffffffff ff1f00c0 f0ffffff     ................
   1192c:	ffff3f00 00f8ffff ffffff7f ff00f8ff     .?..............
   1193c:	ffffffff ffff01f8 f8ffffff ffffff03     ................
   1194c:	07f8ffff 070000fe fc0ff8ff ff000000     ................
   1195c:	00f81ff0 f0ff0000 0000f03f 7fe0ff00     ........?.......
   1196c:	000000e0 f81fe1ff 1f000000 00f03ff8     .............?..
   1197c:	f83f0000 0000fcdf 23fe0700 000000ff     ..?........#....
   1198c:	fe07ff03 07000000 00fc0ffc f81f0000     ................
   1199c:	0000f81f 3fe07f00 010000f0 e07fc0ff     .......?........
   119ac:	ff0f0000 00c0ff00 01fcff00 ffffffff     ................
   119bc:	ff03e0ff ffffffff ffff0780 00fcffff     ................
   119cc:	ffffff0f 1f00fcff ffffffff ff3f00fe     ..............?.
   119dc:	ffffffff ffff7f00 00ffffff ffffffff     ................
   119ec:	ff81ffff ff000080 00ff83ff ff1f0000     ................
   119fc:	0000fe07 0fff0f00 000000fc f81fff0f     ................
   11a0c:	0f000000 00f03ffe fe0f0000 0000fc8f     .....?..........
   11a1c:	9fff0100 000000f8 feefff03 00000000     ................
   11a2c:	00fcef7f ff010000 0000ffe3 e77f0000     ................
   11a3c:	000000fe ffd1ff01 00000080 00ffe3ff     ................
   11a4c:	ff070000 0000fe87 0fff1f00 030000fc     ................
   11a5c:	ff23fcff ffffffff ffff07fe f8ffffff     ..#.............
   11a6c:	ffffff0f 1fc0ffff ffffffff ff3f00ff     ..............?.
   11a7c:	f8ffffff ffff7f00 0080ffff ffffffff     ................
   11a8c:	0f0000e0 80fc17a5 ff000000 000000e0     ................
   11a9c:	ff3f0000 000000fe ffff0100 000000ff     ..?.............
   11aac:	ffff1f00 000080ff ffff7f00 0000c0ff     ................
   11abc:	ffffff03 0000c0ff ffffff0f 0000c0ff     ................
   11acc:	ffffff7f 0100c0ff 3f00ffff 0700c0ff     ...........?....
   11adc:	0f00f0ff 1f00c0ff 070080ff 3f00c0ff     ...............?
   11aec:	070000fc ff00c0ff 070000f0 ff0380ff     ................
   11afc:	070000c0 ff0f80ff 07000000 fc1f80ff     ................
   11b0c:	07000000 f07f00ff 0f000000 c0ff00fe     ................
   11b1c:	0f000000 80ff03fe 1f000000 c0ff40fc     .............@..
   11b2c:	03000000 00ff83ff 03000000 00fe07f8     ................
   11b3c:	06000000 00fc0f00 00000000 00f83f00     .............?..
   11b4c:	00000000 00fc4f01 00000000 00f83f00     .....O.......?..
   11b5c:	00000000 00fcdf00 00000000 00ff3700     .............7..
   11b6c:	00000000 e07f0a00 00000000 c0ff0000     ................
   11b7c:	00000000 c0ff001c 00000000 f03f883f     ............?.?.
   11b8c:	00000000 f07ffc1f 00000000 fc0ff43f     ............?...
   11b9c:	00000000 ff01fd1f 00000080 ff03fe0f     ................
   11bac:	00000080 ff03f83f 00000080 ff03f07f     ....?...........
   11bbc:	01000080 ff07c0ff 07000080 ff0780ff     ................
   11bcc:	1f000080 ff0f00fe ff000080 ff0f00fc     ................
   11bdc:	ff0300c0 ff0f00f0 ff1f00e0 ff0f00c0     ................
   11bec:	ffff01f8 ff0f0000 fcffffff ff0f0000     ................
   11bfc:	f0ffffff ff0f0000 c0ffffff ff070000     ................
   11c0c:	00feffff ff070000 00f8ffff ff010000     ................
   11c1c:	00c0ffff ff000000 0000fcff 0f000000     ................
   11c2c:	000080ff 0420e40e ffffff87 000000fe     ...... .........
   11c3c:	ffffff7f 070000ff ffffffff 7f0000fe     ................
   11c4c:	ffffffff ff0700f8 ffffffff ff7f00c0     ................
   11c5c:	ffffffff ffff0700 f8ffffff ffff7f00     ................
   11c6c:	c0ffffff 0000fe07 00feff03 0000e07f     ................
   11c7c:	07f0ff03 000000fe 7f80ff0f 000000e0     ................
   11c8c:	fe07fc7f 03000000 e07fc0ff 1f000000     ................
   11c9c:	00fe07fe ff000000 00e07fe0 ff070000     ................
   11cac:	0000fe07 f03f0000 0000e07f 87ff0300     ......?.........
   11cbc:	000000fe 7ff81f00 000000e0 ffc9ff01     ................
   11ccc:	000000c0 ff97ff01 00000080 ffb7ff01     ................
   11cdc:	00000000 feefff01 00000000 e07fff03     ................
   11cec:	00000000 00fef73f 07000000 00fcafff     ....?...........
   11cfc:	0f000000 00c0fffc ff010000 0080ffd1     ................
   11d0c:	ff030000 0000f81f f27f0000 0000f03f     ............?...
   11d1c:	c3ff0000 000000ff 3ffc1f00 000000f0     ...........?....
   11d2c:	ff83ff01 00000000 f03ff83f 07000000     ........?.?.....
   11d3c:	00ff03ff ff000000 00f03ff0 fe1f0000     .........?......
   11d4c:	0000ff03 c0ff0300 0000f03f 03fcff00     ........?.......
   11d5c:	000000ff 3f80ff3f 3f0000f0 ff03f0ff     ....?..?...?....
   11d6c:	ffffffff ff3f00fe ffffffff ffff03c0     ......?.........
   11d7c:	f8ffffff ffff3f00 00feffff ffffff03     .....?..........
   11d8c:	0080ffff ffffff3f 0300e0ff ffffffff     ....?...........
   11d9c:	3f0000f0 e0ffffff 0d000000 3d0420a4     ...?......... .=
   11dac:	ffffffff fff1ffff ffffffff e0ffe6ff     ................
   11dbc:	00000000 00f8bf01 00000000 0000fe6f     ............o...
   11dcc:	11000000 000080ff ff060000 ffffffff     ................
   11ddc:	ffffc0ff ffffffff 00f07f83 00000000     ................
   11dec:	0000fcdf 37000000 000000ff ff0a0000     .......7........
   11dfc:	000000c0 ff7f0300 ffffffff ffff7fff     ................
   11e0c:	feffffff 0320240c ffffffdd 7fffffff     .....$ .........
   11e1c:	ffffffff 00feefff 06000000 0000e0ff     ................
   11e2c:	fe6f0000 00000000 00e07f04 6f000000     ..o............o
   11e3c:	ffffffff ffff03fe 03ffffff 0000f07f     ................
   11e4c:	ff370000 00000000 00f07f03 37000000     ..7............7
   11e5c:	000000ff f0ff0200 00000000 17e51000     ................
   11e6c:	0000e0fc 00ff3f00 00000000 ffff7f00     .....?..........
   11e7c:	00000000 ffff3f00 000000fe ffff0f00     .....?..........
   11e8c:	0000fcff ffff0300 00f0ffff ffff0000     ................
   11e9c:	80ffffff ff1f0000 fcffffff ff070000     ................
   11eac:	ffffffff ff0000f0 ff03e0ff 1f0080ff     ................
   11ebc:	0300e0ff 0300f8ff 0000f8ff 00c0ff0f     ................
   11ecc:	0000fe7f 00fe3f00 0080ff07 e0ff0100     .....?..........
   11edc:	00f0ff00 ff0f0000 00fe1f00 7f000000     ................
   11eec:	c0ff01f0 03000000 f83f80ff 00000000     ..........?.....
   11efc:	ff03f81f 00000000 7fc0ff01 000000f0     ................
   11f0c:	07fc0f00 000000fe c0ff0000 0000e0ff     ................
   11f1c:	fe070000 0000fc0f 7f000000 00c0ff81     ................
   11f2c:	07000000 00ff9380 00000000 fc4f0100     ..............O.
   11f3c:	00000000 3f030000 000000f0 06000000     .......?........
   11f4c:	0000e0ff ffffff07 0000fef7 ffff7f00     ................
   11f5c:	00feb7ff 00000000 fe07ff07 00000000     ................
   11f6c:	7ffc0f00 000000f0 e0ff0000 0000e07f     ................
   11f7c:	ff010000 0000ff87 1f000000 00ff07fc     ................
   11f8c:	00000000 f83ff03f 00000000 ff01ff03     ....?.?.........
   11f9c:	000000c0 1ff03f00 000000fe 00ff0f00     .....?..........
   11fac:	0000f0ff f0ff0100 0080ff07 ff7f0000     ................
   11fbc:	00fe3f00 ff1f0000 f8ff03f0 ff070000     .?..............
   11fcc:	ff1f00fe ff0300f0 7f00c0ff ff03f0ff     ................
   11fdc:	0300f0ff ffffffff 0000feff ffffff1f     ................
   11fec:	0080ffff ffff7f00 00e0ffff ffff0100     ................
   11ffc:	00f8ffff ff070000 00feffff 1f000000     ................
   1200c:	80ffffff 00000000 80ffff3f 00000000     ........?.......
   1201c:	00ff1f00 240e0000 ff8d0420 000000c0     .......$ .......
   1202c:	fcdfff03 00000000 c0fffd3f 03000000     ........?.......
   1203c:	00fcdfff 3f000000 00c0fff8 ff030000     .......?........
   1204c:	ffffffdf f7ffffff ffffffff fffeffff     ................
   1205c:	000000e0 feefff01 00000000 e0fffe1f     ................
   1206c:	01000000 00feefff 1f000000 00e07ffe     ................
   1207c:	ff010000 24a40280 f7ffcd01 7fffdfff     .......$........
   1208c:	fff7fffd fd7fffdf 8ffff7ff 8fe409fc     ................
   1209c:	00002dfb a0ff0700 ff000000 000000f4     .-..............
   120ac:	0080fe1f d0ff0300 7f000000 000000fa     ................
   120bc:	0040ff0f 80ff0100 ff010000 0100f080     ..@.............
   120cc:	00fedfff fff73f00 f73f0000 7f0000ff     .....?....?.....
   120dc:	00e07fe8 f07ffc0f 7ffc1f00 f81f00f0     ................
   120ec:	3f00f83f 00fc3ff8 ff1ff87f 1ff0ff01     ?..?.?..........
   120fc:	e0ffffff ffffff0f ffff07e0 ff03c0ff     ................
   1210c:	0180ffff 00feffff fcffff00 ff3f0000     ..............?.
   1211c:	030000f0 0e0000ff 370420e4 000000fe     ......... .7....
   1212c:	7ffcff00 000000e0 fe87ff1f 03000000     ................
   1213c:	e07ff0ff 7f000000 00fe07fe ff0f0000     ................
   1214c:	00e07fc0 f8ff0100 0000fe07 00ff3f00     .............?..
   1215c:	0000e07f 07e0ff07 000000fe 7f00fcff     ................
   1216c:	1f0000e0 fe0780ff ff030000 e07f00f0     ................
   1217c:	fe7f0000 00fe0700 c0ff0f00 00e07f00     ................
   1218c:	00f8ff01 0000fe07 0000ff3f 0700e07f     ........?.......
   1219c:	0700e0ff ff0000fe 7f0000fc ff1f00e0     ................
   121ac:	fe070080 f0ff0300 e07f0000 00fe7f00     ................
   121bc:	00fe0700 00c0ff0f 01e07f00 0000f8ff     ................
   121cc:	3f00fe07 000000ff ff07e07f 070000e0     ...?............
   121dc:	fcff00fe 7f000000 80ff1fe0 fe070000     ................
   121ec:	00f0ff03 e07f0000 0000fe7f 0ffe0700     ................
   121fc:	0000c0ff ffe17f00 000000f8 ff3ffe07     ..............?.
   1220c:	00000080 fcffe77f 07000000 c0fffffe     ................
   1221c:	7f000000 00feffff ff070000 00f0ffff     ................
   1222c:	ff8f0000 00f0ffff ffff0000 0080fff7     ................
   1223c:	feff0f00 0000fc3f c3ffff00 0000e0ff     ....?...........
   1224c:	1ff8ff0f 000000fe ff00ffff 0f0000f0     ................
   1225c:	ff07e0ff ff000080 fc7f00fc ff0f0000     ................
   1226c:	c0ff0380 f0ff0000 00fe1f00 00fe0f00     ................
   1227c:	00f0ff00 00c0ff00 0080ff0f 0000fc0f     ................
   1228c:	0000f87f 0300c0ff 0f00c0ff 1f0000fc     ................
   1229c:	ff0000fe ff0100c0 fc0f00f0 ff0f0000     ................
   122ac:	c0ff0000 f87f0000 00fc0f00 c0ff0300     ................
   122bc:	00c0ff00 00fe3f00 0000fc0f 00e0ff01     .....?..........
   122cc:	0000c0ff 0f00ff0f 000000fc ff00f87f     ................
   122dc:	070000c0 fc0fc0ff 3f000000 c0ff00fc     ...........?....
   122ec:	ff010000 00fc0fe0 ff0f0000 00c0ff00     ................
   122fc:	f8ff0000 0000fc0f 80ff0700 0000c0ff     ................
   1230c:	0ffc3f00 000000fc ffe0ff01 000000c0     .?..............
   1231c:	fc0fff1f 00000000 c0fff0ff 07000000     ................
   1232c:	00fc8fff 3f000000 00c0fffc ff030000     .......?........
   1233c:	20640be0 c0ff8d03 06000000 0000e0ff     ..d ............
   1234c:	f07f0300 01000000 0000f8bf fcdf0000     ................
   1235c:	00000000 0000fe6f ff370000 00000000     ....o.....7.....
   1236c:	0080ff1b ff0d0000 000000c0 0000ff03     ................
   1237c:	ff1b0000 ffffffff fffffff7 11c0ffff     ................
   1238c:	38051c64 0000feff ff030000 80fffffc     d..8............
   1239c:	03000000 ff7ffeff 000000e0 3fffff03     ...............?
   123ac:	0000f8ff ffff0300 00f0ff7f ff0f0000     ................
   123bc:	c0fffffd 7f000000 fffef7ff 01000000     ................
   123cc:	fbdffffe 000000fe 7ffffb07 0000f8ef     ................
   123dc:	fdef3f00 00e09fff 3fff0000 c07ffef7     .?.........?....
   123ec:	fc030000 fff9dfff 1f000000 fc8ffff3     ................
   123fc:	0000807f bffff10f 0000fff1 ffc77f00     ................
   1240c:	807ff81f c33f0000 ffe17fff ff010000     ......?.........
   1241c:	f03ffe0f 0000807f fffe07ff 0000ffc1     ..?.............
   1242c:	fc1ffc07 807fe07f 0ffc0300 ff81fffd     ................
   1243c:	f01f0000 c0fff83f 0f00807f fffb1ff0     ....?...........
   1244c:	0000ff01 ef7fc07f 00fc07fc ff01fe01     ................
   1245c:	f00ff0bf 07f80700 07f81fff fc0700fc     ................
   1246c:	e07fff03 1f00f00f 3ffe0fe0 00fc07f0     ...........?....
   1247c:	fe07f01f f00fc0ff 1f807f00 07e07ffc     ................
   1248c:	c07f00fc 80fffd0f fe01f00f fff83f00     .............?..
   1249c:	01fc07c0 fb1f00ff f00f00ff 7f00f807     ................
   124ac:	3f00fcef 01e03fc0 00f0bfff 80ff80ff     ...?.?..........
   124bc:	f81fff07 7fc03f00 7fff0380 83ff00e0     .....?..........
   124cc:	fe0f00fe 3f00f03f 0700fec1 00c0fffe     ....?..?........
   124dc:	00f88fff 00fffb1f c03ffe03 fcef7f00     ..........?.....
   124ec:	fff80700 bfff0100 f71f00f0 fe0700fc     ................
   124fc:	7f00c0ff 1f00e0df 0000fffb 00807fff     ................
   1250c:	80fff17f c0ff7f00 fff93f00 ff1f00c0     .........?......
   1251c:	fc1f00c0 0700e0ff 0f00c0ff 00f07ffe     ................
   1252c:	00c0ff01 240efe07 ff870420 00000000     .......$ .......
   1253c:	f87ffc1f 01000000 00febfff ff000000     ................
   1254c:	00f0ffe3 fe0f0000 0080ff3f dfff0000     ........?.......
   1255c:	0000e0ff fff17f00 000000ff fffffe07     ................
   1256c:	030000c0 feff8fff 3f000000 80fffff7     ...........?....
   1257c:	fc1f0000 00fcff7f bfff0100 0000ffff     ................
   1258c:	ffe3ff00 0000f87f 9ffffd0f 070000fe     ................
   1259c:	fff81fff 7f0000f0 fc3ffcef f73f0000     ..........?...?.
   125ac:	00ff1ffe fffb1f00 0080ff07 81fffd0f     ................
   125bc:	0700e0ff ffc0fffe ff0300f8 fc3fe07f     ..............?.
   125cc:	c7ff0100 e0ff01fe fffb1f00 00f87f00     ................
   125dc:	f03ffe0f 00c0ff03 00f8dfff 7f00f0ff     ..?.............
   125ec:	0780fff1 fe0780ff ff01c0ff 8fff03e0     ................
   125fc:	ff0f00fc fef73f00 c0ff0300 e07ffc1f     .....?..........
   1260c:	01fe1f00 00f0bfff ff80ff07 0300f8df     ................
   1261c:	ef7fe0ff ff0000fc fef73ff0 fc3f0000     .........?....?.
   1262c:	00fffb1f 0fff1f00 0080fffd ff87ff07     ................
   1263c:	0000f81f ef7ffc3f 0f0000fc fff83fff     ....?........?..
   1264c:	7f0000c0 e07ffffb ff1f0000 00fec7ff     ................
   1265c:	ffff0000 0000fffb feff3f00 0000f03f     .........?..?...
   1266c:	dfffff01 000000f8 fff1ff7f 03000080     ................
   1267c:	c0fffeff ff000000 00fc8fff ff070000     ................
   1268c:	00c0fff8 ff3f0000 0000e07f c7ff0f00     ......?.........
   1269c:	000000fe fffb7f00 00000000 2511fc1f     ...............%
   126ac:	00e0fc17 f87f0000 00000000 ff7f0000     ................
   126bc:	000000fc ff1f0000 0000fcff ff030000     ................
   126cc:	00f8ffff 7f000000 f0ffffff 07000000     ................
   126dc:	ffffffff 000000e0 ffffffff 000080ff     ................
   126ec:	ffffff0f 0000ffff c0ffff00 00fcff0f     ................
   126fc:	f0ff0f00 f0ff0f00 fcff0000 ff0f0000     ................
   1270c:	ff0f00c0 3f000080 ff0000ff 000000f8     .......?........
   1271c:	0700f87f 000080ff 00e0ff01 0000f87f     ................
   1272c:	80ff0700 0080ff07 fc1f0000 00f83f00     .............?..
   1273c:	7f000000 80ff03f0 01000000 f81fc0ff     ................
   1274c:	00000000 ff01fe0f 000000c0 0ff83f00     .............?..
   1275c:	000000fc c0ff0100 0000e07f fe070000     ................
   1276c:	0000fe07 3f000000 00fe07f9 00000000     .......?........
   1277c:	e07ff81f 00000000 7feaff00 000000e0     ................
   1278c:	ed7f0000 0000c0ff 3f000000 00c0fffd     ...........?....
   1279c:	00000000 00fef33f 00000000 ff53ff03     ....?.........S.
   127ac:	00000000 49ff0300 000080ff fe070000     .......I........
   127bc:	00c0ff40 0f000000 00ff07fc 00000000     @...............
   127cc:	f81fe0ff 00000000 ff00fe0f 000000e0     ................
   127dc:	03f07f00 000080ff 00ff0700 0000fe1f     ................
   127ec:	f87f0000 00f87f00 ff070000 e0ff0180     ................
   127fc:	7f000000 ff0700f8 07000080 3f00c0ff     ...............?
   1280c:	000000fe 0000fc7f 0000fcff 00c0ff0f     ................
   1281c:	00f8ff03 00fcff01 fcff0f00 c0ffff00     ................
   1282c:	ff3f0000 fcffffff 7f000000 ffffffff     ..?.............
   1283c:	010000c0 ffffffff 000000f8 ffffff03     ................
   1284c:	000000ff ffff0f00 0000f0ff ff0f0000     ................
   1285c:	0000fcff 1f000000 0000ffff 00000000     ................
   1286c:	0080ff07 a40d0000 ff370420 80ffffff     ........ .7.....
   1287c:	ffff0f00 00f8ffff ffffff1f 3f00feff     ...............?
   1288c:	ffffffff ff7f00fe ffffffff ffffff00     ................
   1289c:	01ffffff ffffffff ff03ffff ffffffff     ................
   128ac:	00fe07ff feff0000 0000fc0f 1ffe3f00     .............?..
   128bc:	000000f8 f03ffe1f 1f000000 00e07ffc     ......?.........
   128cc:	fc3f0000 0000c0ff 3ffa3f00 000000f0     ..?......?.?....
   128dc:	e07ffe07 0f000000 00f8bfff ff010000     ................
   128ec:	0000f0bf 7fff0300 000000e0 f81fff0f     ................
   128fc:	03000000 00f03fff fe0f0000 0000e07f     .....?..........
   1290c:	fff83f00 000000c0 80fff1ff ff030000     .?..............
   1291c:	0000ffc3 87ff1f00 010000fe ff11feff     ................
   1292c:	ffffffff ffff03ff fcffffff ffffff07     ................
   1293c:	0fe0ffff ffffffff ff1f80ff fcffffff     ................
   1294c:	ffff3f00 00c0ffff ffffff7f bf0100f0     .?..............
   1295c:	000000f8 fe6f0000 00000000 80ff1b00     ......o.........
   1296c:	00000000 00e0ff06 01000000 0000f81f     ................
   1297c:	00000000 dc172711 000000e0 0000f0ff     .....'..........
   1298c:	00000000 00f8ff7f 00000000 f8ffff1f     ................
   1299c:	00000000 ffffff03 000000f0 ffff7f00     ................
   129ac:	0000e0ff ffff0f00 0080ffff ffff0000     ................
   129bc:	00ffffff ff0f0000 fcffffff ff000000     ................
   129cc:	ff1f80ff 0f0000f0 1f00e0ff 0000c0ff     ................
   129dc:	0000fcff 0000ff3f 0080ff0f 00fc7f00     ....?...........
   129ec:	00f8ff00 f0ff0100 00ff0700 ff070000     ................
   129fc:	f07f0080 1f000000 ff0700fe 00000000     ................
   12a0c:	3f00f87f 000000f8 03c0ff01 000080ff     ...?............
   12a1c:	00ff0700 0000f81f f81f0000 00c0ff01     ................
   12a2c:	ff000000 80ff81e0 00000000 ff93e07f     ................
   12a3c:	00000000 b7f03f00 000000fe f81f0000     .....?..........
   12a4c:	0000fcdf 0f000000 00fcdffc 00000000     ................
   12a5c:	feb7fc0f 00000000 93f81f00 000000ff     ................
   12a6c:	f03f0000 0000fc0f ff030000 00e07f00     ..?.............
   12a7c:	1f006000 80ff03f8 01c00300 fc0fc0ff     .`..............
   12a8c:	c01f0000 7f00fc0f ff0100f0 01e0ff00     ................
   12a9c:	0f00c0ff 00fe0ffe 0000fe0f f0fff87f     ................
   12aac:	00f83f00 fff7ff07 e0ff0000 ffff0f00     .?..............
   12abc:	ff0700f0 ff0f00c0 1f0000ff 3f0000ff     ...............?
   12acc:	0000f8ff 0000fe7f 0080ff7f 00fcff01     ................
   12adc:	00f8ff03 fcff0700 80ffff00 ff1f0000     ................
   12aec:	ffffffff 7f000000 ffffffff 010000fe     ................
   12afc:	ffffffff 0000fcff ffffff03 00f8ffff     ................
   12b0c:	ffff0700 f0fff7ff ff0f0000 ff1ffeff     ................
   12b1c:	0f0000e0 7f80ffff 000080ff 0080ff07     ................
   12b2c:	0000f8ff 00000000 00c0ff01 00000000     ................
   12b3c:	00fc0300 00000000 e0070000 00000000     ................
   12b4c:	0e000000 20640f00 ffff8704 00f8ffff     ......d ........
   12b5c:	ffff1f00 00feffff ffff7f00 00ffffff     ................
   12b6c:	ffffff01 00feffff ffffff07 00feffff     ................
   12b7c:	ffffff1f 00fcffff ffffff8f 00ffffff     ................
   12b8c:	0000f03f 00feff01 0000c0ff 03fcff00     ?...............
   12b9c:	000000ff 0ff0ff00 000000fc 47c0ff01     ...............G
   12bac:	000000fe 1ff07f00 000000f8 7fc0ff00     ................
   12bbc:	000000e0 7f83ff03 000000f0 ffc0ff00     ................
   12bcc:	000000c0 7f04ff07 000000e0 ff01ff03     ................
   12bdc:	00000080 ff08fc1f 000000c0 ff03fc1f     ................
   12bec:	01000000 fc0fe0ff 0f000000 f03f80ff     ..............?.
   12bfc:	ff030000 ffff00fc ffffffff ffff03e0     ................
   12c0c:	ffffffff ffff0f00 f8ffffff ffff3f00     .............?..
   12c1c:	80ffffff ffffff00 00fcffff ffffff03     ................
   12c2c:	0080ffff ffffff0f 0000e0ff ffffff3f     ............?...
   12c3c:	000000ff 3f00c0ff 030000fe 1f0000ff     .......?........
   12c4c:	0f0000fe 3f0000fc 3f0000fc 7f0000f0     .......?...?....
   12c5c:	ff0000f8 ff0000c0 ff0300f0 ff010000     ................
   12c6c:	fc0f00e0 ff030000 f03f00c0 ff070000     ..........?.....
   12c7c:	c0ff0000 fe0f0000 00ff0300 fc3f0000     ..............?.
   12c8c:	00fc0f00 f87f0000 00f03f00 e0ff0000     .........?......
   12c9c:	00c0ff00 c0ff0300 0000ff03 00ff0700     ................
   12cac:	0000fc0f 00fe0f00 0000f03f 00fc3f00     ........?....?..
   12cbc:	0000c0ff 03f07f00 000000ff 0fe0ff01     ................
   12ccc:	000000fc 3f80ff03 000000f0 ff00ff07     .......?........
   12cdc:	000000c0 ff03fe1f 00000000 fc0ff83f     ............?...
   12cec:	00000000 f03ff0ff 01000000 c0ffe0ff     ......?.........
   12cfc:	03000000 00ff83ff 0f000000 00fc0fff     ................
   12d0c:	1f000000 00f03ffc 7f000000 00c0fff8     .....?..........
   12d1c:	ff000000 0000fff3 ff010000 0000fccf     ................
   12d2c:	ff070000 0000f0bf fe0f0000 fc17650e     .............e..
   12d3c:	1f000030 000000ff ff7f0000 000000fc     0...............
   12d4c:	ffffff00 000000e0 feffffff ff000000     ................
   12d5c:	e0ffffff ff7f0000 00fcffff ffff3f00     .............?..
   12d6c:	00c0ffff ffffff1f 0f00f8ff ff01f0ff     ................
   12d7c:	ff0700fe ff0f00e0 e0ff03c0 f8ff0000     ................
   12d8c:	00e0ff00 08fe0f00 0000fe0f 03f83f00     .............?..
   12d9c:	000000ff ff01ff07 000000c0 e07fc0ff     ................
   12dac:	3f000000 00f81ff0 fe0f0000 00c0ff48     ...?........H...
   12dbc:	f03f0000 0000f03f 81000000 0000c0ff     ..?.?...........
   12dcc:	3f000000 000000f8 ff0f0000 00000000     ...?............
   12ddc:	e0ff0300 00000000 00fe7f00 00000000     ................
   12dec:	00f0ff1f 03000000 0080ffff 7f000000     ................
   12dfc:	0000feff ff0f0000 0000f8ff ffff0100     ................
   12e0c:	0000e0ff ffff3f00 000000ff ffffff03     .....?..........
   12e1c:	000000f8 ffffff3f 03000080 f8ffffff     ....?...........
   12e2c:	1f000000 80ffffff ff000000 00f0ffff     ................
   12e3c:	ff030000 0000feff ff1f0000 0000c0ff     ................
   12e4c:	ff7f0000 000000f8 ffff0300 00000000     ................
   12e5c:	e0ff1f00 00000000 00f8ff01 00000000     ................
   12e6c:	0000ff1f 03000000 0000c0ff 7f000000     ................
   12e7c:	00e07ff4 ff010000 0000f8df f83f0000     ..............?.
   12e8c:	0000e0ff c3ff0100 000000ff fffc0f00     ................
   12e9c:	000000e0 f83fff03 01000000 e0ffe0ff     ......?.........
   12eac:	0f000000 00fc1ffc ff070000 0080ff07     ................
   12ebc:	80ff0300 0000f0ff 3fe0ff01 000000ff     ...........?....
   12ecc:	ff07f0ff 7f0000e0 ffff00fc fe7f0000     ................
   12edc:	f8ff1f00 00ffff01 ffffff03 0080ffff     ................
   12eec:	ffffff7f 0f00c0ff ffffffff ff0100e0     ................
   12efc:	e0ffffff ff1f0000 00f0ffff ffff0100     ................
   12f0c:	0000f0ff ffff0f00 000000e0 80ff1f00     ................
   12f1c:	a40e0000 ffed0308 ffffffff ffdfffff     ................
   12f2c:	ffffffff 0080feff 00e07f00 00001a00     ................
   12f3c:	0080ff01 00006800 0000fe07 0000a001     .....h..........
   12f4c:	0000f81f 00008006 0000e07f 0100001a     ................
   12f5c:	000080ff 07000068 010000fe 1f0000a0     ....h...........
   12f6c:	060000f8 7f000080 000000e0 fc0f0000     ................
   12f7c:	0e000000 8dfca324 0000c0ff dfff0300     ....$...........
   12f8c:	000000fc fffd3f00 000000c0 fcdfff03     .....?..........
   12f9c:	00000000 c0fffd3f 03000000 00fcdfff     ....?...........
   12fac:	3f000000 00c0fffd ff030000 0000e07f     ...?............
   12fbc:	d3ff0300 000000ff 3ff43f00 000000f8     .........?.?....
   12fcc:	fc0fff07 03000000 00ff07ff ff030000     ................
   12fdc:	00c0ff83 c0ff0300 0000f0ff 7fc0ff03     ................
   12fec:	030000fc ff1fe0ff ff030000 e0ff0fe0     ................
   12ffc:	f0ff0700 00feff03 00f0ff3f ffffffff     ........?.......
   1300c:	3f00f0ff ffffffff ff0f00f0 f0ffffff     ...?............
   1301c:	ffff0300 00f0ffff ffffff00 0000f0ff     ................
   1302c:	ffffff1f 030000e0 c0ffffff 3f000000     ...............?
   1303c:	0000ffff ff010000 000000f8 047c6411     .............d|.
   1304c:	0000ff37 01000000 c0ffe1ff 00000000     7...............
   1305c:	ffc3ff01 00000000 41fe0700 0000c0ff     ...........A....
   1306c:	ff070000 0000ff03 1f000000 00fe0ff8     ................
   1307c:	00000000 f81fe0ff 00000000 0f08ff03     ................
   1308c:	000000fe 80ff0300 0000f81f fc0f0000     ................
   1309c:	00f07f00 7f000000 c0ff00f0 01000000     ................
   130ac:	ff03c0ff 00000000 0f00fe07 000000fe     ................
   130bc:	00f83f00 0000f81f c0ff0000 00f07f00     .?..............
   130cc:	ff070000 c0ff0000 1f000000 ff0300fc     ................
   130dc:	00000000 0f00e07f 000000fe 0080ff03     ................
   130ec:	0000f81f 00fc0f00 00e07f00 f07f0000     ................
   130fc:	c0ff0000 ff010000 ff0300c0 07000000     ................
   1310c:	004000fe 0000c0ff 0000ff07 0000ff03     ..@.............
   1311c:	00f81f00 00fe0700 e0ff0000 f81f0000     ................
   1312c:	ff030000 07000800 030000fe 000080ff     ................
   1313c:	0000f81f 0000fc0f 00f03f00 00f07f00     .........?......
   1314c:	c0ff0000 80ff0100 ff010000 fe070000     ................
   1315c:	07000000 3f0000fe 000000f8 0000f81f     .......?........
   1316c:	0000c0ff 00f03f00 0000ff07 c0ff0000     .....?..........
   1317c:	00f81f00 ff010000 e07f0000 07000000     ................
   1318c:	ff0300fe 00000080 0f00f81f 000000fc     ................
   1319c:	00e03f00 0000f03f c0ff0000 00c0ff01     .?..?...........
   131ac:	ff010000 00fe0700 07000000 f83f00fe     ..............?.
   131bc:	00000000 ff00f81f 000000c0 03e03f00     .............?..
   131cc:	000000ff c0ff0000 0000fc1f 3f000040     ............@..?
   131dc:	00fc0fe0 00000000 e07fc0ff 00000000     ................
   131ec:	ff01ff01 00000080 0ffc0700 080000fe     ................
   131fc:	ff010000 0000fe07 07000000 00f03ffe     .............?..
   1320c:	00001000 f81fff01 00090000 df7f0000     ................
   1321c:	040000f8 1f000000 0000f8ff 00004002     .............@..
   1322c:	00f8ff07 00000100 f8ff0100 80000000     ................
   1323c:	7f000000 000000f8 04641800 00fe3706     ..........d..7..
   1324c:	ff000000 000000e0 c0fffd0f 7f000000     ................
   1325c:	000000fc fe87ff07 03000000 0000e0ff     ................
   1326c:	fff13f00 01000080 0000fcff 7ffc0f00     .?..............
   1327c:	000000f0 0000ff7f 41ff0700 000080ff     ...........A....
   1328c:	00f8ff03 f03f0000 0000e07f 00ffff01     ......?.........
   1329c:	fc0f0000 0000f81f c0bf7f00 ff070000     ................
   132ac:	0000ff03 f0ef1f00 ff010000 00c0ff80     ................
   132bc:	fefb0f00 7f000000 00fe07e2 8f7f0000     ................
   132cc:	030000f0 c0ff00ff e33f0000 010000fc     ..........?.....
   132dc:	fe0784ff fe010000 0000f00f ff00fc0f     ................
   132ec:	7f000080 0000fc83 3f00ff03 3f0000f0     ...........?...?
   132fc:	00807fe0 0182ff01 010080ff 00fc03fe     ................
   1330c:	00fc0f00 0000e03f 80ff80ff 00fe0300     ....?...........
   1331c:	0000f80f e01fc03f 81ff0000 00e07f00     ....?...........
   1332c:	ff00fe01 fc0f0000 00f80f00 1f80ff00     ................
   1333c:	fe0300e0 00fe0300 07c03f00 ff0000f8     .........?......
   1334c:	c0ff0080 01f00f00 7f0000fe f03f00e0     ..............?.
   1335c:	00fc0700 1f00c03f ff0008f8 c03f0080     ....?.........?.
   1336c:	0000fe01 3f0080ff f01f00f0 00803f00     .......?.....?..
   1337c:	0f00e07f fc0700fc 00f00f00 0100f81f     ................
   1338c:	fe0100ff 00fc0300 0000fc07 7f00c07f     ................
   1339c:	007f0080 0000ff01 3f00f01f e01f00e0     ...........?....
   133ac:	00c07f00 0f00fe07 f80700f0 00f03f00     .............?..
   133bc:	0380ff00 fe0100fc 00f80f00 01e03f00     .............?..
   133cc:	3f0000ff 00fe03c0 00f80f00 0f00807f     ...?............
   133dc:	80ff00f0 00ff0300 0300e01f e07f00fc     ................
   133ec:	f80f0004 0000ff01 fe03f00f fe030000     ................
   133fc:	00807f00 ff00fc03 ff000080 00e01fc0     ................
   1340c:	7f807f00 1f0000e0 00f80ff0 1fe01f00     ................
   1341c:	070000f0 00fc03fc 07f80700 010000fc     ................
   1342c:	00ff00ff 01ff0000 000000ff c07fc07f     ................
   1343c:	c03f0000 0000c07f e01ff80f f00f0000     ..?.............
   1344c:	8000e03f ffc07f00 3f000000 0000ffc1     ?..........?....
   1345c:	7ff00f00 0f0000c0 00c07ff0 1ffe0300     ................
   1346c:	030000e0 00e03ffc 87ff0000 000000f8     .....?..........
   1347c:	00f88f7f e33f0000 000000fe 00fee31f     ......?.........
   1348c:	f8070000 000000ff 00fff807 fe010000     ................
   1349c:	0000c03f c07ffe00 0f004000 0000fefb     ?........@......
   134ac:	fefb0700 00000200 00e0df3f df1f0000     ........?.......
   134bc:	000000e0 00f8ff0f ff070000 000000f8     ................
   134cc:	00fcff03 ff000000 000100fe e0ff0f00     ................
   134dc:	07000000 0800e0ff fe7f0000 00000000     ................
   134ec:	0000ff1f ff010040 000000f0 00f0ff00     ....@...........
   134fc:	0f000002 000000ff 80ff0300 64100000     ...............d
   1350c:	7f200400 000000f8 0fc0ff07 000000ff     .. .............
   1351c:	01e0ff01 0000e0ff 00f0ff00 0000f87f     ................
   1352c:	00fc7f00 0000ff0f 00fe1f00 00e0ff01     ................
   1353c:	00ff0f00 00f87f00 c0ff0700 00ff0f00     ................
   1354c:	e0ff0100 e0ff0100 f0ff0000 f87f0000     ................
   1355c:	fc7f0000 ff0f0000 fe1f0000 ff010000     ................
   1356c:	ff0f00e0 3f000000 ff0700f8 0f0000c0     .......?........
   1357c:	ff0100ff 010000e0 ff00e0ff 000000f0     ................
   1358c:	7f00fc3f 000000fc 1f00ff0f 000000fe     ?...............
   1359c:	0fe0ff01 800000ff 80ff0700 0000f0ff     ................
   135ac:	f0ff0000 0000f87f fc1f0000 0000fc3f     ............?...
   135bc:	ff070000 0000ff8f ff000000 0080fff7     ................
   135cc:	03000004 00f8ffff 00000000 00fcff7f     ................
   135dc:	00000800 c0ffff01 00000000 e0ff3f00     .............?..
   135ec:	00100000 feff0000 80000000 ff030000     ................
   135fc:	000000e0 ff010000 000000f8 7f000000     ................
   1360c:	000000ff 3f000000 0000e0ff 1f000000     .......?........
   1361c:	0000f8ff 07000000 0000ffff 03000000     ................
   1362c:	00e0ffff 00004000 80ffff3f 00000000     .....@..?.......
   1363c:	f0fffe1f 00000000 fe9fff0f 00000000     ................
   1364c:	ffc7ff03 00000080 ffe0ff01 000000f0     ................
   1365c:	1ff8ff00 000000fe 07fc3f00 000080ff     .........?......
   1366c:	00fe1f00 0800f0ff e0ff0100 00c0ff03     ................
   1367c:	f0ff0000 00f87f00 ff0f0010 e0ff0100     ................
   1368c:	ff070000 fc3f0080 ff030000 ff0700c0     ......?.........
   1369c:	ff010080 ff0100f0 7f0000e0 3f0000f8     ...............?
   136ac:	3f0000fc 070000fc 1f0080ff 000000ff     ...?............
   136bc:	0700e0ff 000080ff 0300fc3f 0000c0ff     ........?.......
   136cc:	0180ff07 0000f0ff 00f0ff00 0000f87f     ................
   136dc:	00fc3f00 0000fc3f 80ff0700 0000ff1f     .?..?...........
   136ec:	f0ff0000 0080ff07 fc3f0000 00c0ff03     ..........?.....
   136fc:	ff070000 00f0ff81 ff000000 00f87ff0     ................
   1370c:	3f000000 00fc3ffc 07000000 00ff9fff     ...?.?..........
   1371c:	00000000 a410f0ff ff270400 00000080     ..........'.....
   1372c:	7ffe1f00 000000f8 87ff0700 000080ff     ................
   1373c:	e0ff0000 0000f0ff fc3f0000 0000ff0f     ..........?.....
   1374c:	ff0f0000 00f0ff00 ff010000 00fe1fc0     ................
   1375c:	7f000000 e0ff01f8 1f000000 fe1f00fe     ................
   1376c:	03000000 ff0380ff 000000c0 3f00f0ff     ...............?
   1377c:	000000fc 0300fc3f 0000c0ff 0000ff07     ....?...........
   1378c:	0000f87f 00e0ff01 0080ff07 00f83f00     .............?..
   1379c:	00f87f00 00fe0f00 00ff0f00 c0ff0300     ................
   137ac:	f0ff0000 f07f0000 ff0f0000 fc1f0000     ................
   137bc:	ff010000 ff0700e0 1f000080 ff0000fe     ................
   137cc:	010000e0 3f00e0ff 000000f8 0f00fc1f     .......?........
   137dc:	000000ff 01c0ff03 0000c0ff 00fc3f00     .............?..
   137ec:	0000f07f 80ff0300 0000fc0f f87f0000     ................
   137fc:	0080ff03 ff070000 00e0ff80 7f000000     ................
   1380c:	00f81ff0 0f000000 00ff07ff 00000000     ................
   1381c:	c0fff1ff 00000000 f03ffe0f 00000000     ..........?.....
   1382c:	feefff01 00000000 ffff1f00 00010080     ................
   1383c:	ff3f0000 000000fc ff030000 000000ff     ..?.............
   1384c:	07000080 0000f8ff 00000000 0000fe7f     ................
   1385c:	00004000 00f0ff00 00a00100 80ff0100     .@..............
   1386c:	80060000 fe070000 1a000000 1f000000     ................
   1387c:	000000f8 00000068 0000e07f 00002001     ....h........ ..
   1388c:	0080ff01 640e0000 07dd0308 ffffffff     .......d........
   1389c:	ff01feff ffffffff 000080ff ff030000     ................
   138ac:	000000e0 f0ff0100 00000000 00f87f00     ................
   138bc:	00000000 0000fc3f 1f000000 000000ff     ....?...........
   138cc:	ff0f0000 00000080 c0ff0300 00000000     ................
   138dc:	00e0ff01 00000000 0000f8ff 7f000000     ................
   138ec:	000000fc fe1f0000 00000000 00ff0f00     ................
   138fc:	00000000 0080ff07 03000000 0000e0ff     ................
   1390c:	ff010000 000000f0 f87f0000 00000000     ................
   1391c:	00fc3f00 00000000 0000ff1f 0f000000     .?..............
   1392c:	000080ff ff030000 000000c0 e0ff0100     ................
   1393c:	00000000 00f8ff00 00000000 0000fc7f     ................
   1394c:	1f000000 000000fe ff0f0000 00000000     ................
   1395c:	c0ff0700 00000000 00e0ff03 00000000     ................
   1396c:	0000f0ff 7f000000 000000f8 fc3f0000     ..............?.
   1397c:	00000000 00ff1f00 00000000 0080ff0f     ................
   1398c:	03000000 0000c0ff ff010000 000000e0     ................
   1399c:	f8ff0000 00000000 00fc7f00 00000000     ................
   139ac:	0000fe1f 0f000000 000000ff ff070000     ................
   139bc:	000000c0 e0ff0300 00000000 00f0ff00     ................
   139cc:	00000000 0000f87f 3f000000 000000fe     ...........?....
   139dc:	ff1f0000 00000000 80ff0700 00000000     ................
   139ec:	00c0ff03 01000000 0000e0ff ff000000     ................
   139fc:	000000f8 fc7f0000 00000000 00fe1f00     ................
   13a0c:	00000000 0000ff0f 07000000 0000c0ff     ................
   13a1c:	ff030000 000000e0 f0ff0000 00000000     ................
   13a2c:	00f87f00 00000000 0000fe3f 1b000000     ........?.......
   13a3c:	ffffffff 7fffffff ffffffff 04c0ffff     ................
   13a4c:	cd611bee ffefffff 03f0bfff ff06e07f     ..a.............
   13a5c:	80ff0dc0 3700ff1b fc6f00fe 01f8df00     .......7..o.....
   13a6c:	7f03f0bf c07f06e0 efffff0d 6407feff     ...............d
   13a7c:	ffc80100 fe030000 ff100000 fe030000     ................
   13a8c:	ff240000 fe030000 ff400000 fe030000     ..$.......@.....
   13a9c:	ff800000 fe030000 ff200100 fe030000     .......... .....
   13aac:	ff000200 fe030000 ff800400 fe030000     ................
   13abc:	ff000800 fe030000 ff001200 fe030000     ................
   13acc:	ff002000 fe030000 ff004000 fe030000     . .......@......
   13adc:	ff009000 fe030000 ff000001 fe030000     ................
   13aec:	ff004002 fe030000 ff000004 fe030000     .@..............
   13afc:	ff000009 fe030000 ff000010 fe030000     ................
   13b0c:	ff000020 fe030000 ff000048 fe030000      .......H.......
   13b1c:	ff000080 fe030000 f8070000 610fee04     ...............a
   13b2c:	efffffcd 07a0ffff fe0f40ff 00fd1f80     .........@......
   13b3c:	7f00fa3f e8ff00f4 03d0ff01 ff07a0ff     ?...............
   13b4c:	00fe0f40 fffffd1f 09feffef b01289d3     @...............
   13b5c:	00f00700 ff010009 00000100 2000f07f     ............... 
   13b6c:	00ff1f00 ff3f0000 07000400 0000f0f7     ......?.........
   13b7c:	00f8f70f f8e30f00 fc038000 0300807f     ................
   13b8c:	10803ff8 f807ff00 c03f0002 3f00807f     .?........?....?
   13b9c:	40803f80 f807f00f 00fc0309 ff00817f     .?.@............
   13bac:	01f80700 fc0700ff 0300fe01 c07f20fc     ............. ..
   13bbc:	7fc07f00 c43f0080 0700f01f 00fc97fc     ......?.........
   13bcc:	f8cf7f00 e03f0000 637f830e ffffff8c     ......?....c....
   13bdc:	ffffffff 118704c0 80ff17d2 ff07f87f     ................
   13bec:	80f07f00 fc0fc0ff 0188ff00 f01f00ff     ................
   13bfc:	1f00fe01 0cfc01c0 80fb131b f0ff0100     ................
   13c0c:	0f000000 0080ffff ffff3f00 7f0000f8     .........?......
   13c1c:	00feffff ffff7f00 ff00c0ff f0ffffff     ................
   13c2c:	ffffff00 7f00f8ff feffffff 00fe7f00     ................
   13c3c:	7f80ff7f ff0700f8 00f83fc0 3fe0ff01     .........?.....?
   13c4c:	7f0000f8 00f81ff8 0ffc1f00 0f0000f8     ................
   13c5c:	00fc0ffe 07ff0300 010000fc 003e80ff     ..............>.
   13c6c:	c4ff0000 00000080 0000fc0f fe1f0000     ................
   13c7c:	00000000 0000ffff ffff0f00 ff070080     ................
   13c8c:	00c0ffff ffffff3f ffff00e0 01f0ffff     ....?...........
   13c9c:	ffffffff ffff01f8 01fcffff f7ffffff     ................
   13cac:	ffff01fe 01ff83ff 01f0ffff feff81ff     ................
   13cbc:	c0ff0000 0000f0ff e0ffe07f f03f0000     ..............?.
   13ccc:	0000e07f e07ff81f fc0f0000 0000fc47     ............G...
   13cdc:	7fc4ff01 3f0000c0 00e03ffc 1ffe3f00     .......?.?...?..
   13cec:	3f0000f8 00fc0fff 83ff3f00 3f0000ff     ...?.....?.....?
   13cfc:	c0ffc1ff e0ff7f00 ff01fcff ff3ff0ff     ..............?.
   13d0c:	fcefffff ffffff1f ff07fee7 ffe1ffff     ................
   13d1c:	ffffff01 7f80ffc0 7fc0ffff ffff0fe0     ................
   13d2c:	01f01f80 0700ffff f81f00fc 0b000000     ................
   13d3c:	8dfb9b64 000080ff c0ff0600 02000000     d...............
   13d4c:	0000e0ff 80ff0000 0300f01f f8ff03fe     ................
   13d5c:	3ff80f00 3f00f8ff f8ffffe1 ff8fff00     ...?...?........
   13d6c:	fe03f0ff e0ffff7f fffffb0f ff3fc0ff     ..............?.
   13d7c:	80ffffff 3fe0ffff feff03ff 0ffe3f00     .......?.....?..
   13d8c:	3f00e0ff 00ff3ff8 fff07f00 ff0000f8     ...?.?..........
   13d9c:	00e0ffc3 ff8fff01 fe070000 0000f83f     ............?...
   13dac:	e0fff80f f43f0000 0000e0ff 80fff90f     ......?.........
   13dbc:	fd3f0000 000080ff c0fffd0f fd070000     ..?.............
   13dcc:	000000ff c0ffe93f f31f0000 000000ff     ....?...........
   13ddc:	00fecfff 3ffe0300 1f0000f8 00f0fff8     .......?........
   13dec:	ffc3ff00 ff0300e0 00c0ff0f ff3ff81f     ..............?.
   13dfc:	e0ff0080 0f00ffff ffff03ff 0ffcff80     ................
   13e0c:	fffffffb ffef3fe0 ff00ffff f8ffff9f     .....?..........
   13e1c:	ff3ffe03 f80fc0ff 00fcff7f ffffe03f     ..?.........?...
   13e2c:	80ff00e0 0000feff c07f0000 5b0b0000     ...............[
   13e3c:	0020fb13 00c0ff01 ff3f0000 070000e0     .. .......?.....
   13e4c:	00e0ffff ffff3f00 ff0300e0 00c0ffff     .....?..........
   13e5c:	ffffff1f ffff0080 0700ffff feffffff     ................
   13e6c:	80ff3f00 ff01fcff f0ff00f0 0000ff07     .?..............
   13e7c:	f83fe0ff 80ff0100 0300c0ff 00fe07ff     ..?.............
   13e8c:	1ffc0f00 1f0000f8 00c07ff0 ffe37f00     ................
   13e9c:	ff000000 0000f88f fc87e003 00000000     ................
   13eac:	0000f03f f0bf0100 00000000 0000f8cf     ?...............
   13ebc:	f01f0000 e0030000 0000c07f 00fff90f     ................
   13ecc:	e77f0000 010000fe 00f80fff 07fd0700     ................
   13edc:	070000fe 00fc0ffe 3ff03f00 ff0100f8     .........?.?....
   13eec:	00f07fc0 ff01fe0f f87f00f0 0ff0ff03     ................
   13efc:	ff07c0ff 00feffff ffffff0f ff1f00f0     ................
   13f0c:	0080ffff fcffff3f ff7f0000 0000e0ff     ....?...........
   13f1c:	00feff7f ff7f0000 000000e0 0000f81f     ................
   13f2c:	fb8f640b 0000008d 80fe0f00 07000000     .d..............
   13f3c:	0000c0fe 00fe0300 0fc07f00 ff0f00f8     ................
   13f4c:	00e03fe0 ffe0ffff ffff0f80 7f00fec3     .?..............
   13f5c:	f88fffff ffffff03 ff1fe03f 80fffeff     ........?.......
   13f6c:	ffffffff e0ff07fe 3ff8ff3f ff3f00fc     ........?..?..?.
   13f7c:	00e0ffe0 ff87ff3f fe7f0000 0000f81f     ....?...........
   13f8c:	f81ffcff fc3f0000 0000c07f 00fff37f     ......?.........
   13f9c:	e5ff0100 000000ff 00fcef7f efff0100     ................
   13fac:	000000fc 00feef7f ef3f0000 000000fc     ..........?.....
   13fbc:	00fecbff cfff0000 070000fc 00f01fff     ................
   13fcc:	7ffc1f00 ff0000e0 0080fff0 ffc3ff03     ................
   13fdc:	ff1f0000 0000fe0f fc1ffcff f0ff0700     ................
   13fec:	7f00fc3f fcffc0ff 01ffff07 f7ffffff     ?...............
   13ffc:	ffff03fc 07f0dfff 7ffeffff ffff0fc0     ................
   1400c:	0f00fff1 fc87ffff fcff1f00 1f00f01f     ................
   1401c:	c07fc0ff 00f80f00 0f5b0c00 000080fb     ..........[.....
   1402c:	0000e0ff ffff0100 03000080 00f8ffff     ................
   1403c:	ffff0300 010080ff f0ffffff ffff0000     ................
   1404c:	0000ffff ffffff7f ff3f00e0 00fcffff     ..........?.....
   1405c:	3f80ff1f ff0f80ff e0ff0100 0000ff07     ...?............
   1406c:	ff01fc1f ff030080 00c0ff80 3fe07f00     ...............?
   1407c:	0f0000e0 00f01ffc 07ff0100 000000fc     ................
   1408c:	c07fc83f ff010000 0000fc43 fff80700     ?.......C.......
   1409c:	01000000 ffffdfff fbffffff ffffffff     ................
   140ac:	f05fffff 00000000 0000fe07 1f020000     .._.............
   140bc:	000000f0 00fe0700 01000000 000080ff     ................
   140cc:	f03fc003 ff010000 0000fc8f ffc37f00     ..?.............
   140dc:	3f000080 00f07ff0 1ff81f00 0f0000fe     ...?............
   140ec:	c0ff03fe 00ff0700 0700fc7f ff1fc0ff     ................
   140fc:	e0ff0fe0 ffffff03 7f00f0ff f8ffffff     ................
   1410c:	ffff0f00 0000fcff feffffff ff1f0000     ................
   1411c:	0000ffff ffffff01 0f000000 0000feff     ................
   1412c:	f87f0000 e4070000 00d00184 00c0ff01     ................
   1413c:	00f0ff0f 00f0ff3f 00e0ff7f 01e0ffff     ....?...........
   1414c:	00e8ffff 00fcff7f 0004f87f 0001e0ff     ................
   1415c:	3400f81f 0400fe03 00c07f00 feffffdf     ...4............
   1416c:	feffff0f 00ff011a e03f4003 fc076800     .........@?..h..
   1417c:	ff000d00 1fa00180 033400f0 000400fe     ..........4.....
   1418c:	0b00c07f 705b0f65 00fe0300 7f000000     ....e.[p........
   1419c:	00ff01ff 07feff07 ff7f00fc 03f01ffe     ................
   141ac:	7ffcffff ffff1fc0 ff00fff9 fcf7ffff     ................
   141bc:	ffffff07 ff3ff0ff c1ffff01 ff01f0ff     ......?.........
   141cc:	00ff07ff 3ffcff01 ff0300f8 00c0fff0     .......?........
   141dc:	ffe0ff07 ff0100c0 0000fee3 f89fff03     ................
   141ec:	ff0f0000 0000f82f c07fff03 ff0f0000     ..../...........
   141fc:	0000e07f f05fff03 ff010000 0000c07f     ......_.........
   1420c:	f05ffe0f fe070000 0000e07f 80fff83f     .._.........?...
   1421c:	e3ff0000 070000fe 00fc8fff 1ffe1f00     ................
   1422c:	ff0000f8 00f07ff8 ffe0ff07 ff3f00e0     ..............?.
   1423c:	03c0ff83 ff07feff f8ff3fe0 ffffff0f     .........?......
   1424c:	ff1fe0ff 80ffffff fbffff3f ff7f00fe     ........?.......
   1425c:	00f8cfff 3ffcffff ffff01e0 0080ffe0     .......?........
   1426c:	fe03feff c07f0000 0000fc0f fc070000     ................
   1427c:	00000000 0000e01f 8fff0000 03000080     ................
   1428c:	00e03ffe fff80f00 7f000080 0000ffe3     .?..............
   1429c:	fc0fff01 fc0f0000 0000f81f f07ff07f     ................
   142ac:	81ff0300 3f00e0ff f0ff03fe 0ff0ff07     .......?........
   142bc:	ffffffff ffff1f80 3f00fcff e0ffffff     ...........?....
   142cc:	ffff7f00 7f0000ff 00f8ffff ffffff00     ................
   142dc:	7f000080 0000f0ff 00fc1f00 1ca40a00     ................
   142ec:	80ff8d03 37000000 000000fe 00f8bf00     .......7........
   142fc:	ff010000 00f01f00 ff1fe03f 0ffc07e0     ........?.......
   1430c:	ff00ffff f0ffff87 fffff11f 7ffe03ff     ................
   1431c:	7ff0ffff ffffffdf ffffff0f fffff1ff     ................
   1432c:	3ffe7fc0 ff03c0ff 00e0ffe7 f8fffc1f     ...?............
   1433c:	9fff0100 3f0000fe 00f07ff4 fcef7f00     .......?........
   1434c:	fe0f0000 0000f07f 80fffd1f f77f0000     ................
   1435c:	010000fe 00f8dfff 7fff0700 1f0000e0     ................
   1436c:	0080fffc 02c07f00 6d011c64 40ffc7ff     ........d..m...@
   1437c:	fedf0014 bffff7ff ffeffffd 04fff37f     ................
   1438c:	6d59f3ee 00f03f00 0000f47f d0000050     ..Ym.?......P...
   1439c:	07a0ff03 fe0f40ff 00fd1f80 7f00fa3f     .....@......?...
   143ac:	e8ff00f4 03b0ff01 f07f00fe 3f88ff00     ...............?
   143bc:	8ffffff8 fffff1ff ffe1ff1f 81ff1ffc     ................
   143cc:	f80ff0ff 18e40a00 80ff2d03 1b000000     .........-......
   143dc:	000000ff 00fe3300 3f000000 ff0100e0     .....3.....?....
   143ec:	0000fee3 e03ffc3f 83ff0700 ff0000fe     ....?.?.........
   143fc:	00e03ff0 fe03fe1f c0ff0300 7f00e03f     .?..........?...
   1440c:	00fe03f8 3f00ff0f e0ff01e0 3f00fe03     .......?.......?
   1441c:	e03f00fc 0380ff07 f0ff00fe 3fe03f00     ..?..........?.?
   1442c:	fe0300fe 00c0ff07 f8ffe03f 1ffe0300     ........?.......
   1443c:	3f0000ff 00e0ffe3 fc7ffe03 ef3f0000     ...?..........?.
   1444c:	030080ff 00f0ffff ffff4700 7f0000f0     .........G......
   1445c:	0080ffff ffffff08 ff0f0080 0000fcff     ................
   1446c:	c0fffeff 87ff0f00 ff0000fe 00f07ff0     ................
   1447c:	ff03fe0f c0ff0000 0f00f81f c0ff01f8     ................
   1448c:	0f80ff00 f80f00fc 00e0ff00 ff0780ff     ................
   1449c:	00f80f00 ff00f03f 80ff0380 1f00f80f     ....?...........
   144ac:	80ff00fc 0fc0ff00 fe0f00f8 0080ff00     ................
   144bc:	f80ff07f 00ff0300 3f0080ff 00f80ff8     ...........?....
   144cc:	ff80ff01 fc0f0080 0000f80f 80ffe0ff     ................
   144dc:	0ffe0700 3f0000f8 0080fff0 f88fff03     .......?........
   144ec:	f81f0000 010080ff 00f8cfff 02fe0f00     ................
   144fc:	6d011c64 7fffefff fedffffb bffff7ff     d..m............
   1450c:	feeffffd da11e03f 00400598 00c07f00     ....?.....@.....
   1451c:	0780ff00 f8ff03fc f0ff0f00 ff0ffc07     ................
   1452c:	ff1f00fe 1ffc07fc 7f00ffff fc07feff     ................
   1453c:	80ffff3f 07ffffff ffff7ffc ffffffc1     ?...............
   1454c:	fffffc87 ffffc3ff fffd87ff ffe7ffff     ................
   1455c:	ffc7ffff efff03fe c7ff07fc ff00f8ff     ................
   1456c:	ff01e0ff 00e0ffe7 00c0ff7f c0ffe7ff     ................
   1457c:	80ff3f00 ffe77f00 ff1f0080 f73f0000     .?............?.
   1458c:	1f0000ff 3f0000fe 0000fff7 0000fe1f     .......?........
   1459c:	c0fff91f 80ff0100 fffe0300 ff0100c0     ................
   145ac:	ff030000 0000f0bf 0000e03f 00fef77f     ........?.......
   145bc:	00fc0700 fffe0f00 ff0000c0 ff010080     ................
   145cc:	0000f8df 0000f01f 00fff93f 00fe0300     ........?.......
   145dc:	0afc0700 80039c9a e07f0000 7f80ff00     ................
   145ec:	f01f80ff 03fcff3f ffff1ffe ffc77fc0     ....?...........
   145fc:	f90ffcff c1ffffff ffff7fff ffef3ffc     .............?..
   1460c:	ffc7ffff f8ff01ff 0f00ffff 80ff9fff     ................
   1461c:	fff37f00 fe0700e0 0000f87f c0fff1ff     ................
   1462c:	bfff0100 3f0000f0 00c0fff9 fef77f00     .......?........
   1463c:	ff010000 0000f8df e07fff07 fd1f0000     ................
   1464c:	000080ff 00fef37f 0cff0100 80fb131b     ................
   1465c:	c0ff0000 07000000 0000feff ffff0f00     ................
   1466c:	1f0000c0 00f8ffff ffff3f00 3f0000fe     .........?.....?
   1467c:	c0ffffff ffff3f00 3f00f0ff fcffffff     .....?.....?....
   1468c:	80ff3f00 1f00ff7f ff0f00fe 00fe1f80     .?..............
   1469c:	1fe0ff01 7f0000fe 00fc0ff8 0ffc1f00     ................
   146ac:	070000fe 00fe07ff 83ff0100 000000fe     ................
   146bc:	00ffc37f f43f0000 0000e0bf f03fff01     ......?.......?.
   146cc:	ff000000 0000fef7 bffe0700 000000e0     ................
   146dc:	00f0df7f ef7f0000 000000fc c07ff83f     ............?...
   146ec:	fe030000 0000e03f f81fff03 ff010000     ....?...........
   146fc:	0000fc87 ff83ff00 ff000000 00c0ffc1     ................
   1470c:	7fe0ff00 ff0000e0 00f83fe0 0ff0ff00     .........?......
   1471c:	ff0000ff c0ff03f0 01f0ff00 ff03fcff     ................
   1472c:	ff7f00f8 00f8ffff ffffff1f ff0700f8     ................
   1473c:	00f8ffff ffffff01 3f0000f8 00f0ffff     ...........?....
   1474c:	ffff0700 000000e0 00c0ffff fe070000     ................
   1475c:	0b000000 80639b64 80ff0000 0ff01f00     ....d.c.........
   1476c:	7f00c0ff e0ffffc0 ff07ff01 fc07c0ff     ................
   1477c:	80ffff7f fffff11f cf7f80ff 01feffff     ................
   1478c:	ffff7fff ffff07fc 1ff8ff01 ff01f0ff     ................
   1479c:	80ff7ff0 ffc1ff01 ff0300fc 00e0ff87     ................
   147ac:	ff1ffe07 fc0f0000 0000f87f c0fff13f     ............?...
   147bc:	c77f0000 010000ff 00fc9fff 8ffe0300     ................
   147cc:	010000fc 00f03fff bfff0700 010000f0     .....?..........
   147dc:	00f8bfff bfff0000 070000e0 00f83ffd     .............?..
   147ec:	8ffe0300 030000fe 00f83ffe fff81f00     .........?......
   147fc:	7f0000f0 00e0ffc3 ff0fff03 f81f00c0     ................
   1480c:	0080ff3f ffffe0ff 03ff0f00 ff80ffff     ?...............
   1481c:	ffff0ff8 3fe0ffff ffffffef ffbfff00     .......?........
   1482c:	fe03f8ff c0ffff7f ff7ff80f e03f00fc     ..............?.
   1483c:	00c0ffff fcff80ff 00fe0300 1b0080ff     ................
   1484c:	000000ff 80ff0d00 05000000 0000c0ff     ................
   1485c:	640b0000 0070638f 0000fc03 fe7f0000     ...d.cp.........
   1486c:	0f00ff01 fc07feff fcff7f00 ff07f01f     ................
   1487c:	c07ff8ff f1ffff3f ffff01ff 07fce7ff     ....?...........
   1488c:	dfffffff 03ff3ff0 ffc1ffff ffff01e0     .....?..........
   1489c:	0300ff07 f83ffcff f0ff0700 0f00c0ff     ......?.........
   148ac:	00fec7ff 1fff1f00 3f0000f8 00c07ffc     ...........?....
   148bc:	fff37f00 ff010000 0000f8cf fc87ff07     ................
   148cc:	ff010000 0000f0bf 80fffe07 fe1f0000     ................
   148dc:	0000c0ff e0bffe07 fe030000 0000c07f     ................
   148ec:	e0bffc0f fc0f0000 0000c0ff 00fff17f     ................
   148fc:	c7ff0100 0f0000fe 00f80fff 3ffc3f00     .............?.?
   1490c:	ff0100f0 00e07ff0 ffc1ff0f ff7f00c0     ................
   1491c:	07c0ff03 ff07fcff f0ff7fc0 ffffff1f     ................
   1492c:	ff3fc0ff 00fffdff f7ffff7f ff7f00fc     ..?.............
   1493c:	00f09fff 7ff8ffff ffff00c0 0000ffc1     ................
   1494c:	fc07fcff 807f0000 0000fd1f fe0f0000     ................
   1495c:	00000080 00c0fe07 fe030000 029cda06     ................
   1496c:	e00f0010 c7ff837f 7fff7ff8 fff8ff8f     ................
   1497c:	f7cfff3f fffffcff f0ff8fff 01fcff78     ?...........x...
   1498c:	0080ff0f 1100f0ff 2f00c0ff 6f0000ff     .........../...o
   1499c:	df0000fc bf0100f8 7f0300f0 7f0600e0     ................
   149ac:	0a0000c0 20fb0fdb 00fe0f00 ff0f0000     ....... ........
   149bc:	030000fc 00f8ffff ffffff00 ff1f00e0     ................
   149cc:	0300ffff f8ffffff ffff7f00 ff0fc0ff     ................
   149dc:	00fcffff ff03f8ff 00fc1fe0 ff01fe0f     ................
   149ec:	f07f0080 0300f03f 00fe03ff 3ff01f00     ....?..........?
   149fc:	ff0100e0 0000fe83 e03ff80f 03f80000     ..........?.....
   14a0c:	000000ff 00f83f00 ff030000 000000c0     .....?..........
   14a1c:	0000ff1f ffff0100 0f000000 0000ffff     ................
   14a2c:	feffff00 ff070000 0000fcff f8ffff3f     ............?...
   14a3c:	ffff0100 0700f0ff c0ffffff ffff1f00     ................
   14a4c:	7f0000fe 00f0ffff ffffff00 ff000080     ................
   14a5c:	0000fcff e0ffff01 ff010000 000000fe     ................
   14a6c:	00e0ff03 ff0f0000 00000000 007cf03f     ............?.|.
   14a7c:	7fff0300 1f0000c0 0000fef7 fc87ff01     ................
   14a8c:	fe030000 0000e07f 00ffc37f 3ffc0f00     ...............?
   14a9c:	ff0100f8 00e0ffc3 ff1ff83f 80ff1fc0     ........?.......
   14aac:	ffffffff ffff0ff0 7f00feff c0ffffff     ................
   14abc:	ffffff03 ff0f00f8 0000ffff c0ffff7f     ................
   14acc:	ffff0000 000000e0 0000f0ff f987a306     ................
   14adc:	000800c0 00000700 0000e001 7f0000fc     ................
   14aec:	fe031a80 f80f6000 ffffbf01 fefffff3     .....`..........
   14afc:	03f01fd0 0dc07f40 3400ff01 d000fc07     ....@......4....
   14b0c:	0300f01f 7f0000ff ff0f00f0 ff1f00fd     ................
   14b1c:	ff3f00f4 fcff03e0 80ff1f00 0ae07f00     ..?.............
   14b2c:	8dfb9f9a 000080ff 00fef77f dfff0100     ................
   14b3c:	070000f8 00e07fff fffc1f00 7f000080     ................
   14b4c:	0000feeb fc8fff03 fc1f0000 0700c0ff     ................
   14b5c:	00f89fff fff3ff01 fe7f0080 3f00fc7f     ...............?
   14b6c:	e0ffc7ff fff8ff3f fffdffff ffffff0f     ....?...........
   14b7c:	ffffe03f 0ffcc7ff fff0ffff fcffff80     ?...............
   14b8c:	ff0ff01f 00fe03fe 7f80ff7f 80ff00c0     ................
   14b9c:	da0b0000 fe170304 3f000000 0000fef3     ...........?....
   14bac:	fef33f00 3f000000 0000ffe3 3fe87f00     .?.....?.......?
   14bbc:	0f0000e0 00f03ff8 03f91f00 030000fe     .....?..........
   14bcc:	00ff03fe 20fe0700 0000e03f f01f80ff     ....... ?.......
   14bdc:	80ff0100 0100f01f f81f00ff 00ff0100     ................
   14bec:	0300f80f f80f00ff 00fe0300 0300fc0f     ................
   14bfc:	fc0700fe 00fe0700 0700fc07 fe0700fc     ................
   14c0c:	00fc0700 0f00fe03 fe0300fc 04f80f00     ................
   14c1c:	03e03f00 3f0000ff 00fe03e0 00fe0380     .?.....?........
   14c2c:	0300c0ff 80ff00fe e03f0010 0000f03f     ..........?.?...
   14c3c:	e03fe03f fe030002 0000fc0f f80ffe01     ?.?.............
   14c4c:	3f004000 0000ffe3 fee31f00 03000800     .@.?............
   14c5c:	01c0fffe df3f0000 000000f0 00f0ff3f     ......?.....?...
   14c6c:	ff030020 000000fc 00fcff01 3f000004      ..............?
   14c7c:	000000ff 00ff1f00 03008000 0000c0ff     ................
   14c8c:	c0ff0100 da110000 ff780400 ff010080     ..........x.....
   14c9c:	fe030000 0100c0ff 070080ff 00f80fff     ................
   14cac:	00f07f00 f88fff00 f07f0000 8fff0100     ................
   14cbc:	ff0000fc ff0100f8 0080ffa0 0000ff1f     ................
   14ccc:	c0ffe03f 80ff1f00 0fe47f00 ff0700f8     ?...............
   14cdc:	f80f00f0 0700fc0f 1f00f0f7 00fc07f8     ................
   14cec:	00f8f707 ff80f01f fffe0180 00fe0300     ................
   14cfc:	fc01c0ff fe07007f 00f80f10 00f08f7f     ................
   14d0c:	fc0f80ff f08f7f00 0780ff01 077f00fc     ................
   14d1c:	00ff01f0 ff00fc07 ff01f807 00fc0700     ................
   14d2c:	03f807ff fe0300ff f807ff00 0300fe03     ................
   14d3c:	03fe00fe 00fe03fc fe01fe03 fe03fc03     ................
   14d4c:	01ff0300 07fc03fe ff0100fe fc03fc01     ................
   14d5c:	0100fc07 01fc03ff 00fc07fe fc03ff01     ................
   14d6c:	fc0ffe01 83ff0000 0ffe01fc ff0000f8     ................
   14d7c:	fe01f883 0000f80f 00f887ff 00f80fff     ................
   14d8c:	f8877f00 f01fff00 c77f0000 1fff00f8     ................
   14d9c:	7f0000f0 ff00f0c7 0000f01f 00f0cf7f     ................
   14dac:	00f0bf7f f0cf3f00 e0bf7f00 ef3f0000     .....?........?.
   14dbc:	bf7f00f0 3f0000e0 3f00e0ef 4002e0bf     .......?...?...@
   14dcc:	00fcff03 00f8ff07 ff3f0048 fe7f0000     ........H.?.....
   14ddc:	3f000000 7f0000ff 000900fc 00c0ff03     ...?............
   14dec:	0080ff07 c0ff0100 00ff0700 ff010000     ................
   14dfc:	ff030080 da0b0000 ff130304 3f000080     ...............?
   14e0c:	00c0fff1 fff07f00 ff0000e0 00e0ffe0     ................
   14e1c:	7fc0ff01 ff0100f0 00f83fc0 3f80ff03     .........?.....?
   14e2c:	ff0700f8 00fc1f00 0f00ff07 fe0f00fe     ................
   14e3c:	00fe0f00 0700fc1f f81f00ff 80ff0300     ................
   14e4c:	0300f83f f07f80ff c0ff0100 0000e0ff     ?...............
   14e5c:	e0ffe0ff e1ff0000 0000c0ff 80fff37f     ................
   14e6c:	fb3f0000 000000ff 00ffff1f ff1f0000     ..?.............
   14e7c:	000000fe 00fcff0f ff070000 000000fc     ................
   14e8c:	00f8ff07 ff030000 000900f0 00fc3f00     .............?..
   14e9c:	7f000000 000000fc 00fe7f00 ff000000     ................
   14eac:	000000ff 00ffff01 ff010000 000080ff     ................
   14ebc:	c0ffff03 ff070000 0000c0ff e0fffe0f     ................
   14ecc:	fe0f0000 0000f07f f83ffc1f f83f0000     ..........?...?.
   14edc:	0000f83f fc1ff03f f07f0000 0000fe0f     ?...?...........
   14eec:	fe0fe0ff c0ff0100 0100ff07 ff03c0ff     ................
   14efc:	80ff0380 0780ff03 ff0100ff 00fe07c0     ................
   14f0c:	0fe0ff00 ff0000fe 00fc1fe0 07f17f00     ................
   14f1c:	070000ff 00fe0fff 9fff0300 010000fc     ................
   14f2c:	e40bc0ff fe175b87 1f000000 00c07ff8     .....[..........
   14f3c:	7ffe0700 070000e0 00fc07fd 87ff0100     ................
   14f4c:	010000fe 00fe03ff 20ff0300 0000e07f     ........... ....
   14f5c:	e03fc07f c0ff0000 0000f03f fe0384ff     ..?.....?.......
   14f6c:	f03f0000 0000ff03 3f80e03f fc0f00e0     ..?.....?..?....
   14f7c:	00f03f00 1f00f80f f81f00f0 00f01f00     .?..............
   14f8c:	1f00f01f f01f00f8 00f80f00 0f00f03f     ............?...
   14f9c:	e03f00f8 80ff0010 0000fc0f f80f80ff     ..?.............
   14fac:	c07f0000 0000f81f f01fc07f e07f0000     ................
   14fbc:	0000f01f f03fe03f e03f0000 0000e03f     ....?.?...?.?...
   14fcc:	e07ff03f f01f0000 0000e07f c07ff01f     ?...............
   14fdc:	ff010002 0000f81f f01fff01 ff000000     ................
   14fec:	4000f03f fcf71f00 0f000000 0800fcff     ?..@............
   14ffc:	ffff0100 00000000 0100ffff ff1f0000     ................
   1500c:	000000c0 00c0ff0f ff0f0000 00000080     ................
   1501c:	0080ff07 ff000020 000000e0 00e07f00     .... ...........
   1502c:	0f000004 000000f8 00f81f00 03008000     ................
   1503c:	000000fe 00fe0700 00001000 020080ff     ................
   1504c:	e03f0000 00000000 0000e07f c0ff0000     ..?.............
   1505c:	03010000 0000c0ff 80ffff01 3f400000     ..............@?
   1506c:	0000e0ff c0ff1f00 1f000000 000080ff     ................
   1507c:	00ff1f00 1f000000 000000fe 00f00700     ................
   1508c:	0b000000 1d03085a ffffff1f ff7ff0ff     ....Z...........
   1509c:	80ffe7ff 3f000000 000000fc 00e0ff01     .......?........
   150ac:	ff070000 00000000 0000f83f c0ff0100     ........?.......
   150bc:	0f000000 000000ff 00f87f00 ff030000     ................
   150cc:	000000c0 0000fe0f f07f0000 03000000     ................
   150dc:	000080ff 00fe1f00 ff000000 000000f0     ................
   150ec:	0080ff07 fc1f0000 00000000 0000e0ff     ................
   150fc:	00ff0700 3f000000 000000fc 00e0ff01     .......?........
   1510c:	ff0f0000 00000000 0000f87f c0ff0100     ................
   1511c:	0f000000 000000fe 00f07f00 ff030000     ................
   1512c:	000000c0 0000fe1f f0ff0000 03000000     ................
   1513c:	000080ff 00fc1f00 ff000000 000000e0     ................
   1514c:	0080ff07 fc3f0000 01000000 0000e0ff     ......?.........
   1515c:	00ff0f00 3f000000 000000f8 00c0ff01     .......?........
   1516c:	fe0f0000 ffffff3f ffffffef 07c0ffff     ....?...........
   1517c:	105a0b6f c07f0000 00ff0f00 00fcff00     o.Z.............
   1518c:	00f0ff07 00e0ff3f 00f0ff3f 00f0ff3f     ....?...?...?...
   1519c:	0700f0ff 038000ff 016800ff 003400ff     ..........h...4.
   151ac:	001a80ff 000ac07f 0300c07f 1f0000fe     ................
   151bc:	7f0000f8 ff0700c0 f87f0000 c0ff0f00     ................
   151cc:	00fe3f00 00e0ff00 00c07f04 00c0ff01     .?..............
   151dc:	00c0ff07 0080ff1f 0000ff0f 0000fe0f     ................
   151ec:	0000f80f 0000f03f 8002c07f 0000f01f     ....?...........
   151fc:	8006c03f 4003f01f 8001f80f 0000fc07     ?......@........
   1520c:	0000f81f 0000e03f 0300c0ff 0f00c0ff     ....?...........
   1521c:	0300feff 0000ffff 0100ffff 0100fcff     ................
   1522c:	0300f0ff 0100c0ff 272f02ff dfffad51     ........../'Q...
   1523c:	fddffffd fffddfff dffffddf fddffffd     ................
   1524c:	07f09fff 175a0b6f 1f0000fc 7f0000fe     ....o.Z.........
   1525c:	ff0100fc ff0800fc 7f0400ff ff01c0ff     ................
   1526c:	1f0080ff 1f0000fe 3f0000f8 0f4003e0     ...........?..@.
   1527c:	07a001f8 03d000fc 0f0000fe 034001f8     ..............@.
   1528c:	008000fe 010080ff 070000ff 0f0000ff     ................
   1529c:	1f0000ff 3f0080ff 3f0000fe 070000fc     .......?...?....
   152ac:	7f0000fc ff0700f0 ff3f00c0 e0ff0100     ..........?.....
   152bc:	08fe0f00 00fc0f00 10e07f00 08e03f00     .............?..
   152cc:	06f03f00 03f01f80 01f80f40 00fc07a0     .?......@.......
   152dc:	00fe0780 00f83f00 04c0ff03 02e0ff7f     .....?..........
   152ec:	00e0ff3f 0300ffff 0f00f8ff 3f00c0ff     ?..............?
   152fc:	ff0000fc 0c000080 a0cb1089 0000fe01     ................
   1530c:	ff010000 000000f8 c0ffff40 3f180000     ........@......?
   1531c:	0000ffff ffff0f07 e30100f8 c0ffffff     ................
   1532c:	fffffc00 3f00feff ffffffbf fff83ff0     .......?.....?..
   1533c:	ffffffff 1ff0dfff fbffffff ff7f00f8     ................
   1534c:	007efeff ffffff03 1f00008f c0e1ffff     ..~.............
   1535c:	ffff0000 000030f8 04feff07 3f000000     .....0.........?
   1536c:	000000ff 00ff0000 ffffff00              ............

00015378 <Arial_40_data>:
   15378:	10000000 11c0d002 faf3efdf fe0275ea     .............u..
   15388:	94469c07 f0f383df 00079c7e 1f20d00e     ..F.....~..... .
   15398:	3ee00380 f9811f00 f8800f40 e2077e00     ...>....@....~..
   153a8:	e1033e40 ffffff7f 800ff800 0a7ee007     @>............~.
   153b8:	003ee003 10f8811f 0bf8800f fcffffff     ..>.............
   153c8:	007cc007 0af0033f 00f0011f 10c00ffc     ..|.?...........
   153d8:	00c0077c df5edc0d 00e00080 00c07f00     |.....^.........
   153e8:	0700ff3f ff01fcff ff1fe0ff e7fc03ff     ?...............
   153f8:	1f0e3ff0 f8e0e087 c70f0e7c 7c7ce0c0     .?......|.....||
   15408:	c007070e 0e7e00e0 e0f00300 00ce3f00     ......~......?..
   15418:	00e0ff01 0000ff0f 0100ff7f 0700fcff     ................
   15428:	0f00e0ff ef0000ff 3f0e00f8 fce000c0     ...........?....
   15438:	e0070e00 383ee000 80ef030e 811f3fe0     ......>8.....?..
   15448:	1cf87cc0 c1c1cf0f 3f1cfef8 f0cff987     .|.........?....
   15458:	01ffff3f 0fe0ffff 7f00fcff ff0000ff     ?...............
   15468:	38002c80 50160000 f0033260 00f00000     .,.8...P`2......
   15478:	0f00e03f 80ff0380 3e007800 c007003e     ?........x.>>...
   15488:	00f8e003 031e003c 00e003c0 1e001ee0     ....<...........
   15498:	78000f00 7800e001 001fc003 001ec003     ...x...x........
   154a8:	001e00f0 00800ff0 788007f0 3c800700     ...........x...<
   154b8:	3c00c007 003ce001 030fe001 000700e0     ...<..<.........
   154c8:	00003ef0 e081073c 7ce00100 0700001f     .>..<......|....
   154d8:	1ff0c0c7 0ffc1f80 7f00ff81 fc1f78c0     .............x..
   154e8:	c107f800 0000f0f1 c0071e7c f0c00300     ........|.......
   154f8:	3e00001e 00f00007 0378e001 031f00c0     ...>......x.....
   15508:	00001ec0 f0001ef0 f0800f00 f8008007     ................
   15518:	003c8007 013c8007 017c00e0 03000fe0     ..<...<...|.....
   15528:	78000fc0 38003e00 e0018007 003ce001     ...x.>.8......<.
   15538:	030f001f 00f001e0 0f003e3e e0ff0000     ........>>......
   15548:	0300f800 800700fe 10c00700 002560d0     .............`%.
   15558:	0000e00f 0000fe0f 00c0ff07 00f8ff03     ................
   15568:	00ffff01 c00f7e00 f8013f00 07f08102     .....~...?......
   15578:	033e00c0 c10f00e0 f00300f8 7e0000fc     ..>............~
   15588:	0f0000fe 010000ff 000000ff 000000ff     ................
   15598:	0000c0ff 0000f87f 0000bf3f 20e0871f     ........?...... 
   155a8:	0ffcc10f 073fe087 e107f0e1 fc00fcf0     ......?.........
   155b8:	1f003efc 07800fff 00e083ff 00f8e0ff     .>..............
   155c8:	e047f01f fc007f00 3fe03f00 07fc1f80     ..G......?.?....
   155d8:	81ff3ff8 f8f7ffff fff8ff3f 1ffcff03     .?......?.......
   155e8:	03fc7f80 00f803c0 669c0260 e9cfdf8b     ........`..f....
   155f8:	7d6607c0 001e0053 07e00178 3e000fc0     ..f}S...x......>
   15608:	e001f800 020fc007 e093c007 f80df029     ............)...
   15618:	3c00fe02 41804f01 20e001f0 800f087c     ...<.O.A... |...
   15628:	001f000f 001e001f 003c003e 073c003c     ........>.<.<.<.
   15638:	78535d66 78007800 f000f800 e001f001     f]Sx.x.x........
   15648:	e003e001 f800c203 3e00f100 00da0758     ...........>X...
   15658:	603f00fd 800f401f 880f201e 001fc007     ..?`.@... ......
   15668:	01f8003c 0fc007e0 f0003c00 45220900     <........<...."E
   15678:	001ea0d6 791ec183 fffefee7 e0ffc7ff     .......y........
   15688:	f801c007 1e807f00 81cf0778 0e1cf8f0     ........x.......
   15698:	0d008100 d0a161b6 4001f001 ff02e003     .....a.....@....
   156a8:	80feffff 000a800f 0200001f bf10be9a     ................
   156b8:	c239c6d1 230a0800 f0ffbf13 10a08a02     ..9....#........
   156c8:	500880bf 00801000 901e00f9 e403c003     ...P............
   156d8:	07483c80 00f08084 020f24f8 3c24e041     .<H......$..A.$<
   156e8:	23013e00 017812c0 800f002f 0c008007     .>.#..x./.......
   156f8:	001f60ce 7f00803f ff3f00fc f0ff1f80     .`..?.....?.....
   15708:	03feff0f f8813ff8 007cf003 1f003f7c     .....?....|.|?..
   15718:	7d00f0a5 fd0100bf be0f00f8 f8f20300     ...}............
   15728:	003f3e00 07c0871f f003f8c1 0ff8833f     .>?.........?...
   15738:	ff01feff ff3f00ff c0ff0780 00803f00     ......?......?..
   15748:	1fc0ce07 03e00180 0fe007e0 3fe01fe0     ...............?
   15758:	ffe3ffe0 f3effbe7 03efc3ef 00fa03ec     ................
   15768:	e80f407f 3e00fa01 1f404e0d 00e03f00     .@.....>.N@..?..
   15778:	0f00ff1f ff03f8ff ffff80ff 7fc01ff8     ................
   15788:	f003f087 3f3e00fc f8f00700 00870f00     ......>?........
   15798:	0000f801 0000e007 0f00003e f00300c0     ........>.......
   157a8:	00fc0000 00003f00 0300e00f fe0000f8     .....?..........
   157b8:	807f0000 00c01f00 0100f007 ff0000fc     ................
   157c8:	c03f0000 00e00f00 0000f803 1f00007e     ..?.........~...
   157d8:	e0070080 ff1f0200 fffff9ff ce0cc0ff     ................
   157e8:	7f001f60 f87f0000 00ff7f00 1ff0ff3f     `...........?...
   157f8:	f007fcff 07f0833f fc00f8e0 1f1f007e     ....?.......~...
   15808:	c0c10700 0000f001 3e00007c 801f0000     ........|..>....
   15818:	00c01f00 1f00e07f fc0700e0 c0ff0100     ................
   15828:	00f8ef00 00003f00 0000e007 3f0000f8     .....?.........?
   15838:	f8000090 f83e00e0 00bf0f00 01c0ef07     ......>.........
   15848:	fc00f8f1 0f7f007f ff837fe0 ff7fc0ff     ................
   15858:	f0ff0fe0 00f8ff00 0d00f00f 001f20ce     ............. ..
   15868:	00001e00 0000e003 0100087e 3f0000fc     ........~......?
   15878:	fc0700c0 f81f0010 80ff0300 20f87e00     .............~. 
   15888:	00f0f901 07001f3f 1f40f0e1 f003e083     ....?.....@.....
   15898:	037e003e 07f881e0 7c003fc0 c007e007     >.~......?.|....
   158a8:	177c00fc f4ffffff 48f00100 0ce00300     ..|........H....
   158b8:	801f60ce 87e4ff7f 3e20ffff f0030100     .`........ >....
   158c8:	001f0900 00c00f00 00f8f103 3e80fffd     ...............>
   158d8:	ff0ff8ff ffff07ff f803fee1 073f007e     ............~.?.
   158e8:	00c00700 0000fe01 0100df07 f900c0f7     ................
   158f8:	3e3e00f8 c08f1f00 0ffcc10f f8ff7ff0     ..>>............
   15908:	01fcff0f 1f00feff fe0100fe 404e0d00     ..............N@
   15918:	e01f001f 00ff0f00 01f0ff07 7f00ffff     ................
   15928:	e01ff0ff 07f003ff 7c00fce0 c70f001f     ...........|....
   15938:	5ffa00e0 c0070000 1ff80000 fe0f1fc0     ..._............
   15948:	f0ffe703 0fffff7d fff1ffbf c03ffe80     ....}.........?.
   15958:	00f0e70f 0f00fcfc 1f00e0eb 7c008087     ...............|
   15968:	9f1f00f8 f0e10300 003ffc00 1ff8833f     ..........?.?...
   15978:	f8ff3fe0 00feff03 0380ff3f 0f00e0ff     .?......?.......
   15988:	4e0d00e0 ffbf1f40 0000fcff 0300000f     ...N@...........
   15998:	f00000c0 003c0000 00800f00 0000e003     ......<.........
   159a8:	1f000078 f8000002 c0070008 003e0020     x........... .>.
   159b8:	02f00180 09800f00 24007c00 0000e003     .........|.$....
   159c8:	031400fc 1f5800e0 ce0c0000 7f001f60     ......X.....`...
   159d8:	fc7f0080 80ff7f00 0ff0ff3f f007feff     ........?.......
   159e8:	03f8c11f 7e00fcf0 f101c0a7 3efc00f8     .......~.......>
   159f8:	e0073e00 ffff003f c0ff1f80 03e0ff03     .>..?...........
   15a08:	ff01feff 03fec0ff 3e007ef8 cf0f001f     .........~.>....
   15a18:	7cf601c0 80df0700 00e0f303 7e00fcf8     ...|...........~
   15a28:	077fc01f ffc0ffff ff1fe0ff f0ff01f0     ................
   15a38:	00e00f00 1f60ce0c 00007f00 7f00f87f     ......`.........
   15a48:	ff0702ff 0ffc03fe f801fcc1 1f3e007e     ............~.>.
   15a58:	c0cf0700 007cf400 00e0ab07 1f00fc3e     ......|.....>...
   15a68:	e70f009f fef807e0 ff3ffe03 fbff87ff     ..........?.....
   15a78:	f8fcffe0 003efc1f 00800ffc 0000f203     ......>.........
   15a88:	1f003e3e c307808f 7ef003f0 c01ff801     >>.........~....
   15a98:	ffff03fe 80ff7f00 01c0ff1f 1f00e0ff     ................
   15aa8:	ba0200c0 e8bf10a0 f80b1634 10beca02     ........4.......
   15ab8:	1634e8bf 1c1efd0b b60d00e1 0000a161     ..4.........a...
   15ac8:	00001000 0300000f ff0100f0 f07f0000     ................
   15ad8:	00fe3f00 0300ff0f ff01c0ff f07f00e0     .?..............
   15ae8:	00fc3f00 0000fe07 0700807f 7f0000c0     .?..............
   15af8:	fe070080 fc3f0000 f07f0000 e0ff0100     ......?.........
   15b08:	c0ff0300 00ff0f00 00fe3f00 00f07f00     .........?......
   15b18:	0000ff01 0000f003 0000000f 62a20d10     ...............b
   15b28:	ffffbfe1 0000a0ff ffffff02 61b60df8     ...............a
   15b38:	000040a1 00008007 0700007e 7f0000fc     .@......~.......
   15b48:	ff0300f0 ff0700e0 fe1f0080 fc3f0000     ..............?.
   15b58:	f07f0000 e0ff0100 00ff0300 00f00f00     ................
   15b68:	00001f00 0300f00f ff0100ff f07f00e0     ................
   15b78:	00fc3f00 0700fe1f ff0380ff f07f00e0     .?..............
   15b88:	00fc0700 00007e00 00008007 00000040     .....~......@...
   15b98:	1f60d00c 00c03f00 3f00fc7f ff3fc0ff     ..`..?.....?..?.
   15ba8:	ffff0ff8 c33ff807 fcf803f8 003e7e00     ......?......~>.
   15bb8:	0380df0f 7d00e0f7 1c1f00f0 00c00700     .......}........
   15bc8:	0000f001 3e0000fc 801f0000 00c00f00     .......>........
   15bd8:	0700e007 f80300f0 00fc0100 0000fe00     ................
   15be8:	1f00007f c0070080 02f00300 14001f80     ................
   15bf8:	b0000000 1a00c007 00397d68 c0ff0300     ........h}9.....
   15c08:	01000000 00e0ffff ff3f0000 0000c0ff     ..........?.....
   15c18:	ffffff07 ff000080 00ffffff 00ff0f00     ................
   15c28:	0000fc3f 1f0080ff f00f00f0 c03f0000     ?.............?.
   15c38:	0000fe00 0f007f00 010000e0 00fc00f8     ................
   15c48:	e007007c f80fc007 7c801f3e f0f1ff01     |.......>..|....
   15c58:	1fe0037c f001dfff feff013e e0810ff8     |.......>.......
   15c68:	c0ffe11f fc011f3c f001fe03 0fc00ff0     ....<...........
   15c78:	808f07f0 007f00fc c007783c e301f801     ........<x......
   15c88:	0f007ec0 031e0fc0 007e00e0 001fe079     .~........~.y...
   15c98:	cf03e003 1f00f801 0f781e00 00f80080     ..........x.....
   15ca8:	007cc0f3 1e0fc007 7c00e003 1ff07800     ..|........|.x..
   15cb8:	07e00300 00f880c7 3c3c001f f801c007     ..........<<....
   15cc8:	3ee0e103 3ec00f00 00f8010f 7cf003fc     ...>...>.......|
   15cd8:	e00fc007 3fe0013f f003ff00 1ffc000f     ....?..?........
   15ce8:	7c007ffc ffffff07 1fe003f0 00ffbfff     ...|............
   15cf8:	f97f800f 7c00f0ff fe87ff01 03f00100     .......|........
   15d08:	1fc01fe0 0000c00f 3ff00100 00000000     ...........?....
   15d18:	00fc801f f8030000 0000f807 1f803f00     .............?..
   15d28:	070000f0 e07f00f8 80ff0000 00f0ff00     ................
   15d38:	0300f87f ffffffff ff070000 00f0ffff     ................
   15d48:	ffff0f00 000000fe 80ffff0f 07000000     ................
   15d58:	0000c0ff 2500d012 800f0080 0f004000     .......%.....@..
   15d68:	000000e0 8000c07f 00e03d00 c0f70100     .........=......
   15d78:	8f070000 3e000000 0000003e 400078f0     .......>>....x.@
   15d88:	003ef800 78c00300 011f0000 780000f0     ..>....x.......x
   15d98:	0008c003 00f0017c c003e001 01f00110     ....|...........
   15da8:	800f00f0 0720e003 10f0ffff fcffff07     ...... .........
   15db8:	ffff3f00 00f800f8 f890e003 40f80000     .?.............@
   15dc8:	3e0000f8 0000e007 00e083fc e0433e00     ...>.........>C.
   15dd8:	9f0f0000 3f000080 0000007c a0d00e7c     .......?|...|...
   15de8:	f0ff7f25 f8ffff01 f0ffff07 e0ffff1f     %...............
   15df8:	c1ffff7f 877f00f0 1f7e00c0 bffc0000     ..........~.....
   15e08:	3e3e0080 f8f00000 e0c30700 800f3f00     ..>>.........?..
   15e18:	ff3ff803 ff1fc1ff ff7fc0ff ffffc1ff     ..?.............
   15e28:	00c087ff 00001fff 01007cfe 0300f0f9     .........|......
   15e38:	0000f8fb 0700e0fb 1f0080ef fc00003e     ............>...
   15e48:	e30f00f8 8fffffff 3ffcffff ffe0ffff     ...........?....
   15e58:	ff03feff 1100c0ff 00e87f54 0000fe01     ........T.......
   15e68:	00f8ff01 c0ffff00 fcff7f00 ffff1f00     ................
   15e78:	07fc07c0 00fc01fc 007fc03f c00ff801     ........?.......
   15e88:	f0831f00 7cf00300 1f3e0000 e3070080     .......|..>.....
   15e98:	710000e0 0000800f 0000f003 0080df00     ...q............
   15ea8:	007e0200 e0030000 7c000000 0f060000     ..~........|....
   15eb8:	f9000080 3f0000f0 0700001f 0100e0c3     .......?........
   15ec8:	00007ef8 00e0073f 00fec00f f00ff803     .~..?...........
   15ed8:	ff00fe01 0f80ff80 00e0ffff 00f8ffff     ................
   15ee8:	00feff0f 00ff7f00 00ff0100 a0501000     ..............P.
   15ef8:	f8ff7f28 ffff3f00 ffff1f80 ffff0ff0     (....?..........
   15f08:	ffff07fc 00e003ff 00f0c17f 00f8f00f     ................
   15f18:	808ff801 c0c70f00 fcf40300 6f1f0000     ...............o
   15f28:	fd0000c0 0f00007c 0f0000be 0000e0e3     ....|...........
   15f38:	0000f0f9 0000f8fc 00808f7c 00c0c70f     ........|.......
   15f48:	00e0c30f 00f0c11f ffffe03f ff7fe0ff     ........?.......
   15f58:	ff3fe0ff ff1fe0ff ff0fc0ff 0e0000fe     ..?.............
   15f68:	bf25a0d0 6fffffff 2f0000c0 170000e0     ..%....o.../....
   15f78:	8dffffff 060000f8 0200007c feffffff     ........|.......
   15f88:	22a0500d ffffffbf 0b00007e 2f0000f8     .P."....~....../
   15f98:	dff8ffff 7e030080 f80a0000 12000000     .......~........
   15fa8:	00ec7fd4 00c0ff00 e0ff1f00 ffff0300     ................
   15fb8:	ff1f00e0 ff00c0ff 0780ffff 00ff01fe     ................
   15fc8:	fe01c03f 0100fc01 00e00ffc 003ff003     ?.............?.
   15fd8:	f8c10700 871f0000 3e0000c0 0000003f     ...........>?...
   15fe8:	0000f8f8 007c0801 fc050000 02000000     ......|.........
   15ff8:	ff0300fe 00802fff 003f1f00 7c7c0000     ...../....?...||
   16008:	f1010000 070000f8 0000f0c3 00e00f1f     ................
   16018:	c01ffc00 3ff00700 c07f00c0 fe1fe07f     .......?........
   16028:	ffffff00 ffff01f0 ff0100ff 0100f0ff     ................
   16038:	0000ffff 00c07f00 28a0500f 070080df     .........P.(....
   16048:	0100e0f7 0000f8f8 ffffff7e 0080dfff     ........~.......
   16058:	00e0f707 00f8fb01 d0027c00 efdf0fa0     .........|......
   16068:	fdfdfbf7 5fd20afc 0f00d0dc f40700e8     ......._........
   16078:	00fa0300 07c0f301 ef03e0e7 00bf0fc0     ................
   16088:	f1037e7c 7fd01ffc feffc0ff 00e0ff01     |~..............
   16098:	d01000fe 007c25a0 001f3f00 c0871f00     .....%|..?......
   160a8:	f0c10f00 7ce00700 1ff00300 07f80300     .......|........
   160b8:	01fc01c0 00fe00f0 007f007c 803f001f     ........|.....?.
   160c8:	c01fc007 e00ff001 f0077c00 f8031f00     .........|......
   160d8:	fcc10700 fef00100 7f7c0000 3f1f0000     ..........|....?
   160e8:	df0700e0 ff0100f8 7f0000ff 1f00e0f7     ................
   160f8:	0700fcf8 01801ffc 00e007fe 00fc007f     ................
   16108:	801f801f 7e00f808 0f003e00 01800fc0     .......~.>......
   16118:	007c04f8 001fe007 c007fc00 f0811f00     ..|.............
   16128:	8ff00300 c30f0080 f80100e0 3f0000f8     ...............?
   16138:	0700003e a0500ce0 0080df1f 0000f80d     >.....P.........
   16148:	0d0080df df0000f8 ff0b0080 d012ffff     ................
   16158:	f89f2fa0 cfff0000 ff0000fe 0300fcdf     ./..............
   16168:	00be9fff cfcfef03 dfe70380 9f0f003f     ............?...
   16178:	0f808f9f e0c3cf8f 0fdf870f 9f1f7cc0     .............|..
   16188:	0f3ee083 3ef8c0cf f103df07 809f1ff0     ..>....>........
   16198:	cf0ff8f8 07f83ec0 c0ff00df 3f809f1f     .....>.........?
   161a8:	c0c70fe0 c007e00f 28a0500f 0700c08f     .........P.(....
   161b8:	0f00c0df 0300f8c7 0000fff1 0100fffb     ................
   161c8:	0300fff7 0700beef 0f007edf 03c0cfc7     .........~......
   161d8:	07c08fef 0f800fdf 1f801fbe 3e801f7c     ............|..>
   161e8:	7d001ff8 fc003ff0 3ee0077c 7de007f8     ...}.?..|..>...}
   161f8:	fbc007f0 f7c10fe0 efc30fc0 df870f80     ................
   16208:	c78f1f00 eff303c0 dff70380 beef0300     ................
   16218:	7cff0700 1fff0700 c7ff0000 ef1f00c0     ...|............
   16228:	e31f0080 f00300e0 ec7f5413 00ff0100     .........T......
   16238:	ff1f0000 ff0000e0 0300f0ff 00f0ffff     ................
   16248:	f0ffff0f 1fe03f00 00ff00f0 f803f00f     .....?..........
   16258:	0ff00700 f00700e0 0700001f 00007ee0     .............~..
   16268:	00f8e007 f0c30700 d20f0000 010000f8     ................
   16278:	0000fcf6 003f3f00 cb0f0000 070000e0     .....??.........
   16288:	0000e0c7 00c0871f c00f3e00 0ffc0000     .........>......
   16298:	f00300c0 0f00c01f 00c01fe0 c01f803f     ............?...
   162a8:	1f00fe00 00fc0ff0 e0ffff1f ffff1f00     ................
   162b8:	ff1f0080 0f0000fe 0000f0ff 0000fe03     ................
   162c8:	25a0d00e 01fcff7f 07fcffff 1ffcffff     ...%............
   162d8:	7ff8ffff f0f1ffff c0c71f00 009f1f00     ................
   162e8:	007c3e00 003eff00 00f83e00 00e0fb01     .>|...>..>......
   162f8:	0080cf07 07003e7f fffffff8 ffffffe3     .....>..........
   16308:	f8ffff0f 80ffff3f 06f0ffff 030000fc     ....?...........
   16318:	0100007e 0000001f 6c7f5813 00ff0100     ~........X.l....
   16328:	ff1f0000 ff0000c0 0300e0ff 00e0ffff     ................
   16338:	f0ffff1f 3fe07f00 00fe01f0 f803f00f     .......?........
   16348:	0fe00f00 e00f00c0 0f00001f 00007ec0     .............~..
   16358:	00f8c00f f0830f00 921f0000 030000f8     ................
   16368:	0000fce6 003f7d00 4b1f0000 0f0000e0     .....}?....K....
   16378:	0000e087 01c0073f c00f7c80 0ff8c107     ....?....|......
   16388:	e0e70f80 ef1f801f 0fc01fc0 c01f00ff     ................
   16398:	3f00fc07 00f81ff0 f8ffff3f ffff1f00     ...?....?.......
   163a8:	ff1f00f8 0f00fcff 00fce3ff fc01fe03     ................
   163b8:	01000000 000000f0 5010e000 ff7f28a0     ...........P.(..
   163c8:	ff3f00fe ff1fe0ff ff0ff8ff ff07feff     ..?.............
   163d8:	e083ffff f0e11f00 f8f00300 7cf80000     ...............|
   163e8:	577e0000 e40300c0 7e00007c 7e00003e     ..~W....|..~>..~
   163f8:	ff01001f ffffff0f ffffff07 ffffff03     ................
   16408:	feffff01 fcffff00 f8017c00 3f003e00     .........|...>.?
   16418:	0f001f00 03800fc0 01c007e0 00e003f8     ................
   16428:	003e027e 001ff003 800ffc00 c0073e00     ~.>..........>..
   16438:	e0831f00 f0e10700 f8f00100 7cfc0000     ...............|
   16448:	3e3e0000 9f1f0000 ef070000 f0010080     ..>>............
   16458:	e57fd40f 00f80f00 00ff7f00 c0ffff01     ................
   16468:	e0ffff03 f0ffff07 f807f807 fc01c00f     ................
   16478:	fc00800f 7c00801f 7e00001f 0700e083     .......|...~....
   16488:	0000e0c3 0000f003 0000f001 0000fc01     ................
   16498:	0080ff01 00f0ff00 00ff7f00 e0ff1f00     ................
   164a8:	f8ff0f00 feff0100 ff3f0000 ff030000     ..........?.....
   164b8:	3f000080 1f0000c0 070000c0 070000c0     ...?............
   164c8:	0000f0f3 0000f87d 0000f87c 0000fc7c     ....}...|...|...
   164d8:	01007ef8 03807ff8 1fe03ff8 ffff1ff0     .~.......?......
   164e8:	ffff0fe0 ffff07c0 feff0180 f03f0000     ..............?.
   164f8:	40d00f00 ffffbf23 0f00faff 01400380     ...@#.........@.
   16508:	006800f0 000d003e a001c007 0000f800     ..h.>...........
   16518:	e8bf520f 070080df 0100e0f7 0000f8fd     .R..............
   16528:	00007e7f 00007c1f 0000fc3e 00001ffe     .~...|..>.......
   16538:	00003f3e 03007ffc 0f007ff0 7f807fe0     >?..............
   16548:	ffffff80 fcffff00 e0ffff00 80ff7f00     ................
   16558:	00f81f00 2500d012 0000007c 0000f87d     .......%|...}...
   16568:	007cf803 1ff40100 f0010000 0f00007e     ..|.........~...
   16578:	00001fc8 c087c407 01c20700 c10700f0     ................
   16588:	07007c20 001f80c0 0748c007 20c007c0      |........H.... 
   16598:	c007f001 3ec00300 800f0000 1e0000f8     .......>........
   165a8:	0004c003 00e0830f 000f1e00 7c7c0000     ..............||
   165b8:	f1000000 008000e0 0000f07d 0080f700     ........}.......
   165c8:	00fe0300 fe008004 01000000 1b0000f0     ................
   165d8:	7c3820d0 007f0000 007c1f00 0080ff00     . 8|......|.....
   165e8:	00c0873f 0700f01f 3f00c0c7 c70700f8     ?..........?....
   165f8:	f83e00c0 7cd00700 00df0700 007cf001     ..>....|......|.
   16608:	01808f0f 0f003cf0 e001808f 8f0f003e     .....<......>...
   16618:	3ee00380 c08f1f00 003ee003 03c0071f     ...>......>.....
   16628:	1f001ee0 c003c007 073f001f 03c207e0     ..........?.....
   16638:	7cc007e0 e001f800 007cc007 013e40f0     ...|......|..@>.
   16648:	3ec007f0 f0011e00 003cc007 07f0031e     ...>......<.....
   16658:	03083ce0 7c007ce0 e001800f 0f7c00fc     .<...|.|......|.
   16668:	f8e00100 010f3e00 001f3e00 20e0c307     .....>...>..... 
   16678:	00c0c703 0300787c 7c00c0e7 ef0300f8     ....|x.....|....
   16688:	f87e00c0 f03d0004 00de0700 00f03f00     ..~...=......?..
   16698:	9000fe07 0000fc03 0300807f 3f0000f8     ...............?
   166a8:	f8010080 003f0000 00d01200 00801f25     ......?.....%...
   166b8:	003ff003 7e801f00 00fc0000 e00700f8     ..?....~........
   166c8:	1f00f003 00e00780 f80108fc 0300fc00     ................
   166d8:	00e007f0 003fe007 3ff80140 f1030000     ......?.@..?....
   166e8:	070000f8 0000c0ef 0000ff0f 00f83f00     .............?..
   166f8:	c07f0000 1f009000 000000c0 000180ff     ................
   16708:	00e0ff00 c0ef0700 1f3f0000 fc010080     ..........?.....
   16718:	0700003e 0000fce0 02f8013f 7e003f00     >.......?....?.~
   16728:	00f80100 c00f00fc 0f10f801 007e00c0     ..............~.
   16738:	fc00007e 0100f003 00c00ff8 007ee003     ~.............~.
   16748:	f0c30f00 9f1f0000 3f000080 2520d011     ...........?.. %
   16758:	0300007e 0000f0f3 00001f7e 00f8c107     ~.......~.......
   16768:	c00ffc00 7c801f00 07f00100 003f00e0     .......|......?.
   16778:	e007003f 7c00f001 0f801f00 801f80c0     ?......|........
   16788:	fc00003f 0010e007 00801ffc 00f0e307     ?...............
   16798:	007e3e00 e0f70300 fc1f0000 1f002000     .>~.......... ..
   167a8:	000000f0 800600fe 0d00f800 00f00100     ................
   167b8:	e0030014 d00f0000 ffb12220 00c0ffff     ........ "......
   167c8:	00c01f00 00801f00 00003f00 00007e00     .........?...~..
   167d8:	0000fc00 0000fc01 0000f801 0000f003     ................
   167e8:	0000e007 0000c00f 0000c01f 0000801f     ................
   167f8:	0000003f 0000007e 010000fc 010000fc     ?...~...........
   16808:	030000f8 070000f0 0f0000e0 1f0000c0     ................
   16818:	1f0000c0 3f000080 7e000000 fc000000     .......?...~....
   16828:	fc010000 f8010000 f0030000 e0070000     ................
   16838:	c00f0000 ff170000 05fcffff bf507de6     .............}P.
   16848:	7e03bfff f80dfc06 e033f01b 5008ff5f     ...~......3._..P
   16858:	008f1020 93007809 04f001c0 7848008f      ....x........Hx
   16868:	01c08304 020f24f0 03247840 20f101c0     .....$..@x$.... 
   16878:	7900120f 01c00320 057800f0 bf505de6     ...y .....x..]P.
   16888:	407fa0ff 03fd81fe 0ff007fa 2c0bffdf     ...@...........,
   16898:	3c00d824 801f2001 12f00f40 03049e07     $..<. ..@.......
   168a8:	870fc0c3 84071ec0 1ef0810f 800fe201     ................
   168b8:	0fc0977c 800f009f 5ffd0b10 ffffffbf     |.........._....
   168c8:	481005f0 e0077e13 0ff8407c 0d0ff080     ...H.~..|@......
   168d8:	001f40bc 1f00f03f ff03c0ff ff7f00ff     .@..?...........
   168e8:	ffff0ff0 f803fe81 c80f801f 810f007e     ............~...
   168f8:	00f800c0 00800f00 0700f803 ff1f80ff     ................
   16908:	ffff0ff8 f8ffff81 87cfff3f 7ef800ff     ........?......~
   16918:	c08f0f00 001ff900 00f0f103 0f801f7f     ................
   16928:	ff07fef1 f0ffff0f 87dfffff 1ff8f9ff     ................
   16938:	7f800fff d00c7c80 80df1f80 00fc0400     .....|..........
   16948:	e0071f00 01ffc707 7de0fff3 ff1ffcff     ...........}....
   16958:	0ffe87ff fc00fef1 9f1f007f e0e703c0     ................
   16968:	00f8f900 0080df3f 3e00e0fb bf1f00f8     ....?......>....
   16978:	c0cf0700 00f8f303 7e00fffc 8f7ff03f     ...........~?...
   16988:	efc3ffff fff9e0ff f03f3ef0 00f0830f     .........>?.....
   16998:	1c403c0d 00c03f00 0f00ff1f ff03f0ff     .<@..?..........
   169a8:	ffff00ff ffc03ff0 e107e007 3e7e00f8     .....?........~>
   169b8:	c0c70f00 00f8e100 00c06f00 0000f800     .........o......
   169c8:	e100801f 3e1f00f0 e0e70700 007ef801     .......>......~.
   169d8:	1ff00f7f f8ffffc0 00feff0f 0780ffff     ................
   169e8:	1f00c0ff d00c00c0 00d01f40 0080fc00     ........@.......
   169f8:	c10fc007 7cfc1ff0 079fff0f ffc3f7ff     .......|........
   16a08:	0ffef1ff ff007efc cf1f003f e0f30780     .....~..?.......
   16a18:	00f8fd00 0080df3f 3e00e0fb c31f00fc     ....?......>....
   16a28:	fcfc00e0 801f7f00 3ff8c73f fcfffff0     ........?..?....
   16a38:	03dfff1f 3fc0e7ff f003f0f1 40bc0d7c     .......?....|..@
   16a48:	c01f001f 80ff0f00 00feff03 0ff0ff7f     ................
   16a58:	fe80ffff 801ffc03 00f0c30f 03003e7e     ............~>..
   16a68:	1e00c0e3 fb01007c f3ffffff 1f0000f0     ....|...........
   16a78:	f8000080 c00f0600 00fefc00 03f0871f     ................
   16a88:	ffc07ff8 f0ffff03 00feff1f 03c0ffff     ................
   16a98:	0700f0ff d00800f8 3f001000 07f83f80     ...........?.?..
   16aa8:	c0ff03ff c08705fc a1f9ff2f 800f0df0     ......../.......
   16ab8:	43027c68 d20c00e0 7f005f5d f17f0000     h|.C....]_......
   16ac8:	7cff3ff0 0fffff1f f8c7ffff 03f8f13f     .?.|........?...
   16ad8:	7f00fcfc cf1f003e e0f70380 007eff00     ....>.........~.
   16ae8:	0080ef03 7f00f0fb f303800f 7efc01f0     ...............~
   16af8:	e01fff00 ffffc3ff fcff7ff0 01dfff0f     ................
   16b08:	0fc0c7ff 0000f0c1 1f00e07c f101c087     ........|.......
   16b18:	3ffc00f8 ff0ffe80 ffff81ff e0ff3fc0     ...?.........?..
   16b28:	00e0ff07 0b00c03f df1f80d0 f0130080     ....?...........
   16b38:	7ff00100 c1fff101 f7e1fff3 fffff1ff     ................
   16b48:	f983fff9 fcfd01fe 003ffe00 01c0ef0f     ..........?.....
   16b58:	3f00f8fd c007009f 0d80d002 fb37e0bf     ...?..........7.
   16b68:	f0fdfefd 4ddde705 03803fb0 fd81fe40     .......M.?..@...
   16b78:	f007fa03 7ffc810f e08fffe8 1d80500c     .............P..
   16b88:	0a0080df 7c0000f8 003e7e00 7e001f7e     .......|.~>.~..~
   16b98:	07fe800f e003fec0 fef001fe 00fef800     ................
   16ba8:	3e00fe7c ff2300fe fe3f02c0 80ff1f00     |..>..#...?.....
   16bb8:	07e0e70f e003f0e1 3ff001fc f8011f01     ...........?....
   16bc8:	087e800f 7cf003f8 c047fc00 01e0e307     ..~....|..G.....
   16bd8:	7e00f0f9 0b60d002 fbf7efdf 13fcfdfd     ...~..`.........
   16be8:	002f80bc c00f801f 3fe07f7c f0ff7cf8     ../.....|..?.|..
   16bf8:	ff7dfc7f 7dfcfff8 fefffdff e0ffc17f     ..}....}........
   16c08:	7f807ffe 007f3fc0 8f3f807f 03e007c0     .....?....?.....
   16c18:	f800f0fb 007e7f00 e70f001f 01e003c0     ......~.........
   16c28:	80bc0bf0 c01f001f 7cf07f7c ff7df8ff     ........|..|..}.
   16c38:	feff7ffc 7ffee07f 007f7f80 03c08f3f     ............?...
   16c48:	7f00f0fb e70f007e 0df001c0 001f40bc     ....~........@..
   16c58:	0f00c01f ff0380ff ff7f00fe ffff0ff0     ................
   16c68:	fc07ff81 c81fc01f c70f007e fc7c00c0     ........~.....|.
   16c78:	f0fb0700 00df0700 00f87d00 0080cf0f     .........}......
   16c88:	03801ffa fe00fef0 e03ff80f 03fcff7f     ..........?.....
   16c98:	1f80ffff 7f00f0ff fe0100fc d20c0000     ................
   16ca8:	1f005f9d fc1f1fc0 81ffcf07 7df0fff7     ._.............}
   16cb8:	f81ffeff 03f8c73f 7e00fcf1 9f0f007f     ....?......~....
   16cc8:	e0e70380 007eff00 0080ef03 0f00fefc     ......~.........
   16cd8:	e707c09f fff103f8 ff7ff883 ff7f1ffe     ................
   16ce8:	81ffcf07 7c80fff1 e037801f 005f0100     .......|..7..._.
   16cf8:	d20c0000 7f005f5d f17f0000 7cfe3ff0     ....]_.......?.|
   16d08:	0fdfff1f f8c7f7ff 03f8f13f 7f00fcfc     ........?.......
   16d18:	cf1f003e e0f70380 007eff00 0080ef03     >.........~.....
   16d28:	7f00f0fb f303800f 7efc01f0 e00fff00     ...........~....
   16d38:	ffffc3ff 7cff7ff0 009fff0f 0fc0c7ff     .......|........
   16d48:	0000fdc1 0000d00f 803c087c 3c7c0013     ........|.<...|<
   16d58:	ef7f9e7f f3ffe77f 01fc19fc f01b803f     ............?...
   16d68:	1900bf01 3c0c00f0 7f001c40 f0ff0100     .......<@.......
   16d78:	01fcff01 ff01ffff 0ffcc0ff f801fce0     ................
   16d88:	3e7c007c 801f3800 00e00f00 0100ff03     |.|>.8..........
   16d98:	7f00f0ff ff1f00ff fcff03e0 00ff7f00     ................
   16da8:	0080ff07 0300e03f fb00c0f1 f87d00e0     ....?.........}.
   16db8:	007e3e00 7fc03f3f e0ffff41 0fe0ff7f     .>~.??..A.......
   16dc8:	ff00c0ff 20ce0700 01400010 d0c003c0     ....... ..@.....
   16dd8:	fbff17f8 7c68e043 0f800f0a 80ff01c1     ....C.h|........
   16de8:	c07fc0ff ba0bc03f 80df1f80 00f0fb03     ....?...........
   16df8:	0f00fe7e f703c0c7 f0f707e0 3ff8f30f     ~..............?
   16e08:	f1fdfff3 fff1fdff e17ff0f9 f0811ff0     ................
   16e18:	1d20ba0d f801007c c707007c 07fd00e0     .. .|...|.......
   16e28:	7ef001c0 7c203f00 e0077c00 c007c40f     ...~.? |.|......
   16e38:	033e001f 3ee003f0 e0073f00 800f3e80     ..>....>.?...>..
   16e48:	10f8f103 00e0e303 00027e3f 0100f83e     ........?~..>...
   16e58:	034080ff 039000fe ba1300f8 007c2700     ..@..........'|.
   16e68:	8f1f003e 03e00f80 fc01f8f0 03f8f800     >...............
   16e78:	7cf800fe f201fe03 c07b800f 1ff8403e     ...|......{.>@..
   16e88:	f8800f7c 800f7c1e 1f3c1e7c c7870f08     |....|..|.<.....
   16e98:	8707e0c3 07c0c7c7 c1c783c7 7cf0f900     ...............|
   16ea8:	f07d00f8 0f20f07d 04be07bc ff80ff00     ..}.}. .........
   16eb8:	00ff0080 0f9080ff 00e00fe0 c00fe007     ................
   16ec8:	003a0e00 01003f1c 1f00fcf8 f901f083     ..:..?..........
   16ed8:	f003f801 003fe007 00f0831f 03003ffc     ......?......?..
   16ee8:	0f00f8f1 3f0080df ff0100f8 fc070080     .......?........
   16ef8:	f8030001 c03f0000 00ff0300 00fc1f00     ......?.........
   16f08:	00e0ff01 01809f1f 0f007ef8 fc00f8c1     .........~......
   16f18:	c00fc00f 801f083f 00f8811f 01801f7e     ....?.......~...
   16f28:	0700f8f9 3dd00ce0 07007c5b f80380cf     .......=[|......
   16f38:	0f1f007c e0c30f80 00fce003 7e001ff8     |..............~
   16f48:	011fc007 3ec007f8 800ff003 3ef003f8     .......>.......>
   16f58:	801f7c00 07c0071f f800f0e1 3e3e00fc     .|............>>
   16f68:	80cf0700 00e0f701 0f00f07d 7f0004fc     ........}.......
   16f78:	f00f00c0 007f0008 10c00f00 00007c00     .............|..
   16f88:	0f00003f fc000880 007e0000 0080ff03     ?.........~.....
   16f98:	1f00c0ff f00700e0 00f80100 20ba0c00     ............... 
   16fa8:	ffffb31b f80100f0 00fc0000 00007e00     .............~..
   16fb8:	1f00003f e00f0080 00f00700 0000f803     ?...............
   16fc8:	7e0000fc 003f0000 00801f00 0700c00f     ...~..?.........
   16fd8:	f80300e0 00fc0100 0000fe00 1f00003f     ............?...
   16fe8:	ff170080 e608ffff 0f00533d 07f00fc0     ........=S......
   16ff8:	e07f00fe c10f803f 030b7ca0 003e40e0     ....?....|...@>.
   17008:	c00f801f f007e01f 7f00f001 01e01f00     ................
   17018:	801f00fc 81067c80 800f30f0 0f40f803     .....|...0....@.
   17028:	00ff01fc f003c03f cebc6a02 dfdfdfdf     ....?....j......
   17038:	afdfdfdf 533de608 e01f007e 3f02fc07     ......=S~......?
   17048:	00fe00f0 7ca0811f 00e0030b 001f00fc     .......|........
   17058:	fc00e007 03e01f00 003e00f8 e01f803f     ..........>.?...
   17068:	e007c00f fc00f001 b0c0071a 801f003e     ............>...
   17078:	fe47e00f 7f00ff01 00801f80 a143140e     ..G...........C.
   17088:	0000e003 4700e07f 7f06c0ff ff7780ff     .......G......w.
   17098:	0fbe0fff 1fc0fdff 7f00ccff ff0040fc     .............@..
   170a8:	f80100c0 ffffff00                       ........

000170b0 <Arial_40_index>:
   170b0:	00010000 32c00120 623bd803 af081479     .... ..2..;by...
   170c0:	3132fac5 69148d9d f81b5283 46f007f4     ..21...i.R.....F
   170d0:	fc9475e2 3212a6b3 640eb1d1 1ea5c373     .u.....2...ds...
   170e0:	20a8f7b4 14793a44 be75aeda 0c82bdaf     ... D:y...u.....
   170f0:	3a43662f 26d2ea99 c779b7e2 837ab80e     /fC:...&..y...z.
   17100:	0e9520ea 82c6c008 995f923c 8d28f7cc     . ......<._...(.
   17110:	546fba4c 48d5a32e eb578daa 3b0b628d     L.oT...H..W..b.;
   17120:	d7e4365b fabdbd46 cc80e92f 16bf6132     [6..F.../...2a..
   17130:	76c9db38 9fb3b360 dbe92a6d daea1a54     8..v`...m*..T...
   17140:	5b78ed8e 735c6ec7 ff80a113              ..x[.n\s....

0001714c <Arial_28_index>:
   1714c:	00040000 400418d0 4a710f86 186f1115     .......@..qJ..o.
   1715c:	611ba4e1 c8311cbd 2104d21d 022a61d2     ...a..1....!.a*.
   1716c:	498330d5 3ea81337 843fee63 6d94432c     .0.I7..>c.?.,C.m
   1717c:	5849254a d660c455 7c66664c 6ee1c66c     J%IXU.`.Lff|l..n
   1718c:	c7750497 ee377a6e 8b667883 39950399     ..u.nz7..xf....9
   1719c:	d2a99867 ac8deaa2 1bb2139b 5c4bb436     g...........6.K\
   171ac:	ba6d4bb6 1cbfc81b 595cc418 cbab0cc9     .Km.......\Y....
   171bc:	cdcfc64c 419dd204 db929dd6 fedfcddd     L......A........
   171cc:	55bee213 f0cfbee9 0ff5303f ffb0f75a     ...U....?0..Z...

000171dc <Arial_20>:
   171dc:	0001724c 00000000 0000e124 7e200001     Lr......$..... ~
   171ec:	050c0000 05060305 0000141e              ............

000171f8 <Arial_40>:
   171f8:	000170b0 00000000 00015378 7e200001     .p......xS.... ~
   17208:	060d0000 06070406 0000283d              ........=(..

00017214 <Arial_28>:
   17214:	0001714c 00000000 0000ea0c 7e200001     Lq............ ~
   17224:	060c0000 06060406 00001c2b              ........+...

00017230 <Arial_60>:
   17230:	0000e060 00000000 000172dc 7e200001     `........r.... ~
   17240:	070e0000 07070507 00003c5c              ........\<..

0001724c <Arial_20_index>:
   1724c:	00040000 b00211c0 b3600852 0dc8800b     ........R.`.....
   1725c:	200fe780 02d10ff8 13292111 e1175a71     ... .....!).qZ..
   1726c:	ddb11b9f 2313621f 42243c52 8072265d     .....b.#R<$B]&r.
   1727c:	32fc322a f3364703 aef3398f 3fedd33d     *2.2.G6..9..=..?
   1728c:	d4420234 79344539 4ebe244a f55314a5     4.B.9E4yJ$.N..S.
   1729c:	8435564d 61efb55b 56643b06 6ef66555     MV5.[..a.;dVUe.n
   172ac:	697b4667 866cb286 08c76fe2 743aa772     gF{i..l..o..r.:t
   172bc:	87764c17 9027786e 7dc1777a 1880e5b7     .Lv.nx'.zw.}....
   172cc:	32b8810d 89735885 188cae38 ffb08dc8     ...2.Xs.8.......

000172dc <Arial_60_data>:
   172dc:	01000000 24de0170 bfff9d01 fef9fbf7     ....p..$........
   172ec:	fbd0d7be 0d600e4e 8d8a05fe 01fedd39     ....N.`.....9...
   172fc:	7f803fff 870fc0d7 0b000e80 e802005e     .?..........^...
   1730c:	007f0000 0300803f 12fc01fc 00fc0100     ....?...........
   1731c:	070000fe 00f807f0 1fc03f00 1f0090c0     .........?......
   1732c:	00e00fc0 7f00ff00 7f004081 df803f00     .........@...?..
   1733c:	ffffffff 7f00c0ff 00803f00 fc01fc03     .........?......
   1734c:	fc019000 0000fe00 f807f007 c03f0000     ..............?.
   1735c:	8004c01f e00fc01f 007f0000 0008807f     ................
   1736c:	803f007f ffffff06 80feffff 803f007f     ..?...........?.
   1737c:	01fc0300 810400fe 00fe00fc 07f00700     ................
   1738c:	3f0000f8 00c01fc0 0fc01f24 7f0000e0     ...?....$.......
   1739c:	00807f00 3f007f40 09000080 e9c28fe3     ....@..?........
   173ac:	003c0000 ff030000 1f000080 0000f0ff     ..<.............
   173bc:	00fcff7f feffff01 ffff0300 ff0700ff     ................
   173cc:	0f80ffff c0ffffff ff3ffe1f 3cf81fe0     ..........?....<
   173dc:	e03fe0ff 3ff03f3c f01f3cc0 0f3c807f     ..?.<?.?.<....<.
   173ec:	3c807ff0 007ff807 7ff8073c f8033c00     ...<....<....<..
   173fc:	033c007f 07e00fc1 fe210080 0000f000     ..<.......!.....
   1740c:	00f000ff f080ff00 e07f0000 7f0000f0     ................
   1741c:	0000f0f8 00f0ff3f f0ff1f00 ff0f0000     ....?...........
   1742c:	030000ff 00e0ffff f8ffff01 ff3f0000     ..............?.
   1743c:	0f0000fe 0000ffff 80ffff00 ffff0000     ................
   1744c:	f10000c0 0000e0ff 00e07ff0 f01ff000     ................
   1745c:	0ff00000 f00000f0 0000f007 80fc07f0     ................
   1746c:	7f001e00 001e000f 1e007f7f f08f7f00     ................
   1747c:	ef0fc003 1fc003f0 c003f8e7 03f8c71f     ................
   1748c:	fcc73fc0 c37fc003 ffc003fe c183ff83     .?..............
   1749c:	e3ff81ff ff01ffcf 00feffff fcffffff     ................
   174ac:	ffff7f00 ff3f00f8 1f00f0ff 00e0ffff     ......?.........
   174bc:	80ffff07 fcff0100 1f000000 001a00c0     ................
   174cc:	00007800 fc171f10 00f803a0 803f0000     .x............?.
   174dc:	00ff0f00 801f0000 e0ff0f00 c01f0000     ................
   174ec:	f8ff0f00 c00f0000 feff0f00 e00f0000     ................
   174fc:	7ff00700 e0070000 1ff00700 f00700c0     ................
   1750c:	07f00700 f00700e0 01f00300 f80300f8     ................
   1751c:	003f0400 7f00801f 003f0000 7f00e007     ..?.......?.....
   1752c:	801f0000 3f00f003 c00f0000 3f00f801     .......?.......?
   1753c:	e0070080 1f00fc00 f0030080 1f007e00     .............~..
   1754c:	f80100c0 0f003f00 fc0000c0 0f801f00     .....?..........
   1755c:	7e0000e0 07c00f00 3f0000e0 07e00700     ...~.......?....
   1756c:	1f0000f0 03f00380 070000f0 03f003c0     ................
   1757c:	080000f8 003f007e 0000007f 003f803f     ....~.?.....?.?.
   1758c:	0000007f 803fe00f 0000803f 803ff807     ......?.?.....?.
   1759c:	0000803f c0ffff01 0000801f c0ff7f00     ?...............
   175ac:	0000c01f c0ff1f00 0000c00f 80ff0300     ................
   175bc:	fc01e00f 007f0000 ff07e007 00000080     ................
   175cc:	ff07f007 000000f0 ff07f003 000000fc     ................
   175dc:	ff07f803 000000ff f803f801 0000803f     ............?...
   175ec:	f803fc01 0000e00f f803fc00 0000f003     ................
   175fc:	f801fe00 0000fd00 1fc01f00 00d00f80     ................
   1760c:	03f80300 007e00f0 01f80300 003f00f8     ......~.......?.
   1761c:	00f80100 801f00fc 00fc0100 c00f007e     ............~...
   1762c:	00fc0000 e007003f 00fe0000 f003801f     ....?...........
   1763c:	007e0000 f801c00f 007f0000 fc00e007     ..~.............
   1764c:	003f0000 7e00f003 803f0000 7e00f800     ..?....~..?....~
   1765c:	801f0000 3f007e00 c01f0000 1f003f00     .....~.?.....?..
   1766c:	c01f0080 1fc01f00 e00f0080 1ff00700     ................
   1767c:	e00f00c0 1ffc0300 f00700c0 ffff0000     ................
   1768c:	f00700e0 ff3f0000 f00300e0 ff0f0000     ......?.........
   1769c:	f80300e0 ff010000 f80100c0 3f000000     ...............?
   176ac:	5f0c0080 0070fb13 0000fc03 ff030000     ..._..p.........
   176bc:	000000e0 00feff03 ff010000 0000c0ff     ................
   176cc:	f8ffff00 7f000000 0000ffff ffff3f00     .............?..
   176dc:	1f0000c0 00f81ff8 03fc0700 010000fe     ................
   176ec:	807f00fe 00ff0000 2c00f00f 3f00f007     ...........,...?
   176fc:	fe010080 00e00f00 07803f00 0f0000f0     .........?......
   1770c:	00fc01f0 00fc0300 000000fe 807f807f     ................
   1771c:	f00f0000 0000c07f e03ffe03 7f000000     ..........?.....
   1772c:	0000f0ff f8ff0f00 01000000 0000fcff     ................
   1773c:	fe7f0000 00000000 0000fe3f ff1f0000     ........?.......
   1774c:	00000000 00c0ff1f ff0f0000 000000f8     ................
   1775c:	00ffff0f ff070000 0000e03f fc07ff03     ........?.......
   1776c:	ff000000 3c00ff80 1fc07f00 3fe01fe0     .......<.......?
   1777c:	07fc07e0 00f00ff8 07fc81ff f01f00f8     ................
   1778c:	00fc01ff c03ffc03 7f00007f 803fe09f     ......?.......?.
   1779c:	f8f71f00 0300e00f f803feff ff7f0000     ................
   177ac:	0000fe00 47c0ff0f 3f0000f0 00fe01fc     .......G...?....
   177bc:	00fe0700 0000807f f00fc0ff f87f0000     ................
   177cc:	0000fc03 ff00fe3f ff1f0080 00f01fc0     ....?...........
   177dc:	03f8ff1f ff1f00fe f0ff00ff f03fff1f     ..............?.
   177ec:	ffffff1f ff03fe8f ffc1ffff ffff7fc0     ................
   177fc:	0fe03fe0 07e0ffff ffff00f0 00f800f0     .?..............
   1780c:	00f0ff0f 7f00001c 000200e0 3991ca01     ...............9
   1781c:	f59fff0d e604e0f1 00c07997 e003001f     .........y......
   1782c:	07007e00 00f800c0 f001801f 00083f00     .~...........?..
   1783c:	f00310fc 01c00f20 801f00fc 0704f803     .... ...........
   1784c:	00fe00e0 0701f881 007e00f0 1f00fc2d     ..........~.-...
   1785c:	00ff0680 0f00fe0d 007e00e0 0700fe14     ..........~.....
   1786c:	e04f02e0 40007e00 e00700fe 80007f00     ..O..~.@........
   1787c:	f007007e 20e00710 0740e007 003f00e0     ~...... ..@...?.
   1788c:	1f00f001 00f80080 7c00c00f 00e00300     ...........|....
   1789c:	93e6041f 00c0c779 f003003e 00001f00     ....y...>.......
   178ac:	c00f00f8 07007c00 e00708e0 20e00710     .....|......... 
   178bc:	7f00e007 00f00300 3f00843f 007f0008     ........?..?....
   178cc:	0720f103 2c3f00f0 00687f00 fe00d07f     .. ...?,..h.....
   178dc:	00f60f00 f203803f 00e00f40 f80340fc     ....?...@....@..
   178ec:	07003f00 c00f80f0 0310fc01 c00f20f0     .?........... ..
   178fc:	07003f40 007c00e0 f800c00f 03801f00     @?....|.........
   1790c:	003e00f0 0700c007 0c1a8d0c 01801f00     ..>.............
   1791c:	0f02f800 fef0c003 fcc71f1e ff7ffef7     ................
   1792c:	fffff3ff ffffc7ff fcff01f8 00fe0100     ................
   1793c:	00f81f00 00e0ff01 0180bf1f 1f00fefc     ................
   1794c:	fe01f8c3 e01fe01f 013e807f 0ff000f0     ..........>.....
   1795c:	20000100 90d30900 00000d53 a00100fe     ... ....S.......
   1796c:	00c01f00 f8030020 ffff0600 d0ffffff     .... ...........
   1797c:	00e00f00 fc01001a 00000200 0000803f     ............?...
   1798c:	991fca01 c383ff7d e1e3f1a0 c30580c0     ....}...........
   1799c:	ffcd918c c301feff fe7d019c 0100de05     ..........}.....
   179ac:	7f000078 801f0020 00a43f00 0f00e007     x... ....?......
   179bc:	f80100e4 90f80300 00007e00 1f0010fe     .........~......
   179cc:	823f0080 00e00740 0140e00f f80300f8     ..?.@.....@.....
   179dc:	007e0009 0001fe00 3f00801f e0072480     ..~........?.$..
   179ec:	04e00f00 9000f881 fe00007e 801f1200     ........~.......
   179fc:	00e04702 4900e00f 7e0900f8 00fe0000     .G.....I...~....
   17a0c:	0000fc00 fa939e09 f81f00e0 ff010000     ................
   17a1c:	070000fe 0000feff 00ffff3f ffffff00     ........?.......
   17a2c:	ffff0300 ff0f00ff 1f00ffff 00fe0ffc     ................
   17a3c:	fe07c07f 0300ff00 00fc03fc f007fc03     ................
   17a4c:	1ff80300 f10700e0 0000f007 00e01ffe     ................
   17a5c:	f0b7fc01 b73f0000 070000f8 0000fefd     ......?.........
   17a6c:	80fffe01 b77f0000 3f0000f0 0000e087     ...........?....
   17a7c:	00fc41fe fc833f00 03ff0000 fc0100f8     .A...?..........
   17a8c:	0700f807 00f807f8 fc0fe01f 0fc0ff00     ................
   17a9c:	00ff07fe feffff1f ffff1f00 ff1f00f8     ................
   17aac:	1f00e0ff 0080ffff 00feff1f f0ff0f00     ................
   17abc:	ff030000 9e050000 00e80224 01007c00     ........$....|..
   17acc:	f00700f8 00e01f00 ff01c07f 00ff0780     ................
   17adc:	7f00fe1f f8ff01fc 3ff0ff0f ffffe1ff     ...........?....
   17aec:	bfbfffcf f07f7ffc fd81fffe f0fb03fe     ................
   17afc:	0f80f707 f41f00ec 00fd0700 0040ff01     ..............@.
   17b0c:	1f00d07f f90700f4 09fc0100 e00208de     ................
   17b1c:	00fc0f00 ffff0000 ff030080 0700e0ff     ................
   17b2c:	00f8ffff fcffff0f ffff3f00 ff3f00fe     .........?....?.
   17b3c:	7f00ffff 00ff0ff8 ff01c0ff 0080ff80     ................
   17b4c:	00ff81ff fec17f00 c13f0000 1f0000fc     ..........?.....
   17b5c:	0000fcc1 007fe91f 0ffc0100 fd010000     ................
   17b6c:	00000000 0000803f 00a07f00 e00f0000     ....?...........
   17b7c:	1f000000 000000e0 0000c01f 00c03f00     .............?..
   17b8c:	c07f0000 7f000000 00000080 000000ff     ................
   17b9c:	0000ff01 00fe0300 fc070000 0f000000     ................
   17bac:	000000f8 0000f01f 00e03f00 e07f0000     .........?......
   17bbc:	ff000000 01000080 000000ff 0000fe07     ................
   17bcc:	00fc0f00 f81f0000 3f000000 000000f0     ...........?....
   17bdc:	0000e07f 00c0ff01 00ff0300 fe070000     ................
   17bec:	0f000000 000000fc 0000f80f 00f01f00     ................
   17bfc:	e03f0000 7f000000 000000c0 0000807f     ..?.............
   17c0c:	0000ff00 ffbf0400 afffffff ffffffff     ................
   17c1c:	939e09e0 1f00e0fa 010000f0 0000fcff     ................
   17c2c:	00feff0f feff7f00 ffff0100 ff0700fe     ................
   17c3c:	1f00feff 00feffff fe0ff83f 07c0ff00     ........?.......
   17c4c:	00fe01fc f807fc07 0ff80700 f00700f0     ................
   17c5c:	0f00c01f 00807ff0 00fee00f 3cc01f00     ...............<
   17c6c:	893f0000 0f000000 000000e2 0000f007     ..?.............
   17c7c:	00e01f00 807f0000 fe030000 3f000000     ...............?
   17c8c:	0f0000f8 0000e0ff 0080ff1f 00fc3f00     .............?..
   17c9c:	ff7f0000 ff010000 030080ff 0080ffff     ................
   17cac:	80ff0706 ff010000 00000080 000080ff     ................
   17cbc:	0020ff00 e01f0000 1f000000 000000c0     .. .............
   17ccc:	0000e83f f0f00700 ef0f0000 1f0000e0     ?...............
   17cdc:	0000e0df 00c0bf3f 803fff00 0ffd0100     ....?.....?.....
   17cec:	ff0000f0 0300f00f 00f01ffc f01ff80f     ................
   17cfc:	3fe07f00 80ff03fc feffff3f ffff3f00     ...?....?....?..
   17d0c:	ff3f00fc 3f00e0ff 0080ffff 00feff1f     ..?....?........
   17d1c:	f0ff0f00 fe030000 5d0a0000 00e00284     ...........]....
   17d2c:	007e0000 3f000000 00000080 0020e01f     ..~....?...... .
   17d3c:	00ff0100 ff000000 000000c0 0010f07f     ................
   17d4c:	80ff0700 ff030000 000020e0 0000ff3f     ......... ..?...
   17d5c:	c0ff1f00 ff0f0000 070000f0 0000fcfd     ................
   17d6c:	007ffe01 1fff0000 7f0000c0 0000f0c7     ................
   17d7c:	00fce13f 7ff00f00 f8070000 0300c01f     ?...............
   17d8c:	00f007fe fc01ff01 807f0000 3f00007f     ...............?
   17d9c:	00c01fc0 f007f01f 01f80f00 fc0300fc     ................
   17dac:	01007f00 c01f00fe 0780ff00 c03f00f0     ..............?.
   17dbc:	1f00fc01 007f00e0 1f00f80f 00fc07c0     ................
   17dcc:	fe01f007 00fc0100 7f0000ff 00c07f00     ................
   17ddc:	e03fc01f 1bf00700 ffffffff 0000d0ff     ..?.............
   17dec:	8006fc01 e00f0000 139e0900 ff01e8fa     ................
   17dfc:	c0e2ffff f8ffffff 0000fc01 00fe6001     .............`..
   17e0c:	fc030000 a0000000 000000fe 0000fc03     ................
   17e1c:	1ff00700 e10f00e0 1f00f0ff 00f8ffcf     ................
   17e2c:	fcffff3f ffffff00 ffff01fc ff03fcff     ?...............
   17e3c:	07fcffff f83fc0ff 1f00fc0f 00f03ff8     ......?......?..
   17e4c:	c07ff80f fff00f00 f00f0000 1f00003c     ............<...
   17e5c:	000000e8 0000f803 80fe0700 fe000000     ................
   17e6c:	0100001e 0000fcfd 807ffc07 7ffc0100     ................
   17e7c:	f8070000 0f0000ff 0000fee1 00fec13f     ............?...
   17e8c:	fe03ff00 03fe0300 f80f00fe ff80ff07     ................
   17e9c:	ffff07f0 ff07c0ff 0700ffff 00fcffff     ................
   17eac:	f0ffff07 ffff0700 ff030080 000000fc     ................
   17ebc:	0000c07f fa8b1e0a fe0300e0 0f000000     ................
   17ecc:	0000f0ff 00fcff1f ffff3f00 ff3f0080     .........?....?.
   17edc:	3f00e0ff 00f8ffff feffff3f 07fc3f00     ...?....?....?..
   17eec:	f03f00ff 1fc0ff00 f01f00f0 0700f01f     ..?.............
   17efc:	00f00ff8 f00ffc03 07ff0000 7f0000f0     ................
   17f0c:	0000f887 00f8c31f fc010f00 05000000     ................
   17f1c:	0000803f 0fc01f00 c00f00f0 0f00ff3f     ?...........?...
   17f2c:	e0ff7fe0 fffff007 fff803f8 fc01ffff     ................
   17f3c:	c0ffffff fffffffe 80ff7ff0 ff3ff87f     ..............?.
   17f4c:	1ffe0700 ff0000fe 0000fe8f 00fec73f     ............?...
   17f5c:	fef30f00 fa070000 0000c03f 00e09f3f     ........?...?...
   17f6c:	fcf31f00 ff000000 0000c04f 00f0e70f     ........O.......
   17f7c:	f8f30700 f0070000 030000fc 00007ff8     ................
   17f8c:	c03ffc01 0ffe0100 fe0100e0 0100f807     ..?.............
   17f9c:	00fe01ff 7f00ff01 80ff01c0 ff07f83f     ............?...
   17fac:	ffff0f80 ff0380ff 0080ffff 80ffffff     ................
   17fbc:	ffff3f00 ff070080 000080ff 0000ffff     .?..............
   17fcc:	00f80f00 909d0900 ffffec02 fffdffff     ................
   17fdc:	f0ffffff 07000000 000000c0 0000801f     ................
   17fec:	00007e00 00f80100 e0070000 1f000000     .~..............
   17ffc:	000000c0 0000003f 0000fc00 00f80300     ....?...........
   1800c:	e0070000 1f000000 000000c0 0000007f     ................
   1801c:	0000fc00 00f80300 e0070000 1f000000     ................
   1802c:	000004c0 0001e00f 00f00700 f8030040     ............@...
   1803c:	01001200 000400fc 0100fe00 007f0020     ............ ...
   1804c:	3f004800 00120080 0500c01f 00e00f00     .H.?............
   1805c:	c03f0000 0fc00200 000000e0 0100c03f     ..?.........?...
   1806c:	00e00f60 9e090000 00e0fa93 0000f81f     `...............
   1807c:	00feff01 ffff0f00 ff3f0000 ff0100ff     ..........?.....
   1808c:	0300ffff 00ffffff ffffff0f 07f83f00     .............?..
   1809c:	c07f00ff ff01fe03 03fe0300 fc0300fc     ................
   180ac:	0300f00f 00c01ff8 f067f907 0ffe0000     ..........g.....
   180bc:	fc0300f0 0700e00f 00fc03f1 fe03fc03     ................
   180cc:	03f01f00 c0ff00ff ffffff03 ffff0300     ................
   180dc:	ff0100fc 0100e0ff 0080ffff c0ffff1f     ................
   180ec:	ffff7f00 ffff01e0 ff07e0ff 1fe0ff00     ................
   180fc:	e07f00f0 3f00c07f 0000ffe0 00fcc33f     .......?....?...
   1810c:	f0c73f00 8f7f0000 7f0000e0 0000c03f     .?..........?...
   1811c:	00e0dfff e0df1f00 c37f0000 1f0000f8     ................
   1812c:	0000f8c7 00f8877f f80ffe01 0ffc0700     ................
   1813c:	f01f00fc ff01fe1f ffff1fe0 ff1f80ff     ................
   1814c:	1f00feff 00f8ffff e0ffff1f ffff0f00     ................
   1815c:	ff070000 010000f8 090080ff e0fa939e     ................
   1816c:	00e01f00 f8ff0100 ff0f0000 7f0000fc     ................
   1817c:	0100feff 00feffff feffff07 ffff1f00     ................
   1818c:	fc3f00fe ff00fe07 03fe03c0 fc0100ff     ..?.............
   1819c:	0100fc07 00f01ffc c03ff801 7ff80300     ..........?.....
   181ac:	f0030080 070000fe 0000fce3 00feea0f     ................
   181bc:	bffa0100 7f000080 0100007f 0000fffe     ................
   181cc:	00fefc03 3ffc0700 fe0300c0 0f00c03f     .......?....?...
   181dc:	00c07ffc e07ff83f fff0ff01 e0ff0ff0     ....?...........
   181ec:	dfffffff ffffffc0 ffff803f ff007ffc     ........?.......
   181fc:	00fef0ff fcc1ffff 03fe7f00 e01f00f0     ................
   1820c:	0000ea07 00f80300 e00f0000 1f00003c     ............<...
   1821c:	0000f8c3 00ff903f fec01f00 817f0000     ....?...........
   1822c:	fe0100fe 0700fe03 00fe03fc ff07f01f     ................
   1823c:	07c0ff01 80ffffff feffff07 ffff0700     ................
   1824c:	ff0700f8 0700c0ff 0000ffff 00f8ff03     ................
   1825c:	80ff0000 d6010000 ff7d011c 800634a0     ..........}..4..
   1826c:	7f0310d0 9fdc0180 a0ff7d99 d0800634     .........}..4...
   1827c:	e07f0310 e8e3e1f0 092070f8 00539493     .........p ...S.
   1828c:	00000000 00000020 0000c001 00801f00     .... ...........
   1829c:	00ff0000 fe070000 3f000000 030000fc     ...........?....
   182ac:	0000f8ff 00e0ff1f 00feff00 f0ff0700     ................
   182bc:	ff3f0000 ff030000 1f0000f8 000080ff     ..?.............
   182cc:	0000fcff 00c0ff07 00fe7f00 e0ff0300     ................
   182dc:	ff0f0000 1f000000 000000f8 0000803f     ............?...
   182ec:	00c07f00 f0ff0000 ff000000 000000f8     ................
   182fc:	0000fe7f 00ff1f00 ff0f0000 070000c0     ................
   1830c:	0000e0ff 00f8ff03 fcff0000 7f000000     ................
   1831c:	000000ff 0080ff3f e0ff1f00 ff0f0000     ....?...........
   1832c:	030000e0 0000c0ff 0080ff01 00ff0000     ................
   1833c:	7e000000 00000000 0000001c cc090800     ...~............
   1834c:	ff0d8b90 ffffffff 000000a0 00002800     .............(..
   1835c:	ff060000 ffffffff 53949309 00000004     ...........S....
   1836c:	00000e00 801f0000 3f000000 000000c0     ...........?....
   1837c:	0000e07f 00f0ff00 fcff0100 ff010000     ................
   1838c:	000000fe 0000ff7f 80ff3f00 ff0f0000     .........?......
   1839c:	070000c0 0000f0ff 00f8ff01 fcff0000     ................
   183ac:	3f000000 000000fe 0080ff1f c0ff0700     ...?............
   183bc:	ff030000 000000c0 000080ff 00007f00     ................
   183cc:	00fe0700 fc3f0000 ff010000 1f0000f0     ......?.........
   183dc:	000080ff 0000f8ff 00c0ff0f 00fe7f00     ................
   183ec:	f0ff0700 ff3f0000 ff030000 1f0000f8     ......?.........
   183fc:	0100c0ff 0000feff 00f0ff07 00ff0f00     ................
   1840c:	f81f0000 3f000000 000000c0 0000007e     .......?....~...
   1841c:	0000e000 00000100 09000000 e002909e     ................
   1842c:	00f81f00 feff0100 ff0f0000 7f0080ff     ................
   1843c:	0180ffff 80ffffff ffffff07 ffff1f80     ................
   1844c:	fc3f80ff ff80ff07 83ff03c0 ff0100ff     ..?.............
   1845c:	0100fc07 00f01fff c03ffe01 7ffc0300     ..........?.....
   1846c:	fc030080 070000fe 00807ffc 00fefe00     ................
   1847c:	3cfc0100 fc030000 00000000 000000ff     ...<............
   1848c:	00007f00 00fe0100 f8070000 1f000000     ................
   1849c:	000000f0 0000c07f 0000ff01 00fc0700     ................
   184ac:	f01f0000 7f000000 010000c0 000000ff     ................
   184bc:	0000fc07 00f01f00 c07f0000 ff010000     ................
   184cc:	03000000 001000fc 0000fe01 00f80300     ................
   184dc:	fe010008 00000300 c000007f 00000000     ................
   184ec:	f0070034 67130000 00407d17 ff030000     4......g.}@.....
   184fc:	000000f0 01000000 00feffff 00000000     ................
   1850c:	ffff3f00 000000ff ff070000 00ffffff     .?..............
   1851c:	00000000 ffffff7f 000000ff ffff0300     ................
   1852c:	00ffffff 3f000000 ffffffff 000000fe     .......?........
   1853c:	80ffff01 00feff07 ff0f0000 ff0100c0     ................
   1854c:	000000fc 0000f8ff 00f8ff00 80ff0700     ................
   1855c:	ff000000 3f0000f0 000000f8 00e0ff00     .......?........
   1856c:	00c0ff01 ff000000 fc070080 00000000     ................
   1857c:	0000ff01 0000e03f fe030000 00ff0100     ....?...........
   1858c:	00000000 0f00f807 fc0100f8 f00f0000     ................
   1859c:	00c03f00 f803fe3f fe01e01f fcff0300     .?..?...........
   185ac:	803fe00f 1f00f007 003ffcff 803f00ff     ..?.......?...?.
   185bc:	f8ffff01 00fc01fc ff0f00fe 07f0f7ff     ................
   185cc:	00f007f0 dfffff7f 1fe00fc0 c0ff0380     ................
   185dc:	3f00ffff 1f00fe80 f8ff00f8 f0037e00     ...?.........~..
   185ec:	00c07f00 f801e0ff fe03c00f 80ff0100     ................
   185fc:	007ff007 0700f01f c10f00fe 807f00f8     ................
   1860c:	00f80f00 03e0073f 3f0000fc 3ffc00c0     ....?......?...?
   1861c:	00f00f00 03007f00 0f801ff2 3f0000f0     ...............?
   1862c:	7ef80180 00803f00 0700fe00 fe01f8e1     ...~.?..........
   1863c:	f0030000 f8911f00 0000fe00 0f00f801     ................
   1864c:	f807e0c7 e0070000 801f7f00 0000c01f     ................
   1865c:	f801801f 007f007e 00fc0000 003fe207     ....~.........?.
   1866c:	0000803f f007007e 00fe00fc 00f80300     ?...~...........
   1867c:	03f0831f 0f0000f8 0ffe00c0 00e00fc0     ................
   1868c:	03007f00 3f003ff0 fc010080 fcc01f00     .....?.?........
   1869c:	0000fe00 fe00f00f fc01f803 c03f0000     ..............?.
   186ac:	e007f803 0100f007 c01f00fe e01f801f     ................
   186bc:	00f80f00 007e00ff 7f00807f 01f807e0     ......~.........
   186cc:	00ff00fc 7f80ff07 03f007c0 fe3f00fe     ..............?.
   186dc:	0f00fe03 07fe07c0 f03ffcff 1f803f00     ..........?..?..
   186ec:	ffffffff fe0080ff ffff3f00 00fcffbf     .........?......
   186fc:	7f00fc01 fffffcff f00700e0 c1ffff00     ................
   1870c:	0000ffff ff01e00f f0ff07fe c03f0000     ..............?.
   1871c:	0fe0ff01 e00f80ff fe00807f 00f00f00     ................
   1872c:	00fe017f 00000000 03fc0300 000000fe     ................
   1873c:	1f000000 00fc07e0 00000000 1f00ff00     ................
   1874c:	000000f8 f80f0000 00f03f00 00000000     .........?......
   1875c:	7f00c07f 000000f0 00ff0700 00f0ff00     ................
   1876c:	7f000000 ff0100f0 000000f8 0080ff07     ................
   1877c:	00fcff03 fcff0000 ff030000 7f00c0ff     ................
   1878c:	0000e0ff ffffff07 00feffff ff070000     ................
   1879c:	ffffffff 000000f0 ffffff07 0000ffff     ................
   187ac:	ff070000 f0ffffff 00000000 ffffff03     ................
   187bc:	000000fe ff000000 00c0ffff 00000000     ................
   187cc:	e0ff1f00 0d000000 700300de f0070000     ...........p....
   187dc:	00080000 00ff0100 00200100 00f07f00     .......... .....
   187ec:	00000000 0000f8ff fd000000 200000f8     ............... 
   187fc:	bf3f0000 00040080 f8e30f00 00000000     ..?.............
   1880c:	00f8c30f 03008000 00803ff8 fe000012     .........?......
   1881c:	0200f803 803f0000 0000803f 3f807f00     ......?.?......?
   1882c:	004000c0 f803e00f 03000800 803f00f8     ..@...........?.
   1883c:	f8070000 01c03f00 00fe0000 0000f803     .....?..........
   1884c:	0300fe01 010000fc fc0100fc fc030000     ................
   1885c:	00fe0100 007f0020 00c01f00 0000ff00     .... ...........
   1886c:	0000e01f ffffffff 3f8004e0 feffffff     ...........?....
   1887c:	ff0f8000 e0ffffff ffff1f00 00f0ffff     ................
   1888c:	0000e01f 1f00f00f 070000c0 f80710f0     ................
   1889c:	ff000000 00fe4102 f00f0000 00807f40     .....A......@...
   188ac:	00ff0000 000080ff 1f88ff00 000000e0     ................
   188bc:	f807f10f 00000000 00f80fff ff000000     ................
   188cc:	0000fea1 f30f0000 000000fe fcfb0f00     ................
   188dc:	00000000 1e0bf807 ff77031c 00c0ffff     ..........w.....
   188ec:	ffffff3f ffff01c0 0fc0ffff ffffffff     ?...............
   188fc:	ffff7f00 ff03fcff f0ffffff ffffff1f     ................
   1890c:	00ffc0ff 07ff1f00 1f0000f8 00c03ff8     .............?..
   1891c:	fee17f00 ff010000 0000f00f 807ff807     ................
   1892c:	e63f0000 0000807f 807fe41f c33f0000     ..?...........?.
   1893c:	030000fc 00e01ffc ffe03f00 fe030000     .........?......
   1894c:	0000f807 ff3fe0ff 01feffff ffffffff     ......?.........
   1895c:	ffff0fe0 7f00fcff f0ffffff ffffff03     ................
   1896c:	ff1fe0ff 80ffffff ffffffff 00f807ff     ................
   1897c:	3ff87f00 7f0000c0 0000fee1 f08fff00     ...?............
   1898c:	fc030000 0000807f 00fcf31f 9f7f0000     ................
   1899c:	030000e0 00e0bfff fffe0100 1f000000     ................
   189ac:	0000f8f7 f847ff00 ff010000 0000c03f     ......G.....?...
   189bc:	00fef11f 8fff0300 ff0000f0 ffff8ff8     ................
   189cc:	7ff0ffff ffffffff ffffff03 ff1fe0ff     ................
   189dc:	00feffff ffffffff ffff0780 0000c0ff     ................
   189ec:	fb131f0d 1f0000c0 000000fc feff0f00     ................
   189fc:	01000000 00fcffff ff3f0000 0000f8ff     ..........?.....
   18a0c:	ffffff07 7f0000e0 c0ffffff ffff0f00     ................
   18a1c:	0000ffff ff00feff ff0f00fc e0ff0000     ................
   18a2c:	00e07f00 0780ff03 070000fe e07f00fe     ................
   18a3c:	f01f0000 0000fe07 3fc07f00 030000e0     ...........?....
   18a4c:	00fe03ff f80f0000 0000e01f ffc17f00     ................
   18a5c:	01000000 00f00fff f80f0000 0000807f     ................
   18a6c:	fc073c00 00000000 00f8a700 00000000     .<..............
   18a7c:	0000c07f ff060000 00000080 80ff0500     ................
   18a8c:	00000000 00c0bf04 01000000 000000fe     ................
   18a9c:	f00f3800 01000000 00f807fd fe030000     .8..............
   18aac:	0000c03f 1fe81f00 000000e0 80ffe03f     ?...........?...
   18abc:	fe030000 0000fe03 1ff03f00 010000f8     .........?......
   18acc:	e07f00ff f81f0000 0080ff01 0f80ff01     ................
   18adc:	3f0000fe fc3f00f8 c0ff0700 01fcff00     ...?..?.........
   18aec:	0300fcff ffffffff ff0f00c0 00fcffff     ................
   18afc:	ffff3f00 000080ff f8ffff7f ff000000     .?..............
   18b0c:	0000ffff ffff0100 000000e0 00f0ff00     ................
   18b1c:	1c5e0c00 ffffc703 0100c0ff ffffffff     ..^.............
   18b2c:	ff7f0000 00f8ffff ffffff1f ff0700ff     ................
   18b3c:	f0ffffff ffffff01 7f00feff ffffffff     ................
   18b4c:	00e01fc0 07f8ff01 0f0000f8 00fe01ff     ................
   18b5c:	e0ff0000 0000807f e01ff81f ff030000     ................
   18b6c:	0000f807 fec17f00 0f000000 00807ff8     ................
   18b7c:	1ffe0100 000000e0 00ffc87f fe010000     ................
   18b8c:	0000c03f fed57f00 01000000 00f0dffe     ?...............
   18b9c:	fe070000 0000807f e0df3f00 1f000000     .........?......
   18bac:	0000fffa 3fff0000 000000c0 00fed17f     .......?........
   18bbc:	fc030000 0000807f e01fff01 7f000000     ................
   18bcc:	0000f887 fee13f00 1f000000 00807ff0     .....?..........
   18bdc:	1ffc0f00 070000e0 00f807fe 01ff0300     ................
   18bec:	030000fe 807fc0ff e0ff0f00 ffffff1f     ................
   18bfc:	ff07f0ff f8ffffff ffffff01 7f00fcff     ................
   18c0c:	fcffffff ffff1f00 0700fcff fcffffff     ................
   18c1c:	ffff0100 0000e0ff 031c1e0b ffffff7d     ............}...
   18c2c:	ffedffff 00000000 0000ff0d ff0a0000     ................
   18c3c:	00000000 ffffff0d ff8dffff 00000000     ................
   18c4c:	0000ff0d ff0d0000 00000000 ffffff0d     ................
   18c5c:	0af0ffff 3d031c1e ffffffff 00f0dfff     .......=........
   18c6c:	ff0d0000 00000000 0000f0bf ffff0d00     ................
   18c7c:	dfe0ffff 000000f0 0000ff0d f0df0000     ................
   18c8c:	0c000000 000000ff 131f0e00 000010fc     ................
   18c9c:	0080ff07 3f000000 0000fcff ffff0000     .......?........
   18cac:	0000c0ff ffffff01 030000f8 ffffffff     ................
   18cbc:	ff070000 c0ffffff ffff0700 00f0ffff     ................
   18ccc:	01f8ff07 0700fcff 1f00c0ff ff0700ff     ................
   18cdc:	ff030080 00ff07c0 e07f0000 0000ff03     ................
   18cec:	03f81f00 000000ff ff03fc07 01000000     ................
   18cfc:	00ff01ff 7f000000 0000ff81 c03f0000     ..............?.
   18d0c:	000080ff 7ff00f00 00000080 c07ff807     ................
   18d1c:	03000000 00c03fe0 00000000 0000e03f     .....?......?...
   18d2c:	53000000 000000fc ff050000 00000080     ...S............
   18d3c:	f86f0000 ff1f0000 00fefbff 03000000     ..o.............
   18d4c:	00e05ffe 3f000000 0000f8cf f01f0000     ._.....?........
   18d5c:	0000807f 3ffe0100 000000e0 f00fff00     .......?........
   18d6c:	00000000 00fc877f 3f000000 0000ffc1     ...........?....
   18d7c:	e01f0000 0000c0ff 3ff00f00 000000f0     ...........?....
   18d8c:	fc0ff80f 1f000000 00ff07fc fe1f0000     ................
   18d9c:	00e0ff01 00ff3f00 0000fc7f 1f00ffff     .....?..........
   18dac:	ff07e0ff ff0700fe feffffff ffff0000     ................
   18dbc:	00fcffff ffff3f00 0000f8ff ffffff07     .....?..........
   18dcc:	000000f8 e0ffffff 0f000000 0080ffff     ................
   18ddc:	3f000000 000000fc 031c9e0b 0000ffcd     ...?............
   18dec:	7fff0300 000000c0 00f0dfff eb3f0000     ..............?.
   18dfc:	000000fc fffffd0f ffffffff 0000c07f     ................
   18e0c:	f0dfff00 3f000000 0000fcf7 fffd0f00     .......?........
   18e1c:	03000000 1c1e02fc dfff7d01 fddffffd     .........}......
   18e2c:	fffddfff 08fffadf adfa8f1e ff000000     ................
   18e3c:	0f0000d0 000000fd 0000d0ff 0000fd0f     ................
   18e4c:	00d0ff00 78f00f00 7ffd0700 bf7f0080     .......x........
   18e5c:	df3f00e0 c73f00f0 e31f00f8 f10f00fe     ..?...?.........
   18e6c:	f80f00ff f80fc0ff fc1ff83f fcffff1f     ........?.......
   18e7c:	fcffff07 feffff01 feff7f00 fcff1f00     ................
   18e8c:	f8ff0300 e03f0000 1c5e0c00 00f87703     ......?...^..w..
   18e9c:	f17f0000 000000fe 807ff83f fc1f0000     ........?.......
   18eac:	0000e01f f807fe0f ff070000 0000fe01     ................
   18ebc:	7f80ff03 ff010080 00e01fc0 07e0ff00     ................
   18ecc:	7f0000f8 00fe01f0 00f83f00 1f00807f     .........?......
   18edc:	e01f00fc 00fe0f00 0700f807 fe0100ff     ................
   18eec:	80ff0300 01807f00 1f00c0ff e0ff00e0     ................
   18efc:	00f80700 0100f07f f83f00fe 807f0000     ..........?.....
   18f0c:	0000fc1f fe0fe01f f8070000 0000ff07     ................
   18f1c:	ff03fe01 7f000080 00c0ff81 ffe01f00     ................
   18f2c:	070000e0 00f07ff8 3ffe0100 000000fc     ...........?....
   18f3c:	80ff9f7f ef1f0000 0000e0ff fcffff07     ................
   18f4c:	ff010000 0080ffff ffff7f00 1f0000f0     ................
   18f5c:	00fce7ff f1ff0700 010080ff f03ff8ff     ..............?.
   18f6c:	fc7f0000 0000fe07 ff00fe1f ff070080     ................
   18f7c:	00f03f00 0780ff01 7f0000fe c0ff00c0     .?..............
   18f8c:	00e01f00 0700f01f fe0700f8 00fe0100     ................
   18f9c:	00c0ff00 1f00807f e01f00f8 00fe0300     ................
   18fac:	0000f807 fe01c0ff f81f0000 00807f00     ................
   18fbc:	1f00ff03 7f0000e0 00f807e0 01f80f00     ................
   18fcc:	030000fe 807f00ff e07f0000 0000e01f     ................
   18fdc:	f807fc0f ff010000 0000fe01 7fe07f00     ................
   18fec:	0f000080 00e01ffc 87ff0100 000000f8     ................
   18ffc:	00fee13f fc0f0000 0000807f e09fff01     ?...............
   1900c:	3f000000 1c1e09f0 00ffed02 ff0d0000     ...?............
   1901c:	0d000000 000000ff 0000ff0d 00ff0d00     ................
   1902c:	ff0d0000 0d000000 000000ff 0000ff0a     ................
   1903c:	ffff0d00 0ef0ffff 5804185e 0000f8ff     ........^..X....
   1904c:	cfff0f00 0000e0ff 7ffeff00 000080ff     ................
   1905c:	ffefff0f 070000f0 bf7ffcff 3f000080     ...............?
   1906c:	f0efdfbf ef0f0000 803ffff9 7ffe0000     ..........?.....
   1907c:	00fef8cf fde30f00 00c03ffe 8ffff807     .........?......
   1908c:	0000fef0 fcfb873f 1f00c03f e01fffe1     ....?...?.......
   1909c:	fe0000fe 3ff8f70f 833f00c0 fec07ffe     .......?..?.....
   190ac:	1ff80300 c03ff0ef fc07fc01 00fe807f     ......?.........
   190bc:	df3fe00f 07c03fe0 fff80ff8 3f00fe00     ..?..?.........?
   190cc:	c0bf7f80 e01fc03f 00fef11f 00fe00fe     ....?...........
   190dc:	3f807fff 3f803fc0 f00fe0df f80fc01f     ...?.?.?........
   190ec:	803f00ff bf7f00fe 7ff00fc0 fef11f80     ..?.............
   190fc:	f8833f00 807fff00 00fef10f 00fce33f     .?..........?...
   1910c:	01e08f3f 0f00fffe 7f00f8f7 fd03c0bf     ?...............
   1911c:	f11f00fc ef0f00fe 7fff00e0 f8ff0380     ................
   1912c:	fce73f00 80ff0f00 e03fff01 00f83f00     .?........?..?..
   1913c:	00f8f70f 0300fc0f 0100fefd ff0000ff     ................
   1914c:	031c9e0b 0080ffc8 fffd0300 07000080     ................
   1915c:	00f07ffc fffe0100 030000f0 00fe3ffe     .............?..
   1916c:	7fff0000 010000fe c0ff1fff bf7f0000     ................
   1917c:	0000c0ff f8ff8fff df3f0000 0000f8ff     ..........?.....
   1918c:	f0dfbf7f 7fff0000 0100f09f f03ffffe     ..............?.
   1919c:	fefd0300 0700e03f e03ffcfb f8f70f00     ....?.....?.....
   191ac:	1f00e07f c07ff0ef e0df3f00 7f00c0ff     .........?......
   191bc:	c0ffc0bf 807fff00 fe0180ff 80ff01ff     ................
   191cc:	01fefd03 fb0700ff 00ff01fc 03f8f70f     ................
   191dc:	ef1f00ff 00fe03f0 03e0df3f bf7f00fe     ........?.......
   191ec:	00fe07c0 07807fff fffe01fc 03fc0700     ................
   191fc:	0f00fefd fcfb07fc 0ff80f00 1f00f8f7     ................
   1920c:	f0ef1ff8 3ff81f00 1f00e0df c0bf7ff0     .......?........
   1921c:	fff03f00 3f00807f 00fffee1 fde33f00     .?.....?.....?..
   1922c:	7f0000fe 00fcfbe7 f7cf7f00 7f0000f8     ................
   1923c:	00f0efdf e3ffff00 1f0000fc 00f8f7ff     ................
   1924c:	f1ff1f00 030000fe 00fcfbff f8ff0300     ................
   1925c:	000000ff 00fefd7f fc7f0000 0000807f     ................
   1926c:	00fffe0f fe0f0000 0000c03f 5f0eff01     ........?......_
   1927c:	0010fc13 00fe0f00 00000000 00f8ff3f     ............?...
   1928c:	7f000000 00c0ffff ff7f0000 0000fcff     ................
   1929c:	ffff3f00 000080ff ffffff3f 1f0000f8     .?......?.......
   192ac:	ffffffff ff0f0000 e0ff0fe0 c0ff0700     ................
   192bc:	00fc7f00 00c0ff03 0180ff07 0000c0ff     ................
   192cc:	ff00f07f 0f0000e0 e03f00fc ff010000     ..........?.....
   192dc:	00f01f80 f03f0000 0000f807 03fc0700     ......?.........
   192ec:	000000fe ff80ff00 00000000 c07fe01f     ................
   192fc:	07000000 00fc83fc 1f000000 0000fee1     ................
   1930c:	fd070000 0000f04f ed1f0000 000000ff     ....O...........
   1931c:	df7f0000 000000f8 fefd0300 00000000     ................
   1932c:	f897ff01 00000000 00fef10f 07000000     ................
   1933c:	00f807fd 3f000000 0000ffc1 f01f0000     .......?........
   1934c:	0000c03f 0ff80700 000000f8 ff01fe03     ?...............
   1935c:	01000000 e07f00ff ff000000 00f80fc0     ................
   1936c:	e07f0000 0080ff01 00f83f00 0000f07f     .........?......
   1937c:	0f00fc1f 0f0000fe ff0100fe ff1f00e0     ................
   1938c:	ff3f0000 80ff3f80 ffff0700 00c0ffff     ..?..?..........
   1939c:	ffffff00 0000e0ff ffffff0f 010000e0     ................
   193ac:	f0ffffff 1f000000 00f0ffff ff000000     ................
   193bc:	0000e0ff ff030000 0b000080 77031c1e     ...............w
   193cc:	e0ffffff ffff3f00 ff01f0ff e0ffffff     .....?..........
   193dc:	ffffff0f ff7fc0ff 03ffffff ffffffff     ................
   193ec:	ffff1ffc fff0ffff ff070000 0000f887     ................
   193fc:	c03ffe07 f21f0000 0000c03f 00fef90f     ..?.....?.......
   1940c:	cf3f0000 010000f0 00f0dfff 7fff0000     ..?.............
   1941c:	07000080 00807ffc fcf30f00 ff000000     ................
   1942c:	0000e09f 00fffc0f c7ff0000 0f0000f8     ................
   1943c:	00c03ffe ffe1ff03 feffffff ffffff11     .?..............
   1944c:	ff0ffcff 80ffffff ffffff7f ffff03f8     ................
   1945c:	1f00feff 00ffffff 00e0bf01 bf010000     ................
   1946c:	000000e0 00e0bf01 3f010000 000000e0     ...........?....
   1947c:	93600e00 000010dc 0000fc0f 3f000000     ..`............?
   1948c:	0000f0ff ff7f0000 000080ff ffff7f00     ................
   1949c:	000000f8 ffffff7f 3f000080 f0ffffff     ...........?....
   194ac:	ff1f0000 00feffff c0ff0f00 00c0ff0f     ................
   194bc:	0080ff07 0300f87f 070080ff ff0100ff     ................
   194cc:	ff0000c0 c0ff00e0 fc0f0000 00e03f00     .............?..
   194dc:	00ff0100 0000f01f 07e03f00 000000f8     .........?......
   194ec:	fe03f80f 01000000 00ff00ff 3f000000     ...............?
   194fc:	00c07fc0 f80f0000 0000fc83 c13f0000     ..............?.
   1950c:	000000fe 2ff90f00 000000f0 f8c73f00     ......./.....?..
   1951c:	00000000 c07ffb0f 00000000 00fed73f     ............?...
   1952c:	01000000 00807ffe ff000000 0000fea5     ................
   1953c:	f8070000 0000807f 41fe0300 000000fe     ...........A....
   1954c:	7fe01f00 000400c0 f00ff80f 03e00100     ................
   1955c:	00fe03fc ff01fe00 00c07f00 80ffe03f     ............?...
   1956c:	0f00f01f 03e03ffc ff0700fe ff00f0df     .....?..........
   1957c:	ff7f00c0 fc1f00f8 feff0700 80ff0300     ................
   1958c:	00ff7f00 00f87f00 0080ff07 0fc0ff0f     ................
   1959c:	0100c0ff ffffffff 3f0000fc ffffffff     ...........?....
   195ac:	ff070080 f8ffffff ff7f0000 80ffffff     ................
   195bc:	ffff0700 00f0fffc f8ff7f00 0000ff0f     ................
   195cc:	01e0ff01 000080ff 1f000000 000000e0     ................
   195dc:	f8010000 00000000 0c1c0000 c7031c9e     ................
   195ec:	fcffffff ffff0000 00f8ffff ffffff1f     ................
   195fc:	ff03c0ff fcffffff ffff8f00 01fcffff     ................
   1960c:	ffffffff c03fc0ff fc7f0000 0000f807     ......?.........
   1961c:	ff80ff03 1f000000 00e01ff8 03ff0100     ................
   1962c:	000000fc 807fe01f fe030000 0000fe19     ................
   1963c:	3ff80700 010000c0 00f807ff c13f0000     ...?..........?.
   1964c:	0000e01f fc03ff01 7f000000 00807fc0     ................
   1965c:	0ff83f00 3f0000f0 ffff01fe 80ffffff     .?.....?........
   1966c:	ffffff3f ff07e0ff f8ffffff ffffff00     ?...............
   1967c:	1f00fcff feffffff ffff0300 0000feff     ................
   1968c:	ffffff7f f00f0000 00f03f00 0100fe01     .........?......
   1969c:	3f0080ff f81f00c0 00f80700 0080ff01     ...?............
   196ac:	1f0000ff e01f00f0 00ff0100 0000fc03     ................
   196bc:	7f00f01f ff030080 00f00f00 01e03f00     .............?..
   196cc:	030000fe c03f00fe e07f0000 0000f807     ......?.........
   196dc:	1f01fc07 0f0000e0 00fc03f8 80ff0000     ................
   196ec:	0000807f f00ff81f ff010000 00c03f02     .............?..
   196fc:	07fe0300 000000f8 00ffe03f fe070000     ........?.......
   1970c:	0000e01f 7fc47f00 00000080 00fe91ff     ................
   1971c:	ff010000 0000c03f 0bf01f00 70fb13df     ....?..........p
   1972c:	c0ff0100 1f000000 0000fcff ffffff00     ................
   1973c:	ff030080 00e0ffff ffffff07 ff0f00f0     ................
   1974c:	00f8ffff ffffff1f fe3f00fc 00fe3f00     ..........?..?..
   1975c:	0700f07f c07f00ff 80ff0100 000080ff     ................
   1976c:	e01f88ff f80f0000 0000c03f c03ff807     ........?.....?.
   1977c:	fd070000 0000f827 f8877f00 00000000     ....'...........
   1978c:	0000fc07 fc030000 00000000 0000fe03     ................
   1979c:	ff030000 00000080 00e0ff01 ff010000     ................
   197ac:	000000fe c0ffff00 7f000000 0000feff     ................
   197bc:	ffff3f00 0f0000c0 00fcffff ffff0700     .?..............
   197cc:	000000ff c0ffffff ff3f0000 0000f0ff     ..........?.....
   197dc:	f8ffff03 3f000000 0000fcff feff0300     .......?........
   197ec:	00000000 0000ff7f ff0f0000 00000000     ................
   197fc:	0080ff03 ff000000 00000080 00807f00     ................
   1980c:	7f000000 0000e0df fce37f00 07000000     ................
   1981c:	0000fefb 3ffc0700 000000c0 00e03fff     .......?.....?..
   1982c:	3fff0000 010000e0 00f01ffe 1ffe0100     ...?............
   1983c:	030000f8 00fc0ffe 0ffc0700 0f0000ff     ................
   1984c:	c0ff07fc 03f83f00 ff01f8ff ffff01f0     .....?..........
   1985c:	00e0ffff ffffffff ff7f00c0 0080ffff     ................
   1986c:	ffffff1f ff070000 0000fcff e0ffff01     ................
   1987c:	0f000000 0c0000ff 4d03081e ffffffff     ...........M....
   1988c:	00d0ffff 0000ff00 0f00000d d00000f0     ................
   1989c:	00ff0000 00000d00 0000f00f ff0000d0     ................
   198ac:	000d0000 00f00f00 0000d000 0a0000ff     ................
   198bc:	f00f0000 9e0b0000 ffcdfb9f 03000000     ................
   198cc:	00c07fff dfff0000 000000f0 00fcf73f     ............?...
   198dc:	fd0f0000 000000ff c07fff03 ff000000     ................
   198ec:	0000807f f02fff03 ff000000 0000e01f     ....../.........
   198fc:	e03ffe03 fc070000 0000c03f c07ff01f     ..?.....?.......
   1990c:	e03f0000 0000c07f c0ff80ff 00ff0300     ..?.............
   1991c:	1f00e0ff f8ff01fc 01f0ff01 ffffffff     ................
   1992c:	ffff01e0 0180ffff fcffffff ffff0000     ................
   1993c:	0000f0ff 80ffffff ff3f0000 000000fc     ..........?.....
   1994c:	0080ff07 00de0d00 00f87703 0f000000     .........w......
   1995c:	0080fff8 fe030000 0000807f 7ffc0300     ................
   1996c:	000000c0 c03ffc07 07000000 00c03ffc     ......?......?..
   1997c:	f8070000 0000e03f 1ff80f00 000000e0     ....?...........
   1998c:	f01ff00f 1f000000 00f00ff0 f01f0000     ................
   1999c:	0000f00f 0fe01f00 000000f8 f807e03f     ............?...
   199ac:	3f000000 00f807c0 c07f0000 0000fc03     ...?............
   199bc:	03c07f00 000000fc fe01807f ff000000     ................
   199cc:	c03f0081 e01f0000 00e01f00 00e03f00     ..?..........?..
   199dc:	0000e01f 0f00c03f 7f0000f0 fe0120c0     ....?........ ..
   199ec:	f00f0000 00ff0000 00f01f00 0000ff00     ................
   199fc:	0000e01f 1f00007f 0f0004e0 f80700f0     ................
   19a0c:	f8070000 00f80f00 00f80700 0000f00f     ................
   19a1c:	0f00f803 030000f0 f01f00fc 3f008000     ...............?
   19a2c:	00fc0380 c03f0000 0000f807 07c01f00     ......?.........
   19a3c:	000000f8 f80fe01f 01001000 00fe01fc     ................
   19a4c:	fe010000 0000fc03 03fe0000 000000fc     ................
   19a5c:	fc07fe00 00000200 00ffe00f 0f000000     ................
   19a6c:	0000fef1 fe000040 0800c03f ef0f0000     ....@...?.......
   19a7c:	000000f0 e0ef0f00 00000100 00fcff00     ................
   19a8c:	00002000 0000ff0f 00008004 0000c0ff     . ..............
   19a9c:	7f000000 14000080 3705045e 000000f8     ........^..7....
   19aac:	0000e0ff 00fffd03 f83f0000 ff010000     ..........?.....
   19abc:	0000c03f 0000fe0f fea17f00 ff000000     ?...............
   19acc:	030000f8 00c07ffc 00fe3f00 0fff0100     .........?......
   19adc:	1f0000f0 000080ff 807f907f fefe0000     ................
   19aec:	fc030000 0000f00f 0080bf3f fc03ff01     ........?.......
   19afc:	ef1f0000 7f0000f0 00e01f88 803ffe00     ..............?.
   19b0c:	03fc0300 7f0000f8 0000e08f e01f12ff     ................
   19b1c:	3ff80300 f00f0080 0100f803 00f00ffe     ...?............
   19b2c:	1f20fc03 e00f00e0 3f00803f 00f803c0     .. .....?..?....
   19b3c:	e00ff807 00f00f00 fc0100fe 0300fc01     ................
   19b4c:	f80710fc 0fe00f00 c03f00e0 0700fe00     ..........?.....
   19b5c:	00fc03f8 3f00f00f 00fc0180 fc03007f     .......?........
   19b6c:	00f00f00 c01f007f 0300fe01 c03f00fc     ..............?.
   19b7c:	7f00f807 e00f8080 1f00fc01 00fc03c0     ................
   19b8c:	7f00fc03 01f00700 7f0000fe 00c03f00     .............?..
   19b9c:	807f00fe 0fc01f00 803f00e0 0700e01f     ..........?.....
   19bac:	00f803f0 f807f00f 01fc0100 fc0300fe     ................
   19bbc:	0000fc01 007f803f ff007f00 e00f0000     ....?...........
   19bcc:	1f00c01f 00c03fe0 f007f803 0ff80700     .....?..........
   19bdc:	fe0000e0 0000f803 00f803fe fec01f00     ................
   19bec:	813f0000 070000fe 00803ff0 807ff00f     ..?......?......
   19bfc:	1ffc0100 fc0300e0 0000c01f 00f0073f     ............?...
   19c0c:	f0077f00 fc010001 0300803f 00807ffc     ........?.......
   19c1c:	c01f7f00 1f7f0000 0f0000c0 0000f0c7     ................
   19c2c:	00f0c71f fcf10300 fb070000 000000fc     ................
   19c3c:	0000fffe 00fffe01 bf3f0000 3f000080     ..........?....?
   19c4c:	000280bf 00fcfd00 fcfd0100 3f000000     ...............?
   19c5c:	000000fe 0400ff3f f0ff0080 ff010000     ....?...........
   19c6c:	000000f0 0000f83f 00fc3f00 ff000008     ....?....?......
   19c7c:	010000c0 0000c0ff 00e03f00 f03f0000     .........?....?.
   19c8c:	de0d0000 7f800300 030000e0 f03f00ff     ..............?.
   19c9c:	fe070000 00f01f00 00fc0700 0000f81f     ................
   19cac:	0f00fc0f 1f0000fc fc0700f8 f03f0000     ..............?.
   19cbc:	00fe0700 00f03f00 0000ff03 0100e07f     .....?..........
   19ccc:	ff0000ff ff0000c0 80ff0080 c0ff0000     ................
   19cdc:	0080ff01 03e07f00 000000ff fe03e03f     ............?...
   19cec:	3f000000 00fe07f0 f81f0000 0000fc0f     ...?............
   19cfc:	0ff80f00 000000f8 f81ffc0f 07000000     ................
   19d0c:	00f03ffe fe030000 0000e03f 7fff0300     .?......?.......
   19d1c:	000000e0 c0ffff01 00000000 0080ffff     ................
   19d2c:	7f000000 000080ff ff7f0000 00000000     ................
   19d3c:	00fe3f00 00000a00 0080ff03 07000000     .?..............
   19d4c:	0100c0ff ff010000 000000fc feff0300     ................
   19d5c:	00000000 00ffff07 07000000 0000fffd     ................
   19d6c:	fd0f0000 000080ff fff81f00 000000c0     ................
   19d7c:	c07ff03f 3f000000 00e03ff0 e07f0000     ?......?.?......
   19d8c:	0000f03f 1fc0ff00 000000f8 f80f80ff     ?...............
   19d9c:	ff010000 00fc0f80 00ff0300 0000fe07     ................
   19dac:	0300fe03 070000fe ff0300fe fc0f0000     ................
   19dbc:	80ff0100 00f80f00 0080ff00 0000f81f     ................
   19dcc:	3f00c0ff 7f0000f0 e03f00e0 e03f0000     ...?......?...?.
   19ddc:	00e07f00 00f01f00 0000c0ff ff01f81f     ................
   19dec:	0f000080 80ff01fc fc070000 0000ff03     ................
   19dfc:	07fe0700 000000fe fc07ff03 01000000     ................
   19e0c:	00fc0fff ff010000 0000f89f c0ff0000     ................
   19e1c:	03009e0d 0000fe67 e77f0000 000000fc     ....g...........
   19e2c:	fc87ff00 03000000 00fc0ffe fc0f0000     ................
   19e3c:	0000f80f 0ff01f00 000000f8 f81fc07f     ................
   19e4c:	ff000000 00f01f80 00fe0300 0000f01f     ................
   19e5c:	3f00f80f 1f0000f0 e03f00f0 c07f0000     ...?......?.....
   19e6c:	00e03f00 0000ff01 0300e07f 7f0000fe     .?..............
   19e7c:	f80f00c0 c07f0000 00e01f00 00c0ff00     ................
   19e8c:	0000c07f ff0180ff ff000000 00fc0380     ................
   19e9c:	80ff0100 0000f80f 3f00ff01 010000e0     ...........?....
   19eac:	807f00ff ff030000 0000ff01 03fe0300     ................
   19ebc:	000000fc f00ffe03 07000000 00e03ffe     .............?..
   19ecc:	fc070000 0000807f fefd0700 00000000     ................
   19edc:	00fcff0f 0f000000 0100f0ff ff010000     ................
   19eec:	000000f8 e0ff0100 00800000 00f03f00     .............?..
   19efc:	00003400 0000f807 0100000d 030000fe     .4..............
   19f0c:	7f000040 b0000080 e01f0000 0b000000     @...............
   19f1c:	3d0308de ffffff0f 0000fcff fc0f0000     ...=............
   19f2c:	00000000 0000f81f f03f0000 00000000     ..........?.....
   19f3c:	0000e17f f81f0000 00000000 0000f03f     ............?...
   19f4c:	e07f0000 00000000 0000c0ff c0ff0100     ................
   19f5c:	01000000 000080ff 00ff0300 07000000     ................
   19f6c:	002000fe 80ff0100 03000000 000000ff     .. .............
   19f7c:	00fe0700 0f000000 000400fc 00ff0300     ................
   19f8c:	07000000 000000fe 00fc0f00 1f000000     ................
   19f9c:	000000f8 00f83f00 3f000000 000000f0     .....?.....?....
   19fac:	00e07f00 ff000000 800000c0 00f03f00     .............?..
   19fbc:	7f000000 000000e0 00c0ff00 ff010000     ................
   19fcc:	10000080 00e07f00 ff000000 000000c0     ................
   19fdc:	0080ff01 ff030000 02000000 00c0ff00     ................
   19fec:	ff010000 00000080 0000ff03 ff400000     ..............@.
   19ffc:	000000c0 0080ff01 ff030000 00000000     ................
   1a00c:	0000fe07 ff0d0000 ffffffff 97e603fe     ................
   1a01c:	ffff7d79 f837c0bf df00ff06 03fc1be0     y}....7.........
   1a02c:	f06f807f bf01fe0d f8ff37c0 0104de05     ..o......7......
   1a03c:	0100fc78 0f00c02f fc2400e0 c08f0400     x.../.....$.....
   1a04c:	00e00f00 0000fc90 0f1000fe e00f00c0     ................
   1a05c:	00fc4002 4000fe00 0f00c00f fc0009e0     .@.....@........
   1a06c:	01fe0000 24c00f20 0000fc00 0f8004fe     .... ..$........
   1a07c:	fc0090c0 12fe0000 40c20f00 0000fc00     ...........@....
   1a08c:	0f0048fe fc0000c9 00fe0000 e6037e00     .H...........~..
   1a09c:	ff7d798f f41fa0ff 7f80fe03 01fa0fd0     .y}.............
   1a0ac:	e83f40ff ff00fd07 fff71fa0 089008f8     .@?.............
   1a0bc:	1f0060e2 00000180 800400ff 1000fe07     .`..............
   1a0cc:	00fc3f00 f8f90140 3f7f0000 f8012080     .?..@......?. ..
   1a0dc:	0f80007e 0300fcc0 00c01ff8 00f8017e     ~...........~...
   1a0ec:	803fc01f f003f003 0fc01f20 00f003e0     ..?..... .......
   1a0fc:	00fe00fc 801fc01f fe40f801 07f10700     ..........@.....
   1a10c:	e00f00f0 fc0000fc 0300f087 0000fcf9     ................
   1a11c:	030c803f ffed7aff ffffffff 918503ff     ?....z..........
   1a12c:	07fec789 07fc07fe 00f907f8 00fe00fe     ................
   1a13c:	00f800fc 0f170af8 0f00e0fa 000000ff     ................
   1a14c:	00f8ff7f ffffff00 ffff0100 ff03c0ff     ................
   1a15c:	03f0ffff fcffffff ffffff01 e0ff01ff     ................
   1a16c:	ff80ff07 c0ff0080 1f0080ff 00807ff0     ................
   1a17c:	807ff807 3ffc0300 fe0000c0 0000c003     .......?........
   1a18c:	0000247f 00f00700 f80f0000 7f000000     .$..............
   1a19c:	1f0000fc 0300feff 00ffffff ffffff1f     ................
   1a1ac:	ffff3f80 ff3fc0ff 3fe0ffff f0e7ffff     .?....?....?....
   1a1bc:	03ffff3f c0ff3ff8 f83ffc01 1ffe0000     ?....?....?.....
   1a1cc:	7f0000f0 0000e00f 00f08f3f fec83f00     ........?....?..
   1a1dc:	fc030000 0300007f 00803ffe e01fff03     .........?......
   1a1ec:	8fff0300 ff0300f0 0700fec3 c0ffe1ff     ................
   1a1fc:	fff0ff1f f8ffffff fdffff3f ffff0ffe     ........?.......
   1a20c:	ff03fffc 803ffcff 1ff8ffff f0ff1fc0     ......?.........
   1a21c:	ff01f007 09000080 edfa9b5e 000000fe     ........^.......
   1a22c:	0000ff06 00fc0100 f0070000 1f00f00f     ................
   1a23c:	00f8ffc0 f8ff0f7f ff7ffc01 fff307f0     ................
   1a24c:	df1fe0ff 7fc0ffff 81ffffff ff07feff     ................
   1a25c:	07c0ff07 00fe1ffe f07ff80f fff11f00     ................
   1a26c:	c73f0080 7f0000fc 0100f01f 00f09ffe     ..?.............
   1a27c:	f06f7f00 eb1f0000 0f0000f8 0000e0ef     ..o.............
   1a28c:	00f8cf7f f09f3f00 7ffe0100 f10700c0     .....?..........
   1a29c:	3f0080ff 0100ffc7 00fe1ffe fc7ff80f     ...?............
   1a2ac:	ffc17f00 07ff0ffc f8fffff7 ffffdf1f     ................
   1a2bc:	ff3f7fc0 7ffc01fe f007f0ff 1f00ffff     ..?.............
   1a2cc:	00f8ffc0 00ff0000 0f970900 0f00a0fa     ................
   1a2dc:	000000f8 0000ffff 80ffff07 ffff3f00     .............?..
   1a2ec:	ffff0080 ff0380ff 0f80ffff 80ffffff     ................
   1a2fc:	ff07fc3f 03e0ff80 00ff01ff fc07ff01     ?...............
   1a30c:	0ffe0100 fc0100f0 0300c01f 00807ffc     ................
   1a31c:	00fef807 3f840700 01000080 0000c0bf     .......?........
   1a32c:	00f05f00 f0070000 0f1e0000 3f0000e0     ._.............?
   1a33c:	0000c09f 00c03fff 803ffc01 7ff80300     .....?....?.....
   1a34c:	f00f0080 3f0080ff 0080ffc0 80ff81ff     .......?........
   1a35c:	ff01fe03 01fc3fe0 f0ffffff ffffff01     .....?..........
   1a36c:	ffff01c0 ff0100ff 0000fcff 00e0ffff     ................
   1a37c:	80ff7f00 f01f0000 5e090000 00edfa8f     ...........^....
   1a38c:	fe030000 01000080 000000fc 1f00f007     ................
   1a39c:	03c01fe0 007fe0ff fce1ff3f c7ffff01     ........?.......
   1a3ac:	ffff1ff0 ff7fc09f ff037fff 1ffcffff     ................
   1a3bc:	f0ff0ffc ff07c0ff 0f00fec3 00f01fff     ................
   1a3cc:	807ffc1f fcf13f00 cf7f0000 ff0100f0     .....?..........
   1a3dc:	0000f097 0080bf7f c0bfff01 af7f0000     ................
   1a3ec:	3f0000e0 0000f8cb 00f0cf3f c01fff01     ...?....?.......
   1a3fc:	7ffc0700 f03f0080 ff0100ff 0f00fec3     ......?.........
   1a40c:	00fc07ff fc1ffc7f 3ff0ff07 c0dfffff     ...........?....
   1a41c:	7fffff7f f9ffff00 ffff01fc ff03f0c7     ................
   1a42c:	03c01ffe 007fe0ff 0000fe01 fa0f170a     ................
   1a43c:	fc0f00e0 3f000000 0000c0ff 00f8ff7f     .......?........
   1a44c:	ffff7f00 ffff0000 ff00c0ff 00f0ffff     ................
   1a45c:	fcffffff 0ff0ff00 c07f00ff 7f80ff00     ................
   1a46c:	e01f00c0 0700c03f 00c03ff0 c01ffc01     ....?....?......
   1a47c:	43fe0000 070000f8 00003ff4 803f3f00     ...C.....?...??.
   1a48c:	f71f0000 ffffffff 0080bffe fc250000     ..............%.
   1a49c:	00000000 000000ff 00c03fe0 e01fff00     .........?......
   1a4ac:	0fff0000 ff0000f8 0000ff83 c0ff80ff     ................
   1a4bc:	7fc0ff00 c0ff03fc ffffff1f ffff07c0     ................
   1a4cc:	ff01e0ff 00e0ffff c0ffff7f ffff0f00     ................
   1a4dc:	ff0100c0 000080ff 0000fc0f 01881e06     ................
   1a4ec:	f03f0080 00fc7f00 1f00ffff ff03f0ff     ..?.............
   1a4fc:	00ff03fe 0dc03f80 df00f803 03cdffff     .....?..........
   1a50c:	3fd000f8 f8030d80 803fd000 00f8030d     ...?......?.....
   1a51c:	00803f80 728f5f09 e01f00e0 ff030000     .?..._.r........
   1a52c:	3f007ff0 01fce1ff f0e7ffff dfffff1f     ...?............
   1a53c:	ffff1fe0 e0ffe0ff fe87ff3f 1ffe3f00     ........?....?..
   1a54c:	f87f00f0 ff0080ff 0100fce3 00e08fff     ................
   1a55c:	807ffe03 bffc0f00 ff030080 0000807f     ................
   1a56c:	00c05fff f0977f00 9f7f0000 fe0300e0     ._..............
   1a57c:	0f00803f 0000fff8 00fce37f f887ff03     ?...............
   1a58c:	1ffe1f00 f8ff00f8 ff0ff83f ffff7fe0     ........?.......
   1a59c:	ff1fc0ff 1fc0ffff 007ffeff fcf1ff3f     ............?...
   1a5ac:	07ff3f00 e01f00f0 0000e41f 00e00f00     .?..............
   1a5bc:	1e3f0000 fc010000 0700007f 0000fcf1     ..?.............
   1a5cc:	00f8c73f f01ffe00 3ff80700 e07f00e0     ?..........?....
   1a5dc:	ff0fe0ff ffffff01 ffff07f8 ff0fc0ff     ................
   1a5ec:	1f00feff 00f0ffff 80ffff1f f8ff1f00     ................
   1a5fc:	fe0f0000 9e080000 feed0218 37000000     ...............7
   1a60c:	000000f8 0000007f f00fe00f ff0ffc01     ................
   1a61c:	ff873fc0 fff107fc 7ffee0ff df1ffeff     .?..............
   1a62c:	ffe3ffff 7ffcffff cfff03ff f91f80ff     ................
   1a63c:	ff00c0ff 1f00f03f 0080ffe8 00fce73f     ....?.......?...
   1a64c:	e0df7f00 7fff0100 fd070080 1f0000fe     ................
   1a65c:	0000f8f7 00007f7f de01e00f ff2d0118     ..............-.
   1a66c:	ff0620a0 7ffffbdf 1ffffdef 736704c0     . ............gs
   1a67c:	3f003d71 000200e8 7f001a00 80fe03d0     q=.?............
   1a68c:	ff00f41f 00fd07a0 fe01e83f 07e00f40     ........?...@...
   1a69c:	00fc01f8 f8ff43ff ff87fcff 3fc0ffc3     .....C.........?
   1a6ac:	1e0900c0 febd0218 0d000000 000000fe     ................
   1a6bc:	0000fe08 00f00700 803ffe03 fce13f00     ..........?..?..
   1a6cc:	0ffe0300 e07f00e0 fe07007f 7f00f803     ................
   1a6dc:	07c01fe0 00fe00fe f007e07f 3f00fe07     ...............?
   1a6ec:	01e07f80 00fe07fc e07fe00f fe077f00     ................
   1a6fc:	7ff80300 c71f00e0 fe0000fe 0700e07f     ................
   1a70c:	0000fef7 00f0ff3f f8ff3f02 ffff0100     ....?....?......
   1a71c:	ff0f00e0 7f0080ff 0300fcf3 00f00fff     ................
   1a72c:	c07ff01f fe01ff00 07f00700 803f00f8     ..............?.
   1a73c:	fc01e03f 0f00ff00 00fc03e0 f01f007f     ?...............
   1a74c:	7f00f803 01c01f80 00fe00fe f007f807     ................
   1a75c:	3fe03f00 01ff0080 fc0300fc 1f00e00f     .?.?............
   1a76c:	00007ff0 00f8837f c01ffe01 fef80f00     ................
   1a77c:	c73f0000 ff0000f0 0700803f 18de01fc     ..?.....?.......
   1a78c:	bfff2d01 dffffef7 ef7ffffb d60efefa     .-..............
   1a79c:	00700498 0100f807 037f00fe ff00f0ff     ..p.............
   1a7ac:	7ff007fc ff3f80ff ff1f7fe0 ffff07fc     ......?.........
   1a7bc:	fffff307 f8ffffe0 ffff7f7f c7ffff1f     ................
   1a7cc:	f3fffff7 7ffcffff ffff03ff ffe7ff80     ................
   1a7dc:	e0ff0f80 f07ffe03 00fc7f00 00fee71f     ................
   1a7ec:	0080ff03 00c07fff 0f00f03f 0100fcf7     ........?.......
   1a7fc:	7f0000fe 0300f08f fe0000fc 3f0000ff     ...............?
   1a80c:	fb0f0080 7f0000fc f71f0000 fe0000f8     ................
   1a81c:	ef3f0000 fc0100f0 df7f0000 f80300e0     ..?.............
   1a82c:	fefe0000 803f0000 08e00f00 e0029896     ......?.........
   1a83c:	00f80700 e0ff07fe ffffc31f fffff803     ................
   1a84c:	ff3f7ff0 ffef0fff fffff1ff ff3ffeff     ..?...........?.
   1a85c:	ffe7ff81 fffc0f80 9f7f00e0 fc0f00f8     ................
   1a86c:	1f00c07f 0000fef3 00f0ef3f c0bfff00     ........?.......
   1a87c:	fffe0300 fb0f0000 3f0000fc 070080bf     ...........?....
   1a88c:	0f170af0 0f00e0fa 000000fc 00c0ff3f     ............?...
   1a89c:	f8ff7f00 ffff0000 ff0000ff 00c0ffff     ................
   1a8ac:	f0ffffff ffffff00 f0ff00fc 7f00ff0f     ................
   1a8bc:	80ff01e0 3f00c07f 00c07fe0 f807f90f     .......?........
   1a8cc:	877f0000 1f0000f8 00007fe9 807ffe00     ................
   1a8dc:	ef7f0000 030000f0 0000fffc c0bf3f00     .............?..
   1a8ec:	e13f0000 030000fc 0000fef8 807ffc03     ..?.............
   1a8fc:	83fe0100 3f0000fc 0000ffc1 c07fe03f     .......?....?...
   1a90c:	1fe03f00 f07f00f8 ff00ff0f ffff03f0     .?..............
   1a91c:	ff00f0ff 00f0ffff f0ffff3f ffff0f00     ........?.......
   1a92c:	ff0100f0 0000e0ff 00c0ff3f 00ff0300     ........?.......
   1a93c:	1b5f0900 0f00e07a c01f00f0 7f00f8ff     .._.z...........
   1a94c:	01f8ff0f f0ff7ffc fffff307 ffcf1ff0     ................
   1a95c:	7f7fe0ff ff81ffff 07ff07fe fe07e0ff     ................
   1a96c:	0f00fe1f 00f07ff8 80fff11f fec73f00     .............?..
   1a97c:	1f7f0000 fe0100f0 0300c07f 00c03ffa     .............?..
   1a98c:	00fffc01 fffe0300 fe010000 0000807f     ................
   1a99c:	0000fefe 80fffc07 fff90300 e71f0000     ................
   1a9ac:	7f0000fc 0300f81f 00f07ffc e0ffe11f     ................
   1a9bc:	ff87ff00 1ffc07c0 f07fc0ff ffffff7f     ................
   1a9cc:	fffffd81 fff707fc cf1fe0ff 7f00ffff     ................
   1a9dc:	01f0ff0f 00ff1ffc e00ff007 00f83700     .............7..
   1a9ec:	fc1b0000 08000000 000000fe 0f5f0900     .............._.
   1a9fc:	1f00e07a 030000c0 007fe0ff fcc1ff3f     z...........?...
   1aa0c:	c7ffff03 ffff1ff0 ffffc09f ff037ffe     ................
   1aa1c:	1ffcfdff f0ff0ffc ff0fc0ff 0f00fec3     ................
   1aa2c:	00f01fff 807ffc1f fcf33f00 cfff0000     .........?......
   1aa3c:	ff0100f0 0700803f 00c01ffe 00fefe01     ....?...........
   1aa4c:	fffe0700 fe010000 000080bf 00e02fff     ............./..
   1aa5c:	c03fff00 7ffc0700 f11f0000 ff0000fe     ..?.............
   1aa6c:	0700fcc3 00f80fff f01ffc3f 7ff0ff01     ........?.......
   1aa7c:	c0ff1ff8 ffffffff fdffff01 ffff03fc     ................
   1aa8c:	ff07f0f7 07c09fff 007ff8ff fcc1ff07     ................
   1aa9c:	07f80300 000000fd 0080fe03 00fe0100     ................
   1aaac:	fe000000 0198d605 073f00c0 e3e7ffe1     ..........?.....
   1aabc:	ffe7f7ff e7ffe7f7 ffe7ffef c1ffc7ff     ................
   1aacc:	4700ffc7 ff0800fe e05f0180 00f83700     ...G......_..7..
   1aadc:	0000ff06 1b00e0df fc0100fc 17090000     ................
   1aaec:	00a0fa0f 0000e07f 00f0ff1f e0ffff03     ................
   1aafc:	ffff7f00 ffff07c0 ff0f04ff ff80ffff     ................
   1ab0c:	07fe0fe0 f01f00f8 7f00807f 0100f883     ................
   1ab1c:	00c01ffe 00fef007 f0073c00 3f000000     .........<.....?
   1ab2c:	010000c0 000000ff 0000ff07 00ff3f00     .............?..
   1ab3c:	ffff0100 ff070080 1f00c0ff 00c0ffff     ................
   1ab4c:	80ffff7f ffffff01 ffff0300 ff0300fc     ................
   1ab5c:	0300f0ff 00c0ffff 00ffff03 f8ff0100     ................
   1ab6c:	ff000000 010000e0 000000ff 0078f807     ..............x.
   1ab7c:	c0df1f00 fffe0000 f3070000 3f0000f8     ...............?
   1ab8c:	0300e09f 0080fff8 00fec33f fe1ffe03     ........?.......
   1ab9c:	7fe0ff00 01ffffff f0ffffff ffffff07     ................
   1abac:	ffff1f00 ff7f00f0 ff0000fe 0000c0ff     ................
   1abbc:	0500f07f 70f90b5e 06008000 00780000     ....^..p......x.
   1abcc:	070de007 f80305f0 fdff7f03 d000fea0     ................
   1abdc:	3f68007f c01f3480 01007f00 fc0700fe     ..h?.4..........
   1abec:	d0ff1f00 1fe0ff07 ff3fc0ff 00fc3f00     ..........?..?..
   1abfc:	9608e03f feedfa9b f71f0000 7f0000f8     ?...............
   1ac0c:	0100e0df 00807fff 00f0f707 c03fff00     ..............?.
   1ac1c:	7ffc0700 ef3f0080 fc0f00f8 ff0300ff     ......?.........
   1ac2c:	ff01f89f ff80fff3 ffff3ffe ffffc7df     .........?......
   1ac3c:	ff7ff8f3 ff077ffc 7fe00fff 03fcc1ff     ................
   1ac4c:	803fe0ff 0000f00f 0204d609 0000f897     ..?.............
   1ac5c:	007ff80f 7ffc0100 fd030080 0000f007     ................
   1ac6c:	00f8077f 7f20ff00 c01f0000 3f00807f     ...... ........?
   1ac7c:	00f007c4 f807f007 03f00f00 e00f00f8     ................
   1ac8c:	0f00fc03 00fc03e0 fc01e01f 80c01f00     ................
   1ac9c:	f807c03f 07c01f00 e01f00f0 0f00f00f     ?...............
   1acac:	00f00fe0 e00fe00f 1ff00f00 f00700e0     ................
   1acbc:	0700e01f 00c01ff0 c03ff807 077f0010     ..........?.....
   1accc:	7f0000f0 0002f08f 00fcf107 fcfb0700     ................
   1acdc:	7f004000 0000007f 0900ff7f c0ff0700     .@..............
   1acec:	7f000001 000000f0 2000f03f 00fc0700     ........?.. ....
   1acfc:	00d60e00 00feb803 00c07f00 00f0ef0f     ................
   1ad0c:	0100fc07 00007ffe 1f00c07f 0f00f0c7     ................
   1ad1c:	fc0100fe ff00807f d03f00e0 ff01007f     ..........?.....
   1ad2c:	077f00c0 fe1f00f0 3ff00f00 e0ff0380     ...........?....
   1ad3c:	7f20fe00 c0ef0700 f803fc01 00fe7e00     .. ..........~..
   1ad4c:	f007843f 00fcfd01 f007087f 01f8f103     ?...............
   1ad5c:	007f00fc 1fc01f7f 07f803c0 f803fcf1     ................
   1ad6c:	0ff00710 f007f8c1 3ff00720 c01ff883     ........ ..?....
   1ad7c:	f0037f00 00fc813f 013ff807 40803ff8     ....?.....?..?.@
   1ad8c:	03fef007 00007ff8 3fe00f7f 0300e08f     ...........?....
   1ad9c:	f801fcf8 3f0000fe cf1fc09f f90300e0     .......?........
   1adac:	fcfc01fc 9f1f0000 c0df1fc0 f8fd0100     ................
   1adbc:	00fcfd00 80df1f00 0880df0f 00ff1f00     ................
   1adcc:	0000ff1f 00f0ff01 2001f0ff 01c0ff01     ........... ....
   1addc:	0000c0ff 1f00fc0f 002000f8 1f00f01f     .......... .....
   1adec:	000000f0 fe0100ff 160a0000 fea30204     ................
   1adfc:	f8070000 070000ff 00c03ff8 f01ffc07     .........?......
   1ae0c:	07fc0700 fc0300fc 0300fe01 807f00fc     ................
   1ae1c:	3f00fe03 00fe01e0 fe01f00f 01fc0300     ...?............
   1ae2c:	ff0100ff 0000ff01 00ff807f ffe01f00     ................
   1ae3c:	f80f0000 030080ff 0080fffc 807fff00     ................
   1ae4c:	ff7f0000 1f000080 0000c0ff 01c0ff07     ................
   1ae5c:	f83f0000 01001000 000000ff 00c0ff01     ..?.............
   1ae6c:	e0ff0100 ff010000 000000f8 0000feff     ................
   1ae7c:	80ffff00 bfff0000 7f0000c0 0000f08f     ................
   1ae8c:	00fc877f fec17f00 c07f0000 3f00807f     ...............?
   1ae9c:	00e03fc0 f00fc03f 03e03f00 e03f00fc     .?..?....?....?.
   1aeac:	1f00ff01 807f00e0 1f00e01f 00f01fe0     ................
   1aebc:	f00ff80f 0ffe0300 ff0000f0 0000f80f     ................
   1aecc:	00f8cf3f 09f01f00 7772075f 1f0000f0     ?......._.rw....
   1aedc:	0000e0cf 00f087ff e00f7f00 07fd0300     ................
   1aeec:	fc0100f0 0f00e00f 00f007f2 e00ff007     ................
   1aefc:	07c43f00 c01f00f0 ff00e00f 00f00708     .?..............
   1af0c:	e00f007f 0710fc03 00fc01f0 f00fe00f     ................
   1af1c:	07f00720 e00f00f0 0740c03f 00c01ff0      .......?.@.....
   1af2c:	00ffe00f 7ff00780 c30f0000 070001fc     ................
   1af3c:	0000fcf1 02f0cf0f f0f70700 ff0f0000     ................
   1af4c:	070004c0 0000c0ff 0800ff0f 00ff0700     ................
   1af5c:	fc0f0000 07001000 000000fc 2000f00f     ............... 
   1af6c:	00f00700 c03f0000 1f004000 002400c0     ......?..@....$.
   1af7c:	0000c01f 0000fe00 00f80700 c03f1000     ..............?.
   1af8c:	ff7f0000 3f100000 000000ff 0000f87f     .......?........
   1af9c:	00c0ff01 00fe0700 e00f0000 09000000     ................
   1afac:	8d020456 ffffff3f 000000f0 000080ff     V...?...........
   1afbc:	0000fc07 00e03f00 00ff0100 f80f0000     .....?..........
   1afcc:	0f000010 000000f8 0000c07f 0000fe03     ................
   1afdc:	00f01f00 80ff0000 fc070000 3f000000     ...............?
   1afec:	000000e0 000000ff 0000fc07 00e03f00     .............?..
   1affc:	00ff0100 f80f0000 7f000000 030000c0     ................
   1b00c:	000000fe 0000f00f 00c07f00 00fe0300     ................
   1b01c:	f01f0000 ff000000 07000080 000000fc     ................
   1b02c:	0000e03f 00e03f08 00ff0100 ff1b0000     ?....?..........
   1b03c:	f0ffffff 718be705 f00f00c0 00f03f00     .......q.....?..
   1b04c:	ff00f07f f8ff01f0 00fe7f00 1f00c17f     ................
   1b05c:	f80334e0 007f8006 12e00fb0 0700f803     .4..............
   1b06c:	f00700f8 00f00f00 ff01e03f 80ff01c0     ........?.......
   1b07c:	0100fe01 fe0100fc 80ff0100 00c0ff01     ................
   1b08c:	0f00e03f f00700f0 02f80700 68007f40     ?...........@..h
   1b09c:	000df007 1f6001fe e01f00c0 00e00f00     ......`.........
   1b0ac:	0f00f80f ff00e0ff f87f00f8 00f83f00     .............?..
   1b0bc:	0300f81f 1fa701f8 7fff4d71 fffdf7df     ........qM......
   1b0cc:	fdf7df7f dfdf7fff 8fe70580 00f0c771     ............q...
   1b0dc:	0700fe07 ff0700ff f8ff0880 00fcff00     ................
   1b0ec:	0100fc07 fe0100fc c01fa001 05f80334     ............4...
   1b0fc:	90007f80 0700f007 f80300f8 00fc0300     ................
   1b10c:	0000ff01 7f00e0ff e01f00e0 00e00f00     ................
   1b11c:	7f00e03f e0ff00e0 0300ff01 f80300fc     ?...............
   1b12c:	00f80700 0110f007 3f4003fe f0076880     ..........@?.h..
   1b13c:	01fe000b 00c03f00 ff2380ff e0ff03f0     .....?....#.....
   1b14c:	03c0ff03 ff0380ff 00fc0300 90470a00     ..............G.
   1b15c:	f00700ab 0f000000 010080ff 00f8ff07     ................
   1b16c:	ffffc300 ff710080 3c00f8ff 00ffffff     ......q....<....
   1b17c:	ffff7f3f ffdf3ff8 f7ffffff ffff3ff8     ?....?.......?..
   1b18c:	ff01f8fd 0078feff 1cffff1f ffff0100     ......x.........
   1b19c:	3f000086 0000c1ff 00e0ff03 c01f0000     ...?............
   1b1ac:	ffffff00                                ....

0001b1b0 <init_commands>:
   1b1b0:	8003ef04 00cf0402 ed0530c1 81120364     .........0..d...
   1b1c0:	0085e804 39cb0678 0234002c 0320f702     ....x..9,.4... .
   1b1d0:	020000ea c10223c0 3ec50310 86c70228     .....#.....>(...
   1b1e0:	02483602 b103553a b6041800 02278208     .6H.:U........'.
   1b1f0:	260200f2 0fe01001 0e0c2b31 37f14e08     ...&....1+...N.7
   1b200:	0e031007 e1100009 03140e00 c1310711     ..............1.
   1b210:	0c0f0848 030f3631 001000b1 39494c49     H...16......ILI9
   1b220:	5f313433 3a6e3374 72724520 6e20726f     341_t3n: Error n
   1b230:	4420746f 73692043 746f6e20 6c617620     ot DC is not val
   1b240:	68206469 77647261 20657261 70205343     id hardware CS p
   1b250:	00006e69 39494c49 5f313433 3a6e3374     in..ILI9341_t3n:
   1b260:	65685420 204f4920 736e6970 206e6f20      The IO pins on 
   1b270:	20656874 736e6f63 63757274 20726f74     the constructor 
   1b280:	20657261 20746f6e 696c6176 50532064     are not valid SP
   1b290:	69702049 0000736e 20202020 69736f6d     I pins..    mosi
   1b2a0:	2064253a 6f73696d 2064253a 4b4c4353     :%d miso:%d SCLK
   1b2b0:	2064253a 253a5343 43442064 0a64253a     :%d CS:%d DC:%d.
   1b2c0:	ffffff00                                ....

0001b2c4 <vtable for ILI9341_t3n>:
	...
   1b2cc:	00002509 00005b6d 00002501 00002505     .%..m[...%...%..

0001b2dc <glcdfont>:
   1b2dc:	00000000 4f5b3e00 6b3e3e5b 1c3e6b4f     .....>[O[>>kOk>.
   1b2ec:	1c3e7c3e 3c7e3c18 7d571c18 5e1c1c57     >|>..<~<..W}W..^
   1b2fc:	001c5e7f 00183c18 e7c3e7ff 241800ff     .^...<.........$
   1b30c:	e7ff0018 30ffe7db 0e063a48 29792926     .......0H:..&)y)
   1b31c:	057f4026 7f400705 5a3f2505 5a3ce73c     &@....@..%?Z<.<Z
   1b32c:	1c1c3e7f 1c1c0808 22147f3e 5f14227f     .>......>.."."._
   1b33c:	5f5f005f 017f0906 8966007f 60606a95     _.__......f..j``
   1b34c:	94606060 94a2ffa2 047e0408 7e201008     ```.......~... ~
   1b35c:	08081020 08081c2a 08082a1c 1010101e      ...*....*......
   1b36c:	0c1e0c10 38300c1e 0630383e 060e3e0e     ......08>80..>..
   1b37c:	00000000 5f000000 07000000 14000700     ......._........
   1b38c:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
   1b39c:	00502056 00030708 41221c00 22410000     V P......."A..A"
   1b3ac:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
   1b3bc:	08080800 00000808 20006060 02040810     ........``. ....
   1b3cc:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
   1b3dc:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
   1b3ec:	41314949 07091121 49494936 49494636     II1A!...6III6FII
   1b3fc:	00001e29 00000014 00003440 22140800     ).......@4....."
   1b40c:	14141441 41001414 02081422 06095901     A......A"....Y..
   1b41c:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
   1b42c:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
   1b43c:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
   1b44c:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
   1b45c:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
   1b46c:	0909097f 51413e06 097f5e21 26462919     .....>AQ!^...)F&
   1b47c:	32494949 017f0103 40403f03 201f3f40     III2.....?@@@?. 
   1b48c:	3f1f2040 3f403840 14081463 78040363     @ .?@8@?c...c..x
   1b49c:	59610304 00434d49 4141417f 10080402     ..aYIMC..AAA....
   1b4ac:	41410020 02047f41 40040201 40404040      .AAA......@@@@@
   1b4bc:	08070300 54542000 287f4078 38384444     ..... TTx@.(DD88
   1b4cc:	28444444 28444438 5454387f 08001854     DDD(8DD(.8TTT...
   1b4dc:	1802097e 789ca4a4 0404087f 7d440078     ~......x....x.D}
   1b4ec:	40200040 7f003d40 00442810 407f4100     @. @@=...(D..A.@
   1b4fc:	78047c00 087c7804 38780404 38444444     .|.x.x|...x8DDD8
   1b50c:	242418fc 24241818 087cfc18 48080404     ..$$..$$..|....H
   1b51c:	24545454 443f0404 40403c24 201c7c20     TTT$..?D$<@@ |. 
   1b52c:	3c1c2040 3c403040 28102844 90904c44     @ .<@0@<D(.(DL..
   1b53c:	64447c90 00444c54 00413608 00770000     .|DdTLD..6A...w.
   1b54c:	36410000 01020008 3c020402 3c262326     ..A6.......<&#&<
   1b55c:	61a1a11e 40403a12 54387a20 21595554     ...a.:@@ z8TTUY!
   1b56c:	41795555 78545421 54552141 54204078     UUyA!TTxA!UTx@ T
   1b57c:	0c407955 1272521e 55555539 54543959     Uy@..Rr.9UUUY9TT
   1b58c:	55395954 00585454 417c4500 7d450200     TY9UTTX..E|A..E}
   1b59c:	45010042 29f0407c f0f02924 f0282528     B..E|@.)$)..(%(.
   1b5ac:	4555547c 54542000 0a7c547c 32497f09     |TUE. TT|T|...I2
   1b5bc:	32494949 48484832 484a3232 413a3048     III22HHH22JHH0:A
   1b5cc:	3a7a2141 78204042 a0a09d00 4444397d     A!z:B@ x....}9DD
   1b5dc:	403d3944 3c3d4040 2424ff24 43497e48     D9=@@@=<$.$$H~IC
   1b5ec:	fc2f2b66 09ff2b2f c020f629 03097e88     f+/./+..). ..~..
   1b5fc:	79545420 44000041 4830417d 38324a48      TTyA..D}A0HHJ28
   1b60c:	7a224040 0a0a7a00 190d7d72 29267d31     @@"z.z..r}..1}&)
   1b61c:	26282f29 26292929 404d4830 08083820     )/(&)))&0HM@ 8..
   1b62c:	08080808 2f380808 baacc810 3428102f     ......8/..../.(4
   1b63c:	7b0000fa 14080000 2222142a 08142a14     ...{....*."".*..
   1b64c:	005500aa aa55aaaa 0000aa55 1000ff00     ..U...U.U.......
   1b65c:	00ff1010 ff141414 ff101000 1010ff00     ................
   1b66c:	14f010f0 00fc1414 00f71414 ff0000ff     ................
   1b67c:	1414ff00 14fc04f4 1f101714 101f1010     ................
   1b68c:	1414141f 1010001f 0000f010 101f0000     ................
   1b69c:	1f101010 10101010 000010f0 1010ff00     ................
   1b6ac:	10101010 ff101010 00000010 000014ff     ................
   1b6bc:	00ff00ff 17101f00 04fc0000 171414f4     ................
   1b6cc:	14141710 00f404f4 f700ff00 14141414     ................
   1b6dc:	f7141414 1414f700 10141714 1f101f10     ................
   1b6ec:	f4141414 f0101014 0000f010 001f101f     ................
   1b6fc:	141f0000 fc000000 f0000014 1010f010     ................
   1b70c:	14ff10ff 14ff1414 1f101010 00000000     ................
   1b71c:	ffff10f0 f0ffffff f0f0f0f0 00ffffff     ................
   1b72c:	00000000 0f0fffff 380f0f0f 44384444     ...........8DD8D
   1b73c:	3e2a2a7c 02027e14 7e020606 63027e02     |**>.~.....~.~.c
   1b74c:	63414955 3c444438 207e4004 0206201e     UIAc8DD<.@~ . ..
   1b75c:	9902027e 99a5e7a5 2a492a1c 01724c1c     ~........*I*.Lr.
   1b76c:	4a304c72 30304d4d 30487848 465a62bc     rL0JMM00HxH0.bZF
   1b77c:	49493e3d 017e0049 2a7e0101 2a2a2a2a     =>III.~...~*****
   1b78c:	445f4444 4a514044 44404044 0040514a     DD_DD@QJD@@DJQ@.
   1b79c:	0301ff00 00ff80e0 6b080800 1236086b     ...........kk.6.
   1b7ac:	06362436 060f090f 18180000 10000000     6$6.............
   1b7bc:	40300010 000101ff 1e01011f 171d1900     ..0@............
   1b7cc:	3c3c0012 00003c3c ff000000              ..<<<<......

0001b7d8 <TwoWire::i2c0_hardware>:
   1b7d8:	40048034 00000040 ffff1112 000202ff     4..@@...........
   1b7e8:	10130000 02ffffff 00000002 00000018     ................

0001b7f8 <TwoWire::i2c1_hardware>:
   1b7f8:	40048034 00000080 ffffff1e 000002ff     4..@............
   1b808:	ff1d0000 02ffffff 00000000 00000019     ................

0001b818 <vtable for TwoWire>:
	...
   1b820:	00005e2d 00005df1 00002501 00005ded     -^...]...%...]..
   1b830:	00005da9 00005db5 00005dd5              .]...]...]..

0001b83c <daysInMonth>:
   1b83c:	1e1f1c1f 1f1f1e1f ff1e1f1e              ............

0001b848 <digital_pin_to_info_PGM>:
   1b848:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   1b858:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   1b868:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   1b878:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   1b888:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   1b898:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   1b8a8:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   1b8b8:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   1b8c8:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   1b8d8:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   1b8e8:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   1b8f8:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   1b908:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   1b918:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   1b928:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   1b938:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   1b948:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@
   1b958:	ffff0a0d                                ....

0001b95c <vtable for usb_serial_class>:
	...
   1b964:	00008395 0000838d 00008389 00008385     ................
   1b974:	00008381 0000837d 00008379 00008375     ....}...y...u...

0001b984 <usb_endpoint_config_table>:
   1b984:	15191500                                ....

0001b988 <usb_descriptor_list>:
   1b988:	00000100 1fff8aa0 00000012 00000200     ................
   1b998:	1fff8acc 00000043 00000300 1fff8b28     ....C.......(...
   1b9a8:	00000000 04090301 1fff8ab4 00000000     ................
   1b9b8:	04090302 1fff8b10 00000000 04090303     ................
   1b9c8:	1fff8b2c 00000000 00000000 00000000     ,...............
   1b9d8:	00000000                                ....

0001b9dc <_global_impure_ptr>:
   1b9dc:	1fff8b48 49534f50 ffff0058              H...POSIX...

0001b9e8 <zeroes.7256>:
   1b9e8:	30303030 30303030 30303030 30303030     0000000000000000
   1b9f8:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   1ba08:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   1ba18:	00000000 33323130 37363534 62613938     ....0123456789ab
   1ba28:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   1ba38:	ffff0030                                0...

0001ba3c <blanks.7255>:
   1ba3c:	20202020 20202020 20202020 20202020                     

0001ba4c <_ctype_>:
   1ba4c:	20202000 20202020 28282020 20282828     .         ((((( 
   1ba5c:	20202020 20202020 20202020 20202020                     
   1ba6c:	10108820 10101010 10101010 10101010      ...............
   1ba7c:	04040410 04040404 10040404 10101010     ................
   1ba8c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1ba9c:	01010101 01010101 01010101 10101010     ................
   1baac:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1babc:	02020202 02020202 02020202 10101010     ................
   1bacc:	00000020 00000000 00000000 00000000      ...............
	...
   1bb4c:	ffffff00 69666e49 7974696e 00000000     ....Infinity....
   1bb5c:	004e614e                                NaN.

0001bb60 <__mprec_tens>:
   1bb60:	00000000 3ff00000 00000000 40240000     .......?......$@
   1bb70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1bb80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1bb90:	00000000 412e8480 00000000 416312d0     .......A......cA
   1bba0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1bbb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1bbc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1bbd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1bbe0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1bbf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1bc00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1bc10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1bc20:	79d99db4 44ea7843                       ...yCx.D

0001bc28 <p05.6085>:
   1bc28:	00000005 00000019 0000007d ffffffff     ........}.......

0001bc38 <__mprec_bigtens>:
   1bc38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1bc48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1bc58:	7f73bf3c 75154fdd                       <.s..O.u

0001bc60 <_init>:
   1bc60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc62:	bf00      	nop
   1bc64:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1bc66:	bc08      	pop	{r3}
   1bc68:	469e      	mov	lr, r3
   1bc6a:	4770      	bx	lr

0001bc6c <__init_array_start>:
   1bc6c:	0000bc05 	.word	0x0000bc05

0001bc70 <__frame_dummy_init_array_entry>:
   1bc70:	00000435 00001941                       5...A...

Disassembly of section .fini:

0001bc78 <_fini>:
   1bc78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bc7a:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b08      	ldr	r3, [pc, #32]	; (1fff8744 <port_E_isr+0x24>)
1fff8724:	681c      	ldr	r4, [r3, #0]
1fff8726:	601c      	str	r4, [r3, #0]
1fff8728:	b154      	cbz	r4, 1fff8740 <port_E_isr+0x20>
1fff872a:	4d07      	ldr	r5, [pc, #28]	; (1fff8748 <port_E_isr+0x28>)
1fff872c:	fa94 f3a4 	rbit	r3, r4
1fff8730:	fab3 f383 	clz	r3, r3
1fff8734:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8738:	4798      	blx	r3
1fff873a:	1e63      	subs	r3, r4, #1
1fff873c:	401c      	ands	r4, r3
1fff873e:	d1f5      	bne.n	1fff872c <port_E_isr+0xc>
1fff8740:	bd38      	pop	{r3, r4, r5, pc}
1fff8742:	bf00      	nop
1fff8744:	4004d0a0 	.word	0x4004d0a0
1fff8748:	1fff8a80 	.word	0x1fff8a80

1fff874c <port_D_isr>:

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
PORT_ISR_FUNCTION_CLZ(D)
1fff874c:	b538      	push	{r3, r4, r5, lr}
1fff874e:	4b08      	ldr	r3, [pc, #32]	; (1fff8770 <port_D_isr+0x24>)
1fff8750:	681c      	ldr	r4, [r3, #0]
1fff8752:	601c      	str	r4, [r3, #0]
1fff8754:	b154      	cbz	r4, 1fff876c <port_D_isr+0x20>
1fff8756:	4d07      	ldr	r5, [pc, #28]	; (1fff8774 <port_D_isr+0x28>)
1fff8758:	fa94 f3a4 	rbit	r3, r4
1fff875c:	fab3 f383 	clz	r3, r3
1fff8760:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8764:	4798      	blx	r3
1fff8766:	1e63      	subs	r3, r4, #1
1fff8768:	401c      	ands	r4, r3
1fff876a:	d1f5      	bne.n	1fff8758 <port_D_isr+0xc>
1fff876c:	bd38      	pop	{r3, r4, r5, pc}
1fff876e:	bf00      	nop
1fff8770:	4004c0a0 	.word	0x4004c0a0
1fff8774:	1fff8a60 	.word	0x1fff8a60

1fff8778 <port_C_isr>:
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
PORT_ISR_FUNCTION_CLZ(C)
1fff8778:	b538      	push	{r3, r4, r5, lr}
1fff877a:	4b08      	ldr	r3, [pc, #32]	; (1fff879c <port_C_isr+0x24>)
1fff877c:	681c      	ldr	r4, [r3, #0]
1fff877e:	601c      	str	r4, [r3, #0]
1fff8780:	b154      	cbz	r4, 1fff8798 <port_C_isr+0x20>
1fff8782:	4d07      	ldr	r5, [pc, #28]	; (1fff87a0 <port_C_isr+0x28>)
1fff8784:	fa94 f3a4 	rbit	r3, r4
1fff8788:	fab3 f383 	clz	r3, r3
1fff878c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8790:	4798      	blx	r3
1fff8792:	1e63      	subs	r3, r4, #1
1fff8794:	401c      	ands	r4, r3
1fff8796:	d1f5      	bne.n	1fff8784 <port_C_isr+0xc>
1fff8798:	bd38      	pop	{r3, r4, r5, pc}
1fff879a:	bf00      	nop
1fff879c:	4004b0a0 	.word	0x4004b0a0
1fff87a0:	1fff8a30 	.word	0x1fff8a30

1fff87a4 <port_B_isr>:
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
PORT_ISR_FUNCTION_CLZ(B)
1fff87a4:	b538      	push	{r3, r4, r5, lr}
1fff87a6:	4b08      	ldr	r3, [pc, #32]	; (1fff87c8 <port_B_isr+0x24>)
1fff87a8:	681c      	ldr	r4, [r3, #0]
1fff87aa:	601c      	str	r4, [r3, #0]
1fff87ac:	b154      	cbz	r4, 1fff87c4 <port_B_isr+0x20>
1fff87ae:	4d07      	ldr	r5, [pc, #28]	; (1fff87cc <port_B_isr+0x28>)
1fff87b0:	fa94 f3a4 	rbit	r3, r4
1fff87b4:	fab3 f383 	clz	r3, r3
1fff87b8:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87bc:	4798      	blx	r3
1fff87be:	1e63      	subs	r3, r4, #1
1fff87c0:	401c      	ands	r4, r3
1fff87c2:	d1f5      	bne.n	1fff87b0 <port_B_isr+0xc>
1fff87c4:	bd38      	pop	{r3, r4, r5, pc}
1fff87c6:	bf00      	nop
1fff87c8:	4004a0a0 	.word	0x4004a0a0
1fff87cc:	1fff89e0 	.word	0x1fff89e0

1fff87d0 <port_A_isr>:
		}                                                     \
	}
// END PORT_ISR_FUNCTION_CLZ

#if defined(KINETISK)
PORT_ISR_FUNCTION_CLZ(A)
1fff87d0:	b538      	push	{r3, r4, r5, lr}
1fff87d2:	4b08      	ldr	r3, [pc, #32]	; (1fff87f4 <port_A_isr+0x24>)
1fff87d4:	681c      	ldr	r4, [r3, #0]
1fff87d6:	601c      	str	r4, [r3, #0]
1fff87d8:	b154      	cbz	r4, 1fff87f0 <port_A_isr+0x20>
1fff87da:	4d07      	ldr	r5, [pc, #28]	; (1fff87f8 <port_A_isr+0x28>)
1fff87dc:	fa94 f3a4 	rbit	r3, r4
1fff87e0:	fab3 f383 	clz	r3, r3
1fff87e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87e8:	4798      	blx	r3
1fff87ea:	1e63      	subs	r3, r4, #1
1fff87ec:	401c      	ands	r4, r3
1fff87ee:	d1f5      	bne.n	1fff87dc <port_A_isr+0xc>
1fff87f0:	bd38      	pop	{r3, r4, r5, pc}
1fff87f2:	bf00      	nop
1fff87f4:	400490a0 	.word	0x400490a0
1fff87f8:	1fff89a8 	.word	0x1fff89a8

1fff87fc <__dso_handle>:
1fff87fc:	00000000                                ....

1fff8800 <ts>:
1fff8800:	01ff0801 00000000 00000000 80000000     ................

1fff8810 <daysOfTheWeek>:
1fff8810:	006e7553 00000000 00000000 006e6f4d     Sun.........Mon.
	...
1fff8828:	00657554 00000000 00000000 00646557     Tue.........Wed.
	...
1fff8840:	00756854 00000000 00000000 00697246     Thu.........Fri.
	...
1fff8858:	00746153 00000000 00000000              Sat.........

1fff8864 <aDaysInMonth>:
1fff8864:	0000001f 0000001c 0000001f 0000001e     ................
1fff8874:	0000001f 0000001e 0000001f 0000001f     ................
1fff8884:	0000001e 0000001f 0000001e 0000001f     ................

1fff8894 <SPI>:
1fff8894:	4002c000 0000df34 00000000 00000000     ...@4...........
	...

1fff88cc <Wire>:
1fff88cc:	0001b820 00000000 000003e8 00000000      ...............
1fff88dc:	40066000 0001b7d8 00000000 00000000     .`.@............
	...

1fff8938 <Wire1>:
1fff8938:	0001b820 00000000 000003e8 00000000      ...............
1fff8948:	40067000 0001b7f8 00000000 00000000     .p.@............
	...

1fff89a4 <__brkval>:
1fff89a4:	1fff9894                                ....

1fff89a8 <isr_table_portA>:
1fff89a8:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff89b8:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff89c8:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff89d8:	00006cd5 00006cd5                       .l...l..

1fff89e0 <isr_table_portB>:
1fff89e0:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff89f0:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff8a00:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff8a10:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff8a20:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..

1fff8a30 <isr_table_portC>:
1fff8a30:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff8a40:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff8a50:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..

1fff8a60 <isr_table_portD>:
1fff8a60:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..
1fff8a70:	00006cd5 00006cd5 00006cd5 00006cd5     .l...l...l...l..

1fff8a80 <isr_table_portE>:
1fff8a80:	00006cd5 00006cd5                       .l...l..

1fff8a88 <usb_buffer_available>:
1fff8a88:	ffffffff                                ....

1fff8a8c <Serial>:
1fff8a8c:	0001b964 00000000 000003e8 00000000     d...............

1fff8a9c <yield_active_check_flags>:
1fff8a9c:	00040a01                                         .

1fff8a9d <analog_config_bits>:
1fff8a9d:	1200040a                                         .

1fff8a9e <analog_num_average>:
1fff8a9e:	01120004                                         ..

1fff8aa0 <device_descriptor>:
1fff8aa0:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8ab0:	00000103                                ....

1fff8ab4 <usb_string_manufacturer_name_default>:
1fff8ab4:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8ac4:	00690075 006f006e                       u.i.n.o.

1fff8acc <config_descriptor>:
1fff8acc:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8adc:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8aec:	00062405 82050701 40001003 00010409     .$.........@....
1fff8afc:	00000a02 03050700 00004002 02840507     .........@......
1fff8b0c:	00000040                                @...

1fff8b10 <usb_string_product_name_default>:
1fff8b10:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8b20:	00610069 0000006c                       i.a.l...

1fff8b28 <string0>:
1fff8b28:	04090304                                ....

1fff8b2c <usb_string_serial_number_default>:
1fff8b2c:	0000030c 00000000 00000000 00000000     ................
1fff8b3c:	00000000 00010000                                ......

1fff8b42 <_serialEvent_default>:
1fff8b42:	00000001 00000000                                ......

1fff8b48 <impure_data>:
1fff8b48:	00000000 1fff8e34 1fff8e9c 1fff8f04     ....4...........
	...
1fff8bf0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff8c00:	0005deec 0000000b 00000000 00000000     ................
	...

1fff8f70 <_impure_ptr>:
1fff8f70:	1fff8b48                                H...

1fff8f74 <__global_locale>:
1fff8f74:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f94:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fb4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fd4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8ff4:	00000043 00000000 00000000 00000000     C...............
	...
1fff9014:	00000043 00000000 00000000 00000000     C...............
	...
1fff9034:	00000043 00000000 00000000 00000000     C...............
	...
1fff9054:	0000bb19 00009bd5 00000000 0001ba4c     ............L...
1fff9064:	0000de94 0000dad0 0000dad0 0000dad0     ................
1fff9074:	0000dad0 0000dad0 0000dad0 0000dad0     ................
1fff9084:	0000dad0 0000dad0 ffffffff ffffffff     ................
1fff9094:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff90bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff90e0 <__malloc_av_>:
	...
1fff90e8:	1fff90e0 1fff90e0 1fff90e8 1fff90e8     ................
1fff90f8:	1fff90f0 1fff90f0 1fff90f8 1fff90f8     ................
1fff9108:	1fff9100 1fff9100 1fff9108 1fff9108     ................
1fff9118:	1fff9110 1fff9110 1fff9118 1fff9118     ................
1fff9128:	1fff9120 1fff9120 1fff9128 1fff9128      ... ...(...(...
1fff9138:	1fff9130 1fff9130 1fff9138 1fff9138     0...0...8...8...
1fff9148:	1fff9140 1fff9140 1fff9148 1fff9148     @...@...H...H...
1fff9158:	1fff9150 1fff9150 1fff9158 1fff9158     P...P...X...X...
1fff9168:	1fff9160 1fff9160 1fff9168 1fff9168     `...`...h...h...
1fff9178:	1fff9170 1fff9170 1fff9178 1fff9178     p...p...x...x...
1fff9188:	1fff9180 1fff9180 1fff9188 1fff9188     ................
1fff9198:	1fff9190 1fff9190 1fff9198 1fff9198     ................
1fff91a8:	1fff91a0 1fff91a0 1fff91a8 1fff91a8     ................
1fff91b8:	1fff91b0 1fff91b0 1fff91b8 1fff91b8     ................
1fff91c8:	1fff91c0 1fff91c0 1fff91c8 1fff91c8     ................
1fff91d8:	1fff91d0 1fff91d0 1fff91d8 1fff91d8     ................
1fff91e8:	1fff91e0 1fff91e0 1fff91e8 1fff91e8     ................
1fff91f8:	1fff91f0 1fff91f0 1fff91f8 1fff91f8     ................
1fff9208:	1fff9200 1fff9200 1fff9208 1fff9208     ................
1fff9218:	1fff9210 1fff9210 1fff9218 1fff9218     ................
1fff9228:	1fff9220 1fff9220 1fff9228 1fff9228      ... ...(...(...
1fff9238:	1fff9230 1fff9230 1fff9238 1fff9238     0...0...8...8...
1fff9248:	1fff9240 1fff9240 1fff9248 1fff9248     @...@...H...H...
1fff9258:	1fff9250 1fff9250 1fff9258 1fff9258     P...P...X...X...
1fff9268:	1fff9260 1fff9260 1fff9268 1fff9268     `...`...h...h...
1fff9278:	1fff9270 1fff9270 1fff9278 1fff9278     p...p...x...x...
1fff9288:	1fff9280 1fff9280 1fff9288 1fff9288     ................
1fff9298:	1fff9290 1fff9290 1fff9298 1fff9298     ................
1fff92a8:	1fff92a0 1fff92a0 1fff92a8 1fff92a8     ................
1fff92b8:	1fff92b0 1fff92b0 1fff92b8 1fff92b8     ................
1fff92c8:	1fff92c0 1fff92c0 1fff92c8 1fff92c8     ................
1fff92d8:	1fff92d0 1fff92d0 1fff92d8 1fff92d8     ................
1fff92e8:	1fff92e0 1fff92e0 1fff92e8 1fff92e8     ................
1fff92f8:	1fff92f0 1fff92f0 1fff92f8 1fff92f8     ................
1fff9308:	1fff9300 1fff9300 1fff9308 1fff9308     ................
1fff9318:	1fff9310 1fff9310 1fff9318 1fff9318     ................
1fff9328:	1fff9320 1fff9320 1fff9328 1fff9328      ... ...(...(...
1fff9338:	1fff9330 1fff9330 1fff9338 1fff9338     0...0...8...8...
1fff9348:	1fff9340 1fff9340 1fff9348 1fff9348     @...@...H...H...
1fff9358:	1fff9350 1fff9350 1fff9358 1fff9358     P...P...X...X...
1fff9368:	1fff9360 1fff9360 1fff9368 1fff9368     `...`...h...h...
1fff9378:	1fff9370 1fff9370 1fff9378 1fff9378     p...p...x...x...
1fff9388:	1fff9380 1fff9380 1fff9388 1fff9388     ................
1fff9398:	1fff9390 1fff9390 1fff9398 1fff9398     ................
1fff93a8:	1fff93a0 1fff93a0 1fff93a8 1fff93a8     ................
1fff93b8:	1fff93b0 1fff93b0 1fff93b8 1fff93b8     ................
1fff93c8:	1fff93c0 1fff93c0 1fff93c8 1fff93c8     ................
1fff93d8:	1fff93d0 1fff93d0 1fff93d8 1fff93d8     ................
1fff93e8:	1fff93e0 1fff93e0 1fff93e8 1fff93e8     ................
1fff93f8:	1fff93f0 1fff93f0 1fff93f8 1fff93f8     ................
1fff9408:	1fff9400 1fff9400 1fff9408 1fff9408     ................
1fff9418:	1fff9410 1fff9410 1fff9418 1fff9418     ................
1fff9428:	1fff9420 1fff9420 1fff9428 1fff9428      ... ...(...(...
1fff9438:	1fff9430 1fff9430 1fff9438 1fff9438     0...0...8...8...
1fff9448:	1fff9440 1fff9440 1fff9448 1fff9448     @...@...H...H...
1fff9458:	1fff9450 1fff9450 1fff9458 1fff9458     P...P...X...X...
1fff9468:	1fff9460 1fff9460 1fff9468 1fff9468     `...`...h...h...
1fff9478:	1fff9470 1fff9470 1fff9478 1fff9478     p...p...x...x...
1fff9488:	1fff9480 1fff9480 1fff9488 1fff9488     ................
1fff9498:	1fff9490 1fff9490 1fff9498 1fff9498     ................
1fff94a8:	1fff94a0 1fff94a0 1fff94a8 1fff94a8     ................
1fff94b8:	1fff94b0 1fff94b0 1fff94b8 1fff94b8     ................
1fff94c8:	1fff94c0 1fff94c0 1fff94c8 1fff94c8     ................
1fff94d8:	1fff94d0 1fff94d0 1fff94d8 1fff94d8     ................

1fff94e8 <__malloc_trim_threshold>:
1fff94e8:	00020000                                ....

1fff94ec <__malloc_sbrk_base>:
1fff94ec:	ffffffff                                ....
